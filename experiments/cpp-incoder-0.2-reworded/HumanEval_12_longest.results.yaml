language: cpp
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzq4yvlsz.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpzq4yvlsz.cpp: In function 'int main()':\n/tmp/tmpzq4yvlsz.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzq4yvlsz.cpp:2:\n/tmp/tmpzq4yvlsz.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpzq4yvlsz.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpzq4yvlsz.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (auto s : strings) {\n        if (s.length() > longest.length()) {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}\nint main()\
    \ {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibg34gh4.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpibg34gh4.cpp: In function 'int main()':\n/tmp/tmpibg34gh4.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibg34gh4.cpp:2:\n/tmp/tmpibg34gh4.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpibg34gh4.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpibg34gh4.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpibg34gh4.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpibg34gh4.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpibg34gh4.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpibg34gh4.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_6x583c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpt_6x583c.cpp: In function 'int main()':\n/tmp/tmpt_6x583c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_6x583c.cpp:2:\n/tmp/tmpt_6x583c.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpt_6x583c.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpt_6x583c.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) { return a.size() < b.size();\
    \ });\n    return it == strings.end() ? std::nullopt : *it;\n}\nint main() {\n\
    \    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyez43tko.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyez43tko.cpp: In function 'int main()':\n/tmp/tmpyez43tko.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyez43tko.cpp:2:\n/tmp/tmpyez43tko.cpp:18:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyez43tko.cpp:18:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyez43tko.cpp:19:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyez43tko.cpp:19:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyez43tko.cpp:19:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyez43tko.cpp:19:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyez43tko.cpp:19:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzq4yvlsz.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpzq4yvlsz.cpp: In function 'int main()':\n/tmp/tmpzq4yvlsz.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzq4yvlsz.cpp:2:\n/tmp/tmpzq4yvlsz.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpzq4yvlsz.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpzq4yvlsz.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0isdt7by.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0isdt7by.cpp: In function 'int main()':\n/tmp/tmp0isdt7by.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0isdt7by.cpp:2:\n/tmp/tmp0isdt7by.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0isdt7by.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0isdt7by.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp702wjldk.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp702wjldk.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp702wjldk.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp702wjldk.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp702wjldk.cpp:2:\n/tmp/tmp702wjldk.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp07bhns.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjp07bhns.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjp07bhns.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjp07bhns.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp07bhns.cpp:2:\n/tmp/tmpjp07bhns.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it != strings.end() ? std::optional<std::string>(it->c_str())\
    \ : std::nullopt;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7qsac0wo.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp7qsac0wo.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp7qsac0wo.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp7qsac0wo.cpp:19:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   19 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7qsac0wo.cpp:2:\n/tmp/tmp7qsac0wo.cpp:20:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0isdt7by.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0isdt7by.cpp: In function 'int main()':\n/tmp/tmp0isdt7by.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0isdt7by.cpp:2:\n/tmp/tmp0isdt7by.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0isdt7by.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0isdt7by.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp07bhns.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjp07bhns.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjp07bhns.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjp07bhns.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp07bhns.cpp:2:\n/tmp/tmpjp07bhns.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6dynz2y.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp_6dynz2y.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp_6dynz2y.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp_6dynz2y.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6dynz2y.cpp:2:\n/tmp/tmp_6dynz2y.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzq4yvlsz.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpzq4yvlsz.cpp: In function 'int main()':\n/tmp/tmpzq4yvlsz.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzq4yvlsz.cpp:2:\n/tmp/tmpzq4yvlsz.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpzq4yvlsz.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpzq4yvlsz.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (auto s : strings) {\n        if (s.length() > longest.length()) {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}\nint main()\
    \ {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibg34gh4.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpibg34gh4.cpp: In function 'int main()':\n/tmp/tmpibg34gh4.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibg34gh4.cpp:2:\n/tmp/tmpibg34gh4.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpibg34gh4.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpibg34gh4.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpibg34gh4.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpibg34gh4.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpibg34gh4.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpibg34gh4.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_6x583c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpt_6x583c.cpp: In function 'int main()':\n/tmp/tmpt_6x583c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_6x583c.cpp:2:\n/tmp/tmpt_6x583c.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpt_6x583c.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpt_6x583c.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& s : strings) {\n    if\
    \ (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpku_nepf9.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpku_nepf9.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpku_nepf9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpku_nepf9.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpku_nepf9.cpp:2:\n/tmp/tmpku_nepf9.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp07bhns.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjp07bhns.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjp07bhns.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjp07bhns.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp07bhns.cpp:2:\n/tmp/tmpjp07bhns.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_6x583c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpt_6x583c.cpp: In function 'int main()':\n/tmp/tmpt_6x583c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_6x583c.cpp:2:\n/tmp/tmpt_6x583c.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpt_6x583c.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpt_6x583c.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6dynz2y.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp_6dynz2y.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp_6dynz2y.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp_6dynz2y.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6dynz2y.cpp:2:\n/tmp/tmp_6dynz2y.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0isdt7by.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0isdt7by.cpp: In function 'int main()':\n/tmp/tmp0isdt7by.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0isdt7by.cpp:2:\n/tmp/tmp0isdt7by.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0isdt7by.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0isdt7by.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnwfz7uo.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmplnwfz7uo.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmplnwfz7uo.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmplnwfz7uo.cpp:19:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   19 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplnwfz7uo.cpp:2:\n/tmp/tmplnwfz7uo.cpp:20:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_6x583c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpt_6x583c.cpp: In function 'int main()':\n/tmp/tmpt_6x583c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_6x583c.cpp:2:\n/tmp/tmpt_6x583c.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpt_6x583c.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpt_6x583c.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgepal4pr.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpgepal4pr.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpgepal4pr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpgepal4pr.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgepal4pr.cpp:2:\n/tmp/tmpgepal4pr.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& s : strings) {\n    if\
    \ (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpku_nepf9.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpku_nepf9.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpku_nepf9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpku_nepf9.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpku_nepf9.cpp:2:\n/tmp/tmpku_nepf9.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp702wjldk.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp702wjldk.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp702wjldk.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp702wjldk.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp702wjldk.cpp:2:\n/tmp/tmp702wjldk.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgepal4pr.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpgepal4pr.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpgepal4pr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpgepal4pr.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgepal4pr.cpp:2:\n/tmp/tmpgepal4pr.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& s : strings) {\n    if\
    \ (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpku_nepf9.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpku_nepf9.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpku_nepf9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpku_nepf9.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpku_nepf9.cpp:2:\n/tmp/tmpku_nepf9.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) { return a.size() < b.size();\
    \ });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpinris4pw.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpinris4pw.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpinris4pw.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpinris4pw.cpp:17:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   17 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpinris4pw.cpp:2:\n/tmp/tmpinris4pw.cpp:18:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgepal4pr.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpgepal4pr.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpgepal4pr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpgepal4pr.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgepal4pr.cpp:2:\n/tmp/tmpgepal4pr.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& s : strings) {\n    if\
    \ (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpku_nepf9.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpku_nepf9.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpku_nepf9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpku_nepf9.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpku_nepf9.cpp:2:\n/tmp/tmpku_nepf9.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor8ib3_t.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpor8ib3_t.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpor8ib3_t.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpor8ib3_t.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpor8ib3_t.cpp:2:\n/tmp/tmpor8ib3_t.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    auto longest = strings[0];\n    for (auto\
    \ s : strings) {\n        if (s.length() > longest.length()) {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate\
    \ = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk52414bn.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpk52414bn.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpk52414bn.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpk52414bn.cpp:24:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   24 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk52414bn.cpp:2:\n/tmp/tmpk52414bn.cpp:25:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   25 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnwfz7uo.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmplnwfz7uo.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmplnwfz7uo.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmplnwfz7uo.cpp:19:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   19 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplnwfz7uo.cpp:2:\n/tmp/tmplnwfz7uo.cpp:20:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& string : strings) {\n\
    \    if (string.length() > longest.length()) {\n      longest = string;\n    }\n\
    \  }\n  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmww737jt.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpmww737jt.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpmww737jt.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpmww737jt.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmww737jt.cpp:2:\n/tmp/tmpmww737jt.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnwfz7uo.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmplnwfz7uo.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmplnwfz7uo.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmplnwfz7uo.cpp:19:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   19 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplnwfz7uo.cpp:2:\n/tmp/tmplnwfz7uo.cpp:20:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (size_t i = 1; i < strings.size();\
    \ ++i) {\n    if (strings[i].size() > longest.size()) {\n      longest = strings[i];\n\
    \    }\n  }\n  return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8vhz4_f_.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp8vhz4_f_.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp8vhz4_f_.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp8vhz4_f_.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8vhz4_f_.cpp:2:\n/tmp/tmp8vhz4_f_.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6dynz2y.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp_6dynz2y.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp_6dynz2y.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp_6dynz2y.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_6dynz2y.cpp:2:\n/tmp/tmp_6dynz2y.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp702wjldk.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp702wjldk.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp702wjldk.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp702wjldk.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp702wjldk.cpp:2:\n/tmp/tmp702wjldk.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it != strings.end() ? std::optional<std::string>(it->c_str())\
    \ : std::nullopt;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7qsac0wo.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmp7qsac0wo.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmp7qsac0wo.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmp7qsac0wo.cpp:19:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   19 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7qsac0wo.cpp:2:\n/tmp/tmp7qsac0wo.cpp:20:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_6x583c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpt_6x583c.cpp: In function 'int main()':\n/tmp/tmpt_6x583c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_6x583c.cpp:2:\n/tmp/tmpt_6x583c.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpt_6x583c.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpt_6x583c.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& string : strings) {\n\
    \    if (string.length() > longest.length()) {\n      longest = string;\n    }\n\
    \  }\n  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmww737jt.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpmww737jt.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpmww737jt.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpmww737jt.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmww737jt.cpp:2:\n/tmp/tmpmww737jt.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_6x583c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpt_6x583c.cpp: In function 'int main()':\n/tmp/tmpt_6x583c.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_6x583c.cpp:2:\n/tmp/tmpt_6x583c.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpt_6x583c.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpt_6x583c.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpt_6x583c.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_6x583c.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnwfz7uo.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmplnwfz7uo.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmplnwfz7uo.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmplnwfz7uo.cpp:19:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   19 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplnwfz7uo.cpp:2:\n/tmp/tmplnwfz7uo.cpp:20:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (auto s : strings) {\n        if (s.length() > longest.length()) {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}\nint main()\
    \ {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibg34gh4.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpibg34gh4.cpp: In function 'int main()':\n/tmp/tmpibg34gh4.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpibg34gh4.cpp:2:\n/tmp/tmpibg34gh4.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpibg34gh4.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpibg34gh4.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpibg34gh4.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpibg34gh4.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpibg34gh4.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpibg34gh4.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzq4yvlsz.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpzq4yvlsz.cpp: In function 'int main()':\n/tmp/tmpzq4yvlsz.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzq4yvlsz.cpp:2:\n/tmp/tmpzq4yvlsz.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpzq4yvlsz.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpzq4yvlsz.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0isdt7by.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0isdt7by.cpp: In function 'int main()':\n/tmp/tmp0isdt7by.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0isdt7by.cpp:2:\n/tmp/tmp0isdt7by.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0isdt7by.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0isdt7by.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.length()\
    \ < b.length();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmponnxt7zt.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmponnxt7zt.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmponnxt7zt.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmponnxt7zt.cpp:19:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   19 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmponnxt7zt.cpp:2:\n/tmp/tmponnxt7zt.cpp:20:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   20 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor8ib3_t.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpor8ib3_t.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpor8ib3_t.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpor8ib3_t.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpor8ib3_t.cpp:2:\n/tmp/tmpor8ib3_t.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgepal4pr.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpgepal4pr.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpgepal4pr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpgepal4pr.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgepal4pr.cpp:2:\n/tmp/tmpgepal4pr.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) { return a.size() < b.size();\
    \ });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpinris4pw.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpinris4pw.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpinris4pw.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpinris4pw.cpp:17:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   17 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpinris4pw.cpp:2:\n/tmp/tmpinris4pw.cpp:18:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   18 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& string : strings) {\n    if\
    \ (string.length() > longest.length()) {\n      longest = string;\n    }\n  }\n\
    \  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppataol6d.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmppataol6d.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmppataol6d.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmppataol6d.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppataol6d.cpp:2:\n/tmp/tmppataol6d.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) {\n    return\
    \ std::nullopt;\n  }\n  auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n    return a.size() < b.size();\n\
    \  });\n  return *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoa11weyd.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpoa11weyd.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpoa11weyd.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpoa11weyd.cpp:21:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   21 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoa11weyd.cpp:2:\n/tmp/tmpoa11weyd.cpp:22:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   22 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  if (it\
    \ == strings.end()) return std::nullopt;\n  return *it;\n}\nint main() {\n   \
    \ auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyipq2xcj.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpyipq2xcj.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpyipq2xcj.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpyipq2xcj.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyipq2xcj.cpp:2:\n/tmp/tmpyipq2xcj.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgepal4pr.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpgepal4pr.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpgepal4pr.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpgepal4pr.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgepal4pr.cpp:2:\n/tmp/tmpgepal4pr.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0isdt7by.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0isdt7by.cpp: In function 'int main()':\n/tmp/tmp0isdt7by.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0isdt7by.cpp:2:\n/tmp/tmp0isdt7by.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0isdt7by.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0isdt7by.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0isdt7by.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0isdt7by.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjdl5f67x.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpjdl5f67x.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpjdl5f67x.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpjdl5f67x.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjdl5f67x.cpp:2:\n/tmp/tmpjdl5f67x.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzq4yvlsz.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpzq4yvlsz.cpp: In function 'int main()':\n/tmp/tmpzq4yvlsz.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzq4yvlsz.cpp:2:\n/tmp/tmpzq4yvlsz.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpzq4yvlsz.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpzq4yvlsz.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpzq4yvlsz.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzq4yvlsz.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpor8ib3_t.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpor8ib3_t.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpor8ib3_t.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpor8ib3_t.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpor8ib3_t.cpp:2:\n/tmp/tmpor8ib3_t.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57cyg07j.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp57cyg07j.cpp: In function 'int main()':\n/tmp/tmp57cyg07j.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp57cyg07j.cpp:2:\n/tmp/tmp57cyg07j.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp57cyg07j.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp57cyg07j.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp57cyg07j.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp57cyg07j.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& s : strings) {\n    if\
    \ (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpku_nepf9.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpku_nepf9.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpku_nepf9.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpku_nepf9.cpp:22:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   22 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpku_nepf9.cpp:2:\n/tmp/tmpku_nepf9.cpp:23:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   23 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8ks85yc.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_8ks85yc.cpp: In function 'int main()':\n/tmp/tmp_8ks85yc.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8ks85yc.cpp:2:\n/tmp/tmp_8ks85yc.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_8ks85yc.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_8ks85yc.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_8ks85yc.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_8ks85yc.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_megbmj8.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp_megbmj8.cpp: In function 'int main()':\n/tmp/tmp_megbmj8.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_megbmj8.cpp:2:\n/tmp/tmp_megbmj8.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp_megbmj8.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp_megbmj8.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp_megbmj8.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_megbmj8.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pgkjve6.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp7pgkjve6.cpp: In function 'int main()':\n/tmp/tmp7pgkjve6.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7pgkjve6.cpp:2:\n/tmp/tmp7pgkjve6.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp7pgkjve6.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp7pgkjve6.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp7pgkjve6.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7pgkjve6.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2lye6m.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmppo2lye6m.cpp: In function 'int main()':\n/tmp/tmppo2lye6m.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo2lye6m.cpp:2:\n/tmp/tmppo2lye6m.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmppo2lye6m.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmppo2lye6m.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmppo2lye6m.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmppo2lye6m.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input vector is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) longest = s;\n  }\n  return longest;\n}\nint main() {\n\
    \    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpniipzyk8.cpp:11:6: error: \u2018optional\u2019 in namespace \u2018\
    std\u2019 does not name a template type\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      |      ^~~~~~~~\n/tmp/tmpniipzyk8.cpp:11:1: note: \u2018std::optional\u2019\
    \ is only available from C++17 onwards\n   11 | std::optional<std::string> longest(std::vector<std::string>\
    \ strings) {\n      | ^~~\n/tmp/tmpniipzyk8.cpp: In function \u2018int main()\u2019\
    :\n/tmp/tmpniipzyk8.cpp:20:22: error: \u2018longest\u2019 was not declared in\
    \ this scope\n   20 |     auto candidate = longest;\n      |                 \
    \     ^~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cassert:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpniipzyk8.cpp:2:\n/tmp/tmpniipzyk8.cpp:21:60: error:\
    \ \u2018nullopt\u2019 is not a member of \u2018std\u2019\n   21 |     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n      |                                                 \
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659749638
