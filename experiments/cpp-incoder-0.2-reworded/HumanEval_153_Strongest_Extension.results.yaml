language: cpp
name: HumanEval_153_Strongest_Extension
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_extension = 0;\n    int sm_extension = 0;\n\
    \    for (auto &extension : extensions) {\n        if (extension.at(0) == class_name[0])\
    \ {\n            cap_extension++;\n        }\n        if (extension.at(1) == class_name[1])\
    \ {\n            sm_extension++;\n        }\n    }\n    if (cap_extension - sm_extension\
    \ > 0) {\n        strongest_extension = class_name + extensions[cap_extension\
    \ - sm_extension];\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp8zh5z0hb: /tmp/tmp8zh5z0hb.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    \n    int cap_extension = 0;\n    int sm_extension\
    \ = 0;\n    \n    for(auto extension : extensions) {\n        cap_extension =\
    \ std::count_if(extension.begin(), extension.end(), [](char c){ return std::isupper(c);\
    \ });\n        sm_extension = std::count_if(extension.begin(), extension.end(),\
    \ [](char c){ return std::islower(c); });\n        \n        float strength =\
    \ cap_extension - sm_extension;\n        \n        if(strength > 0) {\n      \
    \      strongest_extension = class_name + \".\" + extension;\n            break;\n\
    \        }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n  \
    \  auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"),\
    \ (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpz93djy4i: /tmp/tmpz93djy4i.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int strongest_extension_strength = 0;\n   \
    \ \n    for (int i = 0; i < extensions.size(); i++) {\n        int extension_strength\
    \ = extensions[i].length() - extensions[i].find_first_not_of(\" \");\n       \
    \ if (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_7u_ro7i: /tmp/tmp_7u_ro7i.cpp:39: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &extension : extensions)\
    \ {\n        cap += (extension.at(0) - 'A');\n        sm += (extension.at(1) -\
    \ 'a');\n    }\n    float strength = cap - sm;\n    int index = 0;\n    for (auto\
    \ &extension : extensions) {\n        if (extension.at(0) == class_name.at(0))\
    \ {\n            if (strength > index) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \           index++;\n        }\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpzkwmf8xx: /tmp/tmpzkwmf8xx.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int strongest_extension_strength = 0;\n   \
    \ \n    for (auto &extension : extensions) {\n        int extension_strength =\
    \ extension.size()-extension.find_first_not_of(std::string(\"\"));\n        if\
    \ (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmporhztwr9: /tmp/tmporhztwr9.cpp:39: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0) - 'A';\n        sm\
    \ += extension.at(1) - 'a';\n    }\n    if (cap - sm == 0) {\n        strongest_extension\
    \ = class_name;\n    } else {\n        strongest_extension = class_name + extensions[extensions.size()\
    \ - 1] + std::to_string(cap - sm);\n    }\n    return strongest_extension;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0apacqum: /tmp/tmp0apacqum.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension :\
    \ extensions) {\n        cap_counter += extension.at(0) - 'A';\n        sm_counter\
    \ += extension.at(1) - 'a';\n    }\n    if (cap_counter > sm_counter) {\n    \
    \    strongest_extension = class_name + \".\" + extensions[0];\n    } else {\n\
    \        strongest_extension = class_name + \".\" + extensions[1];\n    }\n  \
    \  return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpab1aar0e: /tmp/tmpab1aar0e.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for(auto &extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sm_counter;\n    double strength_percentage = strength / cap_counter;\n  \
    \  double strength_percentage_rounded = round(strength_percentage);\n    double\
    \ strength_percentage_rounded_down = floor(strength_percentage_rounded);\n   \
    \ double strength_percentage_rounded_up = ceil(strength_percentage_rounded);\n\
    \    double strength_percentage_rounded_down = round(strength_percentage_rounded);\n\
    \    if(strength_percentage_rounded_down == strength_percentage_rounded) {\n \
    \       strongest_extension = class_name + \".\" + extensions[0];\n    }\n   \
    \ else if(strength_percentage_rounded_up == strength_percentage_rounded) {\n \
    \       strongest_extension = class_name + \".\" + extensions[2];\n    }\n   \
    \ else {\n        strongest_extension = class_name + \".\" + extensions[strength_percentage_rounded_down];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpubamw25r.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpubamw25r.cpp:37:12:\
    \ error: redeclaration of \u2018double strength_percentage_rounded_down\u2019\n\
    \   37 |     double strength_percentage_rounded_down = round(strength_percentage_rounded);\n\
    \      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpubamw25r.cpp:35:12:\
    \ note: \u2018double strength_percentage_rounded_down\u2019 previously declared\
    \ here\n   35 |     double strength_percentage_rounded_down = floor(strength_percentage_rounded);\n\
    \      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            char c = extension[j];\n   \
    \         \n            if(c == toupper(extension[j])){\n                strongest_extension\
    \ += c;\n            }\n        }\n    }\n    \n    return class_name + \".\"\
    \ + strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpcjtvaa7q: /tmp/tmpcjtvaa7q.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_letters = 0, sm_letters\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_letters += ext.length();\n\
    \        sm_letters += ext.length();\n    }\n    int strength = cap_letters -\
    \ sm_letters;\n    if (strength > 0) {\n        auto it = std::min_element(extensions.begin(),\
    \ extensions.end(), \n            [](std::string a, std::string b) { return a.length()\
    \ < b.length(); });\n        std::string extension = class_name + \".\" + extensions[it\
    \ - extensions.begin()];\n        return extension;\n    }\n    return class_name;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp70_x57_v: /tmp/tmp70_x57_v.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int strongest_extension_strength = 0;\n   \
    \ \n    for (auto extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        auto strength = cap\
    \ - sm;\n        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    \n    return class_name + \".\" + strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpz_w1j7xj: /tmp/tmpz_w1j7xj.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - 1;\n    }\n    float strength = cap_num - sm_num;\n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.compare(0, strongest_extension.length(), strongest_extension)\
    \ == 0) {\n                strongest_extension = class_name + \".\" + ext;\n \
    \           }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp872sx0ie: /tmp/tmp872sx0ie.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0) ==\
    \ class_name[0]) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpyl2pa8hj: /tmp/tmpyl2pa8hj.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for (auto &extension : extensions) {\n        if (extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if (extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4ksuf2cr: /tmp/tmp4ksuf2cr.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (auto e : extensions) {\n        if (e.at(0) == class_name[0]) {\n\
    \            cap_counter++;\n        }\n        if (e.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp26odjqfb: /tmp/tmp26odjqfb.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        cap = extensions[i].size();\n\
    \        sm = cap - 1;\n        if (cap > sm) {\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqvcdtfm1: /tmp/tmpqvcdtfm1.cpp:38: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n\
    \    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        for (auto\
    \ i : extensions) {\n            if (i[0] == extensions[0][0] && i[1] == extensions[0][1])\
    \ {\n                strongest_extension = class_name + \".\" + i;\n         \
    \       break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpm8clqkb_: /tmp/tmpm8clqkb_.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n  \
    \  }\n    int cap = cap_num / sm_num;\n    int sm = cap_num - cap * sm_num;\n\
    \    int strength = cap - sm;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == cap) {\n            if (strength > 0) {\n                return\
    \ class_name + \".\" + ext;\n            }\n        }\n    }\n    return class_name;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9y2r29y1.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp9y2r29y1.cpp:23:78:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find_first_not_of(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   23 |         sm_num +=\
    \ ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n      |     \
    \                                                                         ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9y2r29y1.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2673:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2673 |       find_first_not_of(const basic_string&\
    \ __str, size_type __pos = 0) const\n      |       ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2673:45:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019} to \u2018const std::__cxx11::basic_string<char>&\u2019\n 2673 |   \
    \    find_first_not_of(const basic_string& __str, siz"
  stdout: ''
  timestamp: 1660123253
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    std::string extension_strength = \"\";\n  \
    \  std::string extension_class = \"\";\n    std::string extension_class_name =\
    \ \"\";\n    std::string extension_class_name_with_extension = \"\";\n    std::string\
    \ extension_class_name_with_extension_strength = \"\";\n    std::string extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name = \"\
    \";\n    std::string extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_strength\
    \ = \"\";\n    std::string extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_with_extension_class_name_\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn5sy80yy.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpn5sy80yy.cpp:46:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   46 | }\n      | ^\n\
    /tmp/tmpn5sy80yy.cpp:46:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660123253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n    if (strength == -1) {\n     \
    \   strongest_extension = class_name;\n    } else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[index];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpw5su486z: /tmp/tmpw5su486z.cpp:41: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = class_name;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length();\n    }\n    float\
    \ strength = cap - sm;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > strongest_extension.length()) {\n            strongest_extension = class_name\
    \ + ext;\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpat7tmibg: /tmp/tmpat7tmibg.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_extensions = 0;\n    int sm_extensions = 0;\n    for (auto\
    \ extension : extensions) {\n        cap_extensions += std::count(extension.begin(),\
    \ extension.end(), std::toupper(extension[0]));\n        sm_extensions += std::count(extension.begin(),\
    \ extension.end(), std::tolower(extension[0]));\n    }\n    double strength =\
    \ cap_extensions - sm_extensions;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto extension : extensions)\
    \ {\n        if (std::count(extension.begin(), extension.end(), std::toupper(extension[0]))\
    \ > 1) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \            break;\n        }\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpm9gm446b: /tmp/tmpm9gm446b.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (auto &ext : extensions) {\n        if (ext.length() > cap_counter)\
    \ {\n            cap_counter = ext.length();\n        }\n        if (ext.length()\
    \ < sm_counter) {\n            sm_counter = ext.length();\n        }\n    }\n\
    \    float strength = cap_counter - sm_counter;\n    if (strength > 0) {\n   \
    \     strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for\
    \ (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() < sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension :\
    \ extensions) {\n        if (extension.at(0) == class_name[0]) {\n           \
    \ cap_counter++;\n        }\n        if (extension.at(1) == class_name[0]) {\n\
    \            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + extensions[0];\n    }\n    else\
    \ {\n        strongest_extension = class_name + extensions[1];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbqxkfcs2: /tmp/tmpbqxkfcs2.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ e : extensions) {\n        if(e.length() > cap) {\n            cap = e.length();\n\
    \        }\n        if(e.length() < sm) {\n            sm = e.length();\n    \
    \    }\n    }\n    float strength = cap - sm;\n    for(auto e : extensions) {\n\
    \        if(e.length() == cap) {\n            if(e.compare(class_name.substr(0,\
    \ cap)) == 0) {\n                strongest_extension = class_name + e;\n     \
    \       }\n        }\n        if(e.length() == sm) {\n            if(e.compare(class_name.substr(cap,\
    \ sm)) == 0) {\n                strongest_extension = class_name + e;\n      \
    \      }\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7kqkvc7o: /tmp/tmp7kqkvc7o.cpp:49: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = class_name;\n    int strongest_extension_strength = -1;\n\
    \    \n    for (auto extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        \n        if (cap !=\
    \ std::string::npos && sm != std::string::npos) {\n            int cap_strength\
    \ = cap - sm;\n            \n            if (strongest_extension_strength < cap_strength)\
    \ {\n                strongest_extension_strength = cap_strength;\n          \
    \      strongest_extension = extension;\n            }\n        }\n    }\n   \
    \ \n    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp9z75mjlg: /tmp/tmp9z75mjlg.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    double strength = cap - sm;\n    int max_strength = -1;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() > max_strength) {\n         \
    \   max_strength = ext.length();\n        }\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == max_strength) {\n            if (ext.compare(0,\
    \ cap, class_name, 0, cap) == 0) {\n                strongest_extension = class_name\
    \ + ext.substr(cap);\n                break;\n            }\n        }\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpo2_htyaq: /tmp/tmpo2_htyaq.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - 1;\n    }\n    float strength = cap_num - sm_num;\n\
    \    int strongest_ext = 0;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > strongest_ext) {\n            strongest_ext = ext.length();\n        }\n \
    \   }\n    return class_name + \".\" + extensions[strongest_ext];\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4j1a1gi7: /tmp/tmp4j1a1gi7.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ result;\n    std::string extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (int i = 0; i < extensions.size(); i++) {\n        extension = extensions[i];\n\
    \        cap = extension.find_first_of('A');\n        sm = extension.find_first_of('z');\n\
    \        if (cap != -1 && sm != -1) {\n            int diff = cap - sm;\n    \
    \        if (diff > cap - sm) {\n                diff = cap - sm;\n          \
    \  }\n            if (diff == 0) {\n                result += class_name + extension;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpnzd2uruo: /tmp/tmpnzd2uruo.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        if (extension.at(0) == class_name[0]) {\n         \
    \   cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsmddcukz: /tmp/tmpsmddcukz.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(int\
    \ i = 0; i < extensions.size(); i++) {\n        if(extensions[i].at(0) == class_name[0])\
    \ {\n            cap = cap + 1;\n        }\n        if(extensions[i].at(1) ==\
    \ class_name[1]) {\n            sm = sm + 1;\n        }\n    }\n    float strength\
    \ = cap - sm;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpcpg_kmcr: /tmp/tmpcpg_kmcr.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sml_num = 0;\n\
    \    for (auto &ext : extensions) {\n        cap_num += ext.length();\n      \
    \  sml_num += ext.length() - 1;\n    }\n    double strength = cap_num - sml_num;\n\
    \    double max_strength = std::numeric_limits<double>::max();\n    for (auto\
    \ &ext : extensions) {\n        double ext_strength = ext.length();\n        if\
    \ (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n    }\n    for (auto &ext : extensions) {\n        double ext_strength\
    \ = ext.length();\n        if (ext_strength == max_strength) {\n            return\
    \ class_name + \".\" + ext;\n        }\n    }\n    return class_name + \".\" +\
    \ extensions[0];\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmptkex7g3d: /tmp/tmptkex7g3d.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        if (e == class_name[0]) {\n            cap = cap\
    \ + 1;\n        }\n        if (e == class_name[class_name.size() - 1]) {\n   \
    \         sm = sm + 1;\n        }\n    }\n    if (cap - sm == 0) {\n        strongest_extension\
    \ = class_name;\n    }\n    else {\n        strongest_extension = class_name +\
    \ \".\" + extensions[0];\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqm7dnb82.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpqm7dnb82.cpp:25:15:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   25 |         if (e == class_name[0]) {\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqm7dnb82.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpqm7dnb82.cpp:25:30:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   25 |         if (e == class_name[0])\
    \ {\n      |                              ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqm7dnb82.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpqm7dnb82.cpp:25:30: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   25 |         if ("
  stdout: ''
  timestamp: 1660123253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        std::sort(extensions.begin(),\
    \ extensions.end());\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp6uullp2d: /tmp/tmp6uullp2d.cpp:41: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123255
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sml_counter = 0;\n \
    \   for(auto extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sml_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sml_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4_zx1p5_: /tmp/tmp4_zx1p5_.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n\
    \    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return strength > strcmp(a.c_str(), b.c_str()); }));\n    strongest_extension\
    \ = class_name + extensions[index];\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp43g6poh8: /tmp/tmp43g6poh8.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    double strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n    if (strength > 0) {\n       \
    \ strongest_extension = class_name + \".\" + extensions[index];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpaaslahhn: /tmp/tmpaaslahhn.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    \n    std::string strongest_extension\
    \ = \"\";\n    \n    for(int i = 0; i < extensions.size(); i++) {\n        \n\
    \        int cap = class_name.length();\n        int sm = extensions[i].length();\n\
    \        \n        int strength = cap - sm;\n        \n        if(strength > 0)\
    \ {\n            \n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \            \n            break;\n        }\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp6x5wwovs: /tmp/tmp6x5wwovs.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string extension_strength;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    std::string extension_class;\n\
    \    for (auto &extension : extensions) {\n        auto &extension_letter = extension[0];\n\
    \        auto &extension_letter_cap = extension_letter[0];\n        auto &extension_letter_sm\
    \ = extension_letter[1];\n        auto &extension_letter_cap_sm = extension_letter_cap[1];\n\
    \        auto &extension_letter_counter = extension_letter[2];\n        auto &extension_letter_cap_counter\
    \ = extension_letter_cap[2];\n        auto &extension_letter_counter_sm = extension_letter[3];\n\
    \        auto &extension_letter_cap_counter_sm = extension_letter_cap[3];\n  \
    \      auto &extension_letter_counter_cap = extension_letter[4];\n        auto\
    \ &extension_letter_cap_counter_cap = extension_letter_cap[4];\n        auto &extension_letter_counter_cap_sm\
    \ = extension_letter[5];\n        auto &extension_letter_cap_counter_cap_sm =\
    \ extension_letter_cap[5];\n        auto &extension_letter_counter_cap_cap = extension_letter[6];\n\
    \        auto &extension_letter_cap_counter_cap_cap = extension_letter_cap[6];\n\
    \        auto &extension_letter_counter_cap_cap_sm = extension_letter[7];\n  \
    \      auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[7];\n\
    \        auto &extension_letter_counter_cap_cap_cap = extension_letter[8];\n \
    \       auto &extension_letter_cap_counter_cap_cap_cap = extension_letter_cap[8];\n\
    \        auto &extension_letter_counter_cap_cap_cap_sm = extension_letter[9];\n\
    \        auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[9];\n\
    \        auto &extension_letter_counter_cap_cap_cap_cap = extension_letter[10];\n\
    \        auto &extension_letter_cap_counter_cap_cap_cap = extension_letter_cap[10];\n\
    \        auto &extension_letter_counter_cap_cap_cap_sm = extension_letter[11];\n\
    \        auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[11];\n\
    \        auto &extension_letter_counter_cap_cap_cap_cap = extension_letter[12];\n\
    \        auto &extension_letter_cap_counter_cap_cap_cap = extension_letter_cap[12];\n\
    \        auto &extension_letter_counter_cap_cap_cap_sm = extension_letter[13];\n\
    \        auto &extension_letter_cap_counter_cap_cap_sm = extension_letter_cap[\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprn2z9b_8.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmprn2z9b_8.cpp:26:56:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   26 |    \
    \     auto &extension_letter_cap = extension_letter[0];\n      |             \
    \                                           ^\n/tmp/tmprn2z9b_8.cpp:27:55: error:\
    \ invalid types \u2018char[int]\u2019 for array subscript\n   27 |         auto\
    \ &extension_letter_sm = extension_letter[1];\n      |                       \
    \                                ^\n/tmp/tmprn2z9b_8.cpp:29:60: error: invalid\
    \ types \u2018char[int]\u2019 for array subscript\n   29 |         auto &extension_letter_counter\
    \ = extension_letter[2];\n      |                                            \
    \                ^\n/tmp/tmprn2z9b_8.cpp:31:63: error: invalid types \u2018char[int]\u2019\
    \ for array subscript\n   31 |         auto &extension_letter_counter_sm = extension_letter[3];\n\
    \      |                                                               ^\n/tmp/tmprn2z9b_8.cpp:33:64:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   33 |    \
    \     auto &extension_letter_counter_cap = extension_letter[4];\n      |     \
    \                                                           ^\n/tmp/tmprn2z9b_8.cpp:35:67:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   35 |    \
    \     auto &extension_letter_counter_cap_sm = extension_letter[5];\n      |  \
    \                                                                 ^\n/tmp/tmprn2z9b_8.cpp:37:68:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   37 |    \
    \     auto &extension_letter_counter_cap_cap = extension_letter[6];\n      | \
    \                                                                   ^\n/tmp/tmprn2z9b_8.cpp:39:71:\
    \ error: invalid types \u2018char[int]\u2019 for array subscript\n   39 |    \
    \     auto &extension_letter_counter_cap_cap_sm = extension_letter[7];\n     \
    \ |                                                                       ^\n\
    /tmp/tmprn2z9b_8.cpp:41:72: error: invalid types \u2018char[int]\u2019 for array"
  stdout: ''
  timestamp: 1660123253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for (auto &extension : extensions) {\n        cap_counter += extension.at(0)\
    \ - 'A';\n        sm_counter += extension.at(1) - 'a';\n    }\n    double strength\
    \ = cap_counter - sm_counter;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if (strength < 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[extensions.size()\
    \ - 1];\n    }\n    else {\n        strongest_extension = class_name + \".\" +\
    \ extensions[0];\n    }\n    return strongest_extension;\n}\nint main() {\n  \
    \  auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"),\
    \ (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpp321vozt: /tmp/tmpp321vozt.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string extension_strength;\n\
    \    std::string extension_class;\n    std::string extension_extension;\n    int\
    \ extension_strength_counter = 0;\n    int extension_class_counter = 0;\n    int\
    \ extension_extension_counter = 0;\n    int extension_strength_counter2 = 0;\n\
    \    int extension_class_counter2 = 0;\n    int extension_extension_counter2 =\
    \ 0;\n    int extension_strength_counter3 = 0;\n    int extension_class_counter3\
    \ = 0;\n    int extension_extension_counter3 = 0;\n    int extension_strength_counter4\
    \ = 0;\n    int extension_class_counter4 = 0;\n    int extension_extension_counter4\
    \ = 0;\n    int extension_strength_counter5 = 0;\n    int extension_class_counter5\
    \ = 0;\n    int extension_extension_counter5 = 0;\n    int extension_strength_counter6\
    \ = 0;\n    int extension_class_counter6 = 0;\n    int extension_extension_counter6\
    \ = 0;\n    int extension_strength_counter7 = 0;\n    int extension_class_counter7\
    \ = 0;\n    int extension_extension_counter7 = 0;\n    int extension_strength_counter8\
    \ = 0;\n    int extension_class_counter8 = 0;\n    int extension_extension_counter8\
    \ = 0;\n    int extension_strength_counter9 = 0;\n    int extension_class_counter9\
    \ = 0;\n    int extension_extension_counter9 = 0;\n    int extension_strength_counter10\
    \ = 0;\n    int extension_class_counter10 = 0;\n    int extension_extension_counter10\
    \ = 0;\n    int extension_strength_counter11 = 0;\n    int extension_class_counter11\
    \ = 0;\n    int extension_extension_counter11 = 0;\n    int extension_strength_counter12\
    \ = 0;\n    int extension_class_counter12 = 0;\n    int extension_extension_counter12\
    \ = 0;\n    int extension_strength_counter13 = 0;\n    int extension_class_counter13\
    \ = 0;\n    int extension_extension_counter13 = 0;\n    int extension_strength_counter14\
    \ = 0;\n    int extension_class_counter14 = 0;\n    int extension_extension_counter14\
    \ = 0;\n    int extension_strength_counter15 = 0;\n    int extension_class_counter15\
    \ = 0;\n    int extension_extension_counter15 = 0;\n    int extension_strength_counter16\
    \ = 0;\n    int extension_class_counter16 = 0;\n    int extension_extension_counter16\
    \ = 0;\n    int extension_strength_counter17 = 0;\n    int extension_class_counter17\
    \ = 0;\n    int extension_extension_counter17 = 0;\n    int extension_strength_counter18\
    \ = 0;\n    int extension_class_counter18 = 0;\n    int extension_extension_counter18\
    \ = 0;\n    int extension_strength_counter19 = 0;\n    int extension_class_counter19\
    \ = 0;\n    int extension_extension_counter19 = 0;\n    int extension_strength_counter20\
    \ = 0;\n    int extension_\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpusrbhyo5.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpusrbhyo5.cpp:82:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   82 | }\n      | ^\n\
    /tmp/tmpusrbhyo5.cpp:82:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660123253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for(auto extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    if(cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmptedkxuje: /tmp/tmptedkxuje.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for (auto i : extensions) {\n        cap += i[0]-'A';\n        sm +=\
    \ i[1]-'a';\n    }\n    \n    double strength = cap - sm;\n    \n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    \n    for (auto i : extensions) {\n        if (i[0] == i[1]) {\n \
    \           continue;\n        }\n        \n        double strength_i = cap -\
    \ sm;\n        \n        if (strength_i > strength) {\n            strongest_extension\
    \ = class_name + \".\" + i;\n            strength = strength_i;\n        }\n \
    \   }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpu3kc81u8: /tmp/tmpu3kc81u8.cpp:54: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap = class_name.size();\n \
    \   int sm = extensions.size();\n    int strength = cap - sm;\n    std::string\
    \ strongest_extension = \"\";\n    for (int i = 0; i < sm; i++) {\n        if\
    \ (strength > 0) {\n            strongest_extension += class_name + \".\" + extensions[i];\n\
    \            strength--;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmprnid70lf: /tmp/tmprnid70lf.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = class_name.size();\n    int sm = extensions.size();\n\
    \    int strength = cap - sm;\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i].compare(class_name) == 0){\n            strongest_extension\
    \ = class_name + extensions[i];\n            break;\n        }\n    }\n    \n\
    \    if(strongest_extension.compare(class_name) == 0){\n        for(int i = 0;\
    \ i < extensions.size(); i++){\n            if(extensions[i].compare(class_name)\
    \ == 0){\n                strongest_extension = class_name + extensions[i];\n\
    \                break;\n            }\n        }\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpj_1a7vmt: /tmp/tmpj_1a7vmt.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string result;\n    int cap\
    \ = class_name.size();\n    int sm = extensions.size();\n    int strength = cap\
    \ - sm;\n    int i = 0;\n    while (i < extensions.size() && extensions[i].size()\
    \ == cap) {\n        if (extensions[i].compare(class_name.substr(0, cap)) == 0)\
    \ {\n            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)) == 0) {\n\
    \            result += class_name + \".\" + extensions[i];\n            i++;\n\
    \        } else if (extensions[i].compare(class_name.substr(0, cap)\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdx5p77d.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpzdx5p77d.cpp:77:67:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   77 |         }\
    \ else if (extensions[i].compare(class_name.substr(0, cap)\n      |          \
    \                               ~                         ^\n      |         \
    \                                                          )\n   78 | }\n    \
    \  | ~                                                                  \n/tmp/tmpzdx5p77d.cpp:77:67:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   77 |         }\
    \ else if (extensions[i].compare(class_name.substr(0, cap)\n      |          \
    \         ~                                               ^\n      |         \
    \                                                          )\n   78 | }\n    \
    \  | ~                                                                  \n/tmp/tmpzdx5p77d.cpp:78:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   78 | }\n \
    \     | ^\n/tmp/tmpzdx5p77d.cpp:79:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   79 | int main() {\n      |            ^\n\
    /tmp/tmpzdx5p77d.cpp:90:1: error: expected \u2018}\u2019 at end of input\n   90\
    \ | }\n      | ^\n/tmp/tmpzdx5p77d.cpp:19:94: note: to match this \u2018{\u2019\
    \n   19 | std::string Strongest_Extension(std::string class_name, std::vector<std::string>\
    \ extensions) {\n      |                                                     \
    \                                         ^\n/tmp/tmpzdx5p77d.cpp:90:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   90 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660123253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_extension = 0;\n    int sml_extension = 0;\n    for (auto\
    \ extension : extensions) {\n        cap_extension += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sml_extension += std::tolower(extension[0])\
    \ - std::tolower(extension[1]);\n    }\n    float strength = cap_extension - sml_extension;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extensions.size() > 1) {\n        for (auto extension : extensions)\
    \ {\n            if (strength > 0) {\n                if (strongest_extension.length()\
    \ < extension.length()) {\n                    strongest_extension = class_name\
    \ + \".\" + extension;\n                }\n            }\n        }\n    }\n \
    \   return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7qqatno_: /tmp/tmp7qqatno_.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &extension : extensions)\
    \ {\n        if (strength > 0) {\n            if (extension.at(0) != extension.at(1))\n\
    \                strongest_extension = class_name + \".\" + extensions[0];\n \
    \       }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0ff96gtw: /tmp/tmp0ff96gtw.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (auto extension : extensions) {\n        if (extension.at(0) ==\
    \ class_name.at(0)) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name.at(1)) {\n            sm_counter++;\n        }\n    }\n    if\
    \ (cap_counter > sm_counter) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmprrq4co14: /tmp/tmprrq4co14.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n\
    \    float strength = cap - sm;\n    if(strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for(auto i : extensions) {\n\
    \        if(strength > i[0]-'A' && strength < i[0]-'a') {\n            strongest_extension\
    \ = class_name + \".\" + i;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp35fktcmy: /tmp/tmp35fktcmy.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ e : extensions) {\n        cap += e.size();\n        sm += e.size();\n    }\n\
    \    float strength = cap - sm;\n    for(auto e : extensions) {\n        if(e.size()\
    \ == strength) {\n            strongest_extension += class_name + e;\n       \
    \ }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpd55f5tdb: /tmp/tmpd55f5tdb.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ result;\n    std::string extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        for (auto\
    \ &i : extensions) {\n            if (i[0] == class_name[0] && i[1] == class_name[1])\
    \ {\n                result = class_name + \".\" + i;\n                break;\n\
    \            }\n        }\n    }\n    if (result.empty()) {\n        for (auto\
    \ &i : extensions) {\n            if (i[0] == class_name[0] && i[1] == class_name[1])\
    \ {\n                result = class_name + \".\" + i;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp2l9d8guj: /tmp/tmp2l9d8guj.cpp:50: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for (auto extension : extensions) {\n        cap += extension.at(0);\n\
    \        sm += extension.at(1);\n    }\n    \n    float strength = cap - sm;\n\
    \    \n    for (auto extension : extensions) {\n        if ((extension.at(0) >=\
    \ cap) && (extension.at(1) >= sm)) {\n            strongest_extension = class_name\
    \ + \".\" + extension.at(0);\n            break;\n        }\n    }\n    \n   \
    \ return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp9hz970hw: /tmp/tmp9hz970hw.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    //\
    \ Write your code here\n    \n    return class_name + \".\" + extensions[0];\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp8xi89fnn: /tmp/tmp8xi89fnn.cpp:28: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_letters = 0;\n    int sm_letters = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap_letters += std::count(extension.begin(), extension.end(),\
    \ std::toupper(extension[0]));\n        sm_letters += std::count(extension.begin(),\
    \ extension.end(), std::tolower(extension[0]));\n    }\n    int strength = cap_letters\
    \ - sm_letters;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (auto &extension : extensions) {\n\
    \        if (std::count(extension.begin(), extension.end(), std::toupper(extension[0]))\
    \ > strength) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \        }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpny61wyzh: /tmp/tmpny61wyzh.cpp:41: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::min_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n    strongest_extension = class_name\
    \ + \".\" + extensions[index];\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbc3ummlt: /tmp/tmpbc3ummlt.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap_extensions = 0;\n    int sm_extensions = 0;\n\
    \    for (auto extension : extensions) {\n        cap_extensions += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sm_extensions += std::tolower(extension[0])\
    \ - std::tolower(extension[1]);\n    }\n    double strength = cap_extensions -\
    \ sm_extensions;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if (strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmeyjcfz8: /tmp/tmpmeyjcfz8.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length();\n    }\n    double strength = cap_num - sm_num;\n  \
    \  int max_strength = 0;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > max_strength) {\n            max_strength = ext.length();\n        }\n   \
    \ }\n    if (max_strength == 0) {\n        return class_name;\n    }\n    int\
    \ max_index = -1;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == max_strength) {\n            max_index = extensions.find(ext);\n        }\n\
    \    }\n    if (max_index == -1) {\n        return class_name;\n    }\n    std::string\
    \ strongest_ext = \"\";\n    for (int i = 0; i < max_index; i++) {\n        strongest_ext\
    \ += extensions[i];\n    }\n    return class_name + \".\" + strongest_ext;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqvylfj6i.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpqvylfj6i.cpp:38:36:\
    \ error: \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has\
    \ no member named \u2018find\u2019\n   38 |             max_index = extensions.find(ext);\n\
    \      |                                    ^~~~\n"
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    std::string\
    \ class_name_copy = class_name;\n    for(auto extension : extensions) {\n    \
    \    cap_counter += extension.at(0) - 'A';\n        sm_counter += extension.at(1)\
    \ - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n    for(auto\
    \ extension : extensions) {\n        if(extension.at(0) - 'A' == cap_counter)\
    \ {\n            strongest_extension += class_name_copy + \".\" + extension.at(1);\n\
    \        }\n    }\n    if(strongest_extension.empty()) {\n        std::cout <<\
    \ \"No extensions found!\" << std::endl;\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqs9lluy1: /tmp/tmpqs9lluy1.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: 'No extensions found!

    '
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (auto &extension : extensions) {\n        cap += (extension.size()-1);\n   \
    \     sm += (extension.size()-1);\n    }\n    \n    float strength = cap - sm;\n\
    \    \n    for (auto &extension : extensions) {\n        if ((extension.size()-1)\
    \ == cap) {\n            strongest_extension = class_name + \".\" + extension;\n\
    \        }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n  \
    \  auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"),\
    \ (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp8rr94obf: /tmp/tmp8rr94obf.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        cap += e[0]-'A';\n        sm += e[1]-'a';\n    }\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else\n        strongest_extension = class_name + extensions[extensions.size()-1];\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpfb8__vu2: /tmp/tmpfb8__vu2.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ \n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123257
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    double strength = -1;\n    double cap_strength = -1;\n    double sm_strength\
    \ = -1;\n    double total_strength = -1;\n    for (auto &extension : extensions)\
    \ {\n        cap_strength = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::toupper(c) == c;\n        });\n      \
    \  sm_strength = std::count_if(extension.begin(), extension.end(), [](char c)\
    \ {\n            return std::tolower(c) == c;\n        });\n        total_strength\
    \ = cap_strength - sm_strength;\n        if (total_strength > strength) {\n  \
    \          strongest_extension = class_name + \".\" + extension;\n           \
    \ strength = total_strength;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extension = 0;\n    int sml_extension\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_extension += (extension.at(0)\
    \ - 'A');\n        sml_extension += (extension.at(1) - 'a');\n    }\n    double\
    \ strength = cap_extension - sml_extension;\n    if (strength > 0) {\n       \
    \ strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for (auto\
    \ extension : extensions) {\n        if (strength == (extension.at(0) - 'A') -\
    \ (extension.at(1) - 'a')) {\n            strongest_extension = class_name + \"\
    .\" + extension;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpmry1v5ym: /tmp/tmpmry1v5ym.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0) - 'A';\n        sm\
    \ += extension.at(1) - 'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength > 0) {\n\
    \            if (extension.at(0) - 'A' > strongest_extension.at(0) - 'A') {\n\
    \                strongest_extension = class_name + \".\" + extension;\n     \
    \       }\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length();\n    }\n    float strength = (float)cap_num - sm_num;\n\
    \    int max_strength = -1;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > max_strength) {\n            max_strength = ext.length();\n        }\n   \
    \ }\n    for (auto &ext : extensions) {\n        if (ext.length() == max_strength)\
    \ {\n            if (ext.compare(0, cap_num - sm_num, class_name.c_str()) == 0)\
    \ {\n                return class_name + \".\" + ext;\n            }\n       \
    \ }\n    }\n    return class_name + \".\" + extensions[0];\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_46_b8_f: /tmp/tmp_46_b8_f.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_extension = class_name.size();\n    int sm_extension\
    \ = class_name.size();\n    for (auto extension : extensions) {\n        cap_extension\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {return std::toupper(c)\
    \ == c; });\n        sm_extension = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {return std::tolower(c) == c; });\n    }\n    float strength = cap_extension\
    \ - sm_extension;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if (strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpnxg4r5_5: /tmp/tmpnxg4r5_5.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    double strength = 0;\n    for (auto &extension\
    \ : extensions) {\n        double extension_strength = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::isupper(c);\n       \
    \ }) / extension.size();\n        if (extension_strength > strength) {\n     \
    \       strength = extension_strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4j5i55n_: /tmp/tmp4j5i55n_.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension\
    \ : extensions) {\n        if (extension.at(0) == class_name.at(0)) {\n      \
    \      cap_counter++;\n        }\n        if (extension.at(1) == class_name.at(0))\
    \ {\n            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqpcem_pb: /tmp/tmpqpcem_pb.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap = class_name.size();\n \
    \   int sm = extensions.size();\n    int strength = cap - sm;\n    std::string\
    \ strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++) {\n        std::string extension = extensions[i];\n        \n        if(extension.compare(class_name,\
    \ cap - sm, cap - sm) == 0) {\n            strongest_extension = extension;\n\
    \            break;\n        }\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp82l02ugm.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp82l02ugm.cpp:28:60:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::compare(std::string&,\
    \ int, int)\u2019\n   28 |         if(extension.compare(class_name, cap - sm,\
    \ cap - sm) == 0) {\n      |                                                 \
    \           ^\nIn file included from /usr/include/c++/9/string:55,\n         \
    \        from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp82l02ugm.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note: candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 3 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp82l02ugm.cpp:28:60:\
    \ note:   candidate expects 1 argument, 3 provided\n   28 |         if(extension."
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ e : extensions) {\n        cap += e[0]-'A';\n        sm += e[1]-'a';\n    }\n\
    \    float strength = cap - sm;\n    for(auto e : extensions) {\n        if(e[0]-'A'\
    \ == cap && e[1]-'a' == sm) {\n            strongest_extension = class_name +\
    \ \".\" + e;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbl_b5i8k: /tmp/tmpbl_b5i8k.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for(auto &extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpjpgm28hm: /tmp/tmpjpgm28hm.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto ext : extensions) {\n        cap_num += ext.length();\n        sm_num\
    \ += ext.length();\n    }\n    double strength = cap_num - sm_num;\n    int strongest_ext\
    \ = 0;\n    for (auto ext : extensions) {\n        if (ext.length() > strongest_ext)\
    \ {\n            strongest_ext = ext.length();\n        }\n    }\n    return class_name\
    \ + \".\" + extensions[strongest_ext];\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpd90fo9vo: /tmp/tmpd90fo9vo.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - 1;\n    }\n    double strength = cap_num - sm_num;\n\
    \    double max_strength = -1;\n    for (auto &ext : extensions) {\n        double\
    \ ext_strength = ext.length() - 1;\n        if (ext_strength > max_strength) {\n\
    \            max_strength = ext_strength;\n        }\n    }\n    if (max_strength\
    \ == -1) {\n        return class_name;\n    }\n    double max_strength_frac =\
    \ max_strength / cap_num;\n    double min_strength_frac = max_strength_frac /\
    \ sm_num;\n    double max_strength_frac_rounded = round(max_strength_frac);\n\
    \    double min_strength_frac_rounded = round(min_strength_frac);\n    std::string\
    \ max_strength_frac_str = std::to_string(max_strength_frac_rounded);\n    std::string\
    \ min_strength_frac_str = std::to_string(min_strength_frac_rounded);\n    std::string\
    \ max_strength_frac_str = max_strength_frac_str.substr(0, max_strength_frac_str.length()\
    \ - 1);\n    std::string min_strength_frac_str = min_strength_frac_str.substr(0,\
    \ min_strength_frac_str.length() - 1);\n    return class_name + \".\" + max_strength_frac_str\
    \ + \".\" + min_strength_frac_str;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgby2qvlb.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpgby2qvlb.cpp:42:17:\
    \ error: redeclaration of \u2018std::string max_strength_frac_str\u2019\n   42\
    \ |     std::string max_strength_frac_str = max_strength_frac_str.substr(0, max_strength_frac_str.length()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgby2qvlb.cpp:40:17:\
    \ note: \u2018std::string max_strength_frac_str\u2019 previously declared here\n\
    \   40 |     std::string max_strength_frac_str = std::to_string(max_strength_frac_rounded);\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgby2qvlb.cpp:43:17: error:\
    \ redeclaration of \u2018std::string min_strength_frac_str\u2019\n   43 |    \
    \ std::string min_strength_frac_str = min_strength_frac_str.substr(0, min_strength_frac_str.length()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgby2qvlb.cpp:41:17:\
    \ note: \u2018std::string min_strength_frac_str\u2019 previously declared here\n\
    \   41 |     std::string min_strength_frac_str = std::to_string(min_strength_frac_rounded);\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        cap += e.size();\n        sm += e.size();\n    }\n\
    \    float strength = cap - sm;\n    for (auto e : extensions) {\n        if (e.size()\
    \ == strongest_extension.size()) {\n            if (e.size() > strongest_extension.size())\
    \ {\n                strongest_extension = e;\n            }\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp7tr181fj: /tmp/tmp7tr181fj.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    \n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (extensions[i].at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    \n   \
    \ if (cap_counter > sm_counter) {\n        strongest_extension = class_name +\
    \ extensions[cap_counter];\n    }\n    else {\n        strongest_extension = class_name\
    \ + extensions[sm_counter];\n    }\n    \n    return strongest_extension;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpa5g2hs08: /tmp/tmpa5g2hs08.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        if (e.size() > cap) {\n            cap = e.size();\n\
    \        }\n        if (e.size() < sm) {\n            sm = e.size();\n       \
    \ }\n    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto e : extensions)\
    \ {\n        if (e.size() > cap) {\n            cap = e.size();\n        }\n \
    \       if (e.size() < sm) {\n            sm = e.size();\n        }\n    }\n \
    \   float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto e : extensions)\
    \ {\n        if (e.size() > cap) {\n            cap = e.size();\n        }\n \
    \       if (e.size() < sm) {\n            sm = e.size();\n        }\n    }\n \
    \   float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto e : extensions)\
    \ {\n        if (e.size() > cap) {\n            cap = e.size();\n        }\n \
    \       if (e.size() < sm) {\n            sm = e.size();\n        }\n    }\n \
    \   float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto e : extensions)\
    \ {\n        if (e.size() > cap) {\n            cap = e.size();\n        }\n \
    \       if (e.size() < sm) {\n            sm = e.size();\n        }\n    }\n \
    \   float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto e : extensions)\
    \ {\n        if (e.size() > cap) {\n            cap = e.size();\n        }\n \
    \       if (e.size() < sm) {\n            sm = e.size();\n        }\n    }\n \
    \   float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto e : extensions)\
    \ {\n        if (e.size() > cap) {\n            cap = e.size();\n        }\n \
    \       if (e.size() < sm) {\n            sm = e.size();\n        }\n    }\n \
    \   float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto e : extensions)\
    \ {\n        if (\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdw3_2ijk.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpdw3_2ijk.cpp:44:11:\
    \ error: redeclaration of \u2018float strength\u2019\n   44 |     float strength\
    \ = cap - sm;\n      |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:32:11: note: \u2018\
    float strength\u2019 previously declared here\n   32 |     float strength = cap\
    \ - sm;\n      |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:56:11: error: redeclaration\
    \ of \u2018float strength\u2019\n   56 |     float strength = cap - sm;\n    \
    \  |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:32:11: note: \u2018float strength\u2019\
    \ previously declared here\n   32 |     float strength = cap - sm;\n      |  \
    \         ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:68:11: error: redeclaration of \u2018\
    float strength\u2019\n   68 |     float strength = cap - sm;\n      |        \
    \   ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:32:11: note: \u2018float strength\u2019 previously\
    \ declared here\n   32 |     float strength = cap - sm;\n      |           ^~~~~~~~\n\
    /tmp/tmpdw3_2ijk.cpp:80:11: error: redeclaration of \u2018float strength\u2019\
    \n   80 |     float strength = cap - sm;\n      |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:32:11:\
    \ note: \u2018float strength\u2019 previously declared here\n   32 |     float\
    \ strength = cap - sm;\n      |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:92:11:\
    \ error: redeclaration of \u2018float strength\u2019\n   92 |     float strength\
    \ = cap - sm;\n      |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:32:11: note: \u2018\
    float strength\u2019 previously declared here\n   32 |     float strength = cap\
    \ - sm;\n      |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:104:11: error: redeclaration\
    \ of \u2018float strength\u2019\n  104 |     float strength = cap - sm;\n    \
    \  |           ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:32:11: note: \u2018float strength\u2019\
    \ previously declared here\n   32 |     float strength = cap - sm;\n      |  \
    \         ^~~~~~~~\n/tmp/tmpdw3_2ijk.cpp:110:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmpdw3_2ijk.cpp:109:13:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  109 |         if\
    \ (\n    "
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extension = 0;\n    int sm_extension\
    \ = 0;\n    for (auto &extension : extensions) {\n        cap_extension = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::toupper(c) == c;\n  \
    \      });\n        sm_extension = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::tolower(c) == c;\n        });\n      \
    \  if (cap_extension - sm_extension > 0) {\n            strongest_extension =\
    \ class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpzsae_11c: /tmp/tmpzsae_11c.cpp:41: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension;\n    \n    for(auto &extension : extensions) {\n      \
    \  \n        auto cap = extension.find_first_of('A');\n        auto sm = extension.find_first_of('l');\n\
    \        \n        auto strength = cap - sm;\n        \n        if(strength ==\
    \ 0)\n            continue;\n        \n        if(strength > strongest_extension.length())\
    \ {\n            strongest_extension = class_name + extension;\n        }\n  \
    \  }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmptu88jctn: /tmp/tmptu88jctn.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0) == class_name[0])\
    \ {\n            cap = cap + extensions[i].at(1).size();\n            sm = sm\
    \ + extensions[i].at(1).size();\n        }\n    }\n    float strength = cap -\
    \ sm;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0)\
    \ == class_name[0]) {\n            if (strength > 0) {\n                strongest_extension\
    \ = extensions[i].at(1) + \".\" + strongest_extension;\n                strength\
    \ = strength - 1;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygh3yr_r.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpygh3yr_r.cpp:26:45:\
    \ error: request for member \u2018size\u2019 in \u2018(& extensions.std::vector<std::__cxx11::basic_string<char>\
    \ >::operator[](((std::vector<std::__cxx11::basic_string<char> >::size_type)i)))->std::__cxx11::basic_string<char>::at(1)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   26 |             cap = cap\
    \ + extensions[i].at(1).size();\n      |                                     \
    \        ^~~~\n/tmp/tmpygh3yr_r.cpp:27:43: error: request for member \u2018size\u2019\
    \ in \u2018(& extensions.std::vector<std::__cxx11::basic_string<char> >::operator[](((std::vector<std::__cxx11::basic_string<char>\
    \ >::size_type)i)))->std::__cxx11::basic_string<char>::at(1)\u2019, which is of\
    \ non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   27 |             sm = sm + extensions[i].at(1).size();\n\
    \      |                                           ^~~~\n"
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strongest_extension.length()) {\n           \
    \ if (ext.compare(strongest_extension) == 0) {\n                strongest_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpdlp9gut3: /tmp/tmpdlp9gut3.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        std::string extension = extensions[i];\n        \n        for(int\
    \ j = 0; j < extension.size(); j++){\n            char c = extension[j];\n   \
    \         \n            if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')){\n\
    \                strongest_extension += c;\n            }\n        }\n    }\n\
    \    \n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp455tiih9: /tmp/tmp455tiih9.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_extension_strength = 0;\n    int sma_extension_strength = 0;\n  \
    \  for (auto extension : extensions) {\n        auto cap_extension = extension.substr(0,\
    \ CAP);\n        auto sma_extension = extension.substr(CAP, SM);\n        cap_extension_strength\
    \ += std::count(cap_extension.begin(), cap_extension.end(), cap_extension.at(0))\
    \ - 1;\n        sma_extension_strength += std::count(sma_extension.begin(), sma_extension.end(),\
    \ sma_extension.at(0)) - 1;\n    }\n    if (cap_extension_strength > sma_extension_strength)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\
    \ else {\n        strongest_extension = class_name + \".\" + extensions[sma_extension_strength];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyt7itxiw.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpyt7itxiw.cpp:24:50:\
    \ error: \u2018CAP\u2019 was not declared in this scope\n   24 |         auto\
    \ cap_extension = extension.substr(0, CAP);\n      |                         \
    \                         ^~~\n/tmp/tmpyt7itxiw.cpp:25:52: error: \u2018SM\u2019\
    \ was not declared in this scope\n   25 |         auto sma_extension = extension.substr(CAP,\
    \ SM);\n      |                                                    ^~\n"
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    \n    for(auto extension : extensions) {\n        if(extension.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if(extension.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    \n   \
    \ if(cap_counter > sm_counter) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    \n    return strongest_extension;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpk2ezqr69: /tmp/tmpk2ezqr69.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &extension : extensions) {\n        cap += extension.at(0) - 'A';\n\
    \        sm += extension.at(1) - 'a';\n    }\n    \n    float strength = cap -\
    \ sm;\n    \n    if(strength > 0) {\n        for(auto &extension : extensions)\
    \ {\n            if((extension.at(0) - 'A') == (extension.at(1) - 'a')) {\n  \
    \              strongest_extension += class_name + \".\" + extension.at(0);\n\
    \            }\n        }\n    }\n    \n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmprgjjnzsm: /tmp/tmprgjjnzsm.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n\
    \    }\n    double strength = cap_num - sm_num;\n    int max_strength = 0;\n \
    \   for (auto &ext : extensions) {\n        if (ext.length() > max_strength) {\n\
    \            max_strength = ext.length();\n        }\n    }\n    if (strength\
    \ > max_strength) {\n        return class_name + \".\" + extensions[0];\n    }\n\
    \    int max_index = -1;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == max_strength) {\n            max_index = extensions.find(ext);\n        }\n\
    \    }\n    if (max_index != -1) {\n        return class_name + \".\" + extensions[max_index];\n\
    \    }\n    return class_name + \".\" + extensions[0];\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwy48imk6.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpwy48imk6.cpp:38:36:\
    \ error: \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has\
    \ no member named \u2018find\u2019\n   38 |             max_index = extensions.find(ext);\n\
    \      |                                    ^~~~\n"
  stdout: ''
  timestamp: 1660123256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int strongest_extension_strength\
    \ = -1;\n    \n    for (auto extension : extensions) {\n        int extension_strength\
    \ = extension.size()-extension.find_first_not_of(std::string(\"\"));\n       \
    \ if (extension_strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqh_ijej1: /tmp/tmpqh_ijej1.cpp:39: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26wwtul8.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp26wwtul8.cpp:26:74:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find_first_not_of(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   26 |         sm += ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n      |                  \
    \                                                        ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp26wwtul8.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2673:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2673 |       find_first_not_of(const basic_string&\
    \ __str, size_type __pos = 0) const\n      |       ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2673:45:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019} to \u2018const std::__cxx11::basic_string<char>&\u2019\n 2673 |   \
    \    find_first_not_of(const basic_string& __str, size_type _"
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap_extensions = 0;\n  \
    \  int sml_extensions = 0;\n    \n    for(int i = 0; i < extensions.size(); i++)\
    \ {\n        if(extensions[i].at(0) == class_name[0]) {\n            cap_extensions\
    \ += 1;\n        }\n        if(extensions[i].at(1) == class_name[0]) {\n     \
    \       sml_extensions += 1;\n        }\n    }\n    \n    if(cap_extensions >\
    \ sml_extensions) {\n        strongest_extension = class_name + \".\" + extensions[cap_extensions\
    \ - 1];\n    }\n    else if(sml_extensions > cap_extensions) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[sml_extensions - 1];\n    }\n    else {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  \n    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp637y4ssq: /tmp/tmp637y4ssq.cpp:49: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for(int i = 0; i < extensions.size(); i++) {\n        cap = extensions[i].length();\n\
    \        sm = class_name.size();\n        \n        if(cap - sm > 0)\n       \
    \     strongest_extension += class_name.substr(cap - sm);\n    }\n    \n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpjmi4iq0x: /tmp/tmpjmi4iq0x.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ extension_strength;\n    double extension_strength_fraction = -1;\n    double\
    \ extension_strength_fraction_sm = -1;\n    double extension_strength_fraction_cap\
    \ = -1;\n    double extension_strength_fraction_smcap = -1;\n    double extension_strength_fraction_capsm\
    \ = -1;\n    double extension_strength_fraction_smcapcap = -1;\n    double extension_strength_fraction_capsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsm = -1;\n    double extension_strength_fraction_capsmcapcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n    double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n    double extension_strength_fraction_smcapcapsmcap = -1;\n    double\
    \ extension_strength_fraction_smcapcapsmcap = -1;\n\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnb_qo3zy.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpnb_qo3zy.cpp:32:12:\
    \ error: redeclaration of \u2018double extension_strength_fraction_smcapcapsmcap\u2019\
    \n   32 |     double extension_strength_fraction_smcapcapsmcap = -1;\n      |\
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnb_qo3zy.cpp:31:12:\
    \ note: \u2018double extension_strength_fraction_smcapcapsmcap\u2019 previously\
    \ declared here\n   31 |     double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnb_qo3zy.cpp:33:12:\
    \ error: redeclaration of \u2018double extension_strength_fraction_smcapcapsmcap\u2019\
    \n   33 |     double extension_strength_fraction_smcapcapsmcap = -1;\n      |\
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnb_qo3zy.cpp:31:12:\
    \ note: \u2018double extension_strength_fraction_smcapcapsmcap\u2019 previously\
    \ declared here\n   31 |     double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnb_qo3zy.cpp:34:12:\
    \ error: redeclaration of \u2018double extension_strength_fraction_smcapcapsmcap\u2019\
    \n   34 |     double extension_strength_fraction_smcapcapsmcap = -1;\n      |\
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnb_qo3zy.cpp:31:12:\
    \ note: \u2018double extension_strength_fraction_smcapcapsmcap\u2019 previously\
    \ declared here\n   31 |     double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnb_qo3zy.cpp:35:12:\
    \ error: redeclaration of \u2018double extension_strength_fraction_smcapcapsmcap\u2019\
    \n   35 |     double extension_strength_fraction_smcapcapsmcap = -1;\n      |\
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnb_qo3zy.cpp:31:12:\
    \ note: \u2018double extension_strength_fraction_smcapcapsmcap\u2019 previously\
    \ declared here\n   31 |     double extension_strength_fraction_smcapcapsmcap\
    \ = -1;\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/t"
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        if (extension.at(0) == class_name[0]) {\n\
    \            cap = cap + 1;\n        }\n        if (extension.at(1) == class_name[1])\
    \ {\n            sm = sm + 1;\n        }\n    }\n    if (cap - sm == 0) {\n  \
    \      strongest_extension = class_name;\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp6iwgqmxw: /tmp/tmp6iwgqmxw.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    \n    for (auto extension : extensions) {\n        cap_counter +=\
    \ std::toupper(extension[0]) - std::toupper(extension[1]);\n        sm_counter\
    \ += std::tolower(extension[0]) - std::tolower(extension[1]);\n    }\n    \n \
    \   double strength = cap_counter - sm_counter;\n    \n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  \n    for (auto extension : extensions) {\n        if (strength > 0) {\n  \
    \          strongest_extension = class_name + \".\" + extension;\n        }\n\
    \    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpn10dzxo3: /tmp/tmpn10dzxo3.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string extension_strength;\n    \n    for (auto &extension : extensions)\
    \ {\n        extension_strength += extension;\n    }\n    \n    auto extension_strength_length\
    \ = extension_strength.length();\n    \n    auto class_name_length = class_name.length();\n\
    \    \n    auto extension_strength_percentage = extension_strength_length / class_name_length;\n\
    \    \n    auto strongest_extension = class_name + extension_strength.substr(0,\
    \ extension_strength_length - extension_strength_percentage);\n    \n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpxzjbvnh2: /tmp/tmpxzjbvnh2.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string extension_strength =\
    \ \"\";\n    int max_strength = 0;\n    for (auto extension : extensions) {\n\
    \        int extension_strength_counter = 0;\n        for (auto letter : extension)\
    \ {\n            if (letter == letter) {\n                extension_strength_counter++;\n\
    \            }\n        }\n        if (extension_strength_counter > max_strength)\
    \ {\n            max_strength = extension_strength_counter;\n            extension_strength\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + extension_strength;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpc4hqdm9y: /tmp/tmpc4hqdm9y.cpp:40: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (auto &extension : extensions) {\n        if (extension == class_name)\
    \ {\n            strongest_extension = class_name;\n            break;\n     \
    \   }\n        cap_counter += std::toupper(extension[0]) - std::toupper(extension[1]);\n\
    \        sm_counter += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    if (cap_counter > sm_counter) {\n        strongest_extension = class_name;\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpyq8qf0uv: /tmp/tmpyq8qf0uv.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - ext.length();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0) strongest_extension = class_name + extensions[0];\n   \
    \ else if (sm - cap > 0) strongest_extension = class_name + extensions[1];\n \
    \   else strongest_extension = class_name + extensions[2];\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpzi7p637a: /tmp/tmpzi7p637a.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ extension_strength = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n\
    \    for (auto extension : extensions) {\n        if (extension.at(0) == class_name.at(0))\
    \ {\n            cap_counter++;\n        }\n        if (extension.at(1) == class_name.at(1))\
    \ {\n            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if (strength > 0) {\n        extension_strength = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (strength < 0) {\n        extension_strength\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    }\n    return\
    \ extension_strength;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpots5d4z4: /tmp/tmpots5d4z4.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = class_name;\n    int cap = 0;\n    int sm = 0;\n    for\
    \ (auto &extension : extensions) {\n        cap += extension.at(0) - 'A';\n  \
    \      sm += extension.at(1) - 'a';\n    }\n    if (cap - sm > 0)\n        strongest_extension\
    \ += \".\";\n    strongest_extension += extensions[0];\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpntuf3u0w: /tmp/tmpntuf3u0w.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ \n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto ext :\
    \ extensions) {\n        cap += ext.length();\n        sm += ext.length();\n \
    \   }\n    cap = cap / 2;\n    sm = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    else\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmppmccqi7h: /tmp/tmppmccqi7h.cpp:39: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for (auto e : extensions) {\n        if (e.at(0) == class_name[0]) {\n    \
    \        cap_counter++;\n        }\n        if (e.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpoio8mq94: /tmp/tmpoio8mq94.cpp:44: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        cap += e[0] - e[1];\n        sm += e[1] - e[0];\n\
    \    }\n    if (cap - sm > 0)\n        strongest_extension = class_name + \".\"\
    \ + extensions[0];\n    else\n        strongest_extension = class_name + \".\"\
    \ + extensions[extensions.size() - 1];\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqtqjhidl: /tmp/tmpqtqjhidl.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extensions = 0;\n    int sm_extensions\
    \ = 0;\n    for(auto &extension : extensions) {\n        if(extension.at(0) ==\
    \ class_name.at(0)) {\n            cap_extensions += 1;\n        }\n        if(extension.at(1)\
    \ == class_name.at(0)) {\n            sm_extensions += 1;\n        }\n    }\n\
    \    float strength = cap_extensions - sm_extensions;\n    if(strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else if(strength < 0) {\n        strongest_extension = class_name + \".\" +\
    \ extensions[extensions.size() - 1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbyadsg7v: /tmp/tmpbyadsg7v.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (extensions[i].at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp9_gnmhsk: /tmp/tmp9_gnmhsk.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_letters = 0, sm_letters\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_letters += ext.length();\n\
    \        sm_letters += ext.length();\n    }\n    double strength = cap_letters\
    \ - sm_letters;\n    double max_strength = std::numeric_limits<double>::max();\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length();\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n    }\n    double max_strength_extension = max_strength;\n    for\
    \ (auto &ext : extensions) {\n        double ext_strength = ext.length();\n  \
    \      if (ext_strength == max_strength_extension) {\n            std::cout <<\
    \ \"The strongest extension is \" << ext << std::endl;\n        }\n    }\n   \
    \ return class_name + \".\" + extensions[0];\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp90hj64fl: /tmp/tmp90hj64fl.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto it=extensions.begin();\
    \ it!=extensions.end(); ++it){\n        cap += std::toupper(*it).size();\n   \
    \     sm += std::tolower(*it).size();\n    }\n    float strength = cap - sm;\n\
    \    for(auto it=extensions.begin(); it!=extensions.end(); ++it){\n        if(std::toupper(*it)\
    \ == std::toupper(class_name) && std::tolower(*it) == std::tolower(class_name)\
    \ && strength > 0){\n            strongest_extension = class_name + \".\" + std::toupper(*it);\n\
    \            break;\n        }\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpchm3m4cv.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpchm3m4cv.cpp:25:32:\
    \ error: no matching function for call to \u2018toupper(std::__cxx11::basic_string<char>&)\u2019\
    \n   25 |         cap += std::toupper(*it).size();\n      |                  \
    \              ^\nIn file included from /usr/include/c++/9/cctype:42,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n     \
    \            from /tmp/tmpchm3m4cv.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpchm3m4cv.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpchm3m4cv.cpp:25:32: note:   candidate expects 2 arguments,\
    \ 1 provided\n   25 |         cap += std::toupper(*it).size();\n      |      \
    \                          ^\n/tmp/tmpchm3m4cv.cpp:26:31: error: no matching function\
    \ for call to \u2018tolower(std::__cxx11::basic_string<char>&)\u2019\n   26 |\
    \         sm += std::tolower(*it).size();\n      |                           \
    \    ^\nIn file included from /usr/include/c++/9/"
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto &extension : extensions)\
    \ {\n        cap_num += extension.at(0);\n        sm_num += extension.at(1);\n\
    \    }\n    float strength = cap_num - sm_num;\n    if (strength > 0) {\n    \
    \    strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for\
    \ (auto &extension : extensions) {\n        if (extension.at(0) != extension.at(1)\
    \ && strength > 0) {\n            strongest_extension = class_name + \".\" + extensions[0];\n\
    \            break;\n        }\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsqim3k6p: /tmp/tmpsqim3k6p.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        cap += (extensions[i].length()\
    \ - 1);\n        sm += (extensions[i].length());\n    }\n    float strength =\
    \ cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ == strongest_extension.length()) {\n            if (strength > 0) {\n      \
    \          strongest_extension = class_name + \".\" + extensions[i];\n       \
    \     }\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpg9jmd3zh: /tmp/tmpg9jmd3zh.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ i : extensions) {\n        cap += i[0]-'A';\n        sm += i[0]-'a';\n    }\n\
    \    float strength = cap - sm;\n    int max_strength = -1;\n    for (auto i :\
    \ extensions) {\n        if (i[0] == class_name && i[1] > max_strength) {\n  \
    \          max_strength = i[1];\n            strongest_extension = i[0];\n   \
    \     }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw_98090.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmplw_98090.cpp:31:18:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019})\n   31 |         if (i[0] ==\
    \ class_name && i[1] > max_strength) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplw_98090.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmplw_98090.cpp:31:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   31 |         if (i[0] == class_name && i[1] > max_strength)\
    \ {\n      |                     ^~~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmplw_98090.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmplw_98090.cpp:31:21: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_"
  stdout: ''
  timestamp: 1660123258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_extension_strength = 0;\n    int sml_extension_strength = 0;\n  \
    \  for (auto extension : extensions) {\n        cap_extension_strength += (extension.at(0)\
    \ - 'A');\n        sml_extension_strength += (extension.at(1) - 'a');\n    }\n\
    \    if (cap_extension_strength > sml_extension_strength) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    } else {\n        strongest_extension = class_name\
    \ + extensions[1];\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp5rbymn8w: /tmp/tmp5rbymn8w.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int strongest_extension_strength = 0;\n   \
    \ \n    for (auto extension : extensions) {\n        int extension_strength =\
    \ extension.size()-extension.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n\
    \        if (extension_strength > strongest_extension_strength) {\n          \
    \  strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpt80ifh8c: /tmp/tmpt80ifh8c.cpp:39: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - ext.find_first_not_of(std::toupper(ext[0]));\n    }\n\
    \    float strength = cap_num - sm_num;\n    float max_strength = std::max(strength,\
    \ 0);\n    float min_strength = std::min(strength, 0);\n    float min_strength_pos\
    \ = std::distance(extensions.begin(), std::min_element(extensions.begin(), extensions.end(),\
    \ [&](std::string &a, std::string &b) { return a.length() < b.length(); }));\n\
    \    std::string strongest_ext;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == min_strength_pos) {\n            strongest_ext = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return strongest_ext;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm799b3g1.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpm799b3g1.cpp:26:46:\
    \ error: no matching function for call to \u2018max(float&, int)\u2019\n   26\
    \ |     float max_strength = std::max(strength, 0);\n      |                 \
    \                             ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpm799b3g1.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpm799b3g1.cpp:26:46: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018float\u2019\
    \ and \u2018int\u2019)\n   26 |     float max_strength = std::max(strength, 0);\n\
    \      |                                              ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpm799b3g1.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpm799b3g1.cpp:26:46:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    float\u2019 and \u2018int\u2019)\n   26 |     float max_strength = std::max(strength,\
    \ 0);\n      |                                              ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits"
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    std::string extension_strength = \"\";\n    int cap_counter = 0;\n\
    \    int sm_counter = 0;\n    for (auto extension : extensions) {\n        cap_counter\
    \ = 0;\n        sm_counter = 0;\n        for (int i = 0; i < extension.size();\
    \ i++) {\n            if (extension[i] >= 'A' && extension[i] <= 'Z') {\n    \
    \            cap_counter++;\n            }\n            if (extension[i] >= 'a'\
    \ && extension[i] <= 'z') {\n                sm_counter++;\n            }\n  \
    \      }\n        extension_strength += extension.substr(0, cap_counter - sm_counter);\n\
    \    }\n    if (extension_strength == \"\") {\n        return class_name;\n  \
    \  }\n    int strength = cap_counter - sm_counter;\n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extension_strength;\n    }\n\
    \    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbjwjc7ry: /tmp/tmpbjwjc7ry.cpp:48: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += (extension.at(0) - 'A');\n      \
    \  sm += (extension.at(1) - 'a');\n    }\n    float strength = cap - sm;\n   \
    \ if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength == (extension.at(0)\
    \ - 'A') - (extension.at(1) - 'a')) {\n            strongest_extension = class_name\
    \ + \".\" + extension;\n        }\n    }\n    return strongest_extension;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpdzpar_lp: /tmp/tmpdzpar_lp.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    double strongest_extension_strength = -1;\n\
    \    double strongest_extension_strength_counter = 0;\n    for (auto extension\
    \ : extensions) {\n        if (strongest_extension_strength_counter < strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strongest_extension_strength_counter;\n\
    \            strongest_extension = extension;\n        }\n        strongest_extension_strength_counter++;\n\
    \    }\n    return class_name + \".\" + strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsnw1cgj2: /tmp/tmpsnw1cgj2.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ e : extensions){\n        if(std::toupper(e.at(0)) == class_name.at(0)) cap++;\n\
    \        if(std::tolower(e.at(0)) == class_name.at(0)) sm++;\n    }\n    float\
    \ strength = cap - sm;\n    for(auto e : extensions){\n        if(std::toupper(e.at(0))\
    \ == class_name.at(0)) cap++;\n        if(std::tolower(e.at(0)) == class_name.at(0))\
    \ sm++;\n    }\n    float strength2 = cap - sm;\n    if(strength > strength2){\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else if(strength == strength2){\n        strongest_extension = class_name +\
    \ \".\" + extensions[0];\n    }\n    else{\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmppnksd7jq: /tmp/tmppnksd7jq.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string extension_strength;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension :\
    \ extensions) {\n        if (extension.at(0) == class_name[0]) {\n           \
    \ cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    extension_strength = class_name\
    \ + \".\" + extensions[cap_counter].substr(0, sm_counter);\n    if (cap_counter\
    \ > sm_counter) {\n        extension_strength = extensions[cap_counter].substr(0,\
    \ sm_counter);\n    }\n    return extension_strength;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpxtq6hzmp: /tmp/tmpxtq6hzmp.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension :\
    \ extensions) {\n        cap_counter += extension.at(0) - 'A';\n        sm_counter\
    \ += extension.at(1) - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else {\n        for (auto &extension : extensions) {\n           \
    \ if (strength > extension.at(0) - extension.at(1))\n                strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpffrpqgoa: /tmp/tmpffrpqgoa.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extensions = 0;\n    int sm_extensions\
    \ = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0)\
    \ == class_name[0]) {\n            cap_extensions++;\n        }\n        if (extensions[i].at(1)\
    \ == class_name[1]) {\n            sm_extensions++;\n        }\n    }\n    float\
    \ strength = cap_extensions - sm_extensions;\n    if (strength > 0) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for (int\
    \ i = 1; i < extensions.size(); i++) {\n        if (strength > 0) {\n        \
    \    strongest_extension = strongest_extension + \".\" + extensions[i];\n    \
    \    }\n        if (extensions[i].at(0) == class_name[0]) {\n            cap_extensions++;\n\
    \        }\n        if (extensions[i].at(1) == class_name[1]) {\n            sm_extensions++;\n\
    \        }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpq624up01: /tmp/tmpq624up01.cpp:51: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_extension = 0;\n    int sml_extension = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_extension += ext.length();\n        sml_extension\
    \ += ext.length();\n    }\n    cap_extension = cap_extension / 2;\n    sml_extension\
    \ = sml_extension / 2;\n    if (cap_extension > sml_extension) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    } else {\n        strongest_extension = class_name\
    \ + extensions[1];\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpdvw_jgvs: /tmp/tmpdvw_jgvs.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (auto extension : extensions) {\n        cap_counter += extension.at(0)\
    \ - 'A';\n        sm_counter += extension.at(1) - 'a';\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_1oy0icg: /tmp/tmp_1oy0icg.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123259
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for(auto extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    else {\n\
    \        strongest_extension = class_name;\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmplna88hdi: /tmp/tmplna88hdi.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   std::string strongest_ext;\n    for (auto ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - ext.find_first_not_of(std::string({'A',\
    \ 'B', 'C', 'D'}));\n    }\n    cap_num -= sm_num;\n    if (cap_num > 0) {\n \
    \       strongest_ext = class_name + \".\" + extensions[0];\n        for (int\
    \ i = 1; i < extensions.size(); i++) {\n            strongest_ext += \".\" + extensions[i];\n\
    \        }\n    } else {\n        strongest_ext = class_name;\n    }\n    return\
    \ strongest_ext;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpw29xsfan: /tmp/tmpw29xsfan.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap = class_name.size();\n \
    \   int sm = extensions.size();\n    int strength = cap - sm;\n    std::string\
    \ extension;\n    for (int i = 0; i < sm; i++) {\n        if (extensions[i].compare(class_name)\
    \ == 0) {\n            extension = extensions[i];\n            break;\n      \
    \  }\n    }\n    if (extension.compare(class_name) == 0) {\n        for (int i\
    \ = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name) == 0)\
    \ {\n                extension = extensions[i];\n                break;\n    \
    \        }\n        }\n    }\n    if (extension.compare(class_name) == 0) {\n\
    \        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension.compare(class_name) == 0)\
    \ {\n        for (int i = 0; i < sm; i++) {\n            if (extensions[i].compare(class_name)\
    \ == 0) {\n                extension = extensions[i];\n                break;\n\
    \            }\n        }\n    }\n    if (extension\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp973pgcsl.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp973pgcsl.cpp:126:18:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  126 |     if (extension\n\
    \      |        ~         ^\n      |                  )\n  127 | }\n      | ~\
    \                 \n/tmp/tmp973pgcsl.cpp:126:9: error: could not convert \u2018\
    extension\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n  126 |     if (extension\n      |         ^~~~~~~~~\n\
    \      |         |\n      |         std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmp973pgcsl.cpp:127:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  127 | }\n      | ^\n/tmp/tmp973pgcsl.cpp:127:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660123259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    std::string extension_strength = \"\";\n  \
    \  int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension : extensions)\
    \ {\n        if (extension.at(0) == class_name[0]) {\n            cap_counter++;\n\
    \        }\n        if (extension.at(1) == class_name[1]) {\n            sm_counter++;\n\
    \        }\n    }\n    extension_strength = cap_counter - sm_counter;\n    if\
    \ (extension_strength > 0) {\n        strongest_extension = class_name + \".\"\
    \ + extensions[0];\n    }\n    if (extension_strength == 1) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength ==\
    \ 2) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    if (extension_strength == 3) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 4) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 5) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 6) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 7) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 8) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 9) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 10) {\n     \
    \   strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 11) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 12) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 13) {\n     \
    \   strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 14) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 15) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 16) {\n     \
    \   strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if (extension_strength\
    \ == 17) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (extension_strength == 18) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (extension_strength == 19) {\n     \
    \   strongest_extension = class_name + \".\" + extensions[0];\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptfwrg4v0.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmptfwrg4v0.cpp:34:28:\
    \ error: no match for \u2018operator>\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n  \
    \ 34 |     if (extension_strength > 0) {\n      |         ~~~~~~~~~~~~~~~~~~ ^\
    \ ~\n      |         |                    |\n      |         |               \
    \     int\n      |         std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptfwrg4v0.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmptfwrg4v0.cpp:34:30:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   34\
    \ |     if (extension_strength > 0) {\n      |                              ^\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmptfwrg4v0.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmptfwrg4v0.cpp:34:30: note:   mismatched types \u2018const"
  stdout: ''
  timestamp: 1660123260
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - ext.length();\n    }\n    double strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::min_element(extensions.begin(), extensions.end(), [&](std::string &a, std::string\
    \ &b) { return a.length() < b.length(); }));\n    if (strength > 0) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[index];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpnuhaofte: /tmp/tmpnuhaofte.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for(auto extension : extensions){\n        if(extension.at(0) == class_name.at(0))\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name.at(1)){\n\
    \            sm_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0){\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength == 0){\n        strongest_extension\
    \ = class_name;\n    }\n    else if(strength < 0){\n        for(auto extension\
    \ : extensions){\n            if(extension.at(0) == class_name.at(0)) {\n    \
    \            cap_counter++;\n            }\n            if(extension.at(1) ==\
    \ class_name.at(1)){\n                sm_counter++;\n            }\n        }\n\
    \        double strength = cap_counter - sm_counter;\n        if(strength > 0){\n\
    \            strongest_extension = class_name + \".\" + extensions[0];\n     \
    \   }\n        else if(strength == 0){\n            strongest_extension = class_name;\n\
    \        }\n        else if(strength < 0){\n            strongest_extension =\
    \ class_name;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_y972apy: /tmp/tmp_y972apy.cpp:63: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_extension = 0;\n    int sml_extension = 0;\n\
    \    for (auto &extension : extensions) {\n        if (extension == class_name)\
    \ {\n            strongest_extension = class_name;\n            break;\n     \
    \   }\n        if (std::toupper(extension[0]) == std::toupper(class_name[0]))\
    \ {\n            cap_extension++;\n        }\n        if (std::tolower(extension[0])\
    \ == std::tolower(class_name[0])) {\n            sml_extension++;\n        }\n\
    \    }\n    double strength = cap_extension - sml_extension;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpvsdz_e0d: /tmp/tmpvsdz_e0d.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for (auto &extension :\
    \ extensions) {\n        int cap = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {return std::toupper(c) == c;});\n        int sm = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {return std::tolower(c) == c;});\n        float\
    \ strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  \n    return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpjqek7bjf: /tmp/tmpjqek7bjf.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        if (extension.at(0) == class_name[0]) {\n         \
    \   cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsmddcukz: /tmp/tmpsmddcukz.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ e : extensions) {\n        cap += e.length();\n        sm += e.length();\n \
    \   }\n    float strength = cap - sm;\n    for (auto e : extensions) {\n     \
    \   if (e.length() == strongest_extension.length()) {\n            if (e.length()\
    \ < strongest_extension.length()) {\n                strongest_extension = e;\n\
    \            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpc3ga6as2: /tmp/tmpc3ga6as2.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n  \
    \  }\n    double strength = cap_num - sm_num;\n    double max_strength = -1;\n\
    \    for (auto &ext : extensions) {\n        double cur_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (cur_strength >\
    \ max_strength) {\n            max_strength = cur_strength;\n        }\n    }\n\
    \    if (max_strength == -1) {\n        return class_name;\n    }\n    double\
    \ max_strength_frac = max_strength / cap_num;\n    double min_strength_frac =\
    \ max_strength_frac / sm_num;\n    double max_strength_frac_2 = max_strength_frac\
    \ / 2;\n    double min_strength_frac_2 = min_strength_frac / 2;\n    double max_strength_frac_3\
    \ = max_strength_frac / 3;\n    double min_strength_frac_3 = min_strength_frac\
    \ / 3;\n    double max_strength_frac_4 = max_strength_frac / 4;\n    double min_strength_frac_4\
    \ = min_strength_frac / 4;\n    double max_strength_frac_5 = max_strength_frac\
    \ / 5;\n    double min_strength_frac_5 = min_strength_frac / 5;\n    double max_strength_frac_6\
    \ = max_strength_frac / 6;\n    double min_strength_frac_6 = min_strength_frac\
    \ / 6;\n    double max_strength_frac_7 = max_strength_frac / 7;\n    double min_strength_frac_7\
    \ = min_strength_frac / 7;\n    double max_strength_frac_8 = max_strength_frac\
    \ / 8;\n    double min_strength_frac_8 = min_strength_frac / 8;\n    double max_strength_frac_9\
    \ = max_strength_frac / 9;\n    double min_strength_frac_9 = min_strength_frac\
    \ / 9;\n    double max_strength_frac_10 = max_strength_frac / 10;\n    double\
    \ min_strength_frac_10 = min_strength_frac / 10;\n    double max_strength_frac_11\
    \ = max_strength_frac / 11;\n    double min_strength_frac_11 = min_strength_frac\
    \ / 11;\n    double max_strength_frac_12 = max_strength_frac / 12;\n    double\
    \ min_strength_frac_12 = min_strength_frac / 12;\n    double max_strength_fra\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmy5ydi5p.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpmy5ydi5p.cpp:23:78:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find_first_not_of(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   23 |         sm_num +=\
    \ ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n      |     \
    \                                                                         ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmy5ydi5p.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2673:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2673 |       find_first_not_of(const basic_string&\
    \ __str, size_type __pos = 0) const\n      |       ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2673:45:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019} to \u2018const std::__cxx11::basic_string<char>&\u2019\n 2673 |   \
    \    find_first_not_of(const basic_string& __str, siz"
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension;\n    \n    for(auto extension : extensions) {\n       \
    \ \n        auto cap = extension.find_first_of('A');\n        auto sm = extension.find_first_of('l');\n\
    \        \n        auto strength = cap - sm;\n        \n        if(strength ==\
    \ -1) {\n            strongest_extension = class_name + extension;\n         \
    \   break;\n        }\n        \n        if(strength > strongest_extension.size())\
    \ strongest_extension = class_name + extension;\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpgwtq5vh1: /tmp/tmpgwtq5vh1.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n  \
    \  }\n    double strength = cap_num - sm_num;\n    int strongest_ext = 0;\n  \
    \  for (auto &ext : extensions) {\n        if (ext.length() == strength) {\n \
    \           strongest_ext = ext.length();\n            break;\n        }\n   \
    \ }\n    return class_name + \".\" + extensions[strongest_ext];\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0df9_ord.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp0df9_ord.cpp:23:78:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find_first_not_of(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   23 |         sm_num +=\
    \ ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n      |     \
    \                                                                         ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp0df9_ord.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2673:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2673 |       find_first_not_of(const basic_string&\
    \ __str, size_type __pos = 0) const\n      |       ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2673:45:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019} to \u2018const std::__cxx11::basic_string<char>&\u2019\n 2673 |   \
    \    find_first_not_of(const basic_string& __str, siz"
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (auto &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    \n    float strength = cap - sm;\n    \n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strongest_extension.length()) {\n           \
    \ if (ext.length() < strongest_extension.length()) {\n                strongest_extension\
    \ = class_name + ext;\n            }\n        }\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpkcok6pm1: /tmp/tmpkcok6pm1.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions) {\n  \
    \      if(ext.length() == strength) {\n            strongest_extension = class_name\
    \ + ext;\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbkus2w7z: /tmp/tmpbkus2w7z.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   std::string strongest_ext;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length();\n    }\n    cap_num -= sm_num;\n\
    \    if (cap_num > 0) {\n        strongest_ext = class_name + \".\";\n       \
    \ for (int i = 0; i < cap_num; i++) {\n            strongest_ext += extensions[0];\n\
    \        }\n    }\n    return strongest_ext;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpf16tu1xm: /tmp/tmpf16tu1xm.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extension = 0;\n    int sm_extension\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_extension += (extension.at(0)\
    \ - 'A');\n        sm_extension += (extension.at(1) - 'a');\n    }\n    float\
    \ strength = cap_extension - sm_extension;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto extension : extensions)\
    \ {\n        if (strength == (extension.at(0) - 'A') + (extension.at(1) - 'a'))\
    \ {\n            strongest_extension = class_name + \".\" + extension;\n     \
    \   }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpz5a5ppyz: /tmp/tmpz5a5ppyz.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length();\n    }\n    cap\
    \ = cap - sm;\n    if (cap > 0) {\n        strongest_extension = class_name +\
    \ \".\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() < cap) {\n            strongest_extension = class_name + \".\"\
    \ + ext;\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpyy2_bpta: /tmp/tmpyy2_bpta.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap += extension.at(0) - 'A';\n        sm += extension.at(1)\
    \ - 'a';\n    }\n    float strength = cap - sm;\n    if (strength > 0) {\n   \
    \     strongest_extension = class_name + \".\" + extensions[0];\n    }\n    else\
    \ {\n        std::sort(extensions.begin(), extensions.end(), [](std::string &a,\
    \ std::string &b){\n            return a.at(0) - b.at(0) < 0;\n        });\n \
    \       strongest_extension = class_name + \".\" + extensions[0];\n    }\n   \
    \ return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpu63rofrd: /tmp/tmpu63rofrd.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    \n    // Your code here\n    \n\
    \    return class_name + \".\" + extensions[0];\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpc_hz91ez: /tmp/tmpc_hz91ez.cpp:27: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = class_name;\n    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto\
    \ extension : extensions) {\n        if (extension.at(0) == extension.at(1)) {\n\
    \            cap_counter++;\n        }\n        else {\n            sml_counter++;\n\
    \        }\n    }\n    if (cap_counter > sml_counter) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + extensions[1];\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqadfjhdr: /tmp/tmpqadfjhdr.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n\
    \    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto i : extensions)\
    \ {\n        if (i[0] == i[1]) {\n            continue;\n        }\n        if\
    \ (strength > 0) {\n            if (i[0] < i[1]) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[0];\n                break;\n            }\n\
    \        }\n        if (i[0] > i[1]) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[1];\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmphhzmx6p5: /tmp/tmphhzmx6p5.cpp:51: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        if (extension.at(0) == class_name[0]) {\n         \
    \   cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpsmddcukz: /tmp/tmpsmddcukz.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n\
    \    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto i : extensions)\
    \ {\n        if (i[0] == i[1]) {\n            continue;\n        }\n        if\
    \ (strength > 0) {\n            if (i[0] < i[1]) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[0];\n                break;\n            }\n\
    \            if (i[0] > i[1]) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[1];\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpty05dyy1: /tmp/tmpty05dyy1.cpp:51: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - ext.find_first_of(\"abcdefghijklmnopqrstuvwxyz\");\n\
    \    }\n    double strength = cap_num - sm_num;\n    double max_strength = std::numeric_limits<double>::max();\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length();\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n    }\n    double max_strength_extension = max_strength;\n    for\
    \ (auto &ext : extensions) {\n        double ext_strength = ext.length();\n  \
    \      if (ext_strength == max_strength_extension) {\n            return class_name\
    \ + \".\" + ext;\n        }\n    }\n    return class_name;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp4zpfxfew: /tmp/tmp4zpfxfew.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0) == class_name[0])\
    \ {\n            cap = cap + 1;\n        }\n        if (extensions[i].at(1) ==\
    \ class_name[1]) {\n            sm = sm + 1;\n        }\n    }\n    if (cap -\
    \ sm == 0) {\n        strongest_extension = class_name;\n    }\n    else {\n \
    \       strongest_extension = class_name + extensions[cap - sm];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpw6329lky: /tmp/tmpw6329lky.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &extension : extensions)\
    \ {\n        if (strength > 0) {\n            if (extension.at(0) != extension.at(1))\
    \ {\n                strongest_extension = class_name + \".\" + extensions[0];\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpxmswnf44: /tmp/tmpxmswnf44.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            if (strength == extensions[i].at(0)\
    \ && extensions[i].at(1) == extensions[i - 1]) {\n                strongest_extension\
    \ = class_name + \".\" + extensions[i];\n            }\n        }\n    }\n   \
    \ return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dy2jhk6.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7dy2jhk6.cpp:34:72:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   34 |             if (strength == extensions[i].at(0) && extensions[i].at(1)\
    \ == extensions[i - 1]) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7dy2jhk6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7dy2jhk6.cpp:34:91:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   34 |             if (strength == extensions[i].at(0)\
    \ && extensions[i].at(1) == extensions[i - 1]) {\n      |                    \
    \                                                                       ^\nIn\
    \ file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7dy2jhk6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<"
  stdout: ''
  timestamp: 1660123261
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string extension_strength;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension :\
    \ extensions) {\n        auto cap = extension.substr(0, CAP);\n        auto sm\
    \ = extension.substr(CAP, SM);\n        if (cap == class_name) {\n           \
    \ cap_counter++;\n        }\n        if (sm == class_name) {\n            sm_counter++;\n\
    \        }\n    }\n    extension_strength = class_name + \".\" + extensions[cap_counter].substr(CAP\
    \ - sm_counter, SM);\n    if (extension_strength == class_name) {\n        extension_strength\
    \ = extensions[cap_counter].substr(CAP - sm_counter, SM);\n    }\n    return extension_strength;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsixzmh25.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpsixzmh25.cpp:24:40:\
    \ error: \u2018CAP\u2019 was not declared in this scope\n   24 |         auto\
    \ cap = extension.substr(0, CAP);\n      |                                   \
    \     ^~~\n/tmp/tmpsixzmh25.cpp:25:41: error: \u2018SM\u2019 was not declared\
    \ in this scope\n   25 |         auto sm = extension.substr(CAP, SM);\n      |\
    \                                         ^~\n/tmp/tmpsixzmh25.cpp:33:76: error:\
    \ \u2018CAP\u2019 was not declared in this scope\n   33 |     extension_strength\
    \ = class_name + \".\" + extensions[cap_counter].substr(CAP - sm_counter, SM);\n\
    \      |                                                                     \
    \       ^~~\n/tmp/tmpsixzmh25.cpp:33:94: error: \u2018SM\u2019 was not declared\
    \ in this scope\n   33 |     extension_strength = class_name + \".\" + extensions[cap_counter].substr(CAP\
    \ - sm_counter, SM);\n      |                                                \
    \                                              ^~\n"
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &e : extensions) {\n        cap += e.size();\n        sm += e.size();\n    }\n\
    \    float strength = cap - sm;\n    for (auto &e : extensions) {\n        if\
    \ (e.size() == strongest_extension.size()) {\n            if (e.size() < strongest_extension.size())\
    \ {\n                strongest_extension = e;\n            }\n        }\n    \
    \    else if (e.size() > strongest_extension.size()) {\n            if (e.size()\
    \ == strength) {\n                strongest_extension = e;\n            }\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpnx1zz67c: /tmp/tmpnx1zz67c.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0) == class_name[0])\
    \ {\n            cap = cap + 1;\n        }\n        if (extensions[i].at(1) ==\
    \ class_name[1]) {\n            sm = sm + 1;\n        }\n    }\n    if (cap -\
    \ sm > 1) {\n        for (int i = 0; i < extensions.size(); i++) {\n         \
    \   if (extensions[i].at(0) == class_name[0]) {\n                cap = cap - 1;\n\
    \            }\n            if (extensions[i].at(1) == class_name[1]) {\n    \
    \            sm = sm - 1;\n            }\n        }\n    }\n    strongest_extension\
    \ = class_name + \".\" + extensions[cap - sm];\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp3u9do9et: /tmp/tmp3u9do9et.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for (auto extension : extensions) {\n        if (extension.at(0) == class_name.at(0))\
    \ {\n            cap_counter++;\n        }\n        if (extension.at(1) == class_name.at(1))\
    \ {\n            sm_counter++;\n        }\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + extensions[0];\n    }\n    else\
    \ if (cap_counter < sm_counter) {\n        strongest_extension = class_name +\
    \ extensions[1];\n    }\n    else {\n        strongest_extension = class_name\
    \ + extensions[2];\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmplf7u83yh: /tmp/tmplf7u83yh.cpp:45: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ extension_str;\n    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap_num += ext.length();\n        sm_num += ext.length() - ext.find_first_not_of(ext.begin(),\
    \ ext.end());\n    }\n    double strength = cap_num - sm_num;\n    double max_strength\
    \ = -1;\n    for (auto &ext : extensions) {\n        if (ext.length() > max_strength)\
    \ {\n            max_strength = ext.length();\n            extension_str = ext;\n\
    \        }\n    }\n    return class_name + \".\" + extension_str;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98gq6d95.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp98gq6d95.cpp:25:78:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::find_first_not_of(std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   25 |         sm_num +=\
    \ ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n      |     \
    \                                                                         ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp98gq6d95.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2673:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2673 |       find_first_not_of(const basic_string&\
    \ __str, size_type __pos = 0) const\n      |       ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2673:45:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019} to \u2018const std::__cxx11::basic_string<char>&\u2019\n 2673 |   \
    \    find_first_not_of(const basic_string& __str, siz"
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0) - 'A';\n        sm\
    \ += extension.at(1) - 'a';\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            if (strength > extensions[i].at(0) - extensions[i].at(1)){\n\
    \                strongest_extension = class_name + \".\" + extensions[i];\n \
    \           }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0xc4uhq8: /tmp/tmp0xc4uhq8.cpp:44: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto &ext : extensions) {\n        if (ext.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if (ext.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    return class_name + \".\"\
    \ + extensions[(cap_counter - sm_counter)];\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpomqmn13r: /tmp/tmpomqmn13r.cpp:34: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else if (cap - sm == 0)\n        strongest_extension = class_name + extensions[0];\n\
    \    else\n        strongest_extension = class_name + extensions[1];\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpey300lho: /tmp/tmpey300lho.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap_num += extension.at(0) - 'A';\n    \
    \    sm_num += extension.at(1) - 'a';\n    }\n    double strength = cap_num -\
    \ sm_num;\n    if (strength > 0) {\n        strongest_extension = class_name +\
    \ \".\" + extensions[0];\n    }\n    for (auto &extension : extensions) {\n  \
    \      if (strength > 0) {\n            strongest_extension = class_name + \"\
    .\" + extension;\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpj9_pkovn: /tmp/tmpj9_pkovn.cpp:41: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_extension_strength = 0;\n    int sm_extension_strength = 0;\n   \
    \ for (auto extension : extensions) {\n        cap_extension_strength += (extension.at(0)\
    \ - 'A');\n        sm_extension_strength += (extension.at(1) - 'a');\n    }\n\
    \    if (cap_extension_strength > sm_extension_strength) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    } else {\n        strongest_extension = class_name\
    \ + extensions[1];\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpx99jmmhg: /tmp/tmpx99jmmhg.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - cap;\n    }\n    cap = cap - sm;\n    std::string strongest_extension_name\
    \ = \"\";\n    for (auto &ext : extensions) {\n        if (ext.length() == cap)\
    \ {\n            strongest_extension_name = class_name + \".\" + ext;\n      \
    \      break;\n        }\n    }\n    return strongest_extension_name;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmph_lea_ta: /tmp/tmph_lea_ta.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string result;\n    std::string\
    \ extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto e : extensions)\
    \ {\n        cap += e.size();\n        sm += e.find_first_not_of('a') - e.find_first_not_of('A');\n\
    \    }\n    cap = cap - sm;\n    cap = cap / extensions.size();\n    if (cap >\
    \ 0) {\n        extension = class_name + extensions[extensions.size() - 1];\n\
    \        extension = extension.substr(0, extension.find_last_of('.'));\n     \
    \   result = class_name + \".\" + extension;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpqr2uftx9: /tmp/tmpqr2uftx9.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &extension : extensions) {\n        if(extension.at(0) == class_name[0]) {\n\
    \            cap = cap + 1;\n        }\n        if(extension.at(1) == class_name[0])\
    \ {\n            sm = sm + 1;\n        }\n    }\n    float strength = cap - sm;\n\
    \    if(strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    else if(strength < 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpp814g82s: /tmp/tmpp814g82s.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sml_counter = 0;\n \
    \   for(auto &extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sml_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sml_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    else if(strength\
    \ == 0) {\n        strongest_extension = class_name;\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp36q1vbnf: /tmp/tmp36q1vbnf.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto ext : extensions){\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    \n    for(auto ext\
    \ : extensions){\n        if(ext.length() > strongest_extension.length()){\n \
    \           strongest_extension = ext;\n        }\n    }\n    \n    return class_name\
    \ + \".\" + strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_ssotvaz: /tmp/tmp_ssotvaz.cpp:43: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (size_t i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpneimwimc: /tmp/tmpneimwimc.cpp:42: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension;\n    int cap_extensions = 0;\n    int sm_extensions = 0;\n\
    \    \n    for (auto extension : extensions) {\n        cap_extensions += (std::toupper(extension[0])\
    \ - std::toupper(extension[1]));\n        sm_extensions += (std::tolower(extension[0])\
    \ - std::tolower(extension[1]));\n    }\n    \n    if (cap_extensions > sm_extensions)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\
    \ else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp_aawq_nl: /tmp/tmp_aawq_nl.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123262
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    int index = -1;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.length() == strength) {\n            index\
    \ = extensions.find(ext);\n        }\n    }\n    if (index != -1) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[index];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi1s65g2y.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpi1s65g2y.cpp:32:32:\
    \ error: \u2018class std::vector<std::__cxx11::basic_string<char> >\u2019 has\
    \ no member named \u2018find\u2019\n   32 |             index = extensions.find(ext);\n\
    \      |                                ^~~~\n"
  stdout: ''
  timestamp: 1660123262
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sml_counter =\
    \ 0;\n    for (auto extension : extensions) {\n        cap_counter = cap_counter\
    \ + extension.at(0) - 'A';\n        sml_counter = sml_counter + extension.at(1)\
    \ - 'a';\n    }\n    double strength = cap_counter - sml_counter;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp0_joqdhb: /tmp/tmp0_joqdhb.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].at(0)\
    \ == class_name[0]){\n            cap = cap + 1;\n        }\n        if(extensions[i].at(1)\
    \ == class_name[1]){\n            sm = sm + 1;\n        }\n    }\n    \n    if(cap\
    \ - sm > 0){\n        strongest_extension = class_name + \".\" + extensions[cap\
    \ - sm];\n    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpcd9lc67o: /tmp/tmpcd9lc67o.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string extension_strength;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto extension :\
    \ extensions) {\n        if (extension.at(0) == class_name[0]) {\n           \
    \ cap_counter++;\n        }\n        if (extension.at(1) == class_name[1]) {\n\
    \            sm_counter++;\n        }\n    }\n    extension_strength = class_name\
    \ + \".\" + extensions[cap_counter - sm_counter];\n    return extension_strength;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp9wwncw61: /tmp/tmp9wwncw61.cpp:36: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    \n    for(auto &extension : extensions) {\n\
    \        auto cap = extension.find_first_of('A');\n        auto sm = extension.find_first_of('l');\n\
    \        \n        auto strength = cap - sm;\n        \n        if(strength >\
    \ 0) {\n            strongest_extension = class_name + \".\" + extension;\n  \
    \          break;\n        }\n    }\n    \n    return strongest_extension;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpegw2bxpk: /tmp/tmpegw2bxpk.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpul2j53e1: /tmp/tmpul2j53e1.cpp:41: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0) ==\
    \ class_name[0]) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name[1]) {\n            sm_counter++;\n        }\n    }\n    float\
    \ strength = cap_counter - sm_counter;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    if (strength == 1) {\n   \
    \     strongest_extension = class_name + \".\" + extensions[0];\n    }\n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp6itdjj6u: /tmp/tmp6itdjj6u.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto &i : extensions)\
    \ {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    double strength\
    \ = cap - sm;\n    for(auto &i : extensions) {\n        if(strength == i[0]-'A'\
    \ && i[1]-'a') {\n            strongest_extension = class_name + \".\" + i[0];\n\
    \            break;\n        }\n    }\n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp22vd73wr: /tmp/tmp22vd73wr.cpp:39: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for (auto extension : extensions) {\n        if (extension == class_name) {\n\
    \            strongest_extension = class_name;\n            break;\n        }\n\
    \        if (std::toupper(extension[0]) == std::toupper(class_name[0])) {\n  \
    \          cap_counter++;\n        }\n        if (std::tolower(extension[0]) ==\
    \ std::tolower(class_name[0])) {\n            sm_counter++;\n        }\n    }\n\
    \    if (cap_counter > sm_counter) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpd3gqnp6i: /tmp/tmpd3gqnp6i.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto extension\
    \ : extensions) {\n        auto cap = extension.substr(0, CAP);\n        auto\
    \ sm = extension.substr(CAP, SM);\n        auto cap_counter = std::count_if(cap.cbegin(),\
    \ cap.cend(), isupper);\n        auto sm_counter = std::count_if(sm.cbegin(),\
    \ sm.cend(), islower);\n        if(cap_counter > sm_counter) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8jmyxir.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpb8jmyxir.cpp:24:40:\
    \ error: \u2018CAP\u2019 was not declared in this scope\n   24 |         auto\
    \ cap = extension.substr(0, CAP);\n      |                                   \
    \     ^~~\n/tmp/tmpb8jmyxir.cpp:25:41: error: \u2018SM\u2019 was not declared\
    \ in this scope\n   25 |         auto sm = extension.substr(CAP, SM);\n      |\
    \                                         ^~\n"
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension :\
    \ extensions) {\n        cap_counter += extension.at(0) - 'A';\n        sm_counter\
    \ += extension.at(1) - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n\
    \    double max_strength = std::max(cap_counter, sm_counter);\n    for(auto &extension\
    \ : extensions) {\n        if(extension.at(0) - 'A' == cap_counter && extension.at(1)\
    \ - 'a' == sm_counter) {\n            strongest_extension = class_name + \".\"\
    \ + extension;\n            break;\n        }\n    }\n    if(strongest_extension.empty())\
    \ {\n        for(auto &extension : extensions) {\n            if(extension.at(0)\
    \ - 'A' == cap_counter && extension.at(1) - 'a' == sm_counter) {\n           \
    \     strongest_extension = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;\n}\nint main()\
    \ {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpcvx71m3v: /tmp/tmpcvx71m3v.cpp:47: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ result;\n    int cap = 0;\n    int sm = 0;\n    for (auto ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length();\n    }\n    double\
    \ strength = cap - sm;\n    double max_strength = std::max_element(extensions.begin(),\
    \ extensions.end()) - extensions.begin();\n    if (strength == max_strength) {\n\
    \        for (auto ext : extensions) {\n            if (ext.length() == cap) {\n\
    \                result = class_name + ext;\n                break;\n        \
    \    }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp5_i35gjt: /tmp/tmp5_i35gjt.cpp:42: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for (auto e : extensions) {\n        cap += e[0]-'A';\n        sm +=\
    \ e[1]-'a';\n    }\n    \n    float strength = cap - sm;\n    \n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    \n    for (auto e : extensions) {\n        if (e[0]-'A' > strongest_extension[0]-'A')\
    \ {\n            strongest_extension = class_name + \".\" + e;\n        }\n  \
    \  }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp2ebu41c7: /tmp/tmp2ebu41c7.cpp:49: int main(): Assertion `candidate(("__YESIMHERE"),
    (std::vector<std::string>({(std::string)"t", (std::string)"eMptY", (std::string)"nothing",
    (std::string)"zeR00", (std::string)"NuLl__", (std::string)"123NoooneB321"})))
    == ("__YESIMHERE.NuLl__")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension\
    \ : extensions) {\n        cap_counter += extension.at(0) - 'A';\n        sm_counter\
    \ += extension.at(1) - 'a';\n    }\n    double strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength == extension.at(0)\
    \ - 'A' && strength == extension.at(1) - 'a') {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpr5h7qaq4: /tmp/tmpr5h7qaq4.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto i : extensions)\
    \ {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else {\n        for (auto i : extensions)\
    \ {\n            if (i[0] == extensions[0][0] && i[1] == extensions[0][1]) {\n\
    \                strongest_extension = class_name + \".\" + i;\n             \
    \   break;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpzzugt5j8: /tmp/tmpzzugt5j8.cpp:44: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n    if (strength > 0) {\n       \
    \ strongest_extension = class_name + extensions[index];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpgrb80wvy: /tmp/tmpgrb80wvy.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ \n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for(int i = 0; i < extensions.size(); i++){\n        cap += (extensions[i].size())\
    \ - 1;\n        sm += (extensions[i].size()) - 1;\n    }\n    \n    double strength\
    \ = cap - sm;\n    \n    for(int i = 0; i < extensions.size(); i++){\n       \
    \ if(extensions[i].size() == cap){\n            strongest_extension += class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    \n    if(strongest_extension\
    \ == \"\"){\n        return strongest_extension;\n    }\n    \n    for(int i =\
    \ 0; i < extensions.size(); i++){\n        if(extensions[i].size() == sm){\n \
    \           strongest_extension += \".\" + extensions[i];\n        }\n    }\n\
    \    \n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpvjwor78q: /tmp/tmpvjwor78q.cpp:53: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123263
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_extension_strength = 0;\n    int sml_extension_strength\
    \ = 0;\n    for (auto extension : extensions) {\n        auto cap_extension =\
    \ extension.substr(0, CAP);\n        auto sml_extension = extension.substr(CAP,\
    \ SM);\n        cap_extension_strength = std::max(cap_extension_strength, std::stoi(cap_extension));\n\
    \        sml_extension_strength = std::max(sml_extension_strength, std::stoi(sml_extension));\n\
    \    }\n    cap_extension_strength = cap_extension_strength - sml_extension_strength;\n\
    \    if (cap_extension_strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (cap_extension_strength == 0 && sml_extension_strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    if (cap_extension_strength == 0 && sml_extension_strength == 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[2];\n    }\n  \
    \  return strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5aefeyl.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpm5aefeyl.cpp:24:50:\
    \ error: \u2018CAP\u2019 was not declared in this scope\n   24 |         auto\
    \ cap_extension = extension.substr(0, CAP);\n      |                         \
    \                         ^~~\n/tmp/tmpm5aefeyl.cpp:25:52: error: \u2018SM\u2019\
    \ was not declared in this scope\n   25 |         auto sml_extension = extension.substr(CAP,\
    \ SM);\n      |                                                    ^~\n"
  stdout: ''
  timestamp: 1660123263
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    std::string\
    \ extension_strongest = \"\";\n    for (auto extension : extensions) {\n     \
    \   if (extension == class_name) {\n            strongest_extension = class_name;\n\
    \            break;\n        }\n        cap_counter++;\n        sm_counter++;\n\
    \    }\n    if (cap_counter > sm_counter) {\n        for (auto extension : extensions)\
    \ {\n            if (extension == class_name) {\n                strongest_extension\
    \ = class_name;\n                break;\n            }\n        }\n    }\n   \
    \ for (auto extension : extensions) {\n        if (extension == class_name) {\n\
    \            strongest_extension = class_name;\n            break;\n        }\n\
    \        cap_counter++;\n        sm_counter++;\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        for (auto extension : extensions) {\n            if (extension ==\
    \ class_name) {\n                strongest_extension = class_name;\n         \
    \       break;\n            }\n        }\n    }\n    for (auto extension : extensions)\
    \ {\n        if (extension == class_name) {\n            strongest_extension =\
    \ class_name;\n            break;\n        }\n        cap_counter++;\n       \
    \ sm_counter++;\n    }\n    if (cap_counter > sm_counter) {\n        for (auto\
    \ extension : extensions) {\n            if (extension == class_name) {\n    \
    \            strongest_extension = class_name;\n                break;\n     \
    \       }\n        }\n    }\n    for (auto extension : extensions) {\n       \
    \ if (extension == class_name) {\n            strongest_extension = class_name;\n\
    \            break;\n        }\n        cap_counter++;\n        sm_counter++;\n\
    \    }\n    if (cap_counter > sm_counter) {\n        for (auto extension : extensions)\
    \ {\n            if (extension == class_name) {\n                strongest_extension\
    \ = class_name;\n                break;\n            }\n        }\n    }\n   \
    \ for (auto extension : extensions) {\n        if (extension == class_name) {\n\
    \            strongest_extension = class_name;\n            break;\n        }\n\
    \        cap_counter++;\n        sm_counter++;\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        for (auto extension : extensions) {\n            if (extension ==\
    \ class_name) {\n                strongest_extension = class_name;\n         \
    \       break;\n            }\n        }\n    }\n    for (auto extension : extensions)\
    \ {\n        if (extension == class_name) {\n            strongest_extension =\
    \ class_name;\n            break;\n        }\n        cap_counter++;\n       \
    \ sm_counter++;\n    }\n    if (cap_counter > sm_counter) {\n        for (auto\
    \ extension : extensions) {\n            if (extension == class_name) {\n    \
    \            strongest_extension = class_name;\n                break;\n     \
    \       }\n        }\n    }\n    for (auto extension : extensions) {\n       \
    \ if (extension == class_name) {\n            stron\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ni9mm8i.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp3ni9mm8i.cpp:122:13:\
    \ error: \u2018stron\u2019 was not declared in this scope; did you mean \u2018\
    strtok\u2019?\n  122 |             stron\n      |             ^~~~~\n      | \
    \            strtok\n/tmp/tmp3ni9mm8i.cpp:124:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  124 | int main() {\n     \
    \ |            ^\n/tmp/tmp3ni9mm8i.cpp:135:1: error: expected \u2018}\u2019 at\
    \ end of input\n  135 | }\n      | ^\n/tmp/tmp3ni9mm8i.cpp:120:39: note: to match\
    \ this \u2018{\u2019\n  120 |     for (auto extension : extensions) {\n      |\
    \                                       ^\n/tmp/tmp3ni9mm8i.cpp:135:1: error:\
    \ expected \u2018}\u2019 at end of input\n  135 | }\n      | ^\n/tmp/tmp3ni9mm8i.cpp:19:94:\
    \ note: to match this \u2018{\u2019\n   19 | std::string Strongest_Extension(std::string\
    \ class_name, std::vector<std::string> extensions) {\n      |                \
    \                                                                            \
    \  ^\n/tmp/tmp3ni9mm8i.cpp:135:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  135 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int strongest_extension_strength = 0;\n   \
    \ \n    for(int i = 0; i < extensions.size(); i++) {\n        std::string extension\
    \ = extensions[i];\n        \n        int extension_strength = extension.find_first_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n        \n        if(extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    \n    return class_name\
    \ + \".\" + strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpgv3bj7e2: /tmp/tmpgv3bj7e2.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = class_name;\n    int cap = 0;\n    int sm = 0;\n    for\
    \ (auto &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ += \".\";\n    }\n    strongest_extension += extensions[0];\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbljd8kuq: /tmp/tmpbljd8kuq.cpp:37: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - ext.length();\n    }\n    double strength = cap - sm;\n    int max_strength\
    \ = -1;\n    for (auto &ext : extensions) {\n        if (ext.length() > max_strength)\
    \ {\n            max_strength = ext.length();\n        }\n    }\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == max_strength) {\n        \
    \    if (ext.compare(0, cap, class_name, 0, cap) == 0) {\n                strongest_extension\
    \ = class_name + ext;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpn0vv74r6: /tmp/tmpn0vv74r6.cpp:46: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strongest_extension.length()) {\n           \
    \ if (ext.compare(strongest_extension) == 0) {\n                strongest_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpdlp9gut3: /tmp/tmpdlp9gut3.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - cap_num;\n    }\n    float strength = cap_num - sm_num;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpm0adnkw3: /tmp/tmpm0adnkw3.cpp:41: int main(): Assertion `candidate(("Boku123"),
    (std::vector<std::string>({(std::string)"nani", (std::string)"NazeDa", (std::string)"YEs.WeCaNe",
    (std::string)"32145tggg"}))) == ("Boku123.YEs.WeCaNe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   std::string strongest_ext;\n    for (auto ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - cap_num;\n    }\n    if (cap_num\
    \ - sm_num > 0) {\n        auto cap_num = cap_num - sm_num;\n        auto sm_num\
    \ = sm_num;\n        auto cap_pos = cap_num / 2;\n        auto sm_pos = sm_num\
    \ / 2;\n        auto cap_ext = extensions[cap_pos];\n        auto sm_ext = extensions[sm_pos];\n\
    \        auto cap_ext1 = extensions[cap_pos - 1];\n        auto sm_ext1 = extensions[sm_pos\
    \ - 1];\n        if (cap_ext < sm_ext) {\n            strongest_ext = class_name\
    \ + cap_ext;\n        } else {\n            strongest_ext = class_name + sm_ext;\n\
    \        }\n        if (cap_ext1 < sm_ext1) {\n            strongest_ext += cap_ext1;\n\
    \        } else {\n            strongest_ext += sm_ext1;\n        }\n    } else\
    \ {\n        strongest_ext = class_name;\n    }\n    return strongest_ext;\n}\n\
    int main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihi0ino4.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmpihi0ino4.cpp:27:24:\
    \ error: use of \u2018cap_num\u2019 before deduction of \u2018auto\u2019\n   27\
    \ |         auto cap_num = cap_num - sm_num;\n      |                        ^~~~~~~\n\
    /tmp/tmpihi0ino4.cpp:28:23: error: use of \u2018sm_num\u2019 before deduction\
    \ of \u2018auto\u2019\n   28 |         auto sm_num = sm_num;\n      |        \
    \               ^~~~~~\n"
  stdout: ''
  timestamp: 1660123263
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = class_name;\n    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap_counter += extension.at(0) - 'A';\n\
    \        sml_counter += extension.at(1) - 'a';\n    }\n    if (cap_counter > sml_counter)\
    \ {\n        strongest_extension += \".\";\n    }\n    strongest_extension +=\
    \ extensions[0];\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbl312qwc: /tmp/tmpbl312qwc.cpp:35: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto\
    \ ext : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length();\n\
    \    }\n    float strength = cap_num - sm_num;\n    if (strength > 0) {\n    \
    \    strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for\
    \ (auto ext : extensions) {\n        if (ext.length() > strongest_extension.length())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmp956ld3v6: /tmp/tmp956ld3v6.cpp:40: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    std::string strongest_extension\
    \ = class_name + \".\";\n    std::string strongest_extension_strength = \"-1\"\
    ;\n    int strongest_extension_strength_counter = 0;\n    for (auto extension\
    \ : extensions) {\n        int extension_strength = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::toupper(c) - std::toupper(std::tolower(c));\n\
    \        });\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension_strength_counter\
    \ = 1;\n        } else if (extension_strength == strongest_extension_strength)\
    \ {\n            strongest_extension_strength_counter++;\n        }\n    }\n \
    \   if (strongest_extension_strength_counter == 1) {\n        strongest_extension_strength\
    \ = strongest_extension_strength + extensions[extensions.size() - strongest_extension_strength_counter];\n\
    \    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate =\
    \ Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7pu7cg5q.cpp: In function \u2018std::string Strongest_Extension(std::string,\
    \ std::vector<std::__cxx11::basic_string<char> >)\u2019:\n/tmp/tmp7pu7cg5q.cpp:27:32:\
    \ error: no match for \u2018operator>\u2019 (operand types are \u2018int\u2019\
    \ and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   27 |         if (extension_strength > strongest_extension_strength) {\n\
    \      |             ~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     \
    \ |             |                    |\n      |             int              \
    \    std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7pu7cg5q.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7pu7cg5q.cpp:27:34:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   27 |         if (extension_strength > strongest_extension_strength)\
    \ {\n      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn\
    \ file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp7pu7cg5q.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/"
  stdout: ''
  timestamp: 1660123264
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &extension : extensions){\n        cap += extension.at(0);\n        sm += extension.at(1);\n\
    \    }\n    float strength = cap - sm;\n    for(auto &extension : extensions){\n\
    \        if(extension.at(1) == extension.at(0) && extension.at(1) == extension.at(1)){\n\
    \            strongest_extension = class_name + \".\" + extension.at(0);\n   \
    \     }\n    }\n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpi1_gfaep: /tmp/tmpi1_gfaep.cpp:38: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a vector of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the vector.\n\
    // For example, if you are given \"Slices\" as the class and a vector of the\n\
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension;\n    double strongest_extension_strength = -1;\n    for\
    \ (auto extension : extensions) {\n        if (extension.at(0) == class_name[0])\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = -1;\n            for (auto extension_letter : extension) {\n             \
    \   if (extension_letter == class_name[class_name.size() - 1]) {\n           \
    \         strongest_extension_strength = extension_letter - class_name[class_name.size()\
    \ - 1];\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    if (strongest_extension_strength > 0) {\n        return class_name\
    \ + \".\" + strongest_extension;\n    } else {\n        return class_name;\n \
    \   }\n}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: Exception
  stderr: 'tmpbisbyuzi: /tmp/tmpbisbyuzi.cpp:43: int main(): Assertion `candidate(("Watashi"),
    (std::vector<std::string>({(std::string)"tEN", (std::string)"niNE", (std::string)"eIGHt8OKe"})))
    == ("Watashi.eIGHt8OKe")'' failed.

    '
  stdout: ''
  timestamp: 1660123264
