language: cpp
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n     \
    \   ans += sentence[i];\n    }\n    ans += \" \";\n    for (int i = n; i > 0;\
    \ i--) {\n        ans += sentence[i];\n    }\n    ans += \" \";\n    for (int\
    \ i = n; i > 0; i--) {\n        ans += sentence[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2jxfory.cpp: In function 'int main()':\n/tmp/tmpz2jxfory.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz2jxfory.cpp:2:\n/tmp/tmpz2jxfory.cpp:35:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    for (auto &i : sentence) {\n        if (i ==\
    \ '.') {\n            flag = true;\n            continue;\n        }\n       \
    \ if (flag) {\n            ans += i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdi_dqs2a.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpdi_dqs2a.cpp:20:16: error: ISO C++ forbids declaration of 'i' with no\
    \ type [-fpermissive]\n     for (auto &i : sentence) {\n                ^\n/tmp/tmpdi_dqs2a.cpp:20:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &i : sentence) {\n                    ^\n/tmp/tmpdi_dqs2a.cpp: In function 'int\
    \ main()':\n/tmp/tmpdi_dqs2a.cpp:32:10: error: 'candidate' does not name a type\n\
    \     auto candidate = words_in_sentence;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdi_dqs2a.cpp:2:\n/tmp/tmpdi_dqs2a.cpp:33:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::string temp;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(sentence[i]==' '){\n            flag = true;\n        }\n        if(flag){\n\
    \            temp.push_back(sentence[i]);\n        }\n    }\n    for(int i=0;i<temp.size();i++){\n\
    \        for(int j=i+1;j<temp.size();j++){\n            if(temp[i]==temp[j]){\n\
    \                flag = false;\n            }\n        }\n        if(flag){\n\
    \            result.push_back(temp[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpht7n65l4.cpp: In function 'int main()':\n/tmp/tmpht7n65l4.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpht7n65l4.cpp:2:\n/tmp/tmpht7n65l4.cpp:43:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans;\n\
    \    std::string temp;\n    bool flag = false;\n    for(int i=0;i<sentence.size();i++){\n\
    \        if(sentence[i]==' '){\n            flag = true;\n        }\n        if(flag){\n\
    \            temp.push_back(sentence[i]);\n        }\n    }\n    for(int i=0;i<temp.size();i++){\n\
    \        for(int j=i+1;j<temp.size();j++){\n            if(temp[i]==temp[j]){\n\
    \                flag = false;\n            }\n        }\n        if(flag){\n\
    \            ans.push_back(temp[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt9turdhi.cpp: In function 'int main()':\n/tmp/tmpt9turdhi.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt9turdhi.cpp:2:\n/tmp/tmpt9turdhi.cpp:43:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    for(int i = 0; i < sentence.length(); i++) {\n        for(int j = i +\
    \ 1; j < sentence.length(); j++) {\n            int n = sqrt(sentence.length());\n\
    \            int m = sqrt(j);\n            if((n % m) == 0) {\n              \
    \  ans += sentence.substr(i, j);\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd49pyha7.cpp: In function 'int main()':\n/tmp/tmpd49pyha7.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd49pyha7.cpp:2:\n/tmp/tmpd49pyha7.cpp:32:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    for (auto &i : sentence) {\n        if (i ==\
    \ '.' || i == '!' || i == '?' || i == ';' || i == '-' || i == '_' || i == '+'\
    \ || i == '/' || i == '\\\\' || i == '(' || i == ')' || i == '[' || i == ']' ||\
    \ i == '{' || i == '}' || i == '<' || i == '>' || i == '=' || i == '!' || i ==\
    \ '?' || i == ';' || i == '-' || i == '_' || i == '+' || i == '/' || i == '\\\\\
    ' || i == '(' || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i\
    \ == '<' || i == '>' || i == '=' || i == '!' || i == '?' || i == ';' || i == '-'\
    \ || i == '_' || i == '+' || i == '/' || i == '\\\\' || i == '(' || i == ')' ||\
    \ i == '[' || i == ']' || i == '{' || i == '}' || i == '<' || i == '>' || i ==\
    \ '=' || i == '!' || i == '?' || i == ';' || i == '-' || i == '_' || i == '+'\
    \ || i == '/' || i == '\\\\' || i == '(' || i == ')' || i == '[' || i == ']' ||\
    \ i == '{' || i == '}' || i == '<' || i == '>' || i == '=' || i == '!' || i ==\
    \ '?' || i == ';' || i == '-' || i == '_' || i == '+' || i == '/' || i == '\\\\\
    ' || i == '(' || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i\
    \ == '<' || i == '>' || i == '=' || i == '!' || i == '?' || i == ';' || i == '-'\
    \ || i == '_' || i == '+' || i == '/' || i == '\\\\' || i == '(' || i == ')' ||\
    \ i == '[' || i == ']' || i == '{' || i == '}' || i == '<' || i == '>' || i ==\
    \ '=' || i == '!' || i == '?' || i == ';' || i == '-' || i == '_' || i == '+'\
    \ || i == '/' || i == '\\\\' || i == '(' || i == ')' || i == '[' || i == ']' ||\
    \ i == '{' || i == '}' || i == '<' || i == '>' || i == '=' || i == '!' || i ==\
    \ '?' || i == ';' || i == '-' || i == '_' || i == '+' || i == '\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv10zvnay.cpp:21:1537: warning: missing terminating ' character\
    \ [enabled by default]\n         if (i == '.' || i == '!' || i == '?' || i ==\
    \ ';' || i == '-' || i == '_' || i == '+' || i == '/' || i == '\\\\' || i == '('\
    \ || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i == '<' || i\
    \ == '>' || i == '=' || i == '!' || i == '?' || i == ';' || i == '-' || i == '_'\
    \ || i == '+' || i == '/' || i == '\\\\' || i == '(' || i == ')' || i == '[' ||\
    \ i == ']' || i == '{' || i == '}' || i == '<' || i == '>' || i == '=' || i ==\
    \ '!' || i == '?' || i == ';' || i == '-' || i == '_' || i == '+' || i == '/'\
    \ || i == '\\\\' || i == '(' || i == ')' || i == '[' || i == ']' || i == '{' ||\
    \ i == '}' || i == '<' || i == '>' || i == '=' || i == '!' || i == '?' || i ==\
    \ ';' || i == '-' || i == '_' || i == '+' || i == '/' || i == '\\\\' || i == '('\
    \ || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i == '<' || i\
    \ == '>' || i == '=' || i == '!' || i == '?' || i == ';' || i == '-' || i == '_'\
    \ || i == '+' || i == '/' || i == '\\\\' || i == '(' || i == ')' || i == '[' ||\
    \ i == ']' || i == '{' || i == '}' || i == '<' || i == '>' || i == '=' || i ==\
    \ '!' || i == '?' || i == ';' || i == '-' || i == '_' || i == '+' || i == '/'\
    \ || i == '\\\\' || i == '(' || i == ')' || i == '[' || i == ']' || i == '{' ||\
    \ i == '}' || i == '<' || i == '>' || i == '=' || i == '!' || i == '?' || i ==\
    \ ';' || i == '-' || i == '_' || i == '+' || i == '/' || i == '\\\\' || i == '('\
    \ || i == ')' || i == '[' || i == ']' || i == '{' || i == '}' || i == '<' || i\
    \ == '>' || i == '=' || i == '!' || i == '?' || i == ';' || i == '-' || i == '_'\
    \ || i == '+' || i == '\n                                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    for(int i = 0; i < sentence.length(); i++) {\n        for(int j = i +\
    \ 1; j < sentence.length(); j++) {\n            int n = pow(sentence.length(),\
    \ 2);\n            if(n == sentence.length() || sentence[i] == ' ' || sentence[j]\
    \ == ' ') {\n                continue;\n            }\n            int m = pow(sentence.length(),\
    \ 2);\n            if(m == sentence.length() || sentence[i] == ' ' || sentence[j]\
    \ == ' ') {\n                continue;\n            }\n            int k = pow(sentence.length(),\
    \ 2);\n            if(k == sentence.length() || sentence[i] == ' ' || sentence[j]\
    \ == ' ') {\n                continue;\n            }\n            int l = pow(sentence.length(),\
    \ 2);\n            if(l == sentence.length() || sentence[i] == ' ' || sentence[j]\
    \ == ' ') {\n                continue;\n            }\n            int m = pow(sentence.length(),\
    \ 2);\n            if(m == sentence.length() || sentence[i] == ' ' || sentence[j]\
    \ == ' ') {\n                continue;\n            }\n            int n = pow(sentence.length(),\
    \ 2);\n            if(n != sentence.length() || sentence[i] == ' ' || sentence[j]\
    \ == ' ') {\n                ans += sentence[i] + \" \";\n            }\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfzrxx2sx.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpfzrxx2sx.cpp:37:17: error: redeclaration of 'int m'\n             int\
    \ m = pow(sentence.length(), 2);\n                 ^\n/tmp/tmpfzrxx2sx.cpp:25:17:\
    \ error: 'int m' previously declared here\n             int m = pow(sentence.length(),\
    \ 2);\n                 ^\n/tmp/tmpfzrxx2sx.cpp:41:17: error: redeclaration of\
    \ 'int n'\n             int n = pow(sentence.length(), 2);\n                 ^\n\
    /tmp/tmpfzrxx2sx.cpp:21:17: error: 'int n' previously declared here\n        \
    \     int n = pow(sentence.length(), 2);\n                 ^\n/tmp/tmpfzrxx2sx.cpp:\
    \ In function 'int main()':\n/tmp/tmpfzrxx2sx.cpp:50:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfzrxx2sx.cpp:2:\n/tmp/tmpfzrxx2sx.cpp:51:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        if(sentence[i] >= 'a' && sentence[i] <= 'z') {\n            flag = true;\n\
    \            ans += sentence[i];\n        }\n        if(flag) {\n            flag\
    \ = false;\n            ans += \" \";\n        }\n    }\n    for(int i = 0; i\
    \ < ans.length(); i++) {\n        if(ans[i] >= 'a' && ans[i] <= 'z') {\n     \
    \       ans[i] = ans[i] - 'a' + 'A';\n        }\n    }\n    for(int i = 0; i <\
    \ ans.length(); i++) {\n        if(!isPrime(ans[i])) {\n            ans.erase(ans.begin()\
    \ + i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = words_in_sentence;\n    assert(candidate((\"This is a test\")) == (\"is\"\
    ));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"\
    there is no place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf6i0gp9i.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpf6i0gp9i.cpp:36:27: error: 'isPrime' was not declared in this scope\n\
    \         if(!isPrime(ans[i])) {\n                           ^\n/tmp/tmpf6i0gp9i.cpp:\
    \ In function 'int main()':\n/tmp/tmpf6i0gp9i.cpp:43:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf6i0gp9i.cpp:2:\n/tmp/tmpf6i0gp9i.cpp:44:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        if(sentence[i] == ' ') {\n            flag = true;\n            ans +=\
    \ sentence[i];\n        }\n        if(flag) {\n            ans += \" \";\n   \
    \         flag = false;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = words_in_sentence;\n    assert(candidate((\"This is a test\"\
    )) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2aa6os4x.cpp: In function 'int main()':\n/tmp/tmp2aa6os4x.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2aa6os4x.cpp:2:\n/tmp/tmp2aa6os4x.cpp:34:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    for (auto &i : sentence) {\n        if (i ==\
    \ '.') {\n            flag = true;\n            continue;\n        }\n       \
    \ if (flag) {\n            ans += i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdi_dqs2a.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpdi_dqs2a.cpp:20:16: error: ISO C++ forbids declaration of 'i' with no\
    \ type [-fpermissive]\n     for (auto &i : sentence) {\n                ^\n/tmp/tmpdi_dqs2a.cpp:20:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &i : sentence) {\n                    ^\n/tmp/tmpdi_dqs2a.cpp: In function 'int\
    \ main()':\n/tmp/tmpdi_dqs2a.cpp:32:10: error: 'candidate' does not name a type\n\
    \     auto candidate = words_in_sentence;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdi_dqs2a.cpp:2:\n/tmp/tmpdi_dqs2a.cpp:33:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::string result;\n    std::string temp;\n\
    \    for (auto &c : sentence) {\n        if (c == ' ') {\n            words.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    words.push_back(word);\n    for (auto &w : words) {\n        temp\
    \ = w;\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::sort(temp.begin(), temp.end());\n        std::sort(temp.begin(),\
    \ temp.end\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3c4mkhg.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpn3c4mkhg.cpp:22:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : sentence) {\n                ^\n/tmp/tmpn3c4mkhg.cpp:22:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : sentence) {\n                    ^\n/tmp/tmpn3c4mkhg.cpp:31:16: error:\
    \ ISO C++ forbids declaration of 'w' with no type [-fpermissive]\n     for (auto\
    \ &w : words) {\n                ^\n/tmp/tmpn3c4mkhg.cpp:31:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &w : words) {\n  \
    \                  ^\n/tmp/tmpn3c4mkhg.cpp:77:1: error: expected ')' before '}'\
    \ token\n }\n ^\n/tmp/tmpn3c4mkhg.cpp:77:1: error: expected ';' before '}' token\n\
    /tmp/tmpn3c4mkhg.cpp:78:12: error: a function-definition is not allowed here before\
    \ '{' token\n int main() {\n            ^\n/tmp/tmpn3c4mkhg.cpp:87:1: error: expected\
    \ '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = true;\n    int n = sentence.length();\n    for (int i = 0;\
    \ i < n; i++) {\n        char c = sentence[i];\n        if (c == ' ') {\n    \
    \        flag = true;\n        } else {\n            if (flag) {\n           \
    \     ans += c;\n                flag = false;\n            }\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fcn4cte.cpp: In function 'int main()':\n/tmp/tmp9fcn4cte.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9fcn4cte.cpp:2:\n/tmp/tmp9fcn4cte.cpp:36:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n     \
    \   std::string word = sentence.substr(i, 1);\n        bool isPrime = true;\n\
    \        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n      \
    \          isPrime = false;\n                break;\n            }\n        }\n\
    \        if (isPrime) {\n            ans += word;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp16uemu7e.cpp: In function 'int main()':\n/tmp/tmp16uemu7e.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp16uemu7e.cpp:2:\n/tmp/tmp16uemu7e.cpp:37:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    for (auto &c : sentence) {\n        if (c ==\
    \ ' ') {\n            flag = true;\n            continue;\n        }\n       \
    \ if (flag) {\n            ans += c;\n        }\n    }\n    ans = ans.substr(0,\
    \ ans.size() - 1);\n    int n = ans.size();\n    bool flag2 = false;\n    for\
    \ (int i = 1; i < n; i++) {\n        if (ans[i] == '.') {\n            flag2 =\
    \ true;\n            continue;\n        }\n        if (flag2) {\n            ans\
    \ = ans.substr(0, i) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"\
    This is a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\"\
    )) == (\"go for\"));\n    assert(candidate((\"there is no place available here\"\
    )) == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo1sc45c.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmppo1sc45c.cpp:20:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : sentence) {\n                ^\n/tmp/tmppo1sc45c.cpp:20:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : sentence) {\n                    ^\n/tmp/tmppo1sc45c.cpp: In function 'int\
    \ main()':\n/tmp/tmppo1sc45c.cpp:44:10: error: 'candidate' does not name a type\n\
    \     auto candidate = words_in_sentence;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppo1sc45c.cpp:2:\n/tmp/tmppo1sc45c.cpp:45:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    // Write your code\
    \ here\n    std::string result;\n    for(int i=0;i<sentence.size();i++){\n   \
    \     if(isPrime(sentence[i])){\n            result+=sentence[i];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl00cxxs5.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpl00cxxs5.cpp:21:31: error: 'isPrime' was not declared in this scope\n\
    \         if(isPrime(sentence[i])){\n                               ^\n/tmp/tmpl00cxxs5.cpp:\
    \ In function 'int main()':\n/tmp/tmpl00cxxs5.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl00cxxs5.cpp:2:\n/tmp/tmpl00cxxs5.cpp:29:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string result;\n\
    \    std::string word;\n    bool flag = false;\n    for (int i = 0; i < sentence.length();\
    \ i++) {\n        if (sentence[i] != ' ') {\n            flag = true;\n      \
    \      word = sentence[i];\n        } else {\n            if (flag) {\n      \
    \          result += \" \" + word;\n                flag = false;\n          \
    \  }\n        }\n    }\n    if (flag) {\n        result += \" \" + word;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl72zex1n.cpp: In function 'int main()':\n/tmp/tmpl72zex1n.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl72zex1n.cpp:2:\n/tmp/tmpl72zex1n.cpp:39:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    int n = sentence.length();\n    for (int i =\
    \ 0; i < n; i++) {\n        if (sentence[i] == ' ') {\n            flag = true;\n\
    \        }\n        if (flag) {\n            ans += sentence[i];\n        }\n\
    \    }\n    for (int i = 2; i < n; i++) {\n        if (ans.find(std::to_string(i))\
    \ != std::string::npos) {\n            flag = true;\n        }\n        if (flag)\
    \ {\n            ans += \" \";\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvzb2mn82.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmpvzb2mn82.cpp:30:22: error: 'to_string' is not a member of 'std'\n    \
    \     if (ans.find(std::to_string(i)) != std::string::npos) {\n              \
    \        ^\n/tmp/tmpvzb2mn82.cpp: In function 'int main()':\n/tmp/tmpvzb2mn82.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvzb2mn82.cpp:2:\n/tmp/tmpvzb2mn82.cpp:41:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    bool flag = false;\n    for(int i = 0; i < sentence.length(); i++) {\n\
    \        if(sentence[i] == ' ') {\n            flag = true;\n            ans +=\
    \ sentence[i];\n        }\n        if(flag) {\n            flag = false;\n   \
    \         ans += \" \";\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        if(isPrime(ans.at(i))) {\n            ans += ans.at(i);\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = words_in_sentence;\n\
    \    assert(candidate((\"This is a test\")) == (\"is\"));\n    assert(candidate((\"\
    lets go for swimming\")) == (\"go for\"));\n    assert(candidate((\"there is no\
    \ place available here\")) == (\"there is no place\"));\n    assert(candidate((\"\
    Hi I am Hussein\")) == (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\"\
    )) == (\"go for it\"));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"\
    here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1u6jdnyv.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp1u6jdnyv.cpp:31:29: error: 'isPrime' was not declared in this scope\n\
    \         if(isPrime(ans.at(i))) {\n                             ^\n/tmp/tmp1u6jdnyv.cpp:\
    \ In function 'int main()':\n/tmp/tmp1u6jdnyv.cpp:38:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = words_in_sentence;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1u6jdnyv.cpp:2:\n/tmp/tmp1u6jdnyv.cpp:39:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    int n = sentence.length();\n    for (int i = 0; i < n; i++) {\n     \
    \   char c = sentence[i];\n        if (c == ' ') {\n            int count = 0;\n\
    \            int j = 0;\n            while (j < i) {\n                if (sentence[j]\
    \ == ' ') {\n                    count++;\n                }\n               \
    \ j++;\n            }\n            if (count % 2 != 0) {\n                ans\
    \ += sentence[i];\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = words_in_sentence;\n    assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n    assert(candidate((\"lets go for swimming\")) ==\
    \ (\"go for\"));\n    assert(candidate((\"there is no place available here\"))\
    \ == (\"there is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) ==\
    \ (\"Hi am Hussein\"));\n    assert(candidate((\"go for it\")) == (\"go for it\"\
    ));\n    assert(candidate((\"here\")) == (\"\"));\n    assert(candidate((\"here\
    \ is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjo1t68w4.cpp: In function 'int main()':\n/tmp/tmpjo1t68w4.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = words_in_sentence;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjo1t68w4.cpp:2:\n/tmp/tmpjo1t68w4.cpp:40:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ representing a sentence,\n// the sentence contains some words separated by a\
    \ space,\n// and you have to return a string that contains the words from the\
    \ original sentence,\n// whose lengths are prime numbers,\n// the order of the\
    \ words in the new string should be the same as the original one.\n// Example\
    \ 1:\n// >>> words_in_sentence((\"This is a test\"))\n// (\"is\")\n// Example\
    \ 2:\n// >>> words_in_sentence((\"lets go for swimming\"))\n// (\"go for\")\n\
    // Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\n\
    std::string words_in_sentence(std::string sentence) {\n    std::string ans = \"\
    \";\n    std::string word = \"\";\n    bool flag = false;\n    for (auto &c :\
    \ sentence) {\n        if (c == ' ') {\n            flag = true;\n           \
    \ ans += word;\n            word = \"\";\n        } else {\n            if (flag)\
    \ {\n                word += c;\n            } else {\n                ans +=\
    \ c;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = words_in_sentence;\n    assert(candidate((\"This is a test\")) ==\
    \ (\"is\"));\n    assert(candidate((\"lets go for swimming\")) == (\"go for\"\
    ));\n    assert(candidate((\"there is no place available here\")) == (\"there\
    \ is no place\"));\n    assert(candidate((\"Hi I am Hussein\")) == (\"Hi am Hussein\"\
    ));\n    assert(candidate((\"go for it\")) == (\"go for it\"));\n    assert(candidate((\"\
    here\")) == (\"\"));\n    assert(candidate((\"here is\")) == (\"is\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pfr2o7k.cpp: In function 'std::string words_in_sentence(std::string)':\n\
    /tmp/tmp_pfr2o7k.cpp:21:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : sentence) {\n                ^\n/tmp/tmp_pfr2o7k.cpp:21:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : sentence) {\n                    ^\n/tmp/tmp_pfr2o7k.cpp: In function 'int\
    \ main()':\n/tmp/tmp_pfr2o7k.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = words_in_sentence;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_pfr2o7k.cpp:2:\n/tmp/tmp_pfr2o7k.cpp:38:40: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"This is\
    \ a test\")) == (\"is\"));\n                                        ^\n"
  stdout: ''
