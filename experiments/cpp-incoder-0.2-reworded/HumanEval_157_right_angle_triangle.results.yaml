language: cpp
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if\
    \ (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxplm5wo.cpp: In function 'int main()':\n/tmp/tmpzxplm5wo.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzxplm5wo.cpp:2:\n/tmp/tmpzxplm5wo.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    if (s < 0 || t < 0) {\n        return false;\n    }\n    if (s ==\
    \ 0 && t == 0) {\n        return true;\n    }\n    if (s == 0 && t > 0) {\n  \
    \      return true;\n    }\n    if (s == 0 && t < 0) {\n        return false;\n\
    \    }\n    if (s > 0 && t > 0) {\n        return true;\n    }\n    if (s < 0\
    \ && t < 0) {\n        return false;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpur2d86aw.cpp: In function 'int main()':\n/tmp/tmpur2d86aw.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpur2d86aw.cpp:2:\n/tmp/tmpur2d86aw.cpp:42:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (-b + sqrt(d)) / (2 * a);\n    long\
    \ y = (-b - sqrt(d)) / (2 * a);\n    return (x > 0) && (y > 0);\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9y3q6if1.cpp: In function 'int main()':\n/tmp/tmp9y3q6if1.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9y3q6if1.cpp:2:\n/tmp/tmp9y3q6if1.cpp:24:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int sum = a+b+c;\n    long long int sum1 = a*a+b*b+c*c;\n    long\
    \ long int sum2 = a*a+b*b-c*c;\n    long long int sum3 = a*a-b*b-c*c;\n    long\
    \ long int sum4 = a*a-b*b+c*c;\n    long long int sum5 = a*a+b*b+c*c-a*a;\n  \
    \  long long int sum6 = a*a+b*b-c*c-a*a;\n    long long int sum7 = a*a-b*b-c*c-a*a;\n\
    \    long long int sum8 = a*a-b*b+c*c-a*a;\n    long long int sum9 = a*a+b*b+c*c+a*a;\n\
    \    long long int sum10 = a*a+b*b-c*c+a*a;\n    long long int sum11 = a*a-b*b-c*c+a*a;\n\
    \    long long int sum12 = a*a-b*b+c*c+a*a;\n    long long int sum13 = a*a+b*b+c*c-a*a+a*a;\n\
    \    long long int sum14 = a*a+b*b-c*c-a*a+a*a;\n    long long int sum15 = a*a-b*b-c*c-a*a+a*a;\n\
    \    long long int sum16 = a*a-b*b+c*c-a*a-a*a;\n    long long int sum17 = a*a+b*b+c*c+a*a+a*a;\n\
    \    long long int sum18 = a*a+b*b-c*c+a*a+a*a;\n    long long int sum19 = a*a-b*b-c*c+a*a+a*a;\n\
    \    long long int sum20 = a*a-b*b+c*c-a*a-a*a;\n    long long int sum21 = a*a+b*b+c*c+a*a+a*a-a*a;\n\
    \    long long int sum22 = a*a+b*b-c*c-a*a-a*a;\n    long long int sum23 = a*a-b*b-c*c-a*a-a*a;\n\
    \    long long int sum24 = a*a-b*b+c*c-a*a-a*a;\n    long long int sum25 = a*a+b*b+c*c+a*a+a*a-a*a;\n\
    \    long long int sum26 = a*a+b*b-c*c-a*a-a*a;\n    long long int sum27 = a*a-b*b-c*c-a*\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5dt6ri7.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmpm5dt6ri7.cpp:42:1: error: expected primary-expression\
    \ before '}' token\n }\n ^\n/tmp/tmpm5dt6ri7.cpp:42:1: error: expected ',' or\
    \ ';' before '}' token\n/tmp/tmpm5dt6ri7.cpp: In function 'int main()':\n/tmp/tmpm5dt6ri7.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm5dt6ri7.cpp:2:\n/tmp/tmpm5dt6ri7.cpp:45:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long s = (-b + sqrt(d)) /\
    \ (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    return (s == t);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9pbrzm32.cpp: In function 'int main()':\n/tmp/tmp9pbrzm32.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9pbrzm32.cpp:2:\n/tmp/tmp9pbrzm32.cpp:22:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long root = (long) sqrt(d);\n    long s = (-b\
    \ + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n    if (s == t)\n \
    \       return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqegi2am.cpp: In function 'int main()':\n/tmp/tmpnqegi2am.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnqegi2am.cpp:2:\n/tmp/tmpnqegi2am.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        return true;\n    }\n    else if(b==c){\n       \
    \ return false;\n    }\n    else if(a>b){\n        if(a>c){\n            return\
    \ false;\n        }\n    }\n    else if(b>c){\n        return false;\n    }\n\
    \    else if(a>c){\n        return true;\n    }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptikeonld.cpp: In function 'int main()':\n/tmp/tmptikeonld.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptikeonld.cpp:2:\n/tmp/tmptikeonld.cpp:39:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long x = -b + root;\n    long y = -a - root;\n    long d = x * x +\
    \ y * y;\n    return d == 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpes3c8qx4.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmpes3c8qx4.cpp:20:10: error: redeclaration of 'long\
    \ int d'\n     long d = x * x + y * y;\n          ^\n/tmp/tmpes3c8qx4.cpp:13:10:\
    \ error: 'long int d' previously declared here\n     long d = b * b - 4 * a *\
    \ c;\n          ^\n/tmp/tmpes3c8qx4.cpp: In function 'int main()':\n/tmp/tmpes3c8qx4.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpes3c8qx4.cpp:2:\n/tmp/tmpes3c8qx4.cpp:25:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(ac -\
    \ bc);\n    long abc = abs(ab - bc);\n    long acbc = abs(ac - bc);\n    long\
    \ abcb = abs(ab - bc);\n    long acbca = abs(ac - ca);\n    long abca = abs(ab\
    \ - ca);\n    long accab = abs(ac - ca);\n    long abcca = abs(ab - ca);\n   \
    \ long acbcab = abs(ac - cab);\n    long abccab = abs(ab - cab);\n    long acbcabc\
    \ = abs(ac - cab);\n    long abccabc = abs(ab - cab);\n    long acbcabcd = abs(ac\
    \ - cab);\n    long abccabcd = abs(ab - cab);\n    long acbcabcde = abs(ac - cab);\n\
    \    long abccabcde = abs(ab - cab);\n    long acbcabcdef = abs(ac - cab);\n \
    \   long abccabcdef = abs(ab - cab);\n    long acbcabcdefg = abs(ac - cab);\n\
    \    long abccabcdefg = abs(ab - cab);\n    long acbcabcdefgh = abs(ac - cab);\n\
    \    long abccabcdefgh = abs(ab - cab);\n    long acbcabcdefghi = abs(ac - cab);\n\
    \    long abccabcdefghi = abs(ab - cab);\n    long acbcabcdefghij = abs(ac - cab);\n\
    \    long abccabcdefghij = abs(ab - cab);\n    long acbcabcdefghijk = abs(ac -\
    \ cab);\n    long abccabcdefghijk = abs(ab - cab);\n    long acbcabcdefghijkl\
    \ = abs(ac - cab);\n    long abccabcdefghijkl = abs(ab - cab);\n    long acbcabcdefghijklm\
    \ = abs(ac - cab);\n    long abccabcdefghijklm = abs(ab - cab);\n    long acbcabcdefghijklmn\
    \ = abs(ac - cab);\n    long abccabcdefghijklmn = abs(ab - cab);\n    long acbcabcdefghijklmno\
    \ = abs(ac - cab);\n    long abccabcdefghijkl\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8k990zr0.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmp8k990zr0.cpp:20:27: error: 'ca' was not declared\
    \ in this scope\n     long acbca = abs(ac - ca);\n                           ^\n\
    /tmp/tmp8k990zr0.cpp:24:28: error: 'cab' was not declared in this scope\n    \
    \ long acbcab = abs(ac - cab);\n                            ^\n/tmp/tmp8k990zr0.cpp:52:1:\
    \ error: expected initializer before '}' token\n }\n ^\n/tmp/tmp8k990zr0.cpp:\
    \ In function 'int main()':\n/tmp/tmp8k990zr0.cpp:54:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = right_angle_triangle;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp8k990zr0.cpp:2:\n/tmp/tmp8k990zr0.cpp:55:35: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((3), (4), (5)) == (true));\n\
    \                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long abbc = abb + bcc;\n\
    \    long abcc = abc + cbb;\n    long abbb = abbc + cbb;\n    long abbba = abbb\
    \ + cba;\n    long abbca = abbc + cab;\n    long abccb = abcc + cbc;\n    long\
    \ abccc = abcc + cbb;\n    long abbbc = abbb + cbc;\n    long abbbac = abbb +\
    \ cba;\n    long abbcaa = abbc + cab;\n    long abcccb = abccc + cbc;\n    long\
    \ abcccb = abccc + cbb;\n    long abbbcb = abbbc + cbc;\n    long abbbacb = abbbc\
    \ + cba;\n    long abbcaab = abbc + cab;\n    long abcccbc = abccc + cbc;\n  \
    \  long abcccbc = abccc + cbb;\n    long abbbcbb = abbbc + cbc;\n    long abbbacbb\
    \ = abbbc + cba;\n    long abbcaabb = abbc + cab;\n    long abcccbcb = abccc +\
    \ cbc;\n    long abcccbcb = abccc + cbb;\n    long abbbcbbb = abbbc + cbc;\n \
    \   long abbbacbbb = abbbc + cba;\n    long abbcaabbc = abbc + cab;\n    long\
    \ abcccbcc = abccc + cbc;\n    long abcccbcc = abccc + cbb;\n    long abbbcbbc\
    \ = abbbc + cbc;\n    long abbbacbbc = abbbc + cba;\n    long abbcaabbcc = abbc\
    \ + cab;\n    long abcccbccb = abccc + cbc;\n    long abcccbccb = abccc + cbb;\n\
    \    long abbbcbbcc = abbbc + cbc;\n    long abbbacbbcc = abbbc + cba;\n    long\
    \ abbcaabbccc = abbc + cab;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpopyl9vdq.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmpopyl9vdq.cpp:19:17: error: 'abb' was not declared\
    \ in this scope\n     long abbc = abb + bcc;\n                 ^\n/tmp/tmpopyl9vdq.cpp:19:23:\
    \ error: 'bcc' was not declared in this scope\n     long abbc = abb + bcc;\n \
    \                      ^\n/tmp/tmpopyl9vdq.cpp:20:23: error: 'cbb' was not declared\
    \ in this scope\n     long abcc = abc + cbb;\n                       ^\n/tmp/tmpopyl9vdq.cpp:22:25:\
    \ error: 'cba' was not declared in this scope\n     long abbba = abbb + cba;\n\
    \                         ^\n/tmp/tmpopyl9vdq.cpp:23:25: error: 'cab' was not\
    \ declared in this scope\n     long abbca = abbc + cab;\n                    \
    \     ^\n/tmp/tmpopyl9vdq.cpp:24:25: error: 'cbc' was not declared in this scope\n\
    \     long abccb = abcc + cbc;\n                         ^\n/tmp/tmpopyl9vdq.cpp:30:10:\
    \ error: redeclaration of 'long int abcccb'\n     long abcccb = abccc + cbb;\n\
    \          ^\n/tmp/tmpopyl9vdq.cpp:29:10: error: 'long int abcccb' previously\
    \ declared here\n     long abcccb = abccc + cbc;\n          ^\n/tmp/tmpopyl9vdq.cpp:35:10:\
    \ error: redeclaration of 'long int abcccbc'\n     long abcccbc = abccc + cbb;\n\
    \          ^\n/tmp/tmpopyl9vdq.cpp:34:10: error: 'long int abcccbc' previously\
    \ declared here\n     long abcccbc = abccc + cbc;\n          ^\n/tmp/tmpopyl9vdq.cpp:40:10:\
    \ error: redeclaration of 'long int abcccbcb'\n     long abcccbcb = abccc + cbb;\n\
    \          ^\n/tmp/tmpopyl9vdq.cpp:39:10: error: 'long int abcccbcb' previously\
    \ declared here\n     long abcccbcb = abccc + cbc;\n          ^\n/tmp/tmpopyl9vdq.cpp:45:10:\
    \ error: redeclaration of 'long int abcccbcc'\n     long abcccbcc = abccc + cbb;\n\
    \          ^\n/tmp/tmpopyl9vdq.cpp:44:10: error: 'long int abcccbcc' previously\
    \ declared here\n     long abcccbcc = abccc + cbc;\n          ^\n/tmp/tmpopyl9vdq.cpp:50:10:\
    \ error: redeclaration of 'long int abcccbccb'\n     long abcccbccb = abccc +\
    \ cbb;\n          ^\n/tmp/tmpopyl9vdq.cpp:49:10: error: 'long int abcccbccb' previously\
    \ declared here\n     long abcccbccb = abccc + cbc;"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) - (c * a);\n    if (ans < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjqugm_sy.cpp: In function 'int main()':\n/tmp/tmpjqugm_sy.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjqugm_sy.cpp:2:\n/tmp/tmpjqugm_sy.cpp:21:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjr9rznxv.cpp: In function 'int main()':\n/tmp/tmpjr9rznxv.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjr9rznxv.cpp:2:\n/tmp/tmpjr9rznxv.cpp:24:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7d3j4cmk.cpp: In function 'int main()':\n/tmp/tmp7d3j4cmk.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7d3j4cmk.cpp:2:\n/tmp/tmp7d3j4cmk.cpp:29:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    if(a>c){\n        if(b>c){\n            return true;\n  \
    \      }\n        return false;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5xfmbv3.cpp: In function 'int main()':\n/tmp/tmpe5xfmbv3.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5xfmbv3.cpp:2:\n/tmp/tmpe5xfmbv3.cpp:45:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        if(b==c){\n            return true;\n        }\n    }\n\
    \    if(b==c){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpg9d1ggui.cpp: In function 'int main()':\n/tmp/tmpg9d1ggui.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg9d1ggui.cpp:2:\n/tmp/tmpg9d1ggui.cpp:33:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long a1 = abs(a - b), a2 = abs(a - c), b1 = abs(b - c), b2 = abs(b - a);\n\
    \    long c = a * b + b * c;\n    long d = a1 * b2 + b1 * c2;\n    long e = a2\
    \ * b1 + b2 * c1;\n    long f = a1 * c2 + b1 * a2;\n    long g = a2 * c1 + b2\
    \ * a1;\n    long h = a1 * b2 - b1 * a2;\n    long i = a2 * b1 - b2 * a1;\n  \
    \  long j = a1 * c2 - b1 * a2;\n    long k = a2 * c1 - b2 * a1;\n    long l =\
    \ a1 * b2 + b1 * c2;\n    long m = a2 * b1 - b2 * a1;\n    long n = a1 * c2 -\
    \ b1 * a2;\n    long o = a2 * c1 - b2 * a1;\n    long p = a1 * b1 - b1 * a2;\n\
    \    long q = a2 * b2 + b2 * c1;\n    long r = a1 * c1 + b1 * a2;\n    long s\
    \ = a2 * c2 - b2 * a1;\n    long t = a1 * b2 - b1 * a2;\n    long u = a2 * b1\
    \ + b2 * c1;\n    long v = a1 * c2 - b1 * a2;\n    long w = a2 * c1 + b2 * a1;\n\
    \    long x = a1 * b1 + b1 * c2;\n    long y = a2 * b2 - b2 * a1;\n    long z\
    \ = a1 * c1 + b1 * a2;\n    long a = a1 * b2 - b1 * a2;\n    long b = a2 * b1\
    \ - b2 * a1;\n    long c = a1 * c2 - b1 * a2;\n    long d = a2 * c1 - b2 * a1;\n\
    \    long e = a1 * b1 + b1 * c2;\n    long f = a2 * b2 - b2 * a1;\n    long g\
    \ = a1 * c1 + b1 * a2;\n    long h = a2 * c2 - b2 * a1;\n    long i = a1 * b2\
    \ + b1 * c2;\n    long j = a2 * b1 - b2 * a1;\n    long k = a1 * c2 + b1 * a2;\n\
    \    long l = a2 * c1 - b2 * a1;\n    long m = a1 * b1 - b1 * a2;\n    long n\
    \ = a2 * b2 + b2 * c1;\n    long o = a1 * c1 - b1 * a2;\n    long p = a2 * c2\
    \ + b2 * a1;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dkw1vk_.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmp8dkw1vk_.cpp:15:10: error: declaration of 'long\
    \ int c' shadows a parameter\n     long c = a * b + b * c;\n          ^\n/tmp/tmp8dkw1vk_.cpp:16:29:\
    \ error: 'c2' was not declared in this scope\n     long d = a1 * b2 + b1 * c2;\n\
    \                             ^\n/tmp/tmp8dkw1vk_.cpp:17:29: error: 'c1' was not\
    \ declared in this scope\n     long e = a2 * b1 + b2 * c1;\n                 \
    \            ^\n/tmp/tmp8dkw1vk_.cpp:39:10: error: declaration of 'long int a'\
    \ shadows a parameter\n     long a = a1 * b2 - b1 * a2;\n          ^\n/tmp/tmp8dkw1vk_.cpp:40:10:\
    \ error: declaration of 'long int b' shadows a parameter\n     long b = a2 * b1\
    \ - b2 * a1;\n          ^\n/tmp/tmp8dkw1vk_.cpp:41:10: error: redeclaration of\
    \ 'long int c'\n     long c = a1 * c2 - b1 * a2;\n          ^\n/tmp/tmp8dkw1vk_.cpp:15:10:\
    \ error: 'long int c' previously declared here\n     long c = a * b + b * c;\n\
    \          ^\n/tmp/tmp8dkw1vk_.cpp:42:10: error: redeclaration of 'long int d'\n\
    \     long d = a2 * c1 - b2 * a1;\n          ^\n/tmp/tmp8dkw1vk_.cpp:16:10: error:\
    \ 'long int d' previously declared here\n     long d = a1 * b2 + b1 * c2;\n  \
    \        ^\n/tmp/tmp8dkw1vk_.cpp:43:10: error: redeclaration of 'long int e'\n\
    \     long e = a1 * b1 + b1 * c2;\n          ^\n/tmp/tmp8dkw1vk_.cpp:17:10: error:\
    \ 'long int e' previously declared here\n     long e = a2 * b1 + b2 * c1;\n  \
    \        ^\n/tmp/tmp8dkw1vk_.cpp:44:10: error: redeclaration of 'long int f'\n\
    \     long f = a2 * b2 - b2 * a1;\n          ^\n/tmp/tmp8dkw1vk_.cpp:18:10: error:\
    \ 'long int f' previously declared here\n     long f = a1 * c2 + b1 * a2;\n  \
    \        ^\n/tmp/tmp8dkw1vk_.cpp:45:10: error: redeclaration of 'long int g'\n\
    \     long g = a1 * c1 + b1 * a2;\n          ^\n/tmp/tmp8dkw1vk_.cpp:19:10: error:\
    \ 'long int g' previously declared here\n     long g = a2 * c1 + b2 * a1;\n  \
    \        ^\n/tmp/tmp8dkw1vk_.cpp:46:10: error: redeclaration of 'long int h'\n\
    \     long h = a2 * c2 - b2 * a1;\n          ^\n/tmp/tmp8dkw1vk_.cpp:20:10: error:\
    \ 'long int h' previously "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - c);\n\
    \    long ac = abs(a - c);\n    long bc = abs(b - c);\n    long abc = ab + bc;\n\
    \    long acb = ac + bc;\n    long abac = ab + ac;\n    long acab = ac + ab;\n\
    \    long abcab = ab + bc;\n    long acbca = ac + bc;\n    long abcabc = ab +\
    \ ac;\n    long acbcab = ac + ab;\n    long abcabcb = ab + bc;\n    long acbcabd\
    \ = ac + ab;\n    long abcabcd = ab + ac;\n    long acbcabed = ac + ab;\n    long\
    \ abcabcde = ab + ac;\n    long acbcabfd = ac + ab;\n    long abcabcdef = ab +\
    \ ac;\n    long acbcabdef = ac + ab;\n    long abcabcdefg = ab + ac;\n    long\
    \ acbcabdefg = ac + ab;\n    long abcabcdefgh = ab + ac;\n    long acbcabdefgh\
    \ = ac + ab;\n    long abcabcdefghi = ab + ac;\n    long acbcabdefghi = ac + ab;\n\
    \    long abcabcdefghij = ab + ac;\n    long acbcabdefghij = ac + ab;\n    long\
    \ abcabcdefghijk = ab + ac;\n    long acbcabdefghijk = ac + ab;\n    long abcabcdefghijkl\
    \ = ab + ac;\n    long acbcabdefghijkl = ac + ab;\n    long abcabcdefghijkm =\
    \ ab + ac;\n    long acbcabdefghijkm = ac + ab;\n    long abcabcdefghijkn = ab\
    \ + ac;\n    long acbcabdefghijkn = ac + ab;\n    long abcabcdefghijkno = ab +\
    \ ac;\n    long acbcabdefghijkno = ac + ab;\n    long abcabcdefghijknop = ab +\
    \ ac;\n    long acbcabdefghijknop = ac + ab;\n    long abcabcdefghijknopq = ab\
    \ + ac;\n    long acbcabdefghijknop\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzu5mgrk_.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmpzu5mgrk_.cpp:54:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpzu5mgrk_.cpp: In function 'int main()':\n\
    /tmp/tmpzu5mgrk_.cpp:56:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = right_angle_triangle;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzu5mgrk_.cpp:2:\n/tmp/tmpzu5mgrk_.cpp:57:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long x = (b + c)\
    \ / 2;\n    long y = (-b - c) / 2;\n    long root = (long) sqrt(d);\n    long\
    \ xp = ((b * x) + (c * y)) / root;\n    long yp = ((-b * x) + (a * y)) / root;\n\
    \    return (xp == yp);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdgrrotba.cpp: In function 'int main()':\n/tmp/tmpdgrrotba.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdgrrotba.cpp:2:\n/tmp/tmpdgrrotba.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long l1 = abs(a) + abs(b) + abs(c);\n    long l2 = abs(a) + abs(b) + abs(c);\n\
    \    long l3 = abs(a) + abs(b) + abs(c);\n    long l4 = abs(a) + abs(b) + abs(c);\n\
    \    long l5 = abs(a) + abs(b) + abs(c);\n    long l6 = abs(a) + abs(b) + abs(c);\n\
    \    long l7 = abs(a) + abs(b) + abs(c);\n    long l8 = abs(a) + abs(b) + abs(c);\n\
    \    long l9 = abs(a) + abs(b) + abs(c);\n    long l10 = abs(a) + abs(b) + abs(c);\n\
    \    long l11 = abs(a) + abs(b) + abs(c);\n    long l12 = abs(a) + abs(b) + abs(c);\n\
    \    long l13 = abs(a) + abs(b) + abs(c);\n    long l14 = abs(a) + abs(b) + abs(c);\n\
    \    long l15 = abs(a) + abs(b) + abs(c);\n    long l16 = abs(a) + abs(b) + abs(c);\n\
    \    long l17 = abs(a) + abs(b) + abs(c);\n    long l18 = abs(a) + abs(b) + abs(c);\n\
    \    long l19 = abs(a) + abs(b) + abs(c);\n    long l20 = abs(a) + abs(b) + abs(c);\n\
    \    long l21 = abs(a) + abs(b) + abs(c);\n    long l22 = abs(a) + abs(b) + abs(c);\n\
    \    long l23 = abs(a) + abs(b) + abs(c);\n    long l24 = abs(a) + abs(b) + abs(c);\n\
    \    long l25 = abs(a) + abs(b) + abs(c);\n    long l26 = abs(a) + abs(b) + abs(c);\n\
    \    long l27 = abs(a) + abs(b) + abs(c);\n    long l28 = abs(a) + abs(b) + abs(c);\n\
    \    long l29 = abs(a) + abs(b) + abs(c);\n    long l30 = abs(a) + abs(b) + abs(c);\n\
    \    long l31 = abs(a) + abs(b) + abs(c);\n    long l32 = abs(a) + abs(b) + abs(c);\n\
    \    long l33 = abs(a) + abs(b) + abs(c);\n    long l34 = abs(a) + abs(b) + abs(c);\n\
    \    long l35 = abs(a) + abs(b) + abs(c);\n    long l36 = abs(a) + abs(b) + abs(c);\n\
    \    long l37 = abs(a) + abs(b) + abs(c);\n    long \n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7_gx4v_.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmpz7_gx4v_.cpp:52:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpz7_gx4v_.cpp: In function 'int main()':\n\
    /tmp/tmpz7_gx4v_.cpp:54:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = right_angle_triangle;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz7_gx4v_.cpp:2:\n/tmp/tmpz7_gx4v_.cpp:55:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcnbpfgq7.cpp: In function 'int main()':\n/tmp/tmpcnbpfgq7.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcnbpfgq7.cpp:2:\n/tmp/tmpcnbpfgq7.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) return\
    \ true;\n    if (b > c && b > a) return true;\n    if (c > a && c > b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnav_56lm: /tmp/tmpnav_56lm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x0 = -b - root;\n    long y0 = -b + root;\n    long x1 =\
    \ b - root;\n    long y1 = b + root;\n    return (x0 * x1 + y0 * y1) >= 0;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvak00tcx: /tmp/tmpvak00tcx.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t == 0) || (s == t && t != 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmwl4z2po: /tmp/tmpmwl4z2po.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if\
    \ (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxplm5wo.cpp: In function 'int main()':\n/tmp/tmpzxplm5wo.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzxplm5wo.cpp:2:\n/tmp/tmpzxplm5wo.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long x = (b + d) / (2 * a);\n\
    \    long y = (-b - d) / (2 * a);\n    return ((x * x) + (y * y)) <= 1;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2us96rfy: /tmp/tmp2us96rfy.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   else{\n            return false;\n        }\n    }\n    else if(a==c){\n \
    \       return true;\n    }\n    else{\n        if(b==c){\n            return\
    \ true;\n        }\n        else{\n            return false;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd7od8_5o: /tmp/tmpd7od8_5o.cpp:36: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t >= 0) || (s == 1 && t <= 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc2il3qr5: /tmp/tmpc2il3qr5.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long x = (b + c)\
    \ / 2;\n    long y = (-b - c) / 2;\n    long m = (a + b) / 2;\n    long n = (a\
    \ + c) / 2;\n    long o = (b + c) / 2;\n    long p = (a * b + c) / 2;\n    long\
    \ q = a * b * c / 4;\n    long r = a * b * c / 8;\n    long s = a * b * c / 16;\n\
    \    long t = a * b * c / 32;\n    long u = a * b * c / 64;\n    long v = a *\
    \ b * c / 128;\n    long w = a * b * c / 256;\n    long x = a * b * c / 512;\n\
    \    long y = a * b * c / 1024;\n    long z = a * b * c / 2048;\n    long a =\
    \ a * b * c / 4096;\n    long b = a * b * c / 8192;\n    long c = a * b * c /\
    \ 16384;\n    long d = a * b * c / 32768;\n    long e = a * b * c / 65536;\n \
    \   long f = a * b * c / 131072;\n    long g = a * b * c / 262144;\n    long h\
    \ = a * b * c / 524288;\n    long i = a * b * c / 1048576;\n    long j = a * b\
    \ * c / 2097152;\n    long k = a * b * c / 4194304;\n    long l = a * b * c /\
    \ 8388608;\n    long m = a * b * c / 16777216;\n    long n = a * b * c / 33554432;\n\
    \    long o = a * b * c / 67108864;\n    long p = a * b * c / 134217728;\n   \
    \ long q = a * b * c / 268435456;\n    long r = a * b * c / 536870912;\n    long\
    \ s = a * b * c / 1073741824;\n    long t = a * b * c / 2147483648;\n    long\
    \ u = a * b * c / 4294967296;\n    long v = a * b * c / 8589934592;\n    long\
    \ w = a * b * c / 17179869184;\n    long x = a * b * c / 34359738368;\n    long\
    \ y = a * b * c / 68719476736;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqpsmbi15.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpqpsmbi15.cpp:30:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   30 |     long x = a * b * c / 512;\n      |  \
    \        ^\n/tmp/tmpqpsmbi15.cpp:17:10: note: \u2018long int x\u2019 previously\
    \ declared here\n   17 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmpqpsmbi15.cpp:31:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   31 |     long y = a * b *\
    \ c / 1024;\n      |          ^\n/tmp/tmpqpsmbi15.cpp:18:10: note: \u2018long\
    \ int y\u2019 previously declared here\n   18 |     long y = (-b - c) / 2;\n \
    \     |          ^\n/tmp/tmpqpsmbi15.cpp:33:10: error: declaration of \u2018long\
    \ int a\u2019 shadows a parameter\n   33 |     long a = a * b * c / 4096;\n  \
    \    |          ^\n/tmp/tmpqpsmbi15.cpp:34:10: error: declaration of \u2018long\
    \ int b\u2019 shadows a parameter\n   34 |     long b = a * b * c / 8192;\n  \
    \    |          ^\n/tmp/tmpqpsmbi15.cpp:35:10: error: declaration of \u2018long\
    \ int c\u2019 shadows a parameter\n   35 |     long c = a * b * c / 16384;\n \
    \     |          ^\n/tmp/tmpqpsmbi15.cpp:36:10: error: redeclaration of \u2018\
    long int d\u2019\n   36 |     long d = a * b * c / 32768;\n      |          ^\n\
    /tmp/tmpqpsmbi15.cpp:13:10: note: \u2018long int d\u2019 previously declared here\n\
    \   13 |     long d = b * b - 4 * a * c;\n      |          ^\n/tmp/tmpqpsmbi15.cpp:45:10:\
    \ error: redeclaration of \u2018long int m\u2019\n   45 |     long m = a * b *\
    \ c / 16777216;\n      |          ^\n/tmp/tmpqpsmbi15.cpp:19:10: note: \u2018\
    long int m\u2019 previously declared here\n   19 |     long m = (a + b) / 2;\n\
    \      |          ^\n/tmp/tmpqpsmbi15.cpp:46:10: error: redeclaration of \u2018\
    long int n\u2019\n   46 |     long n = a * b * c / 33554432;\n      |        \
    \  ^\n/tmp/tmpqpsmbi15.cpp:20:10: note: \u2018long int n\u2019 previously declared\
    \ here\n   20 |     long n = (a + c) / 2;\n      |          ^\n/tmp/tmpqpsmbi15.cpp:47:10:\
    \ error: redeclaration of \u2018long int o\u2019\n   47 |     long o = a * b *\
    \ c / 67108864;\n      |          ^\n/tmp/tmpqpsmbi15.cpp:21:10: note: \u2018\
    long int o\u2019 previously declared here\n   21 |     long o = (b + c) / 2;\n\
    \      |          ^\n/tmp/tmpqpsmbi15.cpp:48:"
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - b;\n    long f = d - e;\n    long g = e\
    \ - f;\n    long h = f - g;\n    long i = g - h;\n    long j = h - i;\n    long\
    \ k = i - j;\n    long l = j - k;\n    long m = k - l;\n    long n = l - m;\n\
    \    long o = m - n;\n    long p = n - o;\n    long q = o - p;\n    long r = p\
    \ - q;\n    long s = q - r;\n    long t = r - s;\n    long u = s - t;\n    long\
    \ v = t - u;\n    long w = u - v;\n    long x = v - w;\n    long y = w - x;\n\
    \    long z = x - y;\n    long a = x + y + z;\n    long b = y + z + x;\n    long\
    \ c = z + x + y;\n    long d = x + y + z;\n    long e = y + z + x;\n    long f\
    \ = z + x + y;\n    long g = x + y + z;\n    long h = y + z + x;\n    long i =\
    \ z + x + y;\n    long j = x + y + z;\n    long k = y + z + x;\n    long l = z\
    \ + x + y;\n    long m = x + y + z;\n    long n = y + z + x;\n    long o = z +\
    \ x + y;\n    long p = x + y + z;\n    long q = y + z + x;\n    long r = z + x\
    \ + y;\n    long s = x + y + z;\n    long t = y + z + x;\n    long u = z + x +\
    \ y;\n    long v = x + y + z;\n    long w = y + z + x;\n    long x = y + z + x;\n\
    \    long y = z + x + y;\n    long z = x + y + y;\n    long a = x + y + z;\n \
    \   long b = y + z + x;\n    long c = z + x + y;\n    long d = x + y + z;\n  \
    \  long e = y + z + x;\n    long f = z + x + y;\n    long g = x + y + z;\n   \
    \ long h = y + z + x;\n    long i = z + x + y;\n    long j = x + y + z;\n    long\
    \ k = y + z + x;\n    long l = z + x + y;\n    long m = x + y + z;\n    long n\
    \ = y + z + x;\n    long o = z + x + y;\n    long p = x + y + z;\n    long q =\
    \ y + z + x;\n    long r = z + x + y;\n    long s = x + y + z;\n    long t = y\
    \ + z + x;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1w13w4f3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp1w13w4f3.cpp:37:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   37 |     long a = x + y +\
    \ z;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:38:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   38 |     long b = y + z + x;\n      |\
    \          ^\n/tmp/tmp1w13w4f3.cpp:39:10: error: declaration of \u2018long int\
    \ c\u2019 shadows a parameter\n   39 |     long c = z + x + y;\n      |      \
    \    ^\n/tmp/tmp1w13w4f3.cpp:40:10: error: redeclaration of \u2018long int d\u2019\
    \n   40 |     long d = x + y + z;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:14:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   14 |     long d =\
    \ b - a;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:41:10: error: redeclaration\
    \ of \u2018long int e\u2019\n   41 |     long e = y + z + x;\n      |        \
    \  ^\n/tmp/tmp1w13w4f3.cpp:15:10: note: \u2018long int e\u2019 previously declared\
    \ here\n   15 |     long e = c - b;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:42:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   42 |     long f = z + x +\
    \ y;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:16:10: note: \u2018long int f\u2019\
    \ previously declared here\n   16 |     long f = d - e;\n      |          ^\n\
    /tmp/tmp1w13w4f3.cpp:43:10: error: redeclaration of \u2018long int g\u2019\n \
    \  43 |     long g = x + y + z;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:17:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   17 |     long g =\
    \ e - f;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:44:10: error: redeclaration\
    \ of \u2018long int h\u2019\n   44 |     long h = y + z + x;\n      |        \
    \  ^\n/tmp/tmp1w13w4f3.cpp:18:10: note: \u2018long int h\u2019 previously declared\
    \ here\n   18 |     long h = f - g;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:45:10:\
    \ error: redeclaration of \u2018long int i\u2019\n   45 |     long i = z + x +\
    \ y;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:19:10: note: \u2018long int i\u2019\
    \ previously declared here\n   19 |     long i = g - h;\n      |          ^\n\
    /tmp/tmp1w13w4f3.cpp:46:10: error: redeclaration of \u2018long int j\u2019\n \
    \  46 |     long j = x + y + z;\n      |          ^\n/tmp/tmp1w13w4f3.cpp:20:10:"
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0) {\n        return\
    \ false;\n    }\n    long f = ((b * b) - 4 * a * c) / d;\n    if (f < 0) {\n \
    \       return false;\n    }\n    long g = ((b * b) - 4 * a * c) / d;\n    if\
    \ (g < 0) {\n        return false;\n    }\n    long h = ((b * b) - 4 * a * c)\
    \ / d;\n    if (h < 0) {\n        return false;\n    }\n    long i = ((b * b)\
    \ - 4 * a * c) / d;\n    if (i < 0) {\n        return false;\n    }\n    long\
    \ j = ((b * b) - 4 * a * c) / d;\n    if (j < 0) {\n        return false;\n  \
    \  }\n    long k = ((b * b) - 4 * a * c) / d;\n    if (k < 0) {\n        return\
    \ false;\n    }\n    long l = ((b * b) - 4 * a * c) / d;\n    if (l < 0) {\n \
    \       return false;\n    }\n    long m = ((b * b) - 4 * a * c) / d;\n    if\
    \ (m < 0) {\n        return false;\n    }\n    long n = ((b * b) - 4 * a * c)\
    \ / d;\n    if (n < 0) {\n        return false;\n    }\n    long o = ((b * b)\
    \ - 4 * a * c) / d;\n    if (o < 0) {\n        return false;\n    }\n    long\
    \ p = ((b * b) - 4 * a * c) / d;\n    if (p < 0) {\n        return false;\n  \
    \  }\n    long q = ((b * b) - 4 * a * c) / d;\n    if (q < 0) {\n        return\
    \ false;\n    }\n    long r = ((b * b) - 4 * a * c) / d;\n    if (r < 0) {\n \
    \       return false;\n    }\n    long s = ((b * b) - 4 * a * c) / d;\n    if\
    \ (s < 0) {\n        return false;\n    }\n    long t = ((b * b) - 4 * a * c)\
    \ / d;\n    if (t < 0) {\n        return false;\n    }\n    long u = ((b * b)\
    \ - 4 * a * c) / d;\n    if (u < 0) {\n        return false;\n    }\n    long\
    \ v = ((b * b) - 4 * a * c) / d;\n    if (v < 0) {\n        return false;\n  \
    \  }\n    long w = ((b * b) - 4 * a * c) / d;\n    if (w < 0) {\n        return\
    \ false;\n    }\n    long x = ((b * b) - 4 * a * c) / d;\n    if (x < 0) {\n \
    \       return false;\n    }\n    long y = ((b * b) - 4 * a * c) / d;\n    if\
    \ (y < 0) {\n        return false;\n    }\n    long z = ((b * b) - 4 * a * c)\
    \ / d;\n    if (z < 0) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpso0kr6i5: /tmp/tmpso0kr6i5.cpp:110: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t >= 0) || (s >= 0 && t <= 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3fuwpknl: /tmp/tmp3fuwpknl.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac + bc;\n    long acb = ac + cb;\n    long bcb = bc + cb;\n\
    \    long abac = ab + ac;\n    long abbc = ab + bc;\n    long acbc = ac + bc;\n\
    \    long abcb = ab + cb;\n    long acbc = ac + cb;\n    long abcab = ab + ac\
    \ + bc;\n    long abcbc = ab + ac + cb;\n    long acbca = ac + ab + cb;\n    long\
    \ acbcbc = ac + ab + cb;\n    long acbcab = ac + ab + bc;\n    long acbcbca =\
    \ ac + ab + cb;\n    long acbcbcbc = ac + ab + cb;\n    long acbcbcab = ac + ab\
    \ + bc;\n    long acbcbcbca = ac + ab + cb;\n    long acbcbcbcbc = ac + ab + cb;\n\
    \    long acbcbcbcab = ac + ab + bc;\n    long acbcbcbcbca = ac + ab + cb;\n \
    \   long acbcbcbcbcbc = ac + ab + cb;\n    long acbcbcbcbcab = ac + ab + bc;\n\
    \    long acbcbcbcbcbca = ac + ab + cb;\n    long acbcbcbcbcbcbc = ac + ab + cb;\n\
    \    long acbcbcbcbcbcab = ac + ab + bc;\n    long acbcbcbcbcbcbca = ac + ab +\
    \ cb;\n    long acbcbcbcbcbcbcbc = ac + ab + cb;\n    long acbcbcbcbcbcbcab =\
    \ ac + ab + bc;\n    long acbcbcbcbcbcbcbca = ac + ab + cb;\n    long acbcbcbcbcbcbcbcbc\
    \ = ac + ab + cb;\n    long acbcbcbcbcbcbcbcab = ac + ab + bc;\n    long acbcbcbcbcbcbcbcbca\
    \ = ac + ab + cb;\n    long acbcbcbcbcbcbcbcbcbc = ac + ab + cb;\n\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7vnwx293.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp7vnwx293.cpp:24:10: error: redeclaration\
    \ of \u2018long int acbc\u2019\n   24 |     long acbc = ac + cb;\n      |    \
    \      ^~~~\n/tmp/tmp7vnwx293.cpp:22:10: note: \u2018long int acbc\u2019 previously\
    \ declared here\n   22 |     long acbc = ac + bc;\n      |          ^~~~\n/tmp/tmp7vnwx293.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   51 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x0 = -b - root;\n    long y0 = -b + root;\n    long x1 =\
    \ -b + root;\n    long y1 = -b - root;\n    long x2 = x1;\n    long y2 = y1;\n\
    \    long x3 = -b;\n    long y3 = -b;\n    long x4 = x3;\n    long y4 = y3;\n\
    \    long x5 = x4;\n    long y5 = y4;\n    long x6 = x5;\n    long y6 = y5;\n\
    \    long x7 = x6;\n    long y7 = y6;\n    long x8 = x7;\n    long y8 = y7;\n\
    \    long x9 = -x0;\n    long y9 = y0;\n    long x10 = -x1;\n    long y10 = y1;\n\
    \    long x11 = -x2;\n    long y11 = y2;\n    long x12 = x3;\n    long y12 = y3;\n\
    \    long x13 = x4;\n    long y13 = y4;\n    long x14 = x5;\n    long y14 = y5;\n\
    \    long x15 = x6;\n    long y15 = y6;\n    long x16 = x7;\n    long y16 = y7;\n\
    \    long x17 = x8;\n    long y17 = y8;\n    long x18 = x9;\n    long y18 = y9;\n\
    \    long x19 = x10;\n    long y19 = y10;\n    long x20 = x11;\n    long y20 =\
    \ y11;\n    long x21 = x12;\n    long y21 = y12;\n    long x22 = x13;\n    long\
    \ y22 = y13;\n    long x23 = x14;\n    long y23 = y14;\n    long x24 = x15;\n\
    \    long y24 = y15;\n    long x25 = x16;\n    long y25 = y16;\n    long x26 =\
    \ x17;\n    long y26 = y17;\n    long x27 = x18;\n    long y27 = y18;\n    long\
    \ x28 = x19;\n    long y28 = y19;\n    long x29 = x20;\n    long y29 = y20;\n\
    \    long x30 = x21;\n    long y30 = y21;\n    long x31 = x22;\n    long y31 =\
    \ y22;\n    long x32 = x23\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvgrago_d.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpvgrago_d.cpp:83:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   83 | }\n     \
    \ | ^\n/tmp/tmpvgrago_d.cpp:83:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   83 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return\
    \ ((x * x) + (y * y)) <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxg4aq8i_: /tmp/tmpxg4aq8i_.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (d >\
    \ 0) ? sqrt(d) : -sqrt(d);\n    long x_1 = (-b + root) / (2 * a);\n    long x_2\
    \ = (-b - root) / (2 * a);\n    return (x_1 == x_2);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8i9_o9jn: /tmp/tmp8i9_o9jn.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t >= 0) || (s == 1 && t <= 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmprl2n5pr4: /tmp/tmprl2n5pr4.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long x = (-b - root) / a;\n    long y = (-b + root) / a;\n    return\
    \ (x*x + y*y) == 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp48f1x24c: /tmp/tmp48f1x24c.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long a2 = (a + b) / 2;\n    long long a3 = (a + c) / 2;\n\
    \    long long b1 = (b + c + a) / 2;\n    long long b2 = (b + c) / 2;\n    long\
    \ long b3 = (b + a) / 2;\n    long long c1 = (c + a + b) / 2;\n    long long c2\
    \ = (c + b) / 2;\n    long long c3 = (c + a) / 2;\n    long long d1 = (a + b +\
    \ c) / 2;\n    long long d2 = (a + b) / 2;\n    long long d3 = (a + c) / 2;\n\
    \    long long e1 = (a + b + c) / 2;\n    long long e2 = (a + b) / 2;\n    long\
    \ long e3 = (a + c) / 2;\n    long long f1 = (b + c + a) / 2;\n    long long f2\
    \ = (b + c) / 2;\n    long long f3 = (b + a) / 2;\n    long long g1 = (c + a +\
    \ b) / 2;\n    long long g2 = (c + b) / 2;\n    long long g3 = (c + a) / 2;\n\
    \    long long h1 = (a + b + c) / 2;\n    long long h2 = (b + c + a) / 2;\n  \
    \  long long h3 = (c + a + b) / 2;\n    long long i1 = (a + b + c) / 2;\n    long\
    \ long i2 = (b + c + a) / 2;\n    long long i3 = (c + a + b) / 2;\n    long long\
    \ j1 = (a + b + c) / 2;\n    long long j2 = (b + c + a) / 2;\n    long long j3\
    \ = (c + a + b) / 2;\n    long long k1 = (a + b + c) / 2;\n    long long k2 =\
    \ (b + c + a) / 2;\n    long long k3 = (c + a + b) / 2;\n    long long l1 = (a\
    \ + b + c) / 2;\n    long long l2 = (b + c + a) / 2;\n    long long l3 = (c +\
    \ a + b) / 2;\n    long long m1 = (a + b + c) / 2;\n    long long m2 = (b + c\
    \ + a) / 2;\n    long long m3 = (c + a + b) / 2;\n    long long n1 = (a + b +\
    \ c) / 2;\n    long long n2 = (b + c + a) / 2;\n    long long n3 = (c + a + b)\
    \ / 2;\n    long long o1 = (a + b + c) / 2;\n    long long o2 = (b + c + a) /\
    \ 2;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplx65d4ku: /tmp/tmplx65d4ku.cpp:60: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = ((b * b) - (4 * a * c));\n    long f = ((b * b) - (4 * a *\
    \ c));\n    long g = ((b * b) - (4 * a * c));\n    long h = (b * b) - (4 * a *\
    \ c);\n    long i = (b * b) - (4 * a * c);\n    long j = (b * b) - (4 * a * c);\n\
    \    long k = (b * b) - (4 * a * c);\n    long l = (b * b) - (4 * a * c);\n  \
    \  long m = (b * b) - (4 * a * c);\n    long n = (b * b) - (4 * a * c);\n    long\
    \ o = (b * b) - (4 * a * c);\n    long p = (b * b) - (4 * a * c);\n    long q\
    \ = (b * b) - (4 * a * c);\n    long r = (b * b) - (4 * a * c);\n    long s =\
    \ (4 * a * c);\n    long t = (4 * a * c);\n    long u = (4 * a * c);\n    long\
    \ v = (4 * a * c);\n    long w = (4 * a * c);\n    long x = (4 * a * c);\n   \
    \ long y = (4 * a * c);\n    long z = (4 * a * c);\n    long A = (4 * a * c);\n\
    \    long B = (4 * a * c);\n    long C = (4 * a * c);\n    long D = (4 * a * c);\n\
    \    long E = (4 * a * c);\n    long F = (4 * a * c);\n    long G = (4 * a * c);\n\
    \    long H = (4 * a * c);\n    long I = (4 * a * c);\n    long J = (4 * a * c);\n\
    \    long K = (4 * a * c);\n    long L = (4 * a * c);\n    long M = (4 * a * c);\n\
    \    long N = (4 * a * c);\n    long O = (4 * a * c);\n    long P = (4 * a * c);\n\
    \    long Q = (4 * a * c);\n    long R = (4 * a * c);\n    long S = (4 * a * c);\n\
    \    long T = (4 * a * c);\n    long U = (4 * a * c);\n    long V = (4 * a * c);\n\
    \    long W = (4 * a * c);\n    long X = (4 * a * c);\n    long Y = (4 * a * c);\n\
    \    long Z = (4 * a * c);\n    long aa = (4 * a * c);\n    long bb = (4 * a\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgsv99ca7.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpgsv99ca7.cpp:67:21: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   67 |     long bb = (4 * a\n   \
    \   |               ~     ^\n      |                     )\n   68 | }\n      |\
    \ ~                    \n/tmp/tmpgsv99ca7.cpp:68:1: error: expected \u2018,\u2019\
    \ or \u2018;\u2019 before \u2018}\u2019 token\n   68 | }\n      | ^\n/tmp/tmpgsv99ca7.cpp:68:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   68 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    } else if (b > a && b > c) {\n        return true;\n\
    \    } else if (c > a && c > b) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9jb7f71z: /tmp/tmp9jb7f71z.cpp:26: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if\
    \ (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxplm5wo.cpp: In function 'int main()':\n/tmp/tmpzxplm5wo.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzxplm5wo.cpp:2:\n/tmp/tmpzxplm5wo.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab +\
    \ ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + bc);\n    long abcd\
    \ = abs(abc);\n    long bcda = abs(bcd - acd);\n    long acdb = abs(acd - abc);\n\
    \    long abcda = abs(abcd - acdb);\n    long bcdaa = abs(bcda - abcda);\n   \
    \ long acbba = abs(acdba - bcdaa);\n    long abcdaa = abs(abcdaa - acbba);\n \
    \   long bcdaaa = abs(bcdaaa - abcdaa);\n    long acbbaa = abs(acbbaa - bcdaaa);\n\
    \    long abcdaaa = abs(abcdaaa - acbbaa);\n    long bcdaaaaa = abs(bcdaaaaa -\
    \ abcdaaa);\n    long acbbaaaa = abs(acbbaaaa - bcdaaaaa);\n    long abcdaaaaa\
    \ = abs(abcdaaaaa - acbbaaaa);\n    long bcdaaaaaa = abs(bcdaaaaaa - abcdaaaaa);\n\
    \    long acbbaaaaaa = abs(acbbaaaaaa - bcdaaaaaa);\n    long abcdaaaaaaa = abs(abcdaaaaaaa\
    \ - acbbaaaaaa);\n    long bcdaaaaaaaa = abs(bcdaaaaaaaa - abcdaaaaaaa);\n   \
    \ long acbbaaaaaaa = abs(acbbaaaaaaaa - bcdaaaaaaaa);\n    long abcdaaaaaaaa =\
    \ abs(abcdaaaaaaaaa - acbbaaaaaaaa);\n    long bcdaaaaaaaaa = abs(bcdaaaaaaaaa\
    \ - abcdaaaaaaaa);\n    long acbbaaaaaaaa = abs(acbbaaaaaaaaa - bcdaaaaaaaaa);\n\
    \    long abcdaaaaaaaaa = abs(abcdaaaaaaaaa - acbbaaaaaaaa);\n    long bcdaaaaaaaaab\
    \ = abs(bcdaaaaaaaaab - abcdaaaaaaaaaa);\n    long acbbaaaaaaaab = abs(acbbaaaaaaaab\
    \ - bcdaaaaaaaaab);\n    long abcdaaaaaaaaab = abs(abcdaaaaaaaaab - acbbaaaaaaaab);\n\
    \    long bcdaaaaaaaaabb = abs(bcdaaaaaaaaabb - abcdaaaaaaaaab);\n    long ac\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxyiz1.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpzkjxyiz1.cpp:24:22: error: \u2018acdba\u2019\
    \ was not declared in this scope; did you mean \u2018acbba\u2019?\n   24 |   \
    \  long acbba = abs(acdba - bcdaa);\n      |                      ^~~~~\n    \
    \  |                      acbba\n/tmp/tmpzkjxyiz1.cpp:36:28: error: \u2018acbbaaaaaaaa\u2019\
    \ was not declared in this scope; did you mean \u2018acbbaaaaaaa\u2019?\n   36\
    \ |     long acbbaaaaaaa = abs(acbbaaaaaaaa - bcdaaaaaaaa);\n      |         \
    \                   ^~~~~~~~~~~~\n      |                            acbbaaaaaaa\n\
    /tmp/tmpzkjxyiz1.cpp:37:29: error: \u2018abcdaaaaaaaaa\u2019 was not declared\
    \ in this scope; did you mean \u2018abcdaaaaaaaa\u2019?\n   37 |     long abcdaaaaaaaa\
    \ = abs(abcdaaaaaaaaa - acbbaaaaaaaa);\n      |                             ^~~~~~~~~~~~~\n\
    \      |                             abcdaaaaaaaa\n/tmp/tmpzkjxyiz1.cpp:39:29:\
    \ error: \u2018acbbaaaaaaaaa\u2019 was not declared in this scope; did you mean\
    \ \u2018acbbaaaaaaa\u2019?\n   39 |     long acbbaaaaaaaa = abs(acbbaaaaaaaaa\
    \ - bcdaaaaaaaaa);\n      |                             ^~~~~~~~~~~~~\n      |\
    \                             acbbaaaaaaa\n/tmp/tmpzkjxyiz1.cpp:41:46: error:\
    \ \u2018abcdaaaaaaaaaa\u2019 was not declared in this scope; did you mean \u2018\
    bcdaaaaaaaaab\u2019?\n   41 |     long bcdaaaaaaaaab = abs(bcdaaaaaaaaab - abcdaaaaaaaaaa);\n\
    \      |                                              ^~~~~~~~~~~~~~\n      |\
    \                                              bcdaaaaaaaaab\n/tmp/tmpzkjxyiz1.cpp:46:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   46 | }\n      | ^\n\
    /tmp/tmpzkjxyiz1.cpp:46:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0) {\n        return\
    \ false;\n    }\n    long f = ((b * b) - 4 * a * c) / d + a;\n    if (f > b) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwv9yj4x1: /tmp/tmpwv9yj4x1.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root)) / (2 * a);\n    long t = (-b - sqrt(root))\
    \ / (2 * a);\n    if (s == t) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpipb7ojej: /tmp/tmpipb7ojej.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b+c) return false;\n    if(a>c+b) return false;\n    if(b>c+a) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmytd8hvr: /tmp/tmpmytd8hvr.cpp:22: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + d) / (2 * a);\n    long y = (-b\
    \ - d) / (2 * a);\n    return (x > 0) && (y > 0);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwsaj2onj: /tmp/tmpwsaj2onj.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long x0 = ((-b + root) / a) >> 0;\n    long y0 = ((-b - root) / a) >> 0;\n\
    \    long x1 = ((-b + root) / a) >> 0;\n    long y1 = ((-b - root) / a) >> 0;\n\
    \    return (x0 > y0 && x1 > y1) || (x0 < y0 && x1 < y1);\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp72pnue37: /tmp/tmp72pnue37.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c)\
    \ return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n\
    \    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c)\
    \ return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n\
    \    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c)\
    \ return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n\
    \    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c)\
    \ return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n\
    \    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c)\
    \ return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n\
    \    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c)\
    \ return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n\
    \    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c)\
    \ return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n\
    \    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c)\
    \ return true;\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n\
    \    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c)\
    \ return true;\n    if(a==c&&b==c) return true;\n    if(a==b&&b==c) return true;\n\
    \    if(a==c&&b==c) return true;\n    if\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq614nill.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpq614nill.cpp:61:1: error: expected\
    \ \u2018(\u2019 before \u2018}\u2019 token\n   61 | }\n      | ^\n      | (\n\
    /tmp/tmpq614nill.cpp:61:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   61 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4zzo_6qw: /tmp/tmp4zzo_6qw.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    if (s == t) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_7dxca6a: /tmp/tmp_7dxca6a.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = (long) (-b + root) / a;\n    long y = (long) (-b - root)\
    \ / a;\n    return (root == (long) sqrt(x));\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2878u9jt: /tmp/tmp2878u9jt.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = (long) (-b + root) / a;\n    long y = (long) (-b - root)\
    \ / a;\n    return (root == x) && (root == y);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyh_kydvx: /tmp/tmpyh_kydvx.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0) return true;\n    if (a == 0 || b == 0 || c == 0) return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (b\
    \ + c) / 2;\n    long y = (-b - c) / 2;\n    long m = (a + b) / 2;\n    long n\
    \ = (-a + b) / 2;\n    long o = (a + c) / 2;\n    long p = (-a + c) / 2;\n   \
    \ long q = (b + c) / 2;\n    long r = (-b + c) / 2;\n    long s = (a + b + c)\
    \ / 2;\n    long t = (-a + b + c) / 2;\n    long u = (a + b + c + d) / 2;\n  \
    \  long v = (-a + b + c + d) / 2;\n    long w = (a + b + c + d + e) / 2;\n   \
    \ long x = (a + b + c + d + e) / 2;\n    long y = (a + b + c + d + e) / 2;\n \
    \   long z = (a + b + c + d + e) / 2;\n    long x1 = (-a + b + c + d + e) / 2;\n\
    \    long y1 = (-a + b + c + d + e) / 2;\n    long z1 = (-a + b + c + d + e) /\
    \ 2;\n    long x2 = (-a + b + c + d + e) / 2;\n    long y2 = (-a + b + c + d +\
    \ e) / 2;\n    long z2 = (-a + b + c + d + e) / 2;\n    long x3 = (-a + b + c\
    \ + d + e) / 2;\n    long y3 = (-a + b + c + d + e) / 2;\n    long z3 = (-a +\
    \ b + c + d + e) / 2;\n    long x4 = (-a + b + c + d + e) / 2;\n    long y4 =\
    \ (-a + b + c + d + e) / 2;\n    long z4 = (-a + b + c + d + e) / 2;\n    long\
    \ x5 = (-a + b + c + d + e) / 2;\n    long y5 = (-a + b + c + d + e) / 2;\n  \
    \  long z5 = (-a + b + c + d + e) / 2;\n    long x6 = (-a + b + c + d + e) / 2;\n\
    \    long y6 = (-a + b + c + d + e) / 2;\n    long z6 = (-a + b + c + d + e) /\
    \ 2;\n    long x7 = (-a + b + c + d + e) / 2;\n    long y7 = (-a + b + c + d +\
    \ e) / 2;\n    long z7 = (-a + b + c + d + \n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2r7z3c7.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpx2r7z3c7.cpp:29:31: error: \u2018e\u2019\
    \ was not declared in this scope\n   29 |     long w = (a + b + c + d + e) / 2;\n\
    \      |                               ^\n/tmp/tmpx2r7z3c7.cpp:30:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   30 |     long x = (a + b + c + d + e) / 2;\n \
    \     |          ^\n/tmp/tmpx2r7z3c7.cpp:17:10: note: \u2018long int x\u2019 previously\
    \ declared here\n   17 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmpx2r7z3c7.cpp:31:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   31 |     long y = (a + b\
    \ + c + d + e) / 2;\n      |          ^\n/tmp/tmpx2r7z3c7.cpp:18:10: note: \u2018\
    long int y\u2019 previously declared here\n   18 |     long y = (-b - c) / 2;\n\
    \      |          ^\n/tmp/tmpx2r7z3c7.cpp:54:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpx2r7z3c7.cpp:53:32:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   53 |     long z7\
    \ = (-a + b + c + d +\n      |               ~                ^\n      |     \
    \                           )\n   54 | }\n      | ~                          \
    \     \n/tmp/tmpx2r7z3c7.cpp:54:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   54 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = a + b\
    \ + c;\n    if (ans % 2 == 0)\n        return false;\n    long long sum = 0;\n\
    \    long long k = 0;\n    while (k <= ans / 2) {\n        sum += k;\n       \
    \ k += 2;\n    }\n    long long sum2 = sum * sum;\n    long long sum3 = sum2 *\
    \ sum;\n    long long sum4 = sum3 * sum;\n    long long sum5 = sum4 * sum;\n \
    \   long long sum6 = sum5 * sum;\n    long long sum7 = sum6 * sum;\n    long long\
    \ sum8 = sum7 * sum;\n    long long sum9 = sum8 * sum;\n    long long sum10 =\
    \ sum9 * sum;\n    long long sum11 = sum10 * sum;\n    long long sum12 = sum11\
    \ * sum;\n    long long sum13 = sum12 * sum;\n    long long sum14 = sum13 * sum;\n\
    \    long long sum15 = sum14 * sum;\n    long long sum16 = sum15 * sum;\n    long\
    \ long sum17 = sum16 * sum;\n    long long sum18 = sum17 * sum;\n    long long\
    \ sum19 = sum18 * sum;\n    long long sum20 = sum19 * sum;\n    long long sum21\
    \ = sum20 * sum;\n    long long sum22 = sum21 * sum;\n    long long sum23 = sum22\
    \ * sum;\n    long long sum24 = sum23 * sum;\n    long long sum25 = sum24 * sum;\n\
    \    long long sum26 = sum25 * sum;\n    long long sum27 = sum26 * sum;\n    long\
    \ long sum28 = sum27 * sum;\n    long long sum29 = sum28 * sum;\n    long long\
    \ sum30 = sum29 * sum;\n    long long sum31 = sum30 * sum;\n    long long sum32\
    \ = sum31 * sum;\n    long long sum33 = sum32 * sum;\n    long long sum34 = sum33\
    \ * sum;\n    long long sum35 = sum34 * sum;\n    long long sum36 = sum35 * sum;\n\
    \    long long sum37 = sum36 * sum;\n    long long sum38 = sum37 * sum;\n    long\
    \ long sum39 = sum38 * sum;\n    long long sum40 = sum39 * sum;\n    long long\
    \ sum41 = sum40 * sum;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpryngyc87: /tmp/tmpryngyc87.cpp:66: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n    if\
    \ (t1 > t2) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7snw8p74: /tmp/tmp7snw8p74.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long x = (-b + sqrt(d))\
    \ / (2 * a);\n    long y = (-b - sqrt(d)) / (2 * a);\n    return ((x == 0) &&\
    \ (y == 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptvy_q7_i: /tmp/tmptvy_q7_i.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b){\n        if(a>c){\n            return true;\n        }\n    }\n\
    \    if(b>c){\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbbcuw45e: /tmp/tmpbbcuw45e.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = ab + bc;\n\
    \    long acb = ac + ab;\n    long abba = ab + ac;\n    long acab = ac + ab;\n\
    \    long abcab = ab + ac + bc;\n    long acabb = ac + ab + bc;\n    long abcabc\
    \ = ab + ac + bc + abc;\n    long acabbc = ac + ab + bc + abc;\n    long abcabcd\
    \ = ab + ac + bc + abc + cd;\n    long acabbcc = ac + ab + bc + abc + cd;\n  \
    \  long abcabcc = ab + ac + bc + abc + cc + cd;\n    long acabbccd = ac + ab +\
    \ bc + abc + cc + cd;\n    long abcabccd = ab + ac + bc + abc + cc + cd + d;\n\
    \    long acabbccdd = ac + ab + bc + abc + cc + cd + d;\n    long abcabccdd =\
    \ ab + ac + bc + abc + cc + cd + d + d;\n    long acabbccdde = ac + ab + bc +\
    \ abc + cc + cd + d + e;\n    long abcabccdde = ab + ac + bc + abc + cc + cd +\
    \ d + e;\n    long acabbccddef = ac + ab + bc + abc + cc + cd + d + e + f;\n \
    \   long abcabccddef = ab + ac + bc + abc + cc + cd + d + e + f;\n    long acabbccddefg\
    \ = ac + ab + bc + abc + cc + cd + d + e + f + g;\n    long abcabccddefg = ab\
    \ + ac + bc + abc + cc + cd + d + e + f + g;\n    long acabbccddefgh = ac + ab\
    \ + bc + abc + cc + cd + d + e + f + g + h;\n    long abcabccddefgh = ab + ac\
    \ + bc + abc + cc + cd + d + e + f + g + h;\n    long acabbccddefghi = ac + ab\
    \ + bc + abc + cc + cd + d + e + f + g + h + i;\n    long abcabccd\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk4b5f4bz.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpk4b5f4bz.cpp:24:41: error: \u2018cd\u2019\
    \ was not declared in this scope; did you mean \u2018c\u2019?\n   24 |     long\
    \ abcabcd = ab + ac + bc + abc + cd;\n      |                                \
    \         ^~\n      |                                         c\n/tmp/tmpk4b5f4bz.cpp:26:41:\
    \ error: \u2018cc\u2019 was not declared in this scope; did you mean \u2018bc\u2019\
    ?\n   26 |     long abcabcc = ab + ac + bc + abc + cc + cd;\n      |         \
    \                                ^~\n      |                                 \
    \        bc\n/tmp/tmpk4b5f4bz.cpp:28:52: error: \u2018d\u2019 was not declared\
    \ in this scope\n   28 |     long abcabccd = ab + ac + bc + abc + cc + cd + d;\n\
    \      |                                                    ^\n/tmp/tmpk4b5f4bz.cpp:31:58:\
    \ error: \u2018e\u2019 was not declared in this scope\n   31 |     long acabbccdde\
    \ = ac + ab + bc + abc + cc + cd + d + e;\n      |                           \
    \                               ^\n/tmp/tmpk4b5f4bz.cpp:33:63: error: \u2018f\u2019\
    \ was not declared in this scope\n   33 |     long acabbccddef = ac + ab + bc\
    \ + abc + cc + cd + d + e + f;\n      |                                      \
    \                         ^\n/tmp/tmpk4b5f4bz.cpp:35:68: error: \u2018g\u2019\
    \ was not declared in this scope\n   35 |     long acabbccddefg = ac + ab + bc\
    \ + abc + cc + cd + d + e + f + g;\n      |                                  \
    \                                  ^\n/tmp/tmpk4b5f4bz.cpp:37:73: error: \u2018\
    h\u2019 was not declared in this scope\n   37 |     long acabbccddefgh = ac +\
    \ ab + bc + abc + cc + cd + d + e + f + g + h;\n      |                      \
    \                                                   ^\n/tmp/tmpk4b5f4bz.cpp:39:78:\
    \ error: \u2018i\u2019 was not declared in this scope\n   39 |     long acabbccddefghi\
    \ = ac + ab + bc + abc + cc + cd + d + e + f + g + h + i;\n      |           \
    \                                                                   ^\n/tmp/tmpk4b5f4bz.cpp:41:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   41 | }\n      | ^\n\
    /tmp/tmpk4b5f4bz.cpp:41:1: warning: no return statem"
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4zzo_6qw: /tmp/tmp4zzo_6qw.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long ans = (a*a + b*b - c*c)/2;\n    long long d = sqrt(ans);\n    long\
    \ long a1 = a/d;\n    long long b1 = b/d;\n    long long c1 = c/d;\n    long long\
    \ a2 = a1*a1;\n    long long b2 = b1*b1;\n    long long c2 = c1*c1;\n    long\
    \ long a3 = a2*a1;\n    long long b3 = b2*b1;\n    long long c3 = c2*c1;\n   \
    \ long long a4 = a3*a1;\n    long long b4 = b3*b1;\n    long long c4 = c3*c1;\n\
    \    long long a5 = a4*a1;\n    long long b5 = b5*b1;\n    long long c5 = c5*c1;\n\
    \    long long a6 = a5*a1;\n    long long b6 = b6*b1;\n    long long c6 = c6*c1;\n\
    \    long long a7 = a6*a1;\n    long long b7 = b7*b1;\n    long long c7 = c7*c1;\n\
    \    long long a8 = a7*a1;\n    long long b8 = b7*b1;\n    long long c8 = c7*c1;\n\
    \    long long a9 = a8*a1;\n    long long b9 = b8*b1;\n    long long c9 = c8*c1;\n\
    \    long long a10 = a9*a1;\n    long long b10 = b9*b1;\n    long long c10 = c9*c1;\n\
    \    long long a11 = a10*a1;\n    long long b11 = b10*b1;\n    long long c11 =\
    \ c10*c1;\n    long long a12 = a11*a1;\n    long long b12 = b11*b1;\n    long\
    \ long c12 = c11*c1;\n    long long a13 = a12*a1;\n    long long b13 = b12*b1;\n\
    \    long long c13 = c12*c1;\n    long long a14 = a13*a1;\n    long long b14 =\
    \ b13*b1;\n    long long c14 = c13*c1;\n    long long a15 = a14*a1;\n    long\
    \ long b15 = b14*b1;\n    long long c15 = c14*c1;\n    long long a16 = a15*a1;\n\
    \    long long b16 = b15*b1;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long ans = (a * b) - (c * c);\n    if (ans < 0)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpe5al52yf: /tmp/tmpe5al52yf.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long b1 = (a + b) / 2;\n    long long c1 = (a + c) / 2;\n\
    \    long long a2 = (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n \
    \   long long c2 = (a1 + c2) / 2;\n    long long a3 = (b1 + c1 + a2) / 2;\n  \
    \  long long b3 = (b1 + c1) / 2;\n    long long c3 = (b1 + c2) / 2;\n    long\
    \ long a4 = (c1 + a2 + a3) / 2;\n    long long b4 = (c1 + a2) / 2;\n    long long\
    \ c4 = (c1 + c3) / 2;\n    long long a5 = (b2 + c3 + a4) / 2;\n    long long b5\
    \ = (b2 + c3) / 2;\n    long long c5 = (b2 + c4) / 2;\n    long long a6 = (c2\
    \ + a4 + a5) / 2;\n    long long b6 = (c2 + a4) / 2;\n    long long c6 = (c2 +\
    \ c5) / 2;\n    long long a7 = (b3 + c5 + a6) / 2;\n    long long b7 = (b3 + c5)\
    \ / 2;\n    long long c7 = (b3 + c6) / 2;\n    long long a8 = (c4 + a6 + a7) /\
    \ 2;\n    long long b8 = (c4 + a6) / 2;\n    long long c8 = (c4 + c8) / 2;\n \
    \   long long a9 = (b5 + c6 + a8) / 2;\n    long long b9 = (b5 + c6) / 2;\n  \
    \  long long c9 = (b5 + c7) / 2;\n    long long a10 = (b6 + c8 + a9) / 2;\n  \
    \  long long b10 = (b6 + c8) / 2;\n    long long c10 = (b6 + c9) / 2;\n    long\
    \ long a11 = (b7 + c9 + a10) / 2;\n    long long b11 = (b7 + c9) / 2;\n    long\
    \ long c11 = (b7 + c10) / 2;\n    long long a12 = (b8 + c10 + a11) / 2;\n    long\
    \ long b12 = (b8 + c10) / 2;\n    long long c12 = (b8 + c11) / 2;\n    long long\
    \ a13 = (b9 + c11 + a12) / 2;\n    long long b13 = (b9 + c11) / 2;\n    long long\
    \ c13 = (b9 + c12) / 2;\n    long long a14 = (b10 + c12 + a13) / 2;\n    long\
    \ long b14 = (b10 + c12) / 2;\n    long long c14 = (b10\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpji7kgr0f.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpji7kgr0f.cpp:54:25: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |     long long c14 = (b10\n\
    \      |                     ~   ^\n      |                         )\n   55 |\
    \ }\n      | ~                        \n/tmp/tmpji7kgr0f.cpp:55:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   55 | }\n     \
    \ | ^\n/tmp/tmpji7kgr0f.cpp:55:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1) {\n        return true;\n    }\n    if\
    \ (t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcooxjqi_: /tmp/tmpcooxjqi_.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4zzo_6qw: /tmp/tmp4zzo_6qw.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long l1 = abs(a) + abs(b) + abs(c);\n    long l2 = abs(a) + abs(b) + abs(c);\n\
    \    long l3 = abs(a) + abs(b) + abs(c);\n    long l4 = abs(a) + abs(b) + abs(c);\n\
    \    long l5 = abs(a) + abs(b) + abs(c);\n    long l6 = abs(a) + abs(b) + abs(c);\n\
    \    long l7 = abs(a) + abs(b) + abs(c);\n    long l8 = abs(a) + abs(b) + abs(c);\n\
    \    long l9 = abs(a) + abs(b) + abs(c);\n    long l10 = abs(a) + abs(b) + abs(c);\n\
    \    long l11 = abs(a) + abs(b) + abs(c);\n    long l12 = abs(a) + abs(b) + abs(c);\n\
    \    long l13 = abs(a) + abs(b) + abs(c);\n    long l14 = abs(a) + abs(b) + abs(c);\n\
    \    long l15 = abs(a) + abs(b) + abs(c);\n    long l16 = abs(a) + abs(b) + abs(c);\n\
    \    long l17 = abs(a) + abs(b) + abs(c);\n    long l18 = abs(a) + abs(b) + abs(c);\n\
    \    long l19 = abs(a) + abs(b) + abs(c);\n    long l20 = abs(a) + abs(b) + abs(c);\n\
    \    long l21 = abs(a) + abs(b) + abs(c);\n    long l22 = abs(a) + abs(b) + abs(c);\n\
    \    long l23 = abs(a) + abs(b) + abs(c);\n    long l24 = abs(a) + abs(b) + abs(c);\n\
    \    long l25 = abs(a) + abs(b) + abs(c);\n    long l26 = abs(a) + abs(b) + abs(c);\n\
    \    long l27 = abs(a) + abs(b) + abs(c);\n    long l28 = abs(a) + abs(b) + abs(c);\n\
    \    long l29 = abs(a) + abs(b) + abs(c);\n    long l30 = abs(a) + abs(b) + abs(c);\n\
    \    long l31 = abs(a) + abs(b) + abs(c);\n    long l32 = abs(a) + abs(b) + abs(c);\n\
    \    long l33 = abs(a) + abs(b) + abs(c);\n    long l34 = abs(a) + abs(b) + abs(c);\n\
    \    long l35 = abs(a) + abs(b) + abs(c);\n    long l36 = abs(a) + abs(b) + abs(c);\n\
    \    long l37 = abs(a) + abs(b) + abs(c);\n    long \n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48al7nh_.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp48al7nh_.cpp:52:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmp48al7nh_.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n    if\
    \ (t1 == t2) {\n        return true;\n    }\n    if (t1 > t2) {\n        std::swap(t1,\
    \ t2);\n    }\n    long t3 = t1 * t1;\n    long t4 = t2 * t2;\n    return t3 <=\
    \ t4 && t3 >= 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwgqdpk2z: /tmp/tmpwgqdpk2z.cpp:32: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long x0 = ((-b) + root) / 2;\n    long y0 = ((-b) - root) / 2;\n    long\
    \ x1 = ((-b) + root) / 2;\n    long y1 = ((-b) - root) / 2;\n    long x2 = ((-b)\
    \ - root) / 2;\n    long y2 = ((-b) + root) / 2;\n    long x3 = ((-b) + root)\
    \ / 2;\n    long y3 = ((-b) - root) / 2;\n    long x4 = ((-b) - root) / 2;\n \
    \   long y4 = ((-b) + root) / 2;\n    long x5 = ((-b) + root) / 2;\n    long y5\
    \ = ((-b) - root) / 2;\n    long x6 = ((-b) - root) / 2;\n    long y6 = ((-b)\
    \ + root) / 2;\n    long x7 = ((-b) - root) / 2;\n    long y7 = ((-b) - root)\
    \ / 2;\n    long x8 = ((-b) - root) / 2;\n    long y8 = ((-b) + root) / 2;\n \
    \   long x9 = ((-b) + root) / 2;\n    long y9 = ((-b) - root) / 2;\n    long x10\
    \ = ((-b) - root) / 2;\n    long y10 = ((-b) + root) / 2;\n    long x11 = ((-b)\
    \ - root) / 2;\n    long y11 = ((-b) - root) / 2;\n    long x12 = ((-b) - root)\
    \ / 2;\n    long y12 = ((-b) + root) / 2;\n    long x13 = ((-b) + root) / 2;\n\
    \    long y13 = ((-b) - root) / 2;\n    long x14 = ((-b) - root) / 2;\n    long\
    \ y14 = ((-b) + root) / 2;\n    long x15 = ((-b) + root) / 2;\n    long y15 =\
    \ ((-b) - root) / 2;\n    long x16 = ((-b) - root) / 2;\n    long y16 = ((-b)\
    \ - root) / 2;\n    long x17 = ((-b) - root) / 2;\n    long y17 = ((-b) + root)\
    \ / 2;\n    long x18 = ((-b) - root) / 2;\n    long y18 = ((-b) - root) / 2;\n\
    \    long x19 = ((-b) - root) / 2;\n    long y19 = ((-b) + root) / 2;\n    long\
    \ x20 = ((-b) + root) / 2;\n    long y20 = ((-b) - root) / 2;\n    long x21 =\
    \ ((-b) - root) / 2;\n    long y21 = ((-b) + root) / 2;\n    long x22 = ((-b\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyh519az.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpfyh519az.cpp:61:20: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   61 |     long x22 = ((-b\n    \
    \  |                 ~  ^\n      |                    )\n   62 | }\n      | ~\
    \                   \n/tmp/tmpfyh519az.cpp:61:20: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   61 |     long x22 = ((-b\n      |           \
    \     ~   ^\n      |                    )\n   62 | }\n      | ~              \
    \     \n/tmp/tmpfyh519az.cpp:62:1: error: expected \u2018,\u2019 or \u2018;\u2019\
    \ before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpfyh519az.cpp:62:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   62 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    long d = b * b - 4 * a * c;\n  \
    \  if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n  \
    \  long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h =\
    \ (b + g) / (2 * a);\n    if (f > h) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp00skjtva: /tmp/tmp00skjtva.cpp:31: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        if(b==c){\n            return true;\n        }\n\
    \    }\n    else if(b==c){\n        if(a==b){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp55ky1g1b: /tmp/tmp55ky1g1b.cpp:33: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        return true;\n    }\n    else if(b==c){\n       \
    \ return false;\n    }\n    else if(a>b){\n        if(a>c){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n        if(b>c){\n            return\
    \ false;\n        }\n    }\n    else if(a>c){\n        if(b>c){\n            return\
    \ false;\n        }\n    }\n    else if(b>c){\n        if(a>c){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n        if(b<c){\n            return\
    \ false;\n        }\n    }\n    else if(a<c){\n        if(c<b){\n            return\
    \ false;\n        }\n    }\n    else if(b<c){\n        if(c<a){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n        if(b<c){\n            return\
    \ false;\n        }\n    }\n    else if(a<c){\n        if(c<b){\n            return\
    \ false;\n        }\n    }\n    else if(b<c){\n        if(c<a){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n        if(b<c){\n            return\
    \ false;\n        }\n    }\n    else if(a<c){\n        if(c<b){\n            return\
    \ false;\n        }\n    }\n    else if(b<c){\n        if(c<a){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n        if(b<c){\n            return\
    \ false;\n        }\n    }\n    else if(a<c){\n        if(c<b){\n            return\
    \ false;\n        }\n    }\n    else if(b<c){\n        if(c<a){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n        if(b<c){\n            return\
    \ false;\n        }\n    }\n    else if(a<c){\n        if(c<b){\n            return\
    \ false;\n        }\n    }\n    else if(b<c){\n        if(c<a){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n        if(b<c){\n            return\
    \ false;\n        }\n    }\n    else if(a<c){\n        if(c<b){\n            return\
    \ false;\n        }\n    }\n    else if(b<c){\n        if(c<a){\n            return\
    \ false;\n        }\n    }\n    else if(a<b){\n\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppboa3skp.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmppboa3skp.cpp:138:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  138 | int main() {\n     \
    \ |            ^\n/tmp/tmppboa3skp.cpp:151:1: error: expected \u2018}\u2019 at\
    \ end of input\n  151 | }\n      | ^\n/tmp/tmppboa3skp.cpp:12:51: note: to match\
    \ this \u2018{\u2019\n   12 | bool right_angle_triangle(long a, long b, long c)\
    \ {\n      |                                                   ^\n/tmp/tmppboa3skp.cpp:151:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  151 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    long ab = abs(b - c);\n    long\
    \ ac = abs(a - c);\n    long abc = abs(b - c);\n    long acb = abs(a - c);\n \
    \   long abcd = abs(b - c);\n    long acbd = abs(a - c);\n    long acbc = abs(a\
    \ - c);\n    long acbca = abs(a - c);\n    long acbcaa = abs(a - c);\n    long\
    \ acbcaab = abs(a - c);\n    long acbcaabc = abs(a - c);\n    long acbcaabca =\
    \ abs(a - c);\n    long acbcaabcaa = abs(a - c);\n    long acbcaabcaab = abs(a\
    \ - c);\n    long acbcaabcaabc = abs(a - c);\n    long acbcaabcaabca = abs(a -\
    \ c);\n    long acbcaabcaabcaa = abs(a - c);\n    long acbcaabcaabcaab = abs(a\
    \ - c);\n    long acbcaabcaabcaabc = abs(a - c);\n    long acbcaabcaabcaabca =\
    \ abs(a - c);\n    long acbcaabcaabcaabcaa = abs(a - c);\n    long acbcaabcaabcaabcaab\
    \ = abs(a - c);\n    long acbcaabcaabcaabcaabc = abs(a - c);\n    long acbcaabcaabcaabcaabca\
    \ = abs(a - c);\n    long acbcaabcaabcaabcaabcaa = abs(a - c);\n    long acbcaabcaabcaabcaabcaab\
    \ = abs(a - c);\n    long acbcaabcaabcaabcaabcaabc = abs(a - c);\n    long acbcaabcaabcaabcaabcaabca\
    \ = abs(a - c);\n    long acbcaabcaabcaabcaabcaabcaa = abs(a - c);\n    long acbcaabcaabcaabcaabcaabcaab\
    \ = abs(a - c);\n    long acbcaabcaabcaabcaabcaabcaabc = abs(a - c);\n    long\
    \ acbcaabcaabcaabcaabcaabcaabca = abs(a - c);\n    long acbcaabcaabcaabcaabcaabcaabcaa\
    \ = abs(a - c);\n    long acbcaabcaabcaabcaabcaabcaabcaab = abs(a - \n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplgca98sf.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmplgca98sf.cpp:50:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmplgca98sf.cpp:50:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long e = std::sqrt(d);\n\
    \    long f = (b + e * 0.5) / a;\n    long g = (c + e * 0.5) / a;\n    long h\
    \ = (b - e * 0.5) / a;\n    return ((f < 0 && g < 0 && h < 0) || (f > 0 && g >\
    \ 0 && h > 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpn884620q: /tmp/tmpn884620q.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjr9rznxv.cpp: In function 'int main()':\n/tmp/tmpjr9rznxv.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjr9rznxv.cpp:2:\n/tmp/tmpjr9rznxv.cpp:24:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1\
    \ + c1;\n    return a2 > b2 && a2 > c2 && b2 > c2;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3rbx0sn3: /tmp/tmp3rbx0sn3.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c || a + c > b || b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwa6ecrzh: /tmp/tmpwa6ecrzh.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1\
    \ + c1;\n    long long ans = (a1 + b1 + c1) * (a2 + b2 + c2) - (a1 + b1 + c1)\
    \ * (a2 + b2 + c2) * (a1 + b1 + c1);\n    return ans == 0;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmna7rhct: /tmp/tmpmna7rhct.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) return false;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return\
    \ false;\n    long x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    return ((x\
    \ * x) + (y * y)) <= 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu434vmbj: /tmp/tmpu434vmbj.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0)\n        return true;\n    else if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    else if (a > b && a > c)\n        return true;\n \
    \   else if (b > a && b > c)\n        return true;\n    else if (c > a && c >\
    \ b)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw1tqx987: /tmp/tmpw1tqx987.cpp:28: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = b1 + c1;\n    long\
    \ long a3 = a2 + c1, b3 = b1 + c2, c3 = a1 + b2;\n    long long a4 = a3 + b3,\
    \ b4 = b3 + c3, c4 = a3 + b4;\n    long long a5 = a4 + c4, b5 = b5 + c3, c5 =\
    \ a4 + b5;\n    long long a6 = a5 + c5, b6 = b6 + c2, c6 = a5 + b6;\n    long\
    \ long a7 = a6 + c6, b7 = b7 + c1, c7 = a6 + b7;\n    long long a8 = a7 + c7,\
    \ b8 = b7 + c2, c8 = a7 + b8;\n    long long a9 = a8 + c8, b9 = b8 + c1, c9 =\
    \ a8 + b9;\n    long long a10 = a9 + c9, b10 = b9 + c2, c10 = a9 + b10;\n    long\
    \ long a11 = a10 + c10, b11 = b10 + c3, c11 = a10 + b11;\n    long long a12 =\
    \ a11 + c11, b12 = b11 + c4, c12 = a11 + b12;\n    long long a13 = a12 + c12,\
    \ b13 = b12 + c5, c13 = a12 + b13;\n    long long a14 = a13 + c13, b14 = b13 +\
    \ c6, c14 = a13 + b14;\n    long long a15 = a14 + c14, b15 = b14 + c7, c15 = a14\
    \ + b15;\n    long long a16 = a15 + c15, b16 = b15 + c8, c16 = a15 + b16;\n  \
    \  long long a17 = a16 + c16, b17 = b16 + c9, c17 = a16 + b17;\n    long long\
    \ a18 = a17 + c17, b18 = b17 + c10, c18 = a17 + b18;\n    long long a19 = a18\
    \ + c18, b19 = b18 + c11, c19 = a18 + b19;\n    long long a20 = a19 + c19, b20\
    \ = b19 + c12, c20 = a19 + b20;\n    long long a21 = a20 + c20, b21 = b20 + c13,\
    \ c21 = a20 + b21;\n    long long a22 = a21 + c21, b22 = b21 + c14, c22 = a21\
    \ + b\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi4inaqn2.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpi4inaqn2.cpp:15:53: error: \u2018b2\u2019\
    \ was not declared in this scope; did you mean \u2018b3\u2019?\n   15 |     long\
    \ long a3 = a2 + c1, b3 = b1 + c2, c3 = a1 + b2;\n      |                    \
    \                                 ^~\n      |                                \
    \                     b3\n/tmp/tmpi4inaqn2.cpp:35:1: error: expected \u2018,\u2019\
    \ or \u2018;\u2019 before \u2018}\u2019 token\n   35 | }\n      | ^\n/tmp/tmpi4inaqn2.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s >= 0 && t >= 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwordkufe: /tmp/tmpwordkufe.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + c) / 2;\n    long y = (-b - c)\
    \ / 2;\n    long m = (a + b) / 2;\n    long n = (-a + b) / 2;\n    long o = (a\
    \ + c) / 2;\n    long p = (-a + c) / 2;\n    long q = (b + c) / 2;\n    long r\
    \ = (a * b + c) / 2;\n    long s = (a * b - c) / 2;\n    long t = (a * c + b)\
    \ / 2;\n    long u = (b * c - a) / 2;\n    long v = (b * c + a) / 2;\n    long\
    \ w = (c * a + b) / 2;\n    long x = (b * c - a) / 2;\n    long y = (b * c + a)\
    \ / 2;\n    long z = (c * a + b) / 2;\n    long a1 = (-b + sqrt(d)) / 2;\n   \
    \ long a2 = (-b - sqrt(d)) / 2;\n    long a3 = sqrt(d);\n    long a4 = (-b + sqrt(d))\
    \ / 2;\n    long a5 = (-b - sqrt(d)) / 2;\n    long a6 = sqrt(d);\n    long a7\
    \ = (-b + sqrt(d)) / 2;\n    long a8 = (-b - sqrt(d)) / 2;\n    long a9 = sqrt(d);\n\
    \    long a10 = (-b + sqrt(d)) / 2;\n    long a11 = (-b - sqrt(d)) / 2;\n    long\
    \ a12 = (-b + sqrt(d)) / 2;\n    long a13 = (-b - sqrt(d)) / 2;\n    long a14\
    \ = sqrt(d);\n    long a15 = (-b + sqrt(d)) / 2;\n    long a16 = (-b - sqrt(d))\
    \ / 2;\n    long a17 = sqrt(d);\n    long a18 = (-b + sqrt(d)) / 2;\n    long\
    \ a19 = (-b - sqrt(d)) / 2;\n    long a20 = sqrt(d);\n    long a21 = (-b + sqrt(d))\
    \ / 2;\n    long a22 = (-b - sqrt(d)) / 2;\n    long a23 = sqrt(d);\n    long\
    \ a24 = (-b + sqrt(d)) / 2;\n    long a25 = (-b - sqrt(d)) / 2;\n    long a26\
    \ = sqrt(d);\n    long a27 = (-b + sqrt(d)) / 2;\n    long a28 = (-b - sqrt(d))\
    \ / 2;\n    long a29 = sqrt(d);\n    long a30 = (-b + sqrt(d)) / 2;\n    long\
    \ a31 = \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxwh5pvjb.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpxwh5pvjb.cpp:31:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   31 |     long x = (b * c - a) / 2;\n      |  \
    \        ^\n/tmp/tmpxwh5pvjb.cpp:18:10: note: \u2018long int x\u2019 previously\
    \ declared here\n   18 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmpxwh5pvjb.cpp:32:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   32 |     long y = (b * c\
    \ + a) / 2;\n      |          ^\n/tmp/tmpxwh5pvjb.cpp:19:10: note: \u2018long\
    \ int y\u2019 previously declared here\n   19 |     long y = (-b - c) / 2;\n \
    \     |          ^\n/tmp/tmpxwh5pvjb.cpp:65:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   65 | }\n      | ^\n/tmp/tmpxwh5pvjb.cpp:65:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   65 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    long h = (a\
    \ + e * b) / a;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0)\n          \
    \  || (f < 0 && h > 0) || (f > 0 && h < 0));\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcu_0g6jv: /tmp/tmpcu_0g6jv.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if (t1 >=\
    \ 0 && t1 <= 1 && t2 >= 0 && t2 <= 1)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsn0nq62j: /tmp/tmpsn0nq62j.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) - (c * c);\n    if (ans < 0) {\n        return false;\n    }\n    long long\
    \ sq = ans * (ans + 1);\n    long long root = (sq - (ans * ans)) / 2;\n    return\
    \ (root >= 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvayz7o3k: /tmp/tmpvayz7o3k.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    long d = b * b - 4 * a * c;\n  \
    \  if (d < 0) {\n        return false;\n    }\n    long x = (b + c) / 2;\n   \
    \ long y = (-b - c) / 2;\n    return ((x * x) + (y * y)) <= 0;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmph4ugnkzf: /tmp/tmph4ugnkzf.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) return\
    \ true;\n    if (b > c && b > a) return true;\n    if (c > a && c > b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnav_56lm: /tmp/tmpnav_56lm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return true;\n\
    \    }\n    if(a>b){\n        if(a>c){\n            return true;\n        }\n\
    \    }\n    if(b>c){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpluumw0vs: /tmp/tmpluumw0vs.cpp:37: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   else{\n            return false;\n        }\n    }\n    else if(a==c){\n \
    \       return true;\n    }\n    else if(b==c){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpua9in6he: /tmp/tmpua9in6he.cpp:34: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long sum = a+b+c;\n    if(sum%2==0)\n    {\n        return false;\n    }\n\
    \    else if(sum%2==1)\n    {\n        return true;\n    }\n    else\n    {\n\
    \        long temp=sum/2;\n        long temp1=temp/2;\n        long temp2=temp/2;\n\
    \        long temp3=temp/2;\n        long temp4=temp/2;\n        long temp5=temp/2;\n\
    \        long temp6=temp/2;\n        long temp7=temp/2;\n        long temp8=temp/2;\n\
    \        long temp9=temp/2;\n        long temp10=temp/2;\n        long temp11=temp/2;\n\
    \        long temp12=temp/2;\n        long temp13=temp/2;\n        long temp14=temp/2;\n\
    \        long temp15=temp/2;\n        long temp16=temp/2;\n        long temp17=temp/2;\n\
    \        long temp18=temp/2;\n        long temp19=temp/2;\n        long temp20=temp/2;\n\
    \        long temp21=temp/2;\n        long temp22=temp/2;\n        long temp23=temp/2;\n\
    \        long temp24=temp/2;\n        long temp25=temp/2;\n        long temp26=temp/2;\n\
    \        long temp27=temp/2;\n        long temp28=temp/2;\n        long temp29=temp/2;\n\
    \        long temp30=temp/2;\n        long temp31=temp/2;\n        long temp32=temp/2;\n\
    \        long temp33=temp/2;\n        long temp34=temp/2;\n        long temp35=temp/2;\n\
    \        long temp36=temp/2;\n        long temp37=temp/2;\n        long temp38=temp/2;\n\
    \        long temp39=temp/2;\n        long temp40=temp/2;\n        long temp41=temp/2;\n\
    \        long temp42=temp/2;\n        long temp43=temp/2;\n        long temp44=temp/2;\n\
    \        long temp45=temp/2;\n        long temp46=temp/2;\n        long temp47=temp/2;\n\
    \        long temp48=temp/2;\n        long temp49=temp/2;\n        long temp50=temp/2;\n\
    \        long temp51=temp/2;\n        long temp\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmp_ge7n.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmppmp_ge7n.cpp:78:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   78 | }\n      | ^\n/tmp/tmppmp_ge7n.cpp:79:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   79 | int main() {\n      |            ^\n/tmp/tmppmp_ge7n.cpp:92:1: error:\
    \ expected \u2018}\u2019 at end of input\n   92 | }\n      | ^\n/tmp/tmppmp_ge7n.cpp:12:51:\
    \ note: to match this \u2018{\u2019\n   12 | bool right_angle_triangle(long a,\
    \ long b, long c) {\n      |                                                 \
    \  ^\n/tmp/tmppmp_ge7n.cpp:92:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   92 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long x = (long) (-b + root) / (2 * a);\n    long y = (long) (-b - root) /\
    \ (2 * a);\n    return ((x == 0 && y >= 0) || (x == 0 && y < 0)\n            ||\
    \ (x >= 0 && y == 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6b0neojs: /tmp/tmp6b0neojs.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(ac -\
    \ bc);\n    long abc = abs(ab - bc);\n    long abbc = abs(ab - bc);\n    long\
    \ abac = abs(ab - ac);\n    long abcab = abs(ab - acb);\n    long abcabc = abs(ab\
    \ - acbc);\n    long abcabbc = abs(ab - acbc );\n    long abcabac = abs(ab - acac);\n\
    \    long abcabcab = abs(ab - accab);\n    long abcabcabc = abs(ab - accabc);\n\
    \    long abcabcabbc = abs(ab - accabbc);\n    long abcabcabac = abs(ab - accabac);\n\
    \    long abcabcabcab = abs(ab - accabcab);\n    long abcabcabcabc = abs(ab -\
    \ accabcabc);\n    long abcabcabcabbc = abs(ab - accabcabbc);\n    long abcabcabcabac\
    \ = abs(ab - accabcabac);\n    long abcabcabcabcab = abs(ab - accabcabcab);\n\
    \    long abcabcabcabcabc = abs(ab - accabcabcabc);\n    long abcabcabcabcabbc\
    \ = abs(ab - accabcabcabbc);\n    long abcabcabcabcabac = abs(ab - accabcabcabac);\n\
    \    long abcabcabcabcabcab = abs(ab - accabcabcabcab);\n    long abcabcabcabcabcabc\
    \ = abs(ab - accabcabcabcabc);\n    long abcabcabcabcabcabbc = abs(ab - accabcabcabcabbc);\n\
    \    long abcabcabcabcabcabac = abs(ab - accabcabcabcabac);\n    long abcabcabcabcabcabcab\
    \ = abs(ab - accabcabcabcabcab);\n    long abcabcabcabcabcabcabc = abs(ab - accabcabcabcabcabc);\n\
    \    long abcabcabcabcabcabcabbc = abs(ab - accabcabcabcabcabbc);\n    long abcabcabcabcabcabcabac\
    \ = abs(ab - accabcabcabcabcabac);\n    long abcabcabcabcabcabcabcab = abs(ab\
    \ - accabcabcabcabcabcab);\n    long abcabcabcabcabcabcabcabc = \n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpafyk0dkt.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpafyk0dkt.cpp:21:28: error: \u2018acbc\u2019\
    \ was not declared in this scope; did you mean \u2018abbc\u2019?\n   21 |    \
    \ long abcabc = abs(ab - acbc);\n      |                            ^~~~\n   \
    \   |                            abbc\n/tmp/tmpafyk0dkt.cpp:23:29: error: \u2018\
    acac\u2019 was not declared in this scope; did you mean \u2018abac\u2019?\n  \
    \ 23 |     long abcabac = abs(ab - acac);\n      |                           \
    \  ^~~~\n      |                             abac\n/tmp/tmpafyk0dkt.cpp:24:30:\
    \ error: \u2018accab\u2019 was not declared in this scope; did you mean \u2018\
    abcab\u2019?\n   24 |     long abcabcab = abs(ab - accab);\n      |          \
    \                    ^~~~~\n      |                              abcab\n/tmp/tmpafyk0dkt.cpp:25:31:\
    \ error: \u2018accabc\u2019 was not declared in this scope; did you mean \u2018\
    abcabc\u2019?\n   25 |     long abcabcabc = abs(ab - accabc);\n      |       \
    \                        ^~~~~~\n      |                               abcabc\n\
    /tmp/tmpafyk0dkt.cpp:26:32: error: \u2018accabbc\u2019 was not declared in this\
    \ scope; did you mean \u2018abcabbc\u2019?\n   26 |     long abcabcabbc = abs(ab\
    \ - accabbc);\n      |                                ^~~~~~~\n      |       \
    \                         abcabbc\n/tmp/tmpafyk0dkt.cpp:27:32: error: \u2018accabac\u2019\
    \ was not declared in this scope; did you mean \u2018abcabac\u2019?\n   27 | \
    \    long abcabcabac = abs(ab - accabac);\n      |                           \
    \     ^~~~~~~\n      |                                abcabac\n/tmp/tmpafyk0dkt.cpp:28:33:\
    \ error: \u2018accabcab\u2019 was not declared in this scope; did you mean \u2018\
    abcabcab\u2019?\n   28 |     long abcabcabcab = abs(ab - accabcab);\n      | \
    \                                ^~~~~~~~\n      |                           \
    \      abcabcab\n/tmp/tmpafyk0dkt.cpp:29:34: error: \u2018accabcabc\u2019 was\
    \ not declared in this scope; did you mean \u2018abcabcabc\u2019?\n   29 |   \
    \  long abcabcabcabc = abs(ab - accabcabc);\n      |                         \
    \         ^~~~~~~~~\n      |                                  abcabcabc\n/tmp/tmpafyk0dkt.cpp:30:35:\
    \ error: \u2018accabcabbc\u2019 was no"
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long root = (long) sqrt(d);\n    long t1 = (-b + root) / a;\n    long\
    \ t2 = (-b - root) / a;\n    if (t1 < 0 || t2 < 0 || t1 > a || t2 > a) {\n   \
    \     return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmprc33xtu9: /tmp/tmprc33xtu9.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjr9rznxv.cpp: In function 'int main()':\n/tmp/tmpjr9rznxv.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjr9rznxv.cpp:2:\n/tmp/tmpjr9rznxv.cpp:24:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n\
    \    if (t1 < 0)\n        t1 = 0;\n    if (t2 < 0)\n        t2 = 0;\n    if (t1\
    \ == t2)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplk50tac2: /tmp/tmplk50tac2.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) return\
    \ true;\n    if (b > c && b > a) return true;\n    if (c > a && c > b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnav_56lm: /tmp/tmpnav_56lm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long ad = abs(d - a);\n\
    \    long bd = abs(b - d);\n    long cd = abs(c - d);\n    long abc = ab + ac;\n\
    \    long bcd = bc + cd;\n    long abd = ab + bd;\n    long acd = ac + cd;\n \
    \   long abbc = abb + bcc;\n    long abbd = abb + bcd;\n    long abcc = abc +\
    \ ccf;\n    long abdd = abd + cdd;\n    long abbcc = abbcc + bccc;\n    long abbcc\
    \ = abbccc + bccc;\n    long abccd = abccd + cddd;\n    long abcccd = abcccd +\
    \ cddd;\n    long abbcccd = abbcccd + bcccd;\n    long abbcccd = abbcccd + bcccd;\n\
    \    long abcccd = abcccd + cddd;\n    long abcccd = abcccd + cddd;\n    long\
    \ abbcccd = abbcccd + bcccd;\n    long abbcccd = abbcccd + bcccd;\n    long abcccd\
    \ = abcccd + cddd;\n    long abcccd = abcccd + cddd;\n    long abbcccd = abbcccd\
    \ + bcccd;\n    long abbcccd = abbcccd + bcccd;\n    long abcccd = abcccd + cddd;\n\
    \    long abcccd = abcccd + cddd;\n    long abbcccd = abbcccd + bcccd;\n    long\
    \ abbcccd = abbcccd + bcccd;\n    long abcccd = abcccd + cddd;\n    long abcccd\
    \ = abcccd + cddd;\n    long abbcccd = abbcccd + bcccd;\n    long abbcccd = abbcccd\
    \ + bcccd;\n    long abcccd = abcccd + cddd;\n    long abcccd = abcccd + cddd;\n\
    \    long abbcccd = abbcccd + bcccd;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphcs5n1b2.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmphcs5n1b2.cpp:16:19: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018ad\u2019?\n   16 |     long\
    \ ad = abs(d - a);\n      |                   ^\n      |                   ad\n\
    /tmp/tmphcs5n1b2.cpp:23:17: error: \u2018abb\u2019 was not declared in this scope;\
    \ did you mean \u2018abbc\u2019?\n   23 |     long abbc = abb + bcc;\n      |\
    \                 ^~~\n      |                 abbc\n/tmp/tmphcs5n1b2.cpp:23:23:\
    \ error: \u2018bcc\u2019 was not declared in this scope; did you mean \u2018bcd\u2019\
    ?\n   23 |     long abbc = abb + bcc;\n      |                       ^~~\n   \
    \   |                       bcd\n/tmp/tmphcs5n1b2.cpp:25:23: error: \u2018ccf\u2019\
    \ was not declared in this scope\n   25 |     long abcc = abc + ccf;\n      |\
    \                       ^~~\n/tmp/tmphcs5n1b2.cpp:26:23: error: \u2018cdd\u2019\
    \ was not declared in this scope; did you mean \u2018cd\u2019?\n   26 |     long\
    \ abdd = abd + cdd;\n      |                       ^~~\n      |              \
    \         cd\n/tmp/tmphcs5n1b2.cpp:27:26: error: \u2018bccc\u2019 was not declared\
    \ in this scope\n   27 |     long abbcc = abbcc + bccc;\n      |             \
    \             ^~~~\n/tmp/tmphcs5n1b2.cpp:28:10: error: redeclaration of \u2018\
    long int abbcc\u2019\n   28 |     long abbcc = abbccc + bccc;\n      |       \
    \   ^~~~~\n/tmp/tmphcs5n1b2.cpp:27:10: note: \u2018long int abbcc\u2019 previously\
    \ declared here\n   27 |     long abbcc = abbcc + bccc;\n      |          ^~~~~\n\
    /tmp/tmphcs5n1b2.cpp:28:18: error: \u2018abbccc\u2019 was not declared in this\
    \ scope; did you mean \u2018abbcc\u2019?\n   28 |     long abbcc = abbccc + bccc;\n\
    \      |                  ^~~~~~\n      |                  abbcc\n/tmp/tmphcs5n1b2.cpp:29:26:\
    \ error: \u2018cddd\u2019 was not declared in this scope\n   29 |     long abccd\
    \ = abccd + cddd;\n      |                          ^~~~\n/tmp/tmphcs5n1b2.cpp:31:30:\
    \ error: \u2018bcccd\u2019 was not declared in this scope; did you mean \u2018\
    abcccd\u2019?\n   31 |     long abbcccd = abbcccd + bcccd;\n      |          \
    \                    ^~~~~\n      |                              abcccd\n/tmp/tmphcs5n1b2.cpp:32:10:\
    \ error: redeclaration of \u2018long"
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b + c || b >\
    \ a + c || c > a + b) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpis4oc4nm: /tmp/tmpis4oc4nm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - b;\n    long f = d - e;\n    long g = e\
    \ - f;\n    long h = f - g;\n    long i = g - h;\n    long j = h - i;\n    long\
    \ k = i - j;\n    long l = j - k;\n    long m = k - l;\n    long n = l - m;\n\
    \    long o = m - n;\n    long p = n - o;\n    long q = o - p;\n    long r = p\
    \ - q;\n    long s = q - r;\n    long t = r - s;\n    long u = s - t;\n    long\
    \ v = t - u;\n    long w = u - v;\n    long x = v - w;\n    long y = w - x;\n\
    \    long z = x - y;\n    long a = x * x + y * y + z * z;\n    long b = 2 * x\
    \ * y + 2 * z * x;\n    long c = 2 * x * z + 2 * y * z;\n    long d = b * b -\
    \ 4 * a * c;\n    long e = a * a + b * b;\n    long f = 2 * e * c;\n    long g\
    \ = e * e - 4 * a * f;\n    long h = a * a + c * c;\n    long i = a * a + f *\
    \ f;\n    long j = e * e + f * f;\n    long k = e * e + g * g;\n    long l = a\
    \ * a + g * g;\n    long m = a * a + h * h;\n    long n = e * e + h * h;\n   \
    \ long o = e * e + i * i;\n    long p = a * a + i * i;\n    long q = a * a + j\
    \ * j;\n    long r = e * e + j * j;\n    long s = a * a + j * j;\n    long t =\
    \ a * a + k * k;\n    long u = e * e + k * k;\n    long v = a * a + k * k;\n \
    \   long w = e * e + l * l;\n    long x = a * a + l * l;\n    long y = e * e +\
    \ l * l;\n    long z = a * a + m * m;\n    long a = x * x + y * y + z * z;\n \
    \   long b = 2 * x * y + 2 * z * x;\n    long c = 2 * x * z + 2 * y * z;\n   \
    \ long d = b * b - 4 * a * c;\n    long e = a * a + b * b;\n    long f = 2 * e\
    \ * c;\n    long g = e * e - 4 * a * f;\n    long h = a * a + c * c;\n\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppcvkpf1m.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmppcvkpf1m.cpp:37:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   37 |     long a = x * x +\
    \ y * y + z * z;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:38:10: error: declaration\
    \ of \u2018long int b\u2019 shadows a parameter\n   38 |     long b = 2 * x *\
    \ y + 2 * z * x;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:39:10: error: declaration\
    \ of \u2018long int c\u2019 shadows a parameter\n   39 |     long c = 2 * x *\
    \ z + 2 * y * z;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:40:10: error: redeclaration\
    \ of \u2018long int d\u2019\n   40 |     long d = b * b - 4 * a * c;\n      |\
    \          ^\n/tmp/tmppcvkpf1m.cpp:14:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   14 |     long d = b - a;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:41:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   41 |     long e = a * a +\
    \ b * b;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:15:10: note: \u2018long int\
    \ e\u2019 previously declared here\n   15 |     long e = c - b;\n      |     \
    \     ^\n/tmp/tmppcvkpf1m.cpp:42:10: error: redeclaration of \u2018long int f\u2019\
    \n   42 |     long f = 2 * e * c;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:16:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   16 |     long f =\
    \ d - e;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:43:10: error: redeclaration\
    \ of \u2018long int g\u2019\n   43 |     long g = e * e - 4 * a * f;\n      |\
    \          ^\n/tmp/tmppcvkpf1m.cpp:17:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   17 |     long g = e - f;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:44:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   44 |     long h = a * a +\
    \ c * c;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:18:10: note: \u2018long int\
    \ h\u2019 previously declared here\n   18 |     long h = f - g;\n      |     \
    \     ^\n/tmp/tmppcvkpf1m.cpp:45:10: error: redeclaration of \u2018long int i\u2019\
    \n   45 |     long i = a * a + f * f;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:19:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   19 |     long i =\
    \ g - h;\n      |          ^\n/tmp/tmppcvkpf1m.cpp:46:10: error: redeclaration\
    \ of \u2018long int j\u2019\n   46 |     lo"
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long s = (-b + sqrt(d))\
    \ / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    return (s == t);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6suz5jgt: /tmp/tmp6suz5jgt.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    return (t1\
    \ >= 0 && t1 <= 1) && (t2 >= 0 && t2 <= 1);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb5eqnvkx: /tmp/tmpb5eqnvkx.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long int a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long int a2 = a1 + b1, c2 = a1 + c1, b2\
    \ = b1 + c1;\n    long long int a3 = a2 + b2, c3 = a2 + c2, b3 = b2 + c2;\n  \
    \  long long int a4 = a3 + b3, c4 = a3 + c3, b4 = b3 + c3;\n    long long int\
    \ a5 = a4 + b4, c5 = a4 + c4, b5 = b4 + c4;\n    long long int a6 = a5 + b5, c6\
    \ = a5 + c5, b6 = b6 + c5;\n    long long int a7 = a6 + b6, c7 = a6 + c6, b7 =\
    \ b7 + c6;\n    long long int a8 = a7 + b7, c8 = a7 + c7, b8 = b7 + c8;\n    long\
    \ long int a9 = a8 + b8, c9 = a8 + c8, b9 = b8 + c9;\n    long long int a10 =\
    \ a9 + b9, c10 = a9 + c9, b10 = b9 + c9;\n    long long int a11 = a10 + b10, c11\
    \ = a10 + c10, b11 = b10 + c10;\n    long long int a12 = a11 + b11, c12 = a11\
    \ + c11, b12 = b11 + c11;\n    long long int a13 = a12 + b12, c13 = a12 + c12,\
    \ b13 = b12 + c12;\n    long long int a14 = a13 + b13, c14 = a13 + c13, b14 =\
    \ b13 + c13;\n    long long int a15 = a14 + b14, c15 = a14 + c14, b15 = b14 +\
    \ c14;\n    long long int a16 = a15 + b15, c16 = a15 + c15, b16 = b15 + c15;\n\
    \    long long int a17 = a16 + b16, c17 = a16 + c16, b17 = b16 + c16;\n    long\
    \ long int a18 = a17 + b17, c18 = a17 + c17, b18 = b17 + c17;\n    long long int\
    \ a19 = a18 + b18, c19 = a18 + c18, b19 = b18 + c18;\n    long long int a20 =\
    \ a19 + b19, c20 = a19 + c19, b20 = b19 + c19;\n    long long int a21 = a20 +\
    \ b20, c21 = a20 + c21, b21 = b20 + \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp55l_6z82.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp55l_6z82.cpp:34:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   34 | }\n      | ^\n/tmp/tmp55l_6z82.cpp:34:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t >= 0) || (s >= 0 && t <= 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq_m8a8n6: /tmp/tmpq_m8a8n6.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpi0tiloy7: /tmp/tmpi0tiloy7.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1) {\n        return true;\n    }\n    if\
    \ (t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcooxjqi_: /tmp/tmpcooxjqi_.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1) {\n        return true;\n    }\n    if\
    \ (t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcooxjqi_: /tmp/tmpcooxjqi_.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        if(b==c){\n            return true;\n        }\n\
    \    }\n    else if(b==c){\n        if(a==b){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp55ky1g1b: /tmp/tmp55ky1g1b.cpp:33: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0) return true;\n    if (a == 0 || b == 0 || c == 0) return false;\n\
    \    long d = (b * b) - (4 * a * c);\n    if (d < 0) return false;\n    long x\
    \ = (b * b) - (4 * a * c);\n    long y = (b * b) + (4 * a * c);\n    long z =\
    \ (b * b) + (4 * a * a);\n    if (x == y && y == z) return true;\n    if (x ==\
    \ y || x == z || y == z) return false;\n    long m = (x * x) + (y * y) + (z *\
    \ z);\n    if (m == 0) return false;\n    long r = ((d / m) % 2) == 0;\n    return\
    \ r;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgzycvgme: /tmp/tmpgzycvgme.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c || a + c > b || b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwa6ecrzh: /tmp/tmpwa6ecrzh.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        return true;\n    }\n    else if(b==c){\n       \
    \ return false;\n    }\n    else if(a>b){\n        if(a>c){\n            return\
    \ false;\n        }\n    }\n    else if(b>c){\n        return false;\n    }\n\
    \    else if(a>c){\n        return true;\n    }\n    else if(a>b){\n        return\
    \ false;\n    }\n    else if(b>c){\n        return false;\n    }\n    else if(a<b){\n\
    \        if(a<c){\n            return false;\n        }\n    }\n    else if(b<c){\n\
    \        return false;\n    }\n    else if(a<c){\n        return true;\n    }\n\
    \    else if(a<b){\n        return false;\n    }\n    else if(b<c){\n        return\
    \ false;\n    }\n    else if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n    }\n    else if(a==c){\n        return true;\n    }\n    else if(b==c){\n\
    \        return false;\n    }\n    else if(a>b){\n        if(a>c){\n         \
    \   return false;\n        }\n    }\n    else if(b>c){\n        return false;\n\
    \    }\n    else if(a>c){\n        return true;\n    }\n    else if(a>b){\n  \
    \      return false;\n    }\n    else if(b>c){\n        return false;\n    }\n\
    \    else if(a<b){\n        if(a<c){\n            return false;\n        }\n \
    \   }\n    else if(b<c){\n        return false;\n    }\n    else if(a<c){\n  \
    \      return true;\n    }\n    else if(a<b){\n        return false;\n    }\n\
    \    else if(b<c){\n        return false;\n    }\n    else if(a==b){\n       \
    \ if(a==c){\n            return true;\n        }\n    }\n    else if(a==c){\n\
    \        return true;\n    }\n    else if(b==c){\n        return false;\n    }\n\
    \    else if(a>b){\n        if(a>c){\n            return false;\n        }\n \
    \   }\n    else if(b>c){\n        return false;\n    }\n    else if(a>c){\n  \
    \      return true;\n    }\n    else if(a>b){\n        return false;\n    }\n\
    \    else if(b>c){\n        return false;\n    }\n    else if(a<b){\n        if(a<c){\n\
    \            return false;\n        }\n    }\n    else if(b<c){\n\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7bh_4bjn.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp7bh_4bjn.cpp:140:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  140 | int main() {\n     \
    \ |            ^\n/tmp/tmp7bh_4bjn.cpp:153:1: error: expected \u2018}\u2019 at\
    \ end of input\n  153 | }\n      | ^\n/tmp/tmp7bh_4bjn.cpp:12:51: note: to match\
    \ this \u2018{\u2019\n   12 | bool right_angle_triangle(long a, long b, long c)\
    \ {\n      |                                                   ^\n/tmp/tmp7bh_4bjn.cpp:153:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  153 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0)\n        return true;\n    else if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    else if (a > b && a > c)\n        return true;\n \
    \   else if (b > c && b > a)\n        return true;\n    else if (c > a && c >\
    \ b)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmzuyqf19: /tmp/tmpmzuyqf19.cpp:28: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    return (s == 0 && t == 0) || (s == t && a > 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6wjss5bj: /tmp/tmp6wjss5bj.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) return false;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return\
    \ false;\n    long x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    return ((x\
    \ * x) + (y * y)) <= 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu434vmbj: /tmp/tmpu434vmbj.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long sum = a+b+c;\n    long s = (a+b+c)/2;\n    long t = (a+b+c-s)/2;\n \
    \   long u = (a+b-t)/2;\n    long v = (b-t)/2;\n    long w = (c-u)/2;\n    long\
    \ x = (a+b+c-u-v-w)/2;\n    long y = (b-u+v+w)/2;\n    long z = (c-v+u-w)/2;\n\
    \    long a = (a+b+c-u-v-w)/2;\n    long b = (b-u+v+w)/2;\n    long c = (c-v+u-w)/2;\n\
    \    long d = (a+b+c-u-v-w)/2;\n    long e = (b-u+v+w)/2;\n    long f = (c-v+u-w)/2;\n\
    \    long g = (d-e-f)/2;\n    long h = (e-f)/2;\n    long i = (d-e-f)/2;\n   \
    \ long j = (e-f)/2;\n    long k = (d-e-f)/2;\n    long l = (e-f)/2;\n    long\
    \ m = (d-e-f)/2;\n    long n = (e-f)/2;\n    long o = (d-e-f)/2;\n    long p =\
    \ (e-f)/2;\n    long q = (d-e-f)/2;\n    long r = (e-f)/2;\n    long s = (a+b+c-u-v-w)/2;\n\
    \    long t = (b-u+v+w)/2;\n    long u = (a+b-t)/2;\n    long v = (b-t)/2;\n \
    \   long w = (c-u)/2;\n    long x = (d-e-f)/2;\n    long y = (e-f)/2;\n    long\
    \ z = (d-e-f)/2;\n    long a = (a+b+c-u-v-w)/2;\n    long b = (b-u+v+w)/2;\n \
    \   long c = (c-v+u-w)/2;\n    long d = (a+b+c-u-v-w)/2;\n    long e = (b-u+v+w)/2;\n\
    \    long f = (c-v+u-w)/2;\n    long g = (d-e-f)/2;\n    long h = (e-f)/2;\n \
    \   long i = (d-e-f)/2;\n    long j = (e-f)/2;\n    long k = (d-e-f)/2;\n    long\
    \ l = (e-f)/2;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptq7xc01z.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmptq7xc01z.cpp:23:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   23 |     long a = (a+b+c-u-v-w)/2;\n\
    \      |          ^\n/tmp/tmptq7xc01z.cpp:24:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   24 |     long b = (b-u+v+w)/2;\n    \
    \  |          ^\n/tmp/tmptq7xc01z.cpp:25:10: error: declaration of \u2018long\
    \ int c\u2019 shadows a parameter\n   25 |     long c = (c-v+u-w)/2;\n      |\
    \          ^\n/tmp/tmptq7xc01z.cpp:41:10: error: redeclaration of \u2018long int\
    \ s\u2019\n   41 |     long s = (a+b+c-u-v-w)/2;\n      |          ^\n/tmp/tmptq7xc01z.cpp:15:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   15 |     long s =\
    \ (a+b+c)/2;\n      |          ^\n/tmp/tmptq7xc01z.cpp:42:10: error: redeclaration\
    \ of \u2018long int t\u2019\n   42 |     long t = (b-u+v+w)/2;\n      |      \
    \    ^\n/tmp/tmptq7xc01z.cpp:16:10: note: \u2018long int t\u2019 previously declared\
    \ here\n   16 |     long t = (a+b+c-s)/2;\n      |          ^\n/tmp/tmptq7xc01z.cpp:43:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   43 |     long u = (a+b-t)/2;\n\
    \      |          ^\n/tmp/tmptq7xc01z.cpp:17:10: note: \u2018long int u\u2019\
    \ previously declared here\n   17 |     long u = (a+b-t)/2;\n      |         \
    \ ^\n/tmp/tmptq7xc01z.cpp:44:10: error: redeclaration of \u2018long int v\u2019\
    \n   44 |     long v = (b-t)/2;\n      |          ^\n/tmp/tmptq7xc01z.cpp:18:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   18 |     long v =\
    \ (b-t)/2;\n      |          ^\n/tmp/tmptq7xc01z.cpp:45:10: error: redeclaration\
    \ of \u2018long int w\u2019\n   45 |     long w = (c-u)/2;\n      |          ^\n\
    /tmp/tmptq7xc01z.cpp:19:10: note: \u2018long int w\u2019 previously declared here\n\
    \   19 |     long w = (c-u)/2;\n      |          ^\n/tmp/tmptq7xc01z.cpp:46:10:\
    \ error: redeclaration of \u2018long int x\u2019\n   46 |     long x = (d-e-f)/2;\n\
    \      |          ^\n/tmp/tmptq7xc01z.cpp:20:10: note: \u2018long int x\u2019\
    \ previously declared here\n   20 |     long x = (a+b+c-u-v-w)/2;\n      |   \
    \       ^\n/tmp/tmptq7xc01z.cpp:47:10: error: redeclaration of \u2018long int\
    \ y\u2019\n   47 |     long y = (e-f)/2;\n      "
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    if (root < 0)\n        return false;\n    long x = -b - sqrt(root);\n\
    \    long y = -b + sqrt(root);\n    if (x != 0 && y != 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1zysiy8a: /tmp/tmp1zysiy8a.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1) {\n        return true;\n    }\n    if\
    \ (t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcooxjqi_: /tmp/tmpcooxjqi_.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   else{\n            return false;\n        }\n    }\n    else if(a==c){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpshq2a6pz: /tmp/tmpshq2a6pz.cpp:31: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long long ans = a + b + c;\n    long long s = ans / 2;\n    long long t =\
    \ ans % 2;\n    long long u = a;\n    long long v = b;\n    long long w = c;\n\
    \    long long x = 0;\n    long long y = 0;\n    long long z = 0;\n    long long\
    \ xx = 1;\n    long long yy = 1;\n    long long zz = 1;\n    long long xy = 1;\n\
    \    long long yz = 1;\n    long long zzz = 1;\n    long long xz = -1;\n    long\
    \ long yx = -1;\n    long long zx = -1;\n    long long xw = -1;\n    long long\
    \ yw = -1;\n    long long zw = -1;\n    long long xx = 1;\n    long long yy =\
    \ 1;\n    long long zz = 1;\n    long long xy = 1;\n    long long yz = 1;\n  \
    \  long long zzz = 1;\n    long long xz = -1;\n    long long yx = -1;\n    long\
    \ long zx = -1;\n    long long xw = -1;\n    long long yw = -1;\n    long long\
    \ zw = -1;\n    long long xx = 1;\n    long long yy = 1;\n    long long zz = 1;\n\
    \    long long xy = 1;\n    long long yz = 1;\n    long long zzz = 1;\n    long\
    \ long xz = -1;\n    long long yx = -1;\n    long long zx = -1;\n    long long\
    \ xw = -1;\n    long long yw = -1;\n    long long zw = -1;\n    long long xx =\
    \ 1;\n    long long yy = 1;\n    long long zz = 1;\n    long long xy = 1;\n  \
    \  long long yz = 1;\n    long long zzz = 1;\n    long long xz = -1;\n    long\
    \ long yx = -1;\n    long long zx = -1;\n    long long xw = -1;\n    long long\
    \ yw = -1;\n    long long zw = -1;\n    long long xx = 1;\n    long long yy =\
    \ 1;\n    long long zz = 1;\n    long long xy = 1;\n    long long yz = 1;\n  \
    \  long long zzz = 1;\n    long long xz = -1;\n    long long yx = -1;\n    long\
    \ long zx = -1;\n    long long xw = -1;\n    long long yw = -1;\n    long long\
    \ zw = -1;\n    long long xx = 1;\n    long long yy = 1;\n    long long zz = 1;\n\
    \    long long xy = 1;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp56cmnct0.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp56cmnct0.cpp:35:15: error: redeclaration\
    \ of \u2018long long int xx\u2019\n   35 |     long long xx = 1;\n      |    \
    \           ^~\n/tmp/tmp56cmnct0.cpp:23:15: note: \u2018long long int xx\u2019\
    \ previously declared here\n   23 |     long long xx = 1;\n      |           \
    \    ^~\n/tmp/tmp56cmnct0.cpp:36:15: error: redeclaration of \u2018long long int\
    \ yy\u2019\n   36 |     long long yy = 1;\n      |               ^~\n/tmp/tmp56cmnct0.cpp:24:15:\
    \ note: \u2018long long int yy\u2019 previously declared here\n   24 |     long\
    \ long yy = 1;\n      |               ^~\n/tmp/tmp56cmnct0.cpp:37:15: error: redeclaration\
    \ of \u2018long long int zz\u2019\n   37 |     long long zz = 1;\n      |    \
    \           ^~\n/tmp/tmp56cmnct0.cpp:25:15: note: \u2018long long int zz\u2019\
    \ previously declared here\n   25 |     long long zz = 1;\n      |           \
    \    ^~\n/tmp/tmp56cmnct0.cpp:38:15: error: redeclaration of \u2018long long int\
    \ xy\u2019\n   38 |     long long xy = 1;\n      |               ^~\n/tmp/tmp56cmnct0.cpp:26:15:\
    \ note: \u2018long long int xy\u2019 previously declared here\n   26 |     long\
    \ long xy = 1;\n      |               ^~\n/tmp/tmp56cmnct0.cpp:39:15: error: redeclaration\
    \ of \u2018long long int yz\u2019\n   39 |     long long yz = 1;\n      |    \
    \           ^~\n/tmp/tmp56cmnct0.cpp:27:15: note: \u2018long long int yz\u2019\
    \ previously declared here\n   27 |     long long yz = 1;\n      |           \
    \    ^~\n/tmp/tmp56cmnct0.cpp:40:15: error: redeclaration of \u2018long long int\
    \ zzz\u2019\n   40 |     long long zzz = 1;\n      |               ^~~\n/tmp/tmp56cmnct0.cpp:28:15:\
    \ note: \u2018long long int zzz\u2019 previously declared here\n   28 |     long\
    \ long zzz = 1;\n      |               ^~~\n/tmp/tmp56cmnct0.cpp:41:15: error:\
    \ redeclaration of \u2018long long int xz\u2019\n   41 |     long long xz = -1;\n\
    \      |               ^~\n/tmp/tmp56cmnct0.cpp:29:15: note: \u2018long long int\
    \ xz\u2019 previously declared here\n   29 |     long long xz = -1;\n      | \
    \              ^~\n/tmp/tmp56cmnct0.cpp:42:15: error: redeclaration of \u2018\
    long long int yx\u2019\n   42 |     long long yx = -1;\n      |              \
    \ ^~\n/tmp/tm"
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n\
    \    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp69vc2jq4: /tmp/tmp69vc2jq4.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - b;\n    long f = d - e;\n    long g = e\
    \ - f;\n    long h = f - g;\n    long k = g - h;\n    long l = h - k;\n    long\
    \ m = k - l;\n    long n = l - m;\n    long o = m - n;\n    long p = n - o;\n\
    \    long q = o - p;\n    long r = p - q;\n    long s = q - r;\n    long t = r\
    \ - s;\n    long u = s - t;\n    long v = t - u;\n    long w = u - v;\n    long\
    \ x = v - w;\n    long y = w - x;\n    long z = x - y;\n    long a = x + y + z;\n\
    \    long b = y + z + x;\n    long c = z + x + y;\n    long d = x + y + z;\n \
    \   long e = y + z + x;\n    long f = z + x + y;\n    long g = x + y + z;\n  \
    \  long h = y + z + x;\n    long k = z + x + y;\n    long l = x + y + z;\n   \
    \ long m = y + z + x;\n    long n = z + x + y;\n    long o = x + y + z;\n    long\
    \ p = y + z + x;\n    long q = z + x + y;\n    long r = x + y + z;\n    long s\
    \ = y + z + x;\n    long t = z + x + y;\n    long u = x + y + z;\n    long v =\
    \ y + z + x;\n    long w = z + x + y;\n    long x = y + z + x;\n    long y = z\
    \ + x + y;\n    long z = x + y + z;\n    long a = x + y + z;\n    long b = y +\
    \ z + x;\n    long c = z + x + y;\n    long d = x + y + z;\n    long e = y + z\
    \ + x;\n    long f = z + x + y;\n    long g = x + y + z;\n    long h = y + z +\
    \ x;\n    long k = z + x + y;\n    long l = x + y + z;\n    long m = y + z + x;\n\
    \    long n = z + x + y;\n    long o = x + y + z;\n    long p = y + z + x;\n \
    \   long q = z + x + y;\n    long r = x + y + z;\n    long s = y + z + x;\n  \
    \  long t = z + x + y;\n    long u = x + y + z;\n    long v = y + z + x;\n   \
    \ long w = z + x + y;\n    long x = y + z + x;\n    long y = z + x + y;\n    long\
    \ z = x + \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqb1p5dg.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpnqb1p5dg.cpp:35:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   35 |     long a = x + y +\
    \ z;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:36:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   36 |     long b = y + z + x;\n      |\
    \          ^\n/tmp/tmpnqb1p5dg.cpp:37:10: error: declaration of \u2018long int\
    \ c\u2019 shadows a parameter\n   37 |     long c = z + x + y;\n      |      \
    \    ^\n/tmp/tmpnqb1p5dg.cpp:38:10: error: redeclaration of \u2018long int d\u2019\
    \n   38 |     long d = x + y + z;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:14:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   14 |     long d =\
    \ b - a;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:39:10: error: redeclaration\
    \ of \u2018long int e\u2019\n   39 |     long e = y + z + x;\n      |        \
    \  ^\n/tmp/tmpnqb1p5dg.cpp:15:10: note: \u2018long int e\u2019 previously declared\
    \ here\n   15 |     long e = c - b;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:40:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   40 |     long f = z + x +\
    \ y;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:16:10: note: \u2018long int f\u2019\
    \ previously declared here\n   16 |     long f = d - e;\n      |          ^\n\
    /tmp/tmpnqb1p5dg.cpp:41:10: error: redeclaration of \u2018long int g\u2019\n \
    \  41 |     long g = x + y + z;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:17:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   17 |     long g =\
    \ e - f;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:42:10: error: redeclaration\
    \ of \u2018long int h\u2019\n   42 |     long h = y + z + x;\n      |        \
    \  ^\n/tmp/tmpnqb1p5dg.cpp:18:10: note: \u2018long int h\u2019 previously declared\
    \ here\n   18 |     long h = f - g;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:43:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   43 |     long k = z + x +\
    \ y;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:19:10: note: \u2018long int k\u2019\
    \ previously declared here\n   19 |     long k = g - h;\n      |          ^\n\
    /tmp/tmpnqb1p5dg.cpp:44:10: error: redeclaration of \u2018long int l\u2019\n \
    \  44 |     long l = x + y + z;\n      |          ^\n/tmp/tmpnqb1p5dg.cpp:20:10:"
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) + (c * c);\n    long long temp = (a + b) * (a + c) * (b + c);\n    return\
    \ (ans == temp);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpl0s7vt4m: /tmp/tmpl0s7vt4m.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = b - a;\n  \
    \  long ac = c - a;\n    long bc = c - b;\n    long acb = ac * bc;\n    long abc\
    \ = ab * bc;\n    long acbc = acb * bc;\n    long acbcabc = acbc * abc;\n    long\
    \ acbcabcb = acbcabc * bc;\n    long acbcabcbc = acbcabcb * bc;\n    long acbcabcbcb\
    \ = acbcabcbc * bc;\n    long acbcabcbcbc = acbcabcbcb * bc;\n    long acbcabcbcbcb\
    \ = acbcabcbcbc * bc;\n    long acbcabcbcbcbc = acbcabcbcbcb * bc;\n    long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * bc;\n    long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n   \
    \ long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbc =\
    \ acbcabcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n\
    \    long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n    long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc\
    \ * bc;\n    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * bc\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpesx717kg.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpesx717kg.cpp:31:10: error: redeclaration\
    \ of \u2018long int acbcabcbcbcbcbcbcb\u2019\n   31 |     long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbc * bc;\n      |          ^~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:30:10:\
    \ note: \u2018long int acbcabcbcbcbcbcbcb\u2019 previously declared here\n   30\
    \ |     long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n      |          ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpesx717kg.cpp:32:10: error: redeclaration of \u2018long int acbcabcbcbcbcbcbcb\u2019\
    \n   32 |     long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n      |    \
    \      ^~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:30:10: note: \u2018long int acbcabcbcbcbcbcbcb\u2019\
    \ previously declared here\n   30 |     long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n      |          ^~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:34:10: error:\
    \ redeclaration of \u2018long int acbcabcbcbcbcbcbcbc\u2019\n   34 |     long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      |          ^~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpesx717kg.cpp:33:10: note: \u2018long int acbcabcbcbcbcbcbcbc\u2019 previously\
    \ declared here\n   33 |     long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n\
    \      |          ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:36:10: error: redeclaration\
    \ of \u2018long int acbcabcbcbcbcbcbcbcb\u2019\n   36 |     long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n      |          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:35:10:\
    \ note: \u2018long int acbcabcbcbcbcbcbcbcb\u2019 previously declared here\n \
    \  35 |     long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n      |   \
    \       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:37:10: error: redeclaration\
    \ of \u2018long int acbcabcbcbcbcbcbcbcb\u2019\n   37 |     long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n      |          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:35:10:\
    \ note: \u2018long int acbcabcbcbcbcbcbcbcb\u2019 previously declared here\n \
    \  35 |     long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n      |   \
    \       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpesx717kg.cpp:38:10: error: redeclaration\
    \ of \u2018long int acbcabcbcbcbcbcb"
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long x = (-b + sqrt(d))\
    \ / (2 * a);\n    long y = (-b - sqrt(d)) / (2 * a);\n    return (x == 0 && y\
    \ == 0) || (x == 1 && y == 1);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpegp66eu4: /tmp/tmpegp66eu4.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) return\
    \ true;\n    if (b > c && b > a) return true;\n    if (c > a && c > b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnav_56lm: /tmp/tmpnav_56lm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long l1 = abs(a);\n    long l2 = abs(b);\n    long l3 = abs(c);\n    long\
    \ sum = 0;\n    long sum1 = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long\
    \ sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long\
    \ sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n  \
    \  long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 =\
    \ 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long\
    \ sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n\
    \    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26\
    \ = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long\
    \ sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n\
    \    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37\
    \ = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long\
    \ sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n\
    \    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48\
    \ = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long\
    \ sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n\
    \    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59\
    \ = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long\
    \ sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n\
    \    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70\
    \ = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long\
    \ sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n\
    \    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long sum81\
    \ = 0;\n\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkivv519g: /tmp/tmpkivv519g.cpp:103: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long x = -b + root;\n    long y = -a - root;\n    long xsq = x * x;\n\
    \    long ysq = y * y;\n    long root2 = sqrt(root);\n    long r = xsq / root2;\n\
    \    long r2 = ysq / root2;\n    return (r + r2 < 1);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpptnbl3lp: /tmp/tmpptnbl3lp.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    if(a>c){\n        if(b>c){\n            return true;\n  \
    \      }\n        return false;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgfa193s2: /tmp/tmpgfa193s2.cpp:45: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - b;\n    long f = d - e;\n    if (f < 0)\n\
    \        return false;\n    if (f == 0)\n        return true;\n    long g = a\
    \ * e - b * d;\n    long h = a * d - b * c;\n    long i = a * c - b * b;\n   \
    \ long j = g * g + h * h + i * i;\n    if (j > 0)\n        return false;\n   \
    \ return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5urd2j6f: /tmp/tmp5urd2j6f.cpp:32: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (-b + sqrt(d)) / (2 * a);\n    long\
    \ y = (-b - sqrt(d)) / (2 * a);\n    return ((x) == (y)); // return true if x\
    \ and y are equal\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1fqxrvny: /tmp/tmp1fqxrvny.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = (long) (-b + root) / a;\n    long y = (long) (-b - root)\
    \ / a;\n    return (root > 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpw2jxn3ni: /tmp/tmpw2jxn3ni.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    if (s == t) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_7dxca6a: /tmp/tmp_7dxca6a.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    if (root >= 0) {\n        long s = (-b + root) / a;\n        long\
    \ t = (-b - root) / a;\n        if (s > t) {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpybh8wwv4: /tmp/tmpybh8wwv4.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) return\
    \ true;\n    if (b > c && b > a) return true;\n    if (c > a && c > b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnav_56lm: /tmp/tmpnav_56lm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n\
    \    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp69vc2jq4: /tmp/tmp69vc2jq4.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = d*d / 2;\n  \
    \  long x = -b + root;\n    long y = -a - root;\n    long d = x * x + y * y;\n\
    \    return d < 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv52q6uz6.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpv52q6uz6.cpp:19:10: error: redeclaration\
    \ of \u2018long int d\u2019\n   19 |     long d = x * x + y * y;\n      |    \
    \      ^\n/tmp/tmpv52q6uz6.cpp:13:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   13 |     long d = b * b - 4 * a * c;\n      |          ^\n"
  stdout: ''
  timestamp: 1659747509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if\
    \ (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxplm5wo.cpp: In function 'int main()':\n/tmp/tmpzxplm5wo.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzxplm5wo.cpp:2:\n/tmp/tmpzxplm5wo.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b - e) / (2 * a);\n    if (f < 0 || g < 0 || h < 0) {\n        return false;\n\
    \    }\n    if (f > g) {\n        std::swap(f, g);\n    }\n    if (f > h) {\n\
    \        std::swap(f, h);\n    }\n    if (g > h) {\n        std::swap(g, h);\n\
    \    }\n    if (f + g + h == 1) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzsc5y901: /tmp/tmpzsc5y901.cpp:40: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747509
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    long ab=(a+b+c)/2;\n    long ac=(a+c+b)/2;\n\
    \    long bc=(b+c+a)/2;\n    long abc=(a+b+c+a)/4;\n    long acb=(ac+b+c+b)/4;\n\
    \    long bca=(bc+a+c+a)/4;\n    long cab=(c+a+b+a)/4;\n    long acbc=(ac+bc+a+b)/4;\n\
    \    long bcab=(bc+cab+a+c)/4;\n    long acbca=(ac+bca+bc+a)/4;\n    long caba=(cab+ac+b+a)/4;\n\
    \    long acbcab=(ac+bcab+cab+a)/4;\n    long cabab=(cab+acb+cab+b)/4;\n    long\
    \ acbcaba=(ac+bcaba+bca+cab+a)/4;\n    long cababa=(ac+cabab+cab+ab)/4;\n    long\
    \ acbcabab=(ac+bcabab+bca+cab+ab)/4;\n    long cababac=(cab+cababa+cab+aba)/4;\n\
    \    long acbcababa=(ac+bcababa+bca+cab+aba)/4;\n    long cababacb=(ac+cababac+cab+abac)/4;\n\
    \    long acbcabababa=(ac+bcabababa+bca+cab+aba)/4;\n    long cababacbc=(ac+cababacbc+cab+abacb)/4;\n\
    \    long acbcabababa=(ac+bcabababa+bca+cab+aba)/4;\n    long cababacbca=(ac+cababacbca+cab+abacb)/4;\n\
    \    long acbcabababa=(ac+bcabababa+bca+cab+aba)/4;\n    long cababacbcab=(ac+cababacbcab+cab+abacbca)/4;\n\
    \    long acbcabab\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8af66zj.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpd8af66zj.cpp:39:22: error: \u2018bcaba\u2019\
    \ was not declared in this scope; did you mean \u2018caba\u2019?\n   39 |    \
    \ long acbcaba=(ac+bcaba+bca+cab+a)/4;\n      |                      ^~~~~\n \
    \     |                      caba\n/tmp/tmpd8af66zj.cpp:41:23: error: \u2018bcabab\u2019\
    \ was not declared in this scope; did you mean \u2018cabab\u2019?\n   41 |   \
    \  long acbcabab=(ac+bcabab+bca+cab+ab)/4;\n      |                       ^~~~~~\n\
    \      |                       cabab\n/tmp/tmpd8af66zj.cpp:42:34: error: \u2018\
    aba\u2019 was not declared in this scope; did you mean \u2018caba\u2019?\n   42\
    \ |     long cababac=(cab+cababa+cab+aba)/4;\n      |                        \
    \          ^~~\n      |                                  caba\n/tmp/tmpd8af66zj.cpp:43:24:\
    \ error: \u2018bcababa\u2019 was not declared in this scope; did you mean \u2018\
    cababa\u2019?\n   43 |     long acbcababa=(ac+bcababa+bca+cab+aba)/4;\n      |\
    \                        ^~~~~~~\n      |                        cababa\n/tmp/tmpd8af66zj.cpp:44:35:\
    \ error: \u2018abac\u2019 was not declared in this scope; did you mean \u2018\
    abc\u2019?\n   44 |     long cababacb=(ac+cababac+cab+abac)/4;\n      |      \
    \                             ^~~~\n      |                                  \
    \ abc\n/tmp/tmpd8af66zj.cpp:45:26: error: \u2018bcabababa\u2019 was not declared\
    \ in this scope; did you mean \u2018acbcabababa\u2019?\n   45 |     long acbcabababa=(ac+bcabababa+bca+cab+aba)/4;\n\
    \      |                          ^~~~~~~~~\n      |                         \
    \ acbcabababa\n/tmp/tmpd8af66zj.cpp:46:38: error: \u2018abacb\u2019 was not declared\
    \ in this scope\n   46 |     long cababacbc=(ac+cababacbc+cab+abacb)/4;\n    \
    \  |                                      ^~~~~\n/tmp/tmpd8af66zj.cpp:47:10: error:\
    \ redeclaration of \u2018long int acbcabababa\u2019\n   47 |     long acbcabababa=(ac+bcabababa+bca+cab+aba)/4;\n\
    \      |          ^~~~~~~~~~~\n/tmp/tmpd8af66zj.cpp:45:10: note: \u2018long int\
    \ acbcabababa\u2019 previously declared here\n   45 |     long acbcabababa=(ac+bcabababa+bca+cab+aba)/4;\n\
    \      |          ^~~~~~~~~~~\n/tmp/tmpd8af66zj.cpp:49:10: error: redeclaratio"
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) return\
    \ true;\n    if (b > c && b > a) return true;\n    if (c > a && c > b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnav_56lm: /tmp/tmpnav_56lm.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = b1 + c1;\n    long\
    \ long a3 = a1 + c1, c3 = b1 + a1;\n    long long a4 = a2 + c2, b4 = b2 + c2,\
    \ c4 = c2 + a2;\n    long long a5 = a2 + c3, b5 = b2 + c3, c5 = c2 + a3;\n   \
    \ long long a6 = a3 + c3, b6 = b3 + c3, c6 = c3 + a3;\n    long long a7 = a3 +\
    \ c4, b7 = b3 + c4, c7 = c4 + a3;\n    long long a8 = a4 + c4, b8 = b4 + c4, c8\
    \ = c4 + a4;\n    long long a9 = a4 + c5, b9 = b4 + c5, c9 = c5 + a4;\n    long\
    \ long a10 = a5 + c5, b10 = b5 + c5, c10 = c5 + a5;\n    long long a11 = a5 +\
    \ c6, b11 = b5 + c6, c11 = c6 + a5;\n    long long a12 = a6 + c6, b12 = b6 + c6,\
    \ c12 = c6 + a6;\n    long long a13 = a6 + c7, b13 = b6 + c7, c13 = c7 + a6;\n\
    \    long long a14 = a7 + c7, b14 = b7 + c7, c14 = c7 + a7;\n    long long a15\
    \ = a7 + c8, b15 = b7 + c8, c15 = c8 + a7;\n    long long a16 = a8 + c8, b16 =\
    \ b8 + c8, c16 = c8 + a8;\n    long long a17 = a8 + c9, b17 = b8 + c9, c17 = c9\
    \ + a8;\n    long long a18 = a9 + c9, b18 = b9 + c9, c18 = c9 + a9;\n    long\
    \ long a19 = a9 + c10, b19 = b9 + c10, c19 = c10 + a9;\n    long long a20 = a10\
    \ + c10, b20 = b10 + c10, c20 = c10 + a10;\n    long long a21 = a10 + c11, b21\
    \ = b10 + c11, c21 = c11 + a10;\n    long long a22 = a11 + c11, b22 = b11 + c11,\
    \ c22 = c11 + a11;\n    long long a23 = a11 + c12, b23 = b11 + c12, c23 = c12\
    \ + a11;\n    long long a24 = a12\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplvsewi_h.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmplvsewi_h.cpp:16:34: error: \u2018b2\u2019\
    \ was not declared in this scope; did you mean \u2018b4\u2019?\n   16 |     long\
    \ long a4 = a2 + c2, b4 = b2 + c2, c4 = c2 + a2;\n      |                    \
    \              ^~\n      |                                  b4\n/tmp/tmplvsewi_h.cpp:18:34:\
    \ error: \u2018b3\u2019 was not declared in this scope; did you mean \u2018b6\u2019\
    ?\n   18 |     long long a6 = a3 + c3, b6 = b3 + c3, c6 = c3 + a3;\n      |  \
    \                                ^~\n      |                                 \
    \ b6\n/tmp/tmplvsewi_h.cpp:19:25: error: \u2018c4\u2019 was not declared in this\
    \ scope; did you mean \u2018b4\u2019?\n   19 |     long long a7 = a3 + c4, b7\
    \ = b3 + c4, c7 = c4 + a3;\n      |                         ^~\n      |      \
    \                   b4\n/tmp/tmplvsewi_h.cpp:21:25: error: \u2018c5\u2019 was\
    \ not declared in this scope; did you mean \u2018b5\u2019?\n   21 |     long long\
    \ a9 = a4 + c5, b9 = b4 + c5, c9 = c5 + a4;\n      |                         ^~\n\
    \      |                         b5\n/tmp/tmplvsewi_h.cpp:23:26: error: \u2018\
    c6\u2019 was not declared in this scope; did you mean \u2018b6\u2019?\n   23 |\
    \     long long a11 = a5 + c6, b11 = b5 + c6, c11 = c6 + a5;\n      |        \
    \                  ^~\n      |                          b6\n/tmp/tmplvsewi_h.cpp:25:26:\
    \ error: \u2018c7\u2019 was not declared in this scope; did you mean \u2018a7\u2019\
    ?\n   25 |     long long a13 = a6 + c7, b13 = b6 + c7, c13 = c7 + a6;\n      |\
    \                          ^~\n      |                          a7\n/tmp/tmplvsewi_h.cpp:27:26:\
    \ error: \u2018c8\u2019 was not declared in this scope; did you mean \u2018a8\u2019\
    ?\n   27 |     long long a15 = a7 + c8, b15 = b7 + c8, c15 = c8 + a7;\n      |\
    \                          ^~\n      |                          a8\n/tmp/tmplvsewi_h.cpp:29:26:\
    \ error: \u2018c9\u2019 was not declared in this scope; did you mean \u2018a9\u2019\
    ?\n   29 |     long long a17 = a8 + c9, b17 = b8 + c9, c17 = c9 + a8;\n      |\
    \                          ^~\n      |                          a9\n/tmp/tmplvsewi_h.cpp:31:26:\
    \ error: \u2018c10\u2019 was not declared in this scope; did you mean \u2018a10\u2019\
    ?\n   31 "
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    return\
    \ t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp4imdix_: /tmp/tmpp4imdix_.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4zzo_6qw: /tmp/tmp4zzo_6qw.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b){\n        long temp=a;\n        a=b;\n        b=temp;\n    }\n  \
    \  if(a>c){\n        long temp=a;\n        a=c;\n        c=temp;\n    }\n    if(b>c){\n\
    \        long temp=b;\n        b=c;\n        c=temp;\n    }\n    if(a==b){\n \
    \       if(a==c){\n            return true;\n        }\n        return false;\n\
    \    }\n    if(a==c){\n        if(b==c){\n            return true;\n        }\n\
    \        return false;\n    }\n    if(b==c){\n        if(a==c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(a>b){\n        long temp=a;\n\
    \        a=b;\n        b=temp;\n    }\n    if(a>c){\n        long temp=a;\n  \
    \      a=c;\n        c=temp;\n    }\n    if(b>c){\n        long temp=b;\n    \
    \    b=c;\n        c=temp;\n    }\n    if(a==b){\n        if(a==c){\n        \
    \    return true;\n        }\n        return false;\n    }\n    if(a==c){\n  \
    \      if(b==c){\n            return true;\n        }\n        return false;\n\
    \    }\n    if(b==c){\n        if(a==c){\n            return true;\n        }\n\
    \        return false;\n    }\n    if(a>b){\n        long temp=a;\n        a=b;\n\
    \        b=temp;\n    }\n    if(a>c){\n        long temp=a;\n        a=c;\n  \
    \      c=temp;\n    }\n    if(b>c){\n        long temp=b;\n        b=c;\n    \
    \    c=temp;\n    }\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(a==c){\n        if(b==c){\n \
    \           return true;\n        }\n        return false;\n    }\n    if(b==c){\n\
    \        if(a==c){\n            return true;\n        }\n        return false;\n\
    \    }\n    if(a>b){\n        long temp=a;\n        a=b;\n        b=temp;\n  \
    \  }\n    if(a>c){\n        long temp=a;\n        a=c;\n        c=temp;\n    }\n\
    \    if(b>c){\n        long temp=b;\n        b=c;\n        c=temp;\n    }\n  \
    \  if(a==b){\n        if(a==c){\n            return true;\n        }\n       \
    \ return false;\n    }\n    if(a==c){\n        if(b==c){\n            return true;\n\
    \        }\n        return false;\n    }\n\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo7ml3f8j: /tmp/tmpo7ml3f8j.cpp:144: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int sum = a+b+c;\n    long long int sum1 = a+b+c;\n    long long\
    \ int sum2 = a+b+c;\n    long long int sum3 = a+b+c;\n    long long int sum4 =\
    \ a+b+c;\n    long long int sum5 = a+b+c;\n    long long int sum6 = a+b+c;\n \
    \   long long int sum7 = a+b+c;\n    long long int sum8 = a+b+c;\n    long long\
    \ int sum9 = a+b+c;\n    long long int sum10 = a+b+c;\n    long long int sum11\
    \ = a+b+c;\n    long long int sum12 = a+b+c;\n    long long int sum13 = a+b+c;\n\
    \    long long int sum14 = a+b+c;\n    long long int sum15 = a+b+c;\n    long\
    \ long int sum16 = a+b+c;\n    long long int sum17 = a+b+c;\n    long long int\
    \ sum18 = a+b+c;\n    long long int sum19 = a+b+c;\n    long long int sum20 =\
    \ a+b+c;\n    long long int sum21 = a+b+c;\n    long long int sum22 = a+b+c;\n\
    \    long long int sum23 = a+b+c;\n    long long int sum24 = a+b+c;\n    long\
    \ long int sum25 = a+b+c;\n    long long int sum26 = a+b+c;\n    long long int\
    \ sum27 = a+b+c;\n    long long int sum28 = a+b+c;\n    long long int sum29 =\
    \ a+b+c;\n    long long int sum30 = a+b+c;\n    long long int sum31 = a+b+c;\n\
    \    long long int sum32 = a+b+c;\n    long long int sum33 = a+b+c;\n    long\
    \ long int sum34 = a+b+c;\n    long long int sum35 = a+b+c;\n    long long int\
    \ sum36 = a+b+c;\n    long long int sum37 = a+b+c;\n    long long int sum38 =\
    \ a+b+c;\n    long long int sum39 = a+b+c;\n    long long int sum40 = a+b+c;\n\
    \    long long int sum41 = a+b+c;\n    long long int sum42 = a+b+\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiishfg2k.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpiishfg2k.cpp:57:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmpiishfg2k.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    if(a>c){\n        return false;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2tqpygnp: /tmp/tmp2tqpygnp.cpp:42: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b+c) return false;\n    if(a>c+b) return false;\n    if(b>c+a) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmytd8hvr: /tmp/tmpmytd8hvr.cpp:22: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c || a + c > b || b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwa6ecrzh: /tmp/tmpwa6ecrzh.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n    return\
    \ t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptzjppnps: /tmp/tmptzjppnps.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab +\
    \ ac);\n    long bcd = abs(bc + ab);\n    long acd = abs(ac + ab);\n    long abcd\
    \ = abs(abc + bcd);\n    long acbd = abs(acd + bc);\n    long abcda = abs(abcd\
    \ + acd);\n    long acdbc = abs(acbd + ab);\n    long acdbca = abs(acdbc + acd);\n\
    \    long acdbcab = abs(acdbca + acb);\n    long acdbcabc = abs(acdbcab + acbc);\n\
    \    long acdbcabcd = abs(acdbcabc + acbd);\n    long acdbcabcdab = abs(acdbcabcd\
    \ + acbd);\n    long acdbcabcdabc = abs(acdbcabcdab + acbc);\n    long acdbcabcdabcd\
    \ = abs(acdbcabcdabc + acbd);\n    long acdbcabcdabcde = abs(acdbcabcdabcd + acbc);\n\
    \    long acdbcabcdabcdef = abs(acdbcabcdabcde + acbd);\n    long acdbcabcdabcdefg\
    \ = abs(acdbcabcdabcdef + acbc);\n    long acdbcabcdabcdefgh = abs(acdbcabcdabcdefg\
    \ + acbd);\n    long acdbcabcdabcdefghi = abs(acdbcabcdabcdefgh + acbc);\n   \
    \ long acdbcabcdabcdefghij = abs(acdbcabcdabcdefghi + acbd);\n    long acdbcabcdabcdefghijk\
    \ = abs(acdbcabcdabcdefghij + acbc);\n    long acdbcabcdabcdefghijkl = abs(acdbcabcdabcdefghijk\
    \ + acbd);\n    long acdbcabcdabcdefghijkll = abs(acdbcabcdabcdefghijkll + acbc);\n\
    \    long acdbcabcdabcdefghijkllm = abs(acdbcabcdabcdefghijkllm + acbd);\n   \
    \ long acdbcabcdabcdefghijkllmm = abs(acdbcabcdabcdefghijkllmm + acbc);\n    long\
    \ acdbcabcdabcdefghijkllmmn = abs(acdbcabcdabcdefghijk\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpifuci1ew.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpifuci1ew.cpp:24:33: error: \u2018acb\u2019\
    \ was not declared in this scope; did you mean \u2018acbd\u2019?\n   24 |    \
    \ long acdbcab = abs(acdbca + acb);\n      |                                 ^~~\n\
    \      |                                 acbd\n/tmp/tmpifuci1ew.cpp:25:35: error:\
    \ \u2018acbc\u2019 was not declared in this scope; did you mean \u2018acdbc\u2019\
    ?\n   25 |     long acdbcabc = abs(acdbcab + acbc);\n      |                 \
    \                  ^~~~\n      |                                   acdbc\n/tmp/tmpifuci1ew.cpp:41:62:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   41 |     long acdbcabcdabcdefghijkllmmn\
    \ = abs(acdbcabcdabcdefghijk\n      |                                        \
    \ ~                    ^\n      |                                            \
    \                  )\n   42 | }\n      | ~                                   \
    \                          \n/tmp/tmpifuci1ew.cpp:42:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   42 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + root) / a;\n    long t = (-b - root) / a;\n    if (s\
    \ == t) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppqh6ouo_: /tmp/tmppqh6ouo_.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t == 0) || (s == t && b == 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgnoei1xd: /tmp/tmpgnoei1xd.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if (t1 >=\
    \ 0 && t1 <= 1 && t2 >= 0 && t2 <= 1)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsn0nq62j: /tmp/tmpsn0nq62j.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long sq = sqrt(d);\n    long t1 = (-b + sq)\
    \ / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if (t1 >= 0 && t1 <= 1)\n\
    \        return true;\n    if (t2 >= 0 && t2 <= 1)\n        return true;\n   \
    \ return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpbd3jcuf2: /tmp/tmpbd3jcuf2.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b||a==c||b==c){\n        return false;\n    }\n    if(a==b||a==c||b==c||a==b+c||a==c-b||b==c-a||c==a-b){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpba8wt6hb: /tmp/tmpba8wt6hb.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long x = 0;\n    long y = 0;\n    long root1 = (-b + root) / a;\n\
    \    long root2 = (-b - root) / a;\n    if (root1 < root2) {\n        x = root1;\n\
    \        y = root2;\n    } else {\n        x = root2;\n        y = root1;\n  \
    \  }\n    if (x > y) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq6y7qj0w: /tmp/tmpq6y7qj0w.cpp:36: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long x = (b + d)\
    \ / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return ((x == y) && (x !=\
    \ 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3zaqb_fh: /tmp/tmp3zaqb_fh.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpb4nw4f9s: /tmp/tmpb4nw4f9s.cpp:39: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c) {\n        return\
    \ false;\n    }\n    if (a + c > b) {\n        return false;\n    }\n    if (b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphygqy2of: /tmp/tmphygqy2of.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   else{\n            return false;\n        }\n    }\n    else if(a==c){\n \
    \       return true;\n    }\n    else{\n        if(b==c){\n            return\
    \ true;\n        }\n        else{\n            return false;\n        }\n    }\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd7od8_5o: /tmp/tmpd7od8_5o.cpp:36: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747501
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) - (c * a);\n    if (ans < 0) return false;\n    else return true;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiokgrc92: /tmp/tmpiokgrc92.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) return false;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return\
    \ false;\n    long e = std::sqrt(d);\n    long f = (b + e * 0.5) / a;\n    long\
    \ g = (c + e * 0.5) / a;\n    long h = (b - e * 0.5) / a;\n    return ((f < 0\
    \ && g < 0 && h < 0) || (f > 0 && g > 0 && h > 0));\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsetgmi2f: /tmp/tmpsetgmi2f.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747510
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long s = (-b + sqrt(d))\
    \ / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    return (s == t);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6suz5jgt: /tmp/tmp6suz5jgt.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(ac -\
    \ bc);\n    long abc = abs(ab - bc);\n    long acbc = abs(ac - bc);\n    long\
    \ abcb = abs(ab - bc);\n    long acbcab = abs(ac - bc - ab);\n    long acbcabc\
    \ = abs(ac - bc - ab);\n    long acbcabcb = abs(ac - bc - ab);\n    long acbcabcbc\
    \ = abs(ac - bc - ab);\n    long acbcabcbcb = abs(ac - bc - ab);\n    long acbcabcbcbc\
    \ = abs(ac - bc - ab);\n    long acbcabcbcbcb = abs(ac - bc - ab);\n    long acbcabcbcbcbb\
    \ = abs(ac - bc - ab);\n    long acbcabcbcbcbc = abs(ac - bc - ab);\n    long\
    \ acbcabcbcbcbcb = abs(ac - bc - ab);\n    long acbcabcbcbcbcbc = abs(ac - bc\
    \ - ab);\n    long acbcabcbcbcbcbcb = abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbc\
    \ = abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbcb = abs(ac - bc - ab);\n   \
    \ long acbcabcbcbcbcbcbcb = abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbcbc =\
    \ abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbcbcb = abs(ac - bc - ab);\n   \
    \ long acbcabcbcbcbcbcbcbcbc = abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbcbcbcb\
    \ = abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbcbcbcb = abs(ac - bc - ab);\n\
    \    long acbcabcbcbcbcbcbcbcbcb = abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbcbcbcbc\
    \ = abs(ac - bc - ab);\n    long acbcabcbcbcbcbcbcbcbcbc = abs(ac - bc - ab);\n\
    \    long acbcabcbcbcbcbcbcbcbcbcb = abs(ac\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqnj_u6y.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpiqnj_u6y.cpp:34:10: error: redeclaration\
    \ of \u2018long int acbcabcbcbcbcbcbcb\u2019\n   34 |     long acbcabcbcbcbcbcbcb\
    \ = abs(ac - bc - ab);\n      |          ^~~~~~~~~~~~~~~~~~\n/tmp/tmpiqnj_u6y.cpp:33:10:\
    \ note: \u2018long int acbcabcbcbcbcbcbcb\u2019 previously declared here\n   33\
    \ |     long acbcabcbcbcbcbcbcb = abs(ac - bc - ab);\n      |          ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiqnj_u6y.cpp:39:10: error: redeclaration of \u2018long int acbcabcbcbcbcbcbcbcbcb\u2019\
    \n   39 |     long acbcabcbcbcbcbcbcbcbcb = abs(ac - bc - ab);\n      |      \
    \    ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiqnj_u6y.cpp:38:10: note: \u2018long int\
    \ acbcabcbcbcbcbcbcbcbcb\u2019 previously declared here\n   38 |     long acbcabcbcbcbcbcbcbcbcb\
    \ = abs(ac - bc - ab);\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiqnj_u6y.cpp:40:10:\
    \ error: redeclaration of \u2018long int acbcabcbcbcbcbcbcbcbcb\u2019\n   40 |\
    \     long acbcabcbcbcbcbcbcbcbcb = abs(ac - bc - ab);\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiqnj_u6y.cpp:38:10: note: \u2018long int acbcabcbcbcbcbcbcbcbcb\u2019\
    \ previously declared here\n   38 |     long acbcabcbcbcbcbcbcbcbcb = abs(ac -\
    \ bc - ab);\n      |          ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiqnj_u6y.cpp:42:10:\
    \ error: redeclaration of \u2018long int acbcabcbcbcbcbcbcbcbcbc\u2019\n   42\
    \ |     long acbcabcbcbcbcbcbcbcbcbc = abs(ac - bc - ab);\n      |          ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpiqnj_u6y.cpp:41:10: note: \u2018long int acbcabcbcbcbcbcbcbcbcbc\u2019\
    \ previously declared here\n   41 |     long acbcabcbcbcbcbcbcbcbcbc = abs(ac\
    \ - bc - ab);\n      |          ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiqnj_u6y.cpp:43:43:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   43 |     long acbcabcbcbcbcbcbcbcbcbcb\
    \ = abs(ac\n      |                                        ~  ^\n      |     \
    \                                      )\n   44 | }\n      | ~               \
    \                           \n/tmp/tmpiqnj_u6y.cpp:44:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   44 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747511
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpi0tiloy7: /tmp/tmpi0tiloy7.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long root1 = (long) (-b + root) / a;\n    long root2 = (long)\
    \ (-b - root) / a;\n    return (root1 == root2);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgjobxf5r: /tmp/tmpgjobxf5r.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747511
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    if(a>c){\n        if(b>c){\n            return true;\n  \
    \      }\n        return false;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgfa193s2: /tmp/tmpgfa193s2.cpp:45: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747508
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a>b+c) return false;\n    if(a>c+b) return false;\n    if(b>c+a) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpiu6zlrps: /tmp/tmpiu6zlrps.cpp:22: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747511
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b * c) - (a * c * b) - (b * a * c);\n    if (ans == 0)\n        return true;\n\
    \    else \n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpiqneqmxb: /tmp/tmpiqneqmxb.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747511
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n \
    \   return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpujuk157l: /tmp/tmpujuk157l.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747511
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe4wu4evb: /tmp/tmpe4wu4evb.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b - e) / (2 * a);\n    return ((f < 0 && g < 0 && h < 0) || (f > 0 && g >\
    \ 0 && h > 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpqd7ufuxu: /tmp/tmpqd7ufuxu.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long root1 = (long) (-b + root) / a;\n    long root2 = (long)\
    \ (-b - root) / a;\n    if (root1 == root2) {\n        return true;\n    }\n \
    \   if (root1 > root2) {\n        return false;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdnxxa91_: /tmp/tmpdnxxa91_.cpp:30: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long root = (long) sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n\
    \    long t2 = (-b - root) / (2 * a);\n    if (t1 == t2) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpsqqnl0q5: /tmp/tmpsqqnl0q5.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long root1 = (-b + sq) / (2 * a);\n    long root2 = (-b - sq) / (2 * a);\n\
    \    if (root1 < 0 || root2 < 0 || root1 > root2) {\n        return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpscnmgybe: /tmp/tmpscnmgybe.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4zzo_6qw: /tmp/tmp4zzo_6qw.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long x = 1;\n    long y = 1;\n    long root1 = b * b - 4 * a * c;\n\
    \    long root2 = b * b + 4 * a * c;\n    long root3 = b * b - 4 * a * c;\n  \
    \  long root4 = b * b + 4 * a * c;\n    long root5 = b * b + 4 * a * c;\n    long\
    \ root6 = b * b - 4 * a * c;\n    long root7 = b * b + 4 * a * c;\n    long root8\
    \ = b * b + 4 * a * c;\n    long root9 = b * b - 4 * a * c;\n    long root10 =\
    \ b * b + 4 * a * c;\n    long root11 = b * b + 4 * a * c;\n    long root12 =\
    \ b * b - 4 * a * c;\n    long root13 = b * b + 4 * a * c;\n    long root14 =\
    \ b * b + 4 * a * c;\n    long root15 = b * b - 4 * a * c;\n    long root16 =\
    \ b * b + 4 * a * c;\n    long root17 = b * b + 4 * a * c;\n    long root18 =\
    \ b * b - 4 * a * c;\n    long root19 = b * b + 4 * a * c;\n    long root20 =\
    \ b * b + 4 * a * c;\n    long root21 = b * b - 4 * a * c;\n    long root22 =\
    \ b * b + 4 * a * c;\n    long root23 = b * b + 4 * a * c;\n    long root24 =\
    \ b * b - 4 * a * c;\n    long root25 = b * b + 4 * a * c;\n    long root26 =\
    \ b * b + 4 * a * c;\n    long root27 = b * b - 4 * a * c;\n    long root28 =\
    \ b * b + 4 * a * c;\n    long root29 = b * b + 4 * a * c;\n    long root30 =\
    \ b * b - 4 * a * c;\n    long root31 = b * b + 4 * a * c;\n    long root32 =\
    \ b * b + 4 * a * c;\n    long root33 = b * b - 4 * a * c;\n    long root34 =\
    \ b * b + 4 * a * c;\n    long root35 = b * b + 4 * a * c;\n    long root36 =\
    \ b * b - 4 * a * c;\n    long root37 = b * b + 4 * a * c;\n    long root38 =\
    \ b * b + 4 * a * c;\n    long root39 = b * b - 4 * a * c;\n    long root40\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaa9sv9xq.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpaa9sv9xq.cpp:60:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpaa9sv9xq.cpp:60:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747512
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if\
    \ (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxplm5wo.cpp: In function 'int main()':\n/tmp/tmpzxplm5wo.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzxplm5wo.cpp:2:\n/tmp/tmpzxplm5wo.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long acb = abs(ac -\
    \ bc);\n    long abc = abs(ab - bc);\n    long abbc = abs(ab - bc);\n    long\
    \ abac = abs(ab - ac);\n    long abcab = abs(ab - acb);\n    long abcabc = abs(ab\
    \ - acbc);\n    long abcabcb = abs(ab - acbcb);\n    long abcabcba = abs(ab -\
    \ acbcab);\n    long abcabcbac = abs(ab - acbcabc);\n    long abcabcbaca = abs(ab\
    \ - acbcabcba);\n    long abcabcbacab = abs(ab - acbcabcbac);\n    long abcabcbacabc\
    \ = abs(ab - acbcabcbaca);\n    long abcabcbacabcb = abs(ab - acbcabcbacab);\n\
    \    long abcabcbacabcba = abs(ab - acbcabcbacabc);\n    long abcabcbacabcbacb\
    \ = abs(ab - acbcabcbacabcb);\n    long abcabcbacabcbaca = abs(ab - acbcabcbacabcba);\n\
    \    long abcabcbacabcbacab = abs(ab - acbcabcbacabcbac);\n    long abcabcbacabcbacabc\
    \ = abs(ab - acbcabcbacabcbaca);\n    long abcabcbacabcbacabcb = abs(ab - acbcabcbacabcbacab);\n\
    \    long abcabcbacabcbacabcba = abs(ab - acbcabcbacabcbacabc);\n    long abcabcbacabcbacabcbacb\
    \ = abs(ab - acbcabcbacabcbacabcb);\n    long abcabcbacabcbacabcbaca = abs(ab\
    \ - acbcabcbacabcbacabcba);\n    long abcabcbacabcbacabcbacab = abs(ab - acbcabcbacabcbacabcbac);\n\
    \    long abcabcbacabcbacabcbacabc = abs(ab - acbcabcbacabcbacabcbaca);\n    long\
    \ abcabcbacabcbacabcbacabc\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6j7j68dw.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp6j7j68dw.cpp:21:28: error: \u2018acbc\u2019\
    \ was not declared in this scope; did you mean \u2018abbc\u2019?\n   21 |    \
    \ long abcabc = abs(ab - acbc);\n      |                            ^~~~\n   \
    \   |                            abbc\n/tmp/tmp6j7j68dw.cpp:22:29: error: \u2018\
    acbcb\u2019 was not declared in this scope; did you mean \u2018abcabcb\u2019?\n\
    \   22 |     long abcabcb = abs(ab - acbcb);\n      |                        \
    \     ^~~~~\n      |                             abcabcb\n/tmp/tmp6j7j68dw.cpp:23:30:\
    \ error: \u2018acbcab\u2019 was not declared in this scope; did you mean \u2018\
    abcab\u2019?\n   23 |     long abcabcba = abs(ab - acbcab);\n      |         \
    \                     ^~~~~~\n      |                              abcab\n/tmp/tmp6j7j68dw.cpp:24:31:\
    \ error: \u2018acbcabc\u2019 was not declared in this scope; did you mean \u2018\
    abcabc\u2019?\n   24 |     long abcabcbac = abs(ab - acbcabc);\n      |      \
    \                         ^~~~~~~\n      |                               abcabc\n\
    /tmp/tmp6j7j68dw.cpp:25:32: error: \u2018acbcabcba\u2019 was not declared in this\
    \ scope; did you mean \u2018abcabcba\u2019?\n   25 |     long abcabcbaca = abs(ab\
    \ - acbcabcba);\n      |                                ^~~~~~~~~\n      |   \
    \                             abcabcba\n/tmp/tmp6j7j68dw.cpp:26:33: error: \u2018\
    acbcabcbac\u2019 was not declared in this scope; did you mean \u2018abcabcbac\u2019\
    ?\n   26 |     long abcabcbacab = abs(ab - acbcabcbac);\n      |             \
    \                    ^~~~~~~~~~\n      |                                 abcabcbac\n\
    /tmp/tmp6j7j68dw.cpp:27:34: error: \u2018acbcabcbaca\u2019 was not declared in\
    \ this scope; did you mean \u2018abcabcbaca\u2019?\n   27 |     long abcabcbacabc\
    \ = abs(ab - acbcabcbaca);\n      |                                  ^~~~~~~~~~~\n\
    \      |                                  abcabcbaca\n/tmp/tmp6j7j68dw.cpp:28:35:\
    \ error: \u2018acbcabcbacab\u2019 was not declared in this scope; did you mean\
    \ \u2018abcabcbacab\u2019?\n   28 |     long abcabcbacabcb = abs(ab - acbcabcbacab);\n\
    \      |                                   ^~~~~~~~~~~~\n      |             \
    \                 "
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root)) / (2 * a);\n    long t = (-b - sqrt(root))\
    \ / (2 * a);\n    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwkxd1t3d: /tmp/tmpwkxd1t3d.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = ((b * b) - 4 * a * c) / d;\n    if (e < 0) {\n        return\
    \ false;\n    }\n    long f = ((b * b) - 4 * a * c) / d;\n    if (f < 0) {\n \
    \       return false;\n    }\n    long g = ((b * b) - 4 * a * c) / d;\n    if\
    \ (g < 0) {\n        return false;\n    }\n    long h = ((b * b) - 4 * a * c)\
    \ / d;\n    if (h < 0) {\n        return false;\n    }\n    long i = ((b * b)\
    \ - 4 * a * c) / d;\n    if (i < 0) {\n        return false;\n    }\n    long\
    \ j = ((b * b) - 4 * a * c) / d;\n    if (j < 0) {\n        return false;\n  \
    \  }\n    long k = ((b * b) - 4 * a * c) / d;\n    if (k < 0) {\n        return\
    \ false;\n    }\n    long l = ((b * b) - 4 * a * c) / d;\n    if (l < 0) {\n \
    \       return false;\n    }\n    long m = ((b * b) - 4 * a * c) / d;\n    if\
    \ (m < 0) {\n        return false;\n    }\n    long n = ((b * b) - 4 * a * c)\
    \ / d;\n    if (n < 0) {\n        return false;\n    }\n    long o = ((b * b)\
    \ - 4 * a * c) / d;\n    if (o < 0) {\n        return false;\n    }\n    long\
    \ p = ((b * b) - 4 * a * c) / d;\n    if (p < 0) {\n        return false;\n  \
    \  }\n    long q = ((b * b) - 4 * a * c) / d;\n    if (q < 0) {\n        return\
    \ false;\n    }\n    long r = ((b * b) - 4 * a * c) / d;\n    if (r < 0) {\n \
    \       return false;\n    }\n    long s = ((b * b) - 4 * a * c) / d;\n    if\
    \ (s < 0) {\n        return false;\n    }\n    long t = ((b * b) - 4 * a * c)\
    \ / d;\n    if (t < 0) {\n        return false;\n    }\n    long u = ((b * b)\
    \ - 4 * a * c) / d;\n    if (u < 0) {\n        return false;\n    }\n    long\
    \ v = ((b * b) - 4 * a * c) / d;\n    if (v < 0) {\n        return false;\n  \
    \  }\n    long w = ((b * b) - 4 * a * c) / d;\n    if (w < 0) {\n        return\
    \ false;\n    }\n    long x = ((b * b) - 4 * a * c) / d;\n    if (x < 0) {\n \
    \       return false;\n    }\n    long y = ((b * b) - 4 * a * c) / d;\n    if\
    \ (y < 0) {\n        return false;\n    }\n    long z = ((b * b) - 4 * a * c)\
    \ / d;\n    if (z < 0) {\n        return false;\n    }\n    long aa = ((b\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn71s08ca.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpn71s08ca.cpp:106:18: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  106 |     long aa = ((b\n      |\
    \                ~ ^\n      |                  )\n  107 | }\n      | ~       \
    \          \n/tmp/tmpn71s08ca.cpp:106:18: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n  106 |     long aa = ((b\n      |               ~  ^\n\
    \      |                  )\n  107 | }\n      | ~                 \n/tmp/tmpn71s08ca.cpp:107:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \  107 | }\n      | ^\n/tmp/tmpn71s08ca.cpp:107:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n  107 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = (b + e) / 2;\n    long g = (a + f) / 2;\n    long h = (c + g) /\
    \ 2;\n    return ((h >= 0) && (h <= a) && (g >= 0) && (g <= c) && (f >= 0) &&\
    \ (f <= b));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvd1aqk8u: /tmp/tmpvd1aqk8u.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long abbc = ab + bc;\n\
    \    long abcc = ab + cc;\n    long acbc = ac + bc;\n    long accc = ac + cc;\n\
    \    long bccb = bc + cb;\n    long bccc = bc + cc;\n    long ccbc = cc + bc;\n\
    \    long cccb = cc + cb;\n    long abbcc = ab + bcc;\n    long abccc = ab + ccc;\n\
    \    long acbcb = ac + bcb;\n    long acccb = ac + ccb;\n    long bccab = bc +\
    \ ab;\n    long bccac = bc + ac;\n    long ccabc = cc + ab;\n    long ccacb =\
    \ cc + ac;\n    long abbcac = ab + bcc;\n    long abccac = ab + ccc;\n    long\
    \ acbcab = ac + bca;\n    long acccab = ac + cca;\n    long bccabc = bc + abc;\n\
    \    long bccacb = bc + acb;\n    long ccabbc = cc + abb;\n    long ccacbc = cc\
    \ + acb;\n    long abbcacb = ab + bcc;\n    long abccacb = ab + ccc;\n    long\
    \ acbcabc = ac + bca;\n    long acccabc = ac + cca;\n    long bccabbc = bc + abb;\n\
    \    long bccacbc = bc + acb;\n    long ccabbcb = cc + abb;\n    long ccacbcb\
    \ = cc + acb;\n    long abbcacbc = ab + bcc;\n    long abccacbc = ab + ccc;\n\
    \    long acbcabbc = ac + bca;\n    long acccabbc = ac + cca;\n    long bccabbcb\
    \ = bc + abb;\n    long bccacbcc = bc + acb;\n    long ccabbccc = cc + abb;\n\
    \    long ccacbccb = cc + acb;\n    long abbcacbcc = ab + bcc;\n    long abcc\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzh6n0kqr.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpzh6n0kqr.cpp:20:22: error: \u2018cc\u2019\
    \ was not declared in this scope; did you mean \u2018cb\u2019?\n   20 |     long\
    \ abcc = ab + cc;\n      |                      ^~\n      |                  \
    \    cb\n/tmp/tmpzh6n0kqr.cpp:27:23: error: \u2018bcc\u2019 was not declared in\
    \ this scope; did you mean \u2018bccc\u2019?\n   27 |     long abbcc = ab + bcc;\n\
    \      |                       ^~~\n      |                       bccc\n/tmp/tmpzh6n0kqr.cpp:28:23:\
    \ error: \u2018ccc\u2019 was not declared in this scope; did you mean \u2018cccb\u2019\
    ?\n   28 |     long abccc = ab + ccc;\n      |                       ^~~\n   \
    \   |                       cccb\n/tmp/tmpzh6n0kqr.cpp:30:23: error: \u2018ccb\u2019\
    \ was not declared in this scope; did you mean \u2018cccb\u2019?\n   30 |    \
    \ long acccb = ac + ccb;\n      |                       ^~~\n      |         \
    \              cccb\n/tmp/tmpzh6n0kqr.cpp:37:24: error: \u2018bca\u2019 was not\
    \ declared in this scope; did you mean \u2018bcb\u2019?\n   37 |     long acbcab\
    \ = ac + bca;\n      |                        ^~~\n      |                   \
    \     bcb\n/tmp/tmpzh6n0kqr.cpp:38:24: error: \u2018cca\u2019 was not declared\
    \ in this scope; did you mean \u2018ccacb\u2019?\n   38 |     long acccab = ac\
    \ + cca;\n      |                        ^~~\n      |                        ccacb\n\
    /tmp/tmpzh6n0kqr.cpp:40:24: error: \u2018acb\u2019 was not declared in this scope;\
    \ did you mean \u2018acbc\u2019?\n   40 |     long bccacb = bc + acb;\n      |\
    \                        ^~~\n      |                        acbc\n/tmp/tmpzh6n0kqr.cpp:41:24:\
    \ error: \u2018abb\u2019 was not declared in this scope; did you mean \u2018abbc\u2019\
    ?\n   41 |     long ccabbc = cc + abb;\n      |                        ^~~\n \
    \     |                        abbc\n/tmp/tmpzh6n0kqr.cpp:61:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmpzh6n0kqr.cpp:61:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747512
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int a1 = abs(a), b1 = abs(b), c1 = abs(c);\n    long long int a2\
    \ = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    long long int a3 = a2 + b2, b3 =\
    \ a2 + c2, c3 = b2 + c2;\n    long long int a4 = a3 + b3, b4 = a3 + c3, c4 = b3\
    \ + c3;\n    long long int a5 = a4 + b4, b5 = a4 + c4, c5 = b4 + c4;\n    long\
    \ long int a6 = a5 + b5, b6 = a5 + c5, c6 = b5 + c5;\n    long long int a7 = a6\
    \ + b6, b7 = a6 + c6, c7 = b6 + c6;\n    long long int a8 = a7 + b7, b8 = a7 +\
    \ c7, c9 = b7 + c7;\n    long long int a9 = a8 + b8, b9 = a8 + c8, c10 = b8 +\
    \ c8;\n    long long int a10 = a9 + b9, c11 = a9 + c9, c12 = b9 + c9;\n    long\
    \ long int a11 = a10 + c10, c13 = a10 + c11, c14 = b10 + c11;\n    long long int\
    \ a12 = a11 + c11, c15 = a11 + c12, c16 = b11 + c12;\n    long long int a13 =\
    \ a12 + c12, c17 = a12 + c13, c18 = b12 + c13;\n    long long int a14 = a13 +\
    \ c13, c19 = a13 + c14, c20 = b13 + c14;\n    long long int a15 = a14 + c14, c21\
    \ = a14 + c15, c22 = b14 + c15;\n    long long int a16 = a15 + c15, c23 = a15\
    \ + c16, c24 = b15 + c16;\n    long long int a17 = a16 + c16, c25 = a16 + c17,\
    \ c26 = b16 + c17;\n    long long int a18 = a17 + c17, c27 = a17 + c18, c28 =\
    \ b17 + c18;\n    long long int a19 = a18 + c18, c29 = a18 + c19, c30 = b18 +\
    \ c19;\n    long long int a20 = a19 + c19, c31 = a19 + c20, c32 = b19 + c20;\n\
    \    long long int a21 = a20 + c20, c33 = a20 + c2\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpefwp_al1.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpefwp_al1.cpp:22:43: error: \u2018c8\u2019\
    \ was not declared in this scope; did you mean \u2018c9\u2019?\n   22 |     long\
    \ long int a9 = a8 + b8, b9 = a8 + c8, c10 = b8 + c8;\n      |               \
    \                            ^~\n      |                                     \
    \      c9\n/tmp/tmpefwp_al1.cpp:24:31: error: \u2018c10\u2019 was not declared\
    \ in this scope; did you mean \u2018c12\u2019?\n   24 |     long long int a11\
    \ = a10 + c10, c13 = a10 + c11, c14 = b10 + c11;\n      |                    \
    \           ^~~\n      |                               c12\n/tmp/tmpefwp_al1.cpp:25:59:\
    \ error: \u2018b11\u2019 was not declared in this scope; did you mean \u2018a11\u2019\
    ?\n   25 |     long long int a12 = a11 + c11, c15 = a11 + c12, c16 = b11 + c12;\n\
    \      |                                                           ^~~\n     \
    \ |                                                           a11\n/tmp/tmpefwp_al1.cpp:26:48:\
    \ error: \u2018c13\u2019 was not declared in this scope; did you mean \u2018c17\u2019\
    ?\n   26 |     long long int a13 = a12 + c12, c17 = a12 + c13, c18 = b12 + c13;\n\
    \      |                                                ^~~\n      |         \
    \                                       c17\n/tmp/tmpefwp_al1.cpp:28:31: error:\
    \ \u2018c14\u2019 was not declared in this scope; did you mean \u2018a14\u2019\
    ?\n   28 |     long long int a15 = a14 + c14, c21 = a14 + c15, c22 = b14 + c15;\n\
    \      |                               ^~~\n      |                          \
    \     a14\n/tmp/tmpefwp_al1.cpp:29:59: error: \u2018b15\u2019 was not declared\
    \ in this scope; did you mean \u2018a15\u2019?\n   29 |     long long int a16\
    \ = a15 + c15, c23 = a15 + c16, c24 = b15 + c16;\n      |                    \
    \                                       ^~~\n      |                         \
    \                                  a15\n/tmp/tmpefwp_al1.cpp:30:59: error: \u2018\
    b16\u2019 was not declared in this scope; did you mean \u2018a16\u2019?\n   30\
    \ |     long long int a17 = a16 + c16, c25 = a16 + c17, c26 = b16 + c17;\n   \
    \   |                                                           ^~~\n      | \
    \                         "
  stdout: ''
  timestamp: 1659747512
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = b - a;\n  \
    \  long ac = c - a;\n    long bc = c - b;\n    long acb = ac * bc;\n    long abc\
    \ = ab * bc;\n    long abac = ab * ac;\n    long abcab = ab * abc;\n    long abcabc\
    \ = abcab * bc;\n    long abcabcd = abcabc * cd;\n    long abcabcde = abcabc *\
    \ de;\n    long abcabcdef = abcabc * ef;\n    long abcabcdefg = abcabc * efg;\n\
    \    long abcabcdefgh = abcabc * efgh;\n    long abcabcdefghi = abcabc * efghi;\n\
    \    long abcabcdefghij = abcabc * efghij;\n    long abcabcdefghijk = abcabc *\
    \ efghijk;\n    long abcabcdefghijkl = abcabc * efghijkl;\n    long abcabcdefghijkl\
    \ = abcabc * efghijkl;\n    long abcabcdefghijkl = abcabc * efghijkl;\n    long\
    \ abcabcdefghijkl = abcabc * efghijkl;\n    long abcabcdefghijkl = abcabc * efghijkl;\n\
    \    long abcabcdefghijkl = abcabc * efghijkl;\n    long abcabcdefghijkl = abcabc\
    \ * efghijkl;\n    long abcabcdefghijkl = abcabc * efghijkl;\n    long abcabcdefghijkl\
    \ = abcabc * efghijkl;\n    long abcabcdefghijkl = abcabc * efghijkl;\n    long\
    \ abcabcdefghijkl = abcabc * efghijkl;\n    long abcabcdefghijkl = abcabc * efghijkl;\n\
    \    long abcabcdefghijkl = abcabc * efghijkl;\n    long abcabcdefghijkl = abcabc\
    \ * efghijkl;\n    long abcabcdefghijkl = abcabc * efghijkl;\n    long abcabcdefghijkl\
    \ = abcabc * efghijk\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfe3zhwha.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpfe3zhwha.cpp:21:29: error: \u2018cd\u2019\
    \ was not declared in this scope; did you mean \u2018c\u2019?\n   21 |     long\
    \ abcabcd = abcabc * cd;\n      |                             ^~\n      |    \
    \                         c\n/tmp/tmpfe3zhwha.cpp:22:30: error: \u2018de\u2019\
    \ was not declared in this scope\n   22 |     long abcabcde = abcabc * de;\n \
    \     |                              ^~\n/tmp/tmpfe3zhwha.cpp:23:31: error: \u2018\
    ef\u2019 was not declared in this scope; did you mean \u2018erf\u2019?\n   23\
    \ |     long abcabcdef = abcabc * ef;\n      |                               ^~\n\
    \      |                               erf\n/tmp/tmpfe3zhwha.cpp:24:32: error:\
    \ \u2018efg\u2019 was not declared in this scope\n   24 |     long abcabcdefg\
    \ = abcabc * efg;\n      |                                ^~~\n/tmp/tmpfe3zhwha.cpp:25:33:\
    \ error: \u2018efgh\u2019 was not declared in this scope\n   25 |     long abcabcdefgh\
    \ = abcabc * efgh;\n      |                                 ^~~~\n/tmp/tmpfe3zhwha.cpp:26:34:\
    \ error: \u2018efghi\u2019 was not declared in this scope\n   26 |     long abcabcdefghi\
    \ = abcabc * efghi;\n      |                                  ^~~~~\n/tmp/tmpfe3zhwha.cpp:27:35:\
    \ error: \u2018efghij\u2019 was not declared in this scope\n   27 |     long abcabcdefghij\
    \ = abcabc * efghij;\n      |                                   ^~~~~~\n/tmp/tmpfe3zhwha.cpp:28:36:\
    \ error: \u2018efghijk\u2019 was not declared in this scope\n   28 |     long\
    \ abcabcdefghijk = abcabc * efghijk;\n      |                                \
    \    ^~~~~~~\n/tmp/tmpfe3zhwha.cpp:29:37: error: \u2018efghijkl\u2019 was not\
    \ declared in this scope\n   29 |     long abcabcdefghijkl = abcabc * efghijkl;\n\
    \      |                                     ^~~~~~~~\n/tmp/tmpfe3zhwha.cpp:30:10:\
    \ error: redeclaration of \u2018long int abcabcdefghijkl\u2019\n   30 |     long\
    \ abcabcdefghijkl = abcabc * efghijkl;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmpfe3zhwha.cpp:29:10:\
    \ note: \u2018long int abcabcdefghijkl\u2019 previously declared here\n   29 |\
    \     long abcabcdefghijkl = abcabc * efghijkl;\n      |          ^~~~~~~~~~~~~~~\n\
    /tmp/tmpfe3"
  stdout: ''
  timestamp: 1659747512
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - a;\n    long f = d - e;\n    if (f < 0)\n\
    \        return false;\n    if (f == 0)\n        return true;\n    long g = e\
    \ + d;\n    if (g < 0)\n        return false;\n    if (g == 0)\n        return\
    \ true;\n    long h = a - b;\n    if (h < 0)\n        return false;\n    if (h\
    \ == 0)\n        return true;\n    long i = a + b;\n    if (i < 0)\n        return\
    \ false;\n    if (i == 0)\n        return true;\n    long j = b + c;\n    if (j\
    \ < 0)\n        return false;\n    if (j == 0)\n        return true;\n    long\
    \ k = a + c;\n    if (k < 0)\n        return false;\n    if (k == 0)\n       \
    \ return true;\n    long l = b + d;\n    if (l < 0)\n        return false;\n \
    \   if (l == 0)\n        return true;\n    long m = a + e;\n    if (m < 0)\n \
    \       return false;\n    if (m == 0)\n        return true;\n    long n = b +\
    \ f;\n    if (n < 0)\n        return false;\n    if (n == 0)\n        return true;\n\
    \    long o = a + g;\n    if (o < 0)\n        return false;\n    if (o == 0)\n\
    \        return true;\n    long p = b + h;\n    if (p < 0)\n        return false;\n\
    \    if (p == 0)\n        return true;\n    long q = a + i;\n    if (q < 0)\n\
    \        return false;\n    if (q == 0)\n        return true;\n    long r = b\
    \ + j;\n    if (r < 0)\n        return false;\n    if (r == 0)\n        return\
    \ true;\n    long s = a + k;\n    if (s < 0)\n        return false;\n    if (s\
    \ == 0)\n        return true;\n    long t = b + l;\n    if (t < 0)\n        return\
    \ false;\n    if (t == 0)\n        return true;\n    long u = a + m;\n    if (u\
    \ < 0)\n        return false;\n    if (u == 0)\n        return true;\n    long\
    \ v = b + n;\n    if (v < 0)\n        return false;\n    if (v == 0)\n       \
    \ return true;\n    long w = a + o;\n    if (w < 0)\n        return false;\n \
    \   if (w == 0)\n        return true;\n    long x = b + p;\n    if (x < 0)\n \
    \       return false;\n    if (x == 0)\n        return true;\n    long y = a +\
    \ q;\n    if (y < 0)\n        return false;\n    if (y == 0)\n        return true;\n\
    \    long z = b + r;\n    if (z < 0)\n        return false;\n    if (z == 0)\n\
    \        return true;\n    long a = a + s;\n    if (a < 0)\n        return false;\n\
    \    if (a == 0)\n        return true;\n    long b = b + t;\n    if (b < 0)\n\
    \        return false;\n    if (b == 0)\n        return true;\n    long c = c\
    \ + u;\n    if (c < 0)\n        return false;\n    if (c == 0)\n        return\
    \ true;\n    long d = d + v;\n    if (d < 0)\n        return false;\n    if (\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvscjstn_.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpvscjstn_.cpp:121:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n  121 |     long a = a + s;\n\
    \      |          ^\n/tmp/tmpvscjstn_.cpp:126:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n  126 |     long b = b + t;\n      |   \
    \       ^\n/tmp/tmpvscjstn_.cpp:131:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n  131 |     long c = c + u;\n      |          ^\n/tmp/tmpvscjstn_.cpp:136:10:\
    \ error: redeclaration of \u2018long int d\u2019\n  136 |     long d = d + v;\n\
    \      |          ^\n/tmp/tmpvscjstn_.cpp:14:10: note: \u2018long int d\u2019\
    \ previously declared here\n   14 |     long d = b - a;\n      |          ^\n\
    /tmp/tmpvscjstn_.cpp:140:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  140 | }\n      | ^\n/tmp/tmpvscjstn_.cpp:139:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  139 |     if (\n      |        ~^\n    \
    \  |         )\n  140 | }\n      | ~        \n/tmp/tmpvscjstn_.cpp:140:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  140 | }\n      | ^\n\
    /tmp/tmpvscjstn_.cpp:140:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  140 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return true;\n\
    \    }\n    if(a>b){\n        if(a>c){\n            return true;\n        }\n\
    \    }\n    if(b>c){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeb9jktat: /tmp/tmpeb9jktat.cpp:37: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    if (s == t) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_7dxca6a: /tmp/tmp_7dxca6a.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n\
    \    long acb = abs(ac - bc);\n    long abc = abs(ab - bc);\n    long abbc = abs(ab\
    \ - bc);\n    long abac = abs(ab - ac);\n    long abcab = abs(ab - acb);\n   \
    \ long abcabc = abs(ab - acbc);\n    long abcabcb = abs(ab - acbcb);\n    long\
    \ abcabcbc = abs(ab - acbcbc);\n    long abcabcbcd = abs(ab - acbcbcd);\n    long\
    \ abcabcbcde = abs(ab - acbcbcde);\n    long abcabcbcdef = abs(ab - acbcbcdef);\n\
    \    long abcabcbcdefg = abs(ab - acbcbcdefg);\n    long abcabcbcdefgh = abs(ab\
    \ - acbcbcdefgh);\n    long abcabcbcdefghi = abs(ab - acbcbcdefghi);\n    long\
    \ abcabcbcdefghij = abs(ab - acbcbcdefghij);\n    long abcabcbcdefghijk = abs(ab\
    \ - acbcbcdefghijk);\n    long abcabcbcdefghijkl = abs(ab - acbcbcdefghijkl);\n\
    \    long abcabcbcdefghijkl = abs(ab - acbcbcdefghijkl);\n    long abcabcbcdefghijkl\
    \ = abs(ab - acbcbcdefghijkl);\n    long abcabcbcdefghijkl = abs(ab - acbcbcdefghijkl);\n\
    \    long abcabcbcdefghijkl = abs(ab - acbcbcdefghijkl);\n    long abcabcbcdefghijkl\
    \ = abs(ab - acbcbcdefghijkl);\n    long abcabcbcdefghijkl = abs(ab - acbcbcdefghijkl);\n\
    \    long abcabcbcdefghijkl = abs(ab - acbcbcdefghijkl);\n    long abcabcbcdefghijkl\
    \ = abs(ab - acbcbcdefghijkl);\n    long abcabcbcdefghijkl = abs(ab - acb\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_yv94ho.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpf_yv94ho.cpp:22:28: error: \u2018acbc\u2019\
    \ was not declared in this scope; did you mean \u2018abbc\u2019?\n   22 |    \
    \ long abcabc = abs(ab - acbc);\n      |                            ^~~~\n   \
    \   |                            abbc\n/tmp/tmpf_yv94ho.cpp:23:29: error: \u2018\
    acbcb\u2019 was not declared in this scope; did you mean \u2018abcabcb\u2019?\n\
    \   23 |     long abcabcb = abs(ab - acbcb);\n      |                        \
    \     ^~~~~\n      |                             abcabcb\n/tmp/tmpf_yv94ho.cpp:24:30:\
    \ error: \u2018acbcbc\u2019 was not declared in this scope; did you mean \u2018\
    abcabcbc\u2019?\n   24 |     long abcabcbc = abs(ab - acbcbc);\n      |      \
    \                        ^~~~~~\n      |                              abcabcbc\n\
    /tmp/tmpf_yv94ho.cpp:25:31: error: \u2018acbcbcd\u2019 was not declared in this\
    \ scope; did you mean \u2018abcabcbcd\u2019?\n   25 |     long abcabcbcd = abs(ab\
    \ - acbcbcd);\n      |                               ^~~~~~~\n      |        \
    \                       abcabcbcd\n/tmp/tmpf_yv94ho.cpp:26:32: error: \u2018acbcbcde\u2019\
    \ was not declared in this scope; did you mean \u2018abcabcbcde\u2019?\n   26\
    \ |     long abcabcbcde = abs(ab - acbcbcde);\n      |                       \
    \         ^~~~~~~~\n      |                                abcabcbcde\n/tmp/tmpf_yv94ho.cpp:27:33:\
    \ error: \u2018acbcbcdef\u2019 was not declared in this scope; did you mean \u2018\
    abcabcbcdef\u2019?\n   27 |     long abcabcbcdef = abs(ab - acbcbcdef);\n    \
    \  |                                 ^~~~~~~~~\n      |                      \
    \           abcabcbcdef\n/tmp/tmpf_yv94ho.cpp:28:34: error: \u2018acbcbcdefg\u2019\
    \ was not declared in this scope; did you mean \u2018abcabcbcdefg\u2019?\n   28\
    \ |     long abcabcbcdefg = abs(ab - acbcbcdefg);\n      |                   \
    \               ^~~~~~~~~~\n      |                                  abcabcbcdefg\n\
    /tmp/tmpf_yv94ho.cpp:29:35: error: \u2018acbcbcdefgh\u2019 was not declared in\
    \ this scope; did you mean \u2018abcabcbcdefgh\u2019?\n   29 |     long abcabcbcdefgh\
    \ = abs(ab - acbcbcdefgh);\n      |                                   ^~~~~~~~~~~\n\
    \      |                "
  stdout: ''
  timestamp: 1659747512
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = b1 + c1;\n    long\
    \ long ans = a1 * b2 - a2 * c2;\n    if (ans == 0)\n        return false;\n  \
    \  long long s = a1 * c2 - a2 * b1;\n    long long t = a2 * c1 - a1 * c2;\n  \
    \  long long u = a1 * b1 - a2 * b2;\n    long long v = a2 * c1 - a1 * c2;\n  \
    \  long long w = a1 * c2 - a2 * c1;\n    long long x = a1 * b2 - a2 * b1;\n  \
    \  long long y = a2 * c1 - a1 * c2;\n    long long z = a1 * c2 - a2 * c1;\n  \
    \  long long an = s * s - t * t;\n    long long ap = s * t - t * s;\n    long\
    \ long anp = ap * ap - an * an;\n    long long r = anp * ap + an * an;\n    long\
    \ long rp = ap * ap + an * an;\n    long long rpp = ap * ap + an * an;\n    long\
    \ long rpn = ap * an + an * ap;\n    long long rpnn = ap * an + an * an;\n   \
    \ long long rn = rp * an + rp * ap;\n    long long rnn = rp * an + rp * an;\n\
    \    long long rnp = rp * an + rp * ap;\n    long long rnpn = rp * an + rp * an;\n\
    \    long long rnpp = rp * an + rp * ap;\n    long long rnppn = rp * an + rp *\
    \ an;\n    long long rppn = rp * an + rp * ap;\n    long long rppnn = rp * an\
    \ + rp * an;\n    long long rnpnn = rp * an + rp * an;\n    long long rnpnpp =\
    \ rp * an + rp * an;\n    long long rnpnppn = rp * an + rp * an;\n    long long\
    \ rnpnppnn = rp * an + rp * an;\n    long long rnpnppnn = rp * an + rp * an;\n\
    \    long long rnpnppnn = rp * an + rp * an;\n    long long rnpnppnn = rp * an\
    \ + rp * an;\n    long long rnpnpp\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhre2xcc.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpxhre2xcc.cpp:15:26: error: \u2018b2\u2019\
    \ was not declared in this scope; did you mean \u2018c2\u2019?\n   15 |     long\
    \ long ans = a1 * b2 - a2 * c2;\n      |                          ^~\n      |\
    \                          c2\n/tmp/tmpxhre2xcc.cpp:46:15: error: redeclaration\
    \ of \u2018long long int rnpnppnn\u2019\n   46 |     long long rnpnppnn = rp *\
    \ an + rp * an;\n      |               ^~~~~~~~\n/tmp/tmpxhre2xcc.cpp:45:15: note:\
    \ \u2018long long int rnpnppnn\u2019 previously declared here\n   45 |     long\
    \ long rnpnppnn = rp * an + rp * an;\n      |               ^~~~~~~~\n/tmp/tmpxhre2xcc.cpp:47:15:\
    \ error: redeclaration of \u2018long long int rnpnppnn\u2019\n   47 |     long\
    \ long rnpnppnn = rp * an + rp * an;\n      |               ^~~~~~~~\n/tmp/tmpxhre2xcc.cpp:45:15:\
    \ note: \u2018long long int rnpnppnn\u2019 previously declared here\n   45 | \
    \    long long rnpnppnn = rp * an + rp * an;\n      |               ^~~~~~~~\n\
    /tmp/tmpxhre2xcc.cpp:48:15: error: redeclaration of \u2018long long int rnpnppnn\u2019\
    \n   48 |     long long rnpnppnn = rp * an + rp * an;\n      |               ^~~~~~~~\n\
    /tmp/tmpxhre2xcc.cpp:45:15: note: \u2018long long int rnpnppnn\u2019 previously\
    \ declared here\n   45 |     long long rnpnppnn = rp * an + rp * an;\n      |\
    \               ^~~~~~~~\n/tmp/tmpxhre2xcc.cpp:50:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmpxhre2xcc.cpp:50:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        if (b > c) {\n            return true;\n        } else {\n          \
    \  return false;\n        }\n    } else if (b > a && b > c) {\n        if (c >\
    \ a) {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    } else {\n        if (c > a && c > b) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    }\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcuxtl4bf: /tmp/tmpcuxtl4bf.cpp:36: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659747512
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c || a + c > b || b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwa6ecrzh: /tmp/tmpwa6ecrzh.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t == 0) || (s == t && s == 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvw44kxi6: /tmp/tmpvw44kxi6.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long e = std::sqrt(d);\n\
    \    long f = std::sqrt(b * b - 4 * a * c);\n    long g = std::sqrt(b * b + 4\
    \ * a * c);\n    if (e > f)\n        return false;\n    if (e == 0 && f == 0)\n\
    \        return true;\n    if (e == 0 && f != 0)\n        return false;\n    if\
    \ (e != 0 && f == 0)\n        return false;\n    if (e == 0 && f == 0)\n     \
    \   return false;\n    if (e == 0 && f != 0)\n        return false;\n    if (e\
    \ != 0 && f != 0)\n        return true;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl_gg79gv: /tmp/tmpl_gg79gv.cpp:36: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long s = (-b + sqrt(d))\
    \ / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    if (s >= 0 && t >= 0\
    \ && s + t <= 1) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4h_fxjhr: /tmp/tmp4h_fxjhr.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    if (s == t) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_7dxca6a: /tmp/tmp_7dxca6a.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = std::sqrt(b * b - 4 * a * c);\n    if (f < 0) {\n        return\
    \ false;\n    }\n    long g = std::sqrt(b * b + 4 * a * c);\n    if (g < 0) {\n\
    \        return false;\n    }\n    long h = std::sqrt(b * b + 4 * a * c);\n  \
    \  if (h < 0) {\n        return false;\n    }\n    long a1 = ((b * b + 4 * a *\
    \ c) / h);\n    long a2 = ((b * b - 4 * a * c) / h);\n    long a3 = ((b * b +\
    \ 4 * a * c) / g);\n    long a4 = ((b * b - 4 * a * c) / g);\n    long a5 = ((b\
    \ * b + 4 * a * c) / f);\n    long a6 = ((b * b - 4 * a * c) / f);\n    long a7\
    \ = ((b * b + 4 * a * c) / e);\n    long a8 = ((b * b - 4 * a * c) / e);\n   \
    \ long a9 = ((b * b + 4 * a * c) / d);\n    long a10 = ((b * b - 4 * a * c) /\
    \ d);\n    long a11 = ((b * b + 4 * a * c) / c);\n    long a12 = ((b * b - 4 *\
    \ a * c) / c);\n    long a13 = ((b * b + 4 * a * c) / b);\n    long a14 = ((b\
    \ * b - 4 * a * c) / b);\n    long a15 = ((b * b + 4 * a * c) / a);\n    long\
    \ a16 = ((b * b - 4 * a * c) / a);\n    long a17 = ((b * b + 4 * a * c) / 1);\n\
    \    long a18 = ((b * b - 4 * a * c) / 1);\n    long a19 = ((b * b + 4 * a * c)\
    \ / 0);\n    long a20 = ((b * b - 4 * a * c) / 0);\n    long a21 = ((b * b + 4\
    \ * a * c) / -1);\n    long a22 = ((b * b - 4 * a * c) / -1);\n    long a23 =\
    \ ((b * b + 4 * a * c) / -2);\n    long a24 = ((b * b - 4 * a * c) / -2);\n  \
    \  long a25 = ((b * b + 4 * a * c) / -3);\n    long a26 = ((b * b - 4 * a * c)\
    \ / -3);\n    long a27 = ((b * b + 4 * a * c) / -4);\n    long a28 = ((b * b -\
    \ 4 * a * \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5vvvk7rc.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp5vvvk7rc.cpp:48:37: warning: division\
    \ by zero [-Wdiv-by-zero]\n   48 |     long a19 = ((b * b + 4 * a * c) / 0);\n\
    \      |                 ~~~~~~~~~~~~~~~~~~~~^~~\n/tmp/tmp5vvvk7rc.cpp:49:37:\
    \ warning: division by zero [-Wdiv-by-zero]\n   49 |     long a20 = ((b * b -\
    \ 4 * a * c) / 0);\n      |                 ~~~~~~~~~~~~~~~~~~~~^~~\n/tmp/tmp5vvvk7rc.cpp:58:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   58 | }\n \
    \     | ^\n/tmp/tmp5vvvk7rc.cpp:57:33: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   57 |     long a28 = ((b * b - 4 * a *\n      |             \
    \    ~               ^\n      |                                 )\n   58 | }\n\
    \      | ~                                \n/tmp/tmp5vvvk7rc.cpp:57:33: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n   57 |     long a28 = ((b\
    \ * b - 4 * a *\n      |                ~                ^\n      |          \
    \                       )\n   58 | }\n      | ~                              \
    \  \n/tmp/tmp5vvvk7rc.cpp:58:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   58 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        if(b==c){\n            return true;\n        }\n\
    \    }\n    else if(b==c){\n        if(a==b){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp55ky1g1b: /tmp/tmp55ky1g1b.cpp:33: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747503
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmlxkmhf5: /tmp/tmpmlxkmhf5.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747513
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if (t1 >=\
    \ 0 && t1 <= 1 && t2 >= 0 && t2 <= 1)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsn0nq62j: /tmp/tmpsn0nq62j.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659747505
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long int d = b*b\
    \ - 4*a*c;\n    if (d < 0) {\n        return false;\n    }\n    long long int\
    \ e = std::sqrt(d);\n    long long int f = (a*a + b*b - d) / 2;\n    if (f < 0)\
    \ {\n        return false;\n    }\n    long long int g = std::sqrt(f);\n    long\
    \ long int h = (b*b + c*c - d) / 2;\n    if (h < 0) {\n        return false;\n\
    \    }\n    long long int i = std::sqrt(h);\n    long long int j = (b*b + a*a\
    \ - d) / 2;\n    if (j < 0) {\n        return false;\n    }\n    long long int\
    \ k = std::sqrt(j);\n    long long int l = (a*a + c*c - d) / 2;\n    if (l < 0)\
    \ {\n        return false;\n    }\n    long long int m = std::sqrt(l);\n    long\
    \ long int n = (b*b + c*c + a*a - d) / 2;\n    if (n < 0) {\n        return false;\n\
    \    }\n    long long int o = std::sqrt(n);\n    long long int p = (b*b + a*a\
    \ + c*c - d) / 2;\n    if (p < 0) {\n        return false;\n    }\n    long long\
    \ int q = std::sqrt(p);\n    long long int r = (b*b + a*a + b*b - d) / 2;\n  \
    \  if (r < 0) {\n        return false;\n    }\n    long long int s = std::sqrt(r);\n\
    \    long long int t = (a*a + b*b + c*c - d) / 2;\n    if (t < 0) {\n        return\
    \ false;\n    }\n    long long int u = std::sqrt(t);\n    long long int v = (b*b\
    \ + c*c + a*a + b*b - d) / 2;\n    if (v < 0) {\n        return false;\n    }\n\
    \    long long int w = std::sqrt(v);\n    long long int x = (b*b + c*c + a*a +\
    \ c*c - d) / 2;\n    if (x < 0) {\n        return false;\n    }\n    long long\
    \ int y = std::sqrt(x);\n    long long int z = (b*b + c*c + a*a + b*b + c*c -\
    \ d) / 2;\n    if (z < 0) {\n        return false;\n    }\n    long long int a\
    \ = std::sqrt(z);\n    long long int b = (b*b + c*c + a*a + c*c + a*a - d) / 2;\n\
    \    if (b < 0) {\n        return false;\n    }\n    long long int c = std::sqrt(b);\n\
    \    long long int d = (b*b + c*c + a*a + b*b + c*c + a*a + b*b - d) / 2;\n  \
    \  if (d < 0) {\n        return false;\n    }\n    long long int e = std::sqrt(d);\n\
    \    long long int f = (b*\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjnmeegtm.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpjnmeegtm.cpp:72:19: error: declaration\
    \ of \u2018long long int a\u2019 shadows a parameter\n   72 |     long long int\
    \ a = std::sqrt(z);\n      |                   ^\n/tmp/tmpjnmeegtm.cpp:73:19:\
    \ error: declaration of \u2018long long int b\u2019 shadows a parameter\n   73\
    \ |     long long int b = (b*b + c*c + a*a + c*c + a*a - d) / 2;\n      |    \
    \               ^\n/tmp/tmpjnmeegtm.cpp:77:19: error: declaration of \u2018long\
    \ long int c\u2019 shadows a parameter\n   77 |     long long int c = std::sqrt(b);\n\
    \      |                   ^\n/tmp/tmpjnmeegtm.cpp:78:19: error: redeclaration\
    \ of \u2018long long int d\u2019\n   78 |     long long int d = (b*b + c*c + a*a\
    \ + b*b + c*c + a*a + b*b - d) / 2;\n      |                   ^\n/tmp/tmpjnmeegtm.cpp:13:19:\
    \ note: \u2018long long int d\u2019 previously declared here\n   13 |     long\
    \ long int d = b*b - 4*a*c;\n      |                   ^\n/tmp/tmpjnmeegtm.cpp:82:19:\
    \ error: redeclaration of \u2018long long int e\u2019\n   82 |     long long int\
    \ e = std::sqrt(d);\n      |                   ^\n/tmp/tmpjnmeegtm.cpp:17:19:\
    \ note: \u2018long long int e\u2019 previously declared here\n   17 |     long\
    \ long int e = std::sqrt(d);\n      |                   ^\n/tmp/tmpjnmeegtm.cpp:83:19:\
    \ error: redeclaration of \u2018long long int f\u2019\n   83 |     long long int\
    \ f = (b*\n      |                   ^\n/tmp/tmpjnmeegtm.cpp:18:19: note: \u2018\
    long long int f\u2019 previously declared here\n   18 |     long long int f =\
    \ (a*a + b*b - d) / 2;\n      |                   ^\n/tmp/tmpjnmeegtm.cpp:84:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   84 | }\n \
    \     | ^\n/tmp/tmpjnmeegtm.cpp:83:26: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   83 |     long long int f = (b*\n      |                    \
    \   ~  ^\n      |                          )\n   84 | }\n      | ~           \
    \              \n/tmp/tmpjnmeegtm.cpp:84:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   84 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659747513
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return true if the three\n// sides form a right-angled\
    \ triangle, false otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcnbpfgq7.cpp: In function 'int main()':\n/tmp/tmpcnbpfgq7.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcnbpfgq7.cpp:2:\n/tmp/tmpcnbpfgq7.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
