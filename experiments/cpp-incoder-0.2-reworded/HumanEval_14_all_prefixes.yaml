name: HumanEval_14_all_prefixes
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return vector of all prefixes\
  \ from shortest to longest of the input string\n// >>> all_prefixes((\"abc\"))\n\
  // (std::vector<std::string>({(std::string)\"a\", (std::string)\"ab\", (std::string)\"\
  abc\"}))\nstd::vector<std::string> all_prefixes(std::string string) {\n"
tests: "}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
  \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
  asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
  W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
completions: ["  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  for\
    \ (size_t i = 0; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string[i\
    \ - 1]) + string[i]);\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        prefix += *it;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size());\n    for (size_t i = 0; i <\
    \ string.size(); ++i) {\n        prefixes.push_back(string);\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  for (size_t i = 0; i <\
    \ string.length(); ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n\
    \  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix\
    \ = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix =\
    \ prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  for (int\
    \ i = 0; i < string.length(); ++i) {\n    for (int j = i; j < string.length();\
    \ ++j) {\n      prefixes.push_back(string[j]);\n    }\n  }\n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while (string.size()\
    \ > 0) {\n    string prefix = string.substr(0, string.size() - 1);\n    prefixes.push_back(prefix);\n\
    \    string = string.substr(string.size() - 1);\n  }\n  return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (auto c : string) {\n        prefix = prefix\
    \ + c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \ std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for (size_t\
    \ i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0, i));\n\
    \  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  while (string.size() > 0) {\n    string prefix = string.substr(0, string.size()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(0, string.size()\
    \ - 1);\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n \
    \   std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  for (int\
    \ i = 0; i < string.length(); i++) {\n    prefixes.push_back(string);\n  }\n \
    \ return prefixes;", "    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    std::string prefix = \"\";\n    for (auto c : string) {\n        prefix =\
    \ prefix + c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  prefixes.reserve(string.size());\n    for (auto it = string.cbegin(); it !=\
    \ string.cend(); ++it) {\n        prefixes.push_back(*it);\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            prefix = prefix + string[i];\n        } else {\n\
    \            prefixes.push_back(prefix);\n            prefix = string[i];\n  \
    \      }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  for (size_t i = 0; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string);\n \
    \ }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); ++i)\
    \ {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n       \
    \ prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n \
    \   return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  while (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n \
    \   std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); ++i)\
    \ {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); ++i)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto c : string) {\n   \
    \     prefix = prefix + c;\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix +=\
    \ string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(string);\n  }\n\
    \  return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n       \
    \ prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n \
    \   return prefixes;", "  std::vector<std::string> prefixes;\n  for (int i = 0;\
    \ i < string.length(); i++) {\n    prefixes.push_back(string);\n  }\n  return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.emplace_back(string);\n\
    \    prefixes.back()[i] = string[i];\n  }\n  return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        prefix\
    \ = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    for (size_t j = i; j < string.size(); ++j) {\n      prefixes.push_back(string.substr(i,\
    \ j));\n    }\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n\
    \  prefixes.reserve(string.size());\n  for (size_t i = 0; i < string.size(); ++i)\
    \ {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    for (size_t j = i; j < string.size(); ++j) {\n      prefixes.push_back(string.substr(i,\
    \ j));\n    }\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n\
    \  for (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string);\n\
    \  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n       \
    \ prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n \
    \   return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n       \
    \ prefix += string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for (size_t i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    prefixes.push_back(string);\n    \n    size_t prefix_length = string.length();\n\
    \    \n    while (prefix_length != 0) {\n        string prefix = string.substr(0,\
    \ prefix_length);\n        \n        prefixes.push_back(prefix);\n        \n \
    \       prefix_length = prefix.length();\n    }\n    \n    return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string(i, j));\n    }\n  }\n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n       \
    \ prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n \
    \   return prefixes;", "  std::vector<std::string> prefixes;\n  for (size_t i\
    \ = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size(); ++j)\
    \ {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string(i, j));\n    }\n  }\n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.size();\
    \ ++i) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  prefixes.reserve(string.size());\n    for (auto it = string.rbegin(); it !=\
    \ string.rend(); ++it) {\n        prefixes.emplace_back(std::string(it));\n  \
    \  }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  while (string.size() > 1) {\n    size_t pos = string.find_first_not_of(\" \"\
    );\n    if (pos == string::npos) {\n      prefixes.push_back(string.substr(0,\
    \ string::npos));\n      break;\n    }\n    prefixes.push_back(string.substr(0,\
    \ pos));\n    string = string.substr(pos + 1);\n  }\n  return prefixes;", "  \
    \  std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefixes.emplace_back(string);\n\
    \        prefixes.back().push_back(i);\n    }\n    return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  for (int i = 0; i < string.length(); ++i) {\n    for (int j = i;\
    \ j < string.length(); ++j) {\n      prefixes.push_back(string.substr(i, j));\n\
    \    }\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (auto c : string) {\n        prefix = prefix\
    \ + c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n    \n\
    \    for (size_t i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string(string[i-1],\
    \ string[i]));\n    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n\
    \  for (size_t i = 0; i < string.length(); ++i) {\n    for (size_t j = i; j <\
    \ string.length(); ++j) {\n      prefixes.push_back(string.substr(i, j));\n  \
    \  }\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.emplace_back(string);\n\
    \    prefixes.back()[i] = string[i];\n  }\n  return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string(i, string[0]));\n  }\n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string(i, j));\n    }\n  }\n  return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for (size_t\
    \ i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (auto it = string.begin(); it != string.end(); ++it)\
    \ {\n        prefix += *it;\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix\
    \ = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); ++i)\
    \ {\n        if (string[i] == string[0]) {\n            prefix = prefix + string[i];\n\
    \        } else {\n            prefixes.push_back(prefix);\n            prefix\
    \ = string[i];\n        }\n    }\n    prefixes.push_back(prefix);\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  \n  for (size_t i = 1; i < string.size(); ++i) {\n    std::string prefix =\
    \ string[i - 1];\n    std::string suffix = string[i];\n    \n    for (size_t j\
    \ = 0; j < prefixes.size(); ++j) {\n      std::string prefix_str = prefixes[j];\n\
    \      std::string suffix_str = suffix;\n      \n      if (prefix_str.length()\
    \ < suffix_str.length()) {\n        suffix_str = prefix_str + suffix_str;\n  \
    \    }\n      \n      if (prefix_str == suffix_str) {\n        prefixes.push_back(prefix\
    \ + suffix);\n      }\n    }\n  }\n  \n  return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ i++) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.size(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    prefixes.reserve(string.size());\n    for (size_t i = 0; i <\
    \ string.size(); ++i) {\n        prefixes.push_back(string(i, string[i]));\n \
    \   }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  \n  for (size_t i = 1; i < string.size(); ++i) {\n    std::string prefix =\
    \ string.substr(0, i);\n    prefixes.push_back(prefix);\n  }\n  \n  return prefixes;",
  "  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length(); i++)\
    \ {\n    prefixes.push_back(string);\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  for (size_t\
    \ i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string);\n  }\n  return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix\
    \ = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    prefixes.push_back(string);\n \
    \ }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n       \
    \ prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.length();\
    \ ++i) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (auto c : string) {\n        prefix = prefix + c;\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.size();\
    \ ++i) {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  prefixes.push_back(string);\n    std::string prefix = string;\n    while (!prefix.empty())\
    \ {\n        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    prefixes.push_back(string);\n  }\n  return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.push_back(string);\n  for (size_t i = 1; i < string.size();\
    \ ++i) {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.size(); ++i) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  for (size_t i = 0; i < string.length(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (auto c : string) {\n        prefix = prefix\
    \ + c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \ std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  for (size_t\
    \ i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0, i));\n\
    \  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  for (size_t\
    \ i = 0; i < string.length(); ++i) {\n    prefixes.push_back(string);\n  }\n \
    \ return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  prefixes.push_back(string);\n    \n    for (size_t i = 1; i < string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  \n  for (size_t i = 1; i < string.size(); i++) {\n    std::string prefix =\
    \ string.substr(0, i);\n    prefixes.push_back(prefix);\n  }\n  return prefixes;",
  "    std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (auto c : string) {\n        prefix = prefix + c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); ++i)\
    \ {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;", "  std::vector<std::string> prefixes;\n  for (int i =\
    \ 0; i < string.length(); ++i) {\n    for (int j = i; j < string.length(); ++j)\
    \ {\n      prefixes.push_back(string[j]);\n    }\n  }\n  return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.length(); i++) {\n        prefix = prefix + string[i];\n\
    \        prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.size();\
    \ ++i) {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.emplace_back(string);\n\
    \    prefixes.back()[i] = string[i];\n  }\n  return prefixes;", "  std::vector<std::string>\
    \ prefixes;\n  prefixes.reserve(string.size());\n  for (size_t i = 0; i < string.size();\
    \ ++i) {\n    for (size_t j = i; j < string.size(); ++j) {\n      prefixes.push_back(string(i,\
    \ j));\n    }\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n\
    \  prefixes.reserve(string.size());\n  for (size_t i = 0; i < string.size(); ++i)\
    \ {\n    prefixes.push_back(string.substr(0, i));\n  }\n  return prefixes;", " \
    \ std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    for(int i = 1; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    \n    return prefixes;", "  std::vector<std::string> prefixes;\n\
    \  for (int i = 0; i < string.length(); ++i) {\n    prefixes.push_back(string);\n\
    \  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        prefix\
    \ += string[i];\n        prefixes.push_back(prefix);\n    }\n    return prefixes;",
  "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.size();\
    \ ++i) {\n        prefix += string[i];\n        if (string[i] == string[0]) {\n\
    \            prefixes.push_back(prefix);\n            prefix = \"\";\n       \
    \ }\n    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  while (string.length() > 1) {\n    string prefix = string.substr(0, string.length()\
    \ - 1);\n    prefixes.push_back(prefix);\n    string = string.substr(string.length()\
    \ - 1);\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n \
    \   prefixes.push_back(string);\n    \n    for (size_t i = 1; i < string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    \n    return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    std::string prefix = string;\n    \n    while (!prefix.empty()) {\n\
    \        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    \n    return prefixes;", "    std::vector<std::string> prefixes;\n\
    \    std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); ++i)\
    \ {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n    }\n\
    \    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.length(); ++i) {\n       \
    \ prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n \
    \   return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        if\
    \ (string[i] == string[0]) {\n            prefix = prefix + string[i];\n     \
    \   } else {\n            prefixes.push_back(prefix);\n            prefix = string[i];\n\
    \        }\n    }\n    prefixes.push_back(prefix);\n    return prefixes;", " \
    \   std::vector<std::string> prefixes;\n    std::string prefix = \"\";\n    for\
    \ (size_t i = 0; i < string.length(); i++) {\n        prefix += string[i];\n \
    \       prefixes.push_back(prefix);\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        prefix += string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (int i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); ++i)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  prefixes.push_back(string);\n    std::string prefix = string;\n    while (!prefix.empty())\
    \ {\n        prefix = prefix.substr(0, prefix.size() - 1);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (int i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (auto c : string) {\n        prefix = prefix\
    \ + c;\n        prefixes.push_back(prefix);\n    }\n    return prefixes;", " \
    \ std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n  for\
    \ (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  prefixes.reserve(string.size());\n    for (size_t i = 0; i < string.size();\
    \ ++i) {\n        for (size_t j = i; j < string.size(); ++j) {\n            prefixes.push_back(string.substr(i,\
    \ j));\n        }\n    }\n    return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    std::string prefix = \"\";\n    for (auto it = string.begin();\
    \ it != string.end(); ++it) {\n        prefix += *it;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "    std::vector<std::string> prefixes;\n    std::string\
    \ prefix = \"\";\n    for (auto c : string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  for\
    \ (size_t i = 0; i < string.length(); ++i) {\n    for (size_t j = i; j < string.length();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "    std::vector<std::string> prefixes;\n    std::string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        prefix\
    \ = prefix + string[i];\n        prefixes.push_back(prefix);\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string(string.begin(),\
    \ string.begin() + i));\n  }\n  return prefixes;", "    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(string);\n    \n    for (size_t i = 1; i <\
    \ string.size(); i++) {\n        prefixes.push_back(string.substr(0, i));\n  \
    \  }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (int i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    for (size_t j = i; j < string.size();\
    \ ++j) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  prefixes.push_back(string);\n    \n    for (size_t i = 1; i < string.size();\
    \ i++) {\n        prefixes.push_back(string.substr(0, i));\n    }\n    return\
    \ prefixes;", "  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;", "    std::vector<std::string> prefixes;\n  \
    \  std::string prefix = \"\";\n    for (size_t i = 0; i < string.length(); i++)\
    \ {\n        prefix = prefix + string[i];\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;"]
stop_tokens:
- "\n}"
