name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  // >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n\
  // (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string ans = \"\";\n    for (auto &c : message) {\n      \
    \  if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)] =\
    \ std::toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (auto &c : message) {\n       \
    \ ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 2] = toupper(ans[ans.find(c) + 2]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = tolower(ans[ans.find(c)\
    \ - 2]);\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   for (auto &c : message) {\n        switch (c) {\n            case 'a':\n \
    \           case 'e':\n            case 'i':\n            case 'o':\n        \
    \    case 'u':\n                ans += 'A';\n                break;\n        \
    \    case 'b':\n            case 'f':\n            case 'n':\n            case\
    \ 'r':\n            case 't':\n                ans += 'B';\n                break;\n\
    \            case 'c':\n            case 'd':\n            case 'g':\n       \
    \     case 'h':\n            case 'j':\n                ans += 'C';\n        \
    \        break;\n            case 'e':\n            case 'f':\n            case\
    \ 'g':\n            case 'h':\n            case 'k':\n                ans += 'D';\n\
    \                break;\n            case 'f':\n            case 'g':\n      \
    \      case 'h':\n            case 'j':\n                ans += 'E';\n       \
    \         break;\n            case 'g':\n            case 'h':\n            case\
    \ 'j':\n                ans += 'F';\n                break;\n            case\
    \ 'h':\n            case 'j':\n                ans += 'G';\n                break;\n\
    \            case 'i':\n            case 'j':\n                ans += 'H';\n \
    \               break;\n            case 'k':\n                ans += 'I';\n \
    \               break;\n            case 'l':\n                ans += 'J';\n \
    \               break;\n            case 'm':\n                ans += 'K';\n \
    \               break;\n            case 'n':\n                ans += 'L';\n \
    \               break;\n            case 'o':\n                ans += 'M';\n \
    \               break;\n            case 'p':\n                ans += 'N';\n \
    \               break;\n            case 'q':\n                ans += 'O';\n \
    \               break;\n            case 'r':\n                ans += 'P';\n \
    \               break;\n            case 's':\n                ans += 'Q';\n \
    \               break;\n            case 't':\n                ans += 'R';\n \
    \               break;\n            case 'u':\n                ans += 'S';\n \
    \               break;\n            case 'v':\n                ans += 'T';\n \
    \               break;\n            case 'w':\n                ans += 'U';\n \
    \               break;\n            case 'x':\n                ans += 'V';\n \
    \               break;\n            case 'y':\n                ans += 'W';\n \
    \               break;\n            case 'z':\n                ans += 'X';\n \
    \               break;\n            default:\n                ans += c;\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c\
    \ : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        } else {\n            ans += tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = tolower(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans\
    \ += c;\n        } else {\n            ans += std::toupper(c);\n        }\n  \
    \  }\n    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n   \
    \         ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length", "    std::string encoded\
    \ = \"\";\n    for (char c : message) {\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encoded += c + 2;\n        } else {\n\
    \            encoded += c;\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (std::toupper(c)\
    \ - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c : ans) {\n        ans[ans.find(c)\
    \ - 2] = ans[ans.find(c) - 2].tolower() + \n            ans[ans.find(c) - 2].toupper();\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        ans += (std::tolower(c) == c) ? std::toupper(c) : c;\n    }\n   \
    \ for (auto &c : ans) {\n        std::map<char, char> vowels;\n        vowels['a']\
    \ = 'A';\n        vowels['e'] = 'E';\n        vowels['i'] = 'I';\n        vowels['o']\
    \ = 'O';\n        vowels['u'] = 'U';\n        vowels['y'] = 'Y';\n        vowels['A']\
    \ = 'a';\n        vowels['E'] = 'e';\n        vowels['I'] = 'i';\n        vowels['O']\
    \ = 'o';\n        vowels['U'] = 'u';\n        vowels['Y'] = 'y';\n        vowels['a']\
    \ = 'A';\n        vowels['e'] = 'E';\n        vowels['i'] = 'I';\n        vowels['o']\
    \ = 'O';\n        vowels['u'] = 'U';\n        vowels['y'] = 'Y';\n        std::map<char,\
    \ char> vowels2;\n        vowels2['A'] = 'a';\n        vowels2['E'] = 'e';\n \
    \       vowels2['I'] = 'i';\n        vowels2['O'] = 'o';\n        vowels2['U']\
    \ = 'u';\n        vowels2['Y'] = 'y';\n        std::map<char, char> vowels3;\n\
    \        vowels3['A'] = 'A';\n        vowels3['E'] = 'E';\n        vowels3['I']\
    \ = 'I';\n        vowels3['O'] = 'O';\n        vowels3['U'] = 'U';\n        vowels3['Y']\
    \ = 'Y';\n        std::map<char, char> vowels4;\n        vowels4['A'] = 'a';\n\
    \        vowels4['E'] = 'e';\n        vowels4['I'] = 'i';\n        vowels4['O']\
    \ = 'o';\n        vowels4['U'] = 'u';\n        vowels4['Y'] = 'y';\n        std::map<char,\
    \ char> vowels5;\n        vowels5['A'] = 'A';\n        vowels5['E'] = 'E';\n \
    \       vowels5['I'] = 'I';\n        vowels5['O'] = 'O';\n        vowels5['U']\
    \ = 'U';\n        vowels5['Y'] = 'Y';\n        std::map<char, char> vowels6;\n\
    \        vowels6['A'] = 'a';\n        vowels6['E'] = 'e';\n        vowels6['I']\
    \ = 'i';\n        vowels6['O'] = 'o", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            ans += c;\n        } else {\n            ans += std::tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n", "    std::string ans =\
    \ \"\";\n    for (char c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (char c : ans) {\n        if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {", "    std::string ans = \"\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            ans += message[i];\n        }\n       \
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] >= '0' && message[i] <= '9') {\n     \
    \       ans += message[i];\n        }\n        else if (message[i] == '.' || message[i]\
    \ == '!' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '.') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '!') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '?' || message[i] == '.') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '!') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '.') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '!') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '.') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '!' || message[i] ==\
    \ '.') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '!') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '!' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '!') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '.') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '?' || message[i] ==\
    \ '!') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i]", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n   \
    \     }\n        else if (std::islower(c)) {\n            ans += std::tolower(c);\n\
    \        }\n        else if (std::isupper(c)) {\n            ans += std::toupper(c);\n\
    \        }\n        else if (std::isspace(c)) {\n            ans += \" \";\n \
    \       }\n        else if (c == '.') {\n            ans += \" \";\n        }\n\
    \        else if (c == '?') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '!') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '-') {\n            ans += \" \";\n        }\n        else if (c == '_') {\n\
    \            ans += \" \";\n        }\n        else if (c == '/') {\n        \
    \    ans += \" \";\n        }\n        else if (c == '\\\\') {\n            ans\
    \ += \" \";\n        }\n        else if (c == '(') {\n            ans += \" \"\
    ;\n        }\n        else if (c == ')') {\n            ans += \" \";\n      \
    \  }\n        else if (c == '[') {\n            ans += \" \";\n        }\n   \
    \     else if (c == ']') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '{') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '}') {\n            ans += \" \";\n        }\n        else if (c == '<') {\n\
    \            ans += \" \";\n        }\n        else if (c == '>') {\n        \
    \    ans += \" \";\n        }\n        else if (c == '%') {\n            ans +=\
    \ \" \";\n        }\n        else if (c == '$') {\n            ans += \" \";\n\
    \        }\n        else if (c == '&') {\n            ans += \" \";\n        }\n\
    \        else if (c == '*') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '!') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '\"') {\n            ans += \" \";\n        }\n        else if (c == '\\'')\
    \ {\n            ans += \" \";\n        }\n        else if (c == '~') {\n    \
    \        ans += \" \";\n        }\n        else if (c == '@') {\n            ans\
    \ += \" \";\n        }\n        else if (c == '^') {\n            ans += \" \"\
    ;\n        }\n        else if (c == '|') {\n            ans += \" \";\n      \
    \  }\n        else if (c == '~') {\n            ans += \" \";\n        }\n   \
    \     else if (c == '>') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '<') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '=') {\n            ans += \" \";\n        }\n        else if (c == '+') {\n\
    \            ans += \" \";\n        }", "    std::string ans = \"\";\n    for\
    \ (char c : message) {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n\
    \    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for (auto &c : message) {\n        ans += (std::toupper(c)\
    \ - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c : ans) {\n        ans.replace(ans.find(c),\
    \ 2, c);\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c: message) {\n        if (std::tolower(c) == c) ans += c;\n        else ans\
    \ += std::tolower(std::toupper(c));\n    }\n    for (auto &c: ans) {\n       \
    \ if (std::isalpha(c)) ans = ans.replace(c, 'A' + std::toupper(c) - 'A');\n  \
    \  }\n    for (auto &c: ans) {\n        if (std::isupper(c)) ans = ans.replace(c,\
    \ 'a' + std::tolower(c) - 'a');\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += c;\n        }\n        else {\n            ans += 'A' + (c - 'a');\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        }\n        else {\n            ans += 'A' + (c - 'a');\n       \
    \ }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for (auto\
    \ &c : message) {\n        switch (c) {\n            case 'a':\n             \
    \   encoded += \"A\";\n                break;\n            case 'b':\n       \
    \         encoded += \"B\";\n                break;\n            case 'c':\n \
    \               encoded += \"C\";\n                break;\n            case 'd':\n\
    \                encoded += \"D\";\n                break;\n            case 'e':\n\
    \                encoded += \"E\";\n                break;\n            case 'f':\n\
    \                encoded += \"F\";\n                break;\n            case 'g':\n\
    \                encoded += \"G\";\n                break;\n            case 'h':\n\
    \                encoded += \"H\";\n                break;\n            case 'i':\n\
    \                encoded += \"I\";\n                break;\n            case 'j':\n\
    \                encoded += \"J\";\n                break;\n            case 'k':\n\
    \                encoded += \"K\";\n                break;\n            case 'l':\n\
    \                encoded += \"L\";\n                break;\n            case 'm':\n\
    \                encoded += \"M\";\n                break;\n            case 'n':\n\
    \                encoded += \"N\";\n                break;\n            case 'o':\n\
    \                encoded += \"O\";\n                break;\n            case 'p':\n\
    \                encoded += \"P\";\n                break;\n            case 'q':\n\
    \                encoded += \"Q\";\n                break;\n            case 'r':\n\
    \                encoded += \"R\";\n                break;\n            case 's':\n\
    \                encoded += \"S\";\n                break;\n            case 't':\n\
    \                encoded += \"T\";\n                break;\n            case 'u':\n\
    \                encoded += \"U\";\n                break;\n            case 'v':\n\
    \                encoded += \"V\";\n                break;\n            case 'w':\n\
    \                encoded += \"W\";\n                break;\n            case 'x':\n\
    \                encoded += \"X\";\n                break;\n            case 'y':\n\
    \                encoded += \"Y\";\n                break;\n            case 'z':\n\
    \                encoded += \"Z\";\n                break;\n            case 'A':\n\
    \                encoded += \"a\";\n                break;\n            case 'B':\n\
    \                encoded += \"b\";\n                break;\n            case 'C':\n\
    \                encoded += \"c\";\n                break;\n            case 'D':\n\
    \                encoded += \"d\";\n                break;\n            case 'E':\n\
    \                encoded += \"e\";\n                break;\n            case 'F':\n\
    \                encoded += \"f\";\n                break;\n            case 'G':\n\
    \                encoded += \"g\";\n                break;\n            case 'H':\n\
    \                encoded += \"h\";\n                break;\n            case 'I':\n\
    \                encoded += \"i\";\n                break;\n            case 'J':\n\
    \                encoded += \"j\";\n                break;\n            case 'K':\n\
    \                encoded += \"k\";\n                break;\n            case 'L':\n\
    \                encoded += \"l\";\n                break;\n            case 'M':\n\
    \                encoded += \"m\";\n                break;\n            case 'N':\n\
    \                encoded += \"n\";\n                break;\n            case 'O':\n\
    \                encoded += \"o\";\n                break;\n            case 'P':\n",
  "    std::string ans = \"\";\n    for (auto &c : message) {\n        if ('A' <=\
    \ c && c <= 'Z') {\n            ans += c;\n        } else {\n            ans +=\
    \ tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a' <=\
    \ c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n  \
    \  }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n       \
    \     ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z')\
    \ {\n            ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n     \
    \       ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z')\
    \ {\n            ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n     \
    \       ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (char\
    \ c : ans) {\n        ans.replace(ans.find(c), 2, c);\n    }\n    return ans;",
  "    std::string encoded = \"\";\n    for (char c : message) {\n        if ('a'\
    \ <= c && c <= 'z') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            encoded += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O", "    std::string ans = \"\";\n \
    \   for (char c : message) {\n        ans += (tolower(c) - 'a' + 2) % 26 + 'a';\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (toupper(c));\n    }\n    for (char c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans\
    \ += (toupper(c));\n        }\n    }\n    for (char c : ans) {\n        if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans +=\
    \ (tolower(c));\n        }\n    }\n    for (char c : ans) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += (tolower(c));\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans += (toupper(c));\n \
    \       }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            ans += (toupper(c));\n    \
    \    }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans += (tolower(c));\n      \
    \  }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans += (tolower(c));\n        }\n\
    \    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans += (toupper(c));\n        }\n  \
    \  }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += (toupper(c));\n        }\n    }\n\
    \    for (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            ans += (tolower(c));\n        }\n    }\n   \
    \ for (char c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans += (tolower(c));\n        }\n    }\n    for\
    \ (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == '", "    std::string ans = \"\";\n    for (auto &c : message) {\n     \
    \   ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c :\
    \ ans) {\n        if (c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U')\
    \ {\n            ans[ans.find(c) + 2] = tolower(ans[ans.find(c) + 2]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c != 'A' && c != 'E' && c\
    \ != 'I' && c != 'O' && c != 'U') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if('a' <= c && c <= 'z') {\n            ans += c;\n        } else if('A'\
    \ <= c && c <= 'Z') {\n            ans += c;\n        } else if('0' <= c && c\
    \ <= '9') {\n            ans += c;\n        } else if(c == '.' || c == '-' ||\
    \ c == '_' || c == '/' || c == '\\\\') {\n            ans += c;\n        } else\
    \ {\n            ans += 'A' + (c - 'a' + 2);\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for(int i = 0; i < message.size(); i++) {\n  \
    \      char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            ans += c;\n        }\n        else {\n  \
    \          ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (isalpha(c)) {\n\
    \            ans.replace(ans.find(c), 2, toupper(ans.at(c)));\n        }\n   \
    \ }\n    for (auto &c : ans) {\n        if (isalpha(c)) {\n            ans.replace(ans.find(c),\
    \ 2, tolower(ans.at(c)));\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (auto &c: message) {\n        ans += (std::tolower(c) ==\
    \ c) ? std::toupper(c) : std::tolower(c);\n    }\n    for (auto &c: ans) {\n \
    \       if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans[ans.find(c) + 2] = std::toupper(c);\n        }\n    }\n    for (auto\
    \ &c: ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[ans.find(c) - 2] = std::tolower(c);\n        }\n   \
    \ }\n    return ans;", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for (char c : message) {\n        ans += (tolower(c)\
    \ - 'a' + 2) % 26 + 'a';\n    }\n    return ans;", "    std::string encoded =\
    \ \"\";\n    for (char c : message) {\n        char temp = c;\n        if (temp\
    \ >= 'a' && temp <= 'z') {\n            temp = temp - 'a' + 'A';\n        }\n\
    \        else if (temp >= 'A' && temp <= 'Z') {\n            temp = temp - 'A'\
    \ + 'a';\n        }\n        else if (temp >= '0' && temp <= '9') {\n        \
    \    temp = temp - '0' + '0';\n        }\n        encoded = encoded + temp;\n\
    \    }\n    return encoded;", "    std::string ans = \"\";\n    for (char c :\
    \ message) {\n        ans += (char) tolower(c);\n    }\n    for (int i = 0; i\
    \ < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] ==\
    \ 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[i - 1];\n        }\n    }\n    for (int i = 0; i\
    \ < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] ==\
    \ 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[i - 1];\n        }\n    }\n    for (int i = 0; i\
    \ < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] ==\
    \ 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[i - 1];\n        }\n    }\n    for (int i = 0; i\
    \ < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] ==\
    \ 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[i - 1];\n        }\n    }\n    for (int i = 0; i\
    \ < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] ==\
    \ 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[i - 1];\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i]\
    \ == 'a' || ans[i] == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u')\
    \ {\n            ans[i] = ans[i - 1];\n        }\n    }\n    for (int i = 0; i\
    \ < ans.size(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e' || ans[i] ==\
    \ 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] = ans[", "    std::string\
    \ encoded = \"\";\n    for (char c : message) {\n        char newC = c;\n    \
    \    if (c >= 'a' && c <= 'z') {\n            newC = c + 2;\n        }\n     \
    \   else if (c >= 'A' && c <= 'Z') {\n            newC = c - 2;\n        }\n \
    \       else if (c >= '0' && c <= '9') {\n            newC = c + 1;\n        }\n\
    \        encoded = encoded + newC;\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (c != 'A' && c\
    \ != 'E' && c != 'I' && c != 'O' && c != 'U' && c != 'Y') {\n            ans[ans.find(c)]\
    \ = tolower(ans[ans.find(c)]);\n        }\n    }\n    for (auto &c : ans) {\n\
    \        if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c !=\
    \ 'y') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if (c != 'A' && c != 'E' && c != 'I'\
    \ && c != 'O' && c != 'U' && c != 'Y') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' && c != 'y') {\n            ans[ans.find(c)]\
    \ = toupper(ans[ans.find(c)]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) +\
    \ 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans[ans.", "    std::string ans\
    \ = \"\";\n    for (auto &c: message) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n        }\n      \
    \  else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n    \
    \        ans += c;\n        }\n        else if (c == 'a' || c == 'A') {\n    \
    \        ans += 'A';\n        }\n        else if (c == 'e' || c == 'E') {\n  \
    \          ans += 'E';\n        }\n        else if (c == 'i' || c == 'I') {\n\
    \            ans += 'I';\n        }\n        else if (c == 'o' || c == 'O') {\n\
    \            ans += 'O';\n        }\n        else if (c == 'u' || c == 'U') {\n\
    \            ans += 'U';\n        }\n        else if (c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += 'a';\n        }\n        else if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans\
    \ += 'A';\n        }\n        else if (c == 'a' || c == 'A') {\n            ans\
    \ += 'a';\n        }\n        else if (c == 'e' || c == 'E') {\n            ans\
    \ += 'e';\n        }\n        else if (c == 'i' || c == 'I') {\n            ans\
    \ += 'i';\n        }\n        else if (c == 'o' || c == 'O') {\n            ans\
    \ += 'o';\n        }\n        else if (c == 'u' || c == 'U') {\n            ans\
    \ += 'u';\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            ans += 'A';\n        }\n        else if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'A';\n\
    \        }\n        else if (c == 'a' || c == 'A') {\n            ans += 'A';\n\
    \        }\n        else if (c == 'e' || c == 'E') {\n            ans += 'E';\n\
    \        }\n        else if (c == 'i' || c == 'I') {\n            ans += 'I';\n\
    \        }\n        else if (c == 'o' || c == 'O') {\n            ans += 'O';\n\
    \        }\n        else if (c == 'u' || c == 'U') {\n            ans += 'U';\n\
    \        }\n        else if (c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans += 'a';\n        }\n        else if (c == 'A' || c == 'E' || ",
  "    std::string ans = \"\";\n    for (auto &i : message) {\n        char c = i;\n\
    \        switch (c) {\n        case 'a':\n            ans += 'A';\n          \
    \  break;\n        case 'b':\n            ans += 'B';\n            break;\n  \
    \      case 'c':\n            ans += 'C';\n            break;\n        case 'd':\n\
    \            ans += 'D';\n            break;\n        case 'e':\n            ans\
    \ += 'E';\n            break;\n        case 'f':\n            ans += 'F';\n  \
    \          break;\n        case 'g':\n            ans += 'G';\n            break;\n\
    \        case 'h':\n            ans += 'H';\n            break;\n        case\
    \ 'i':\n            ans += 'I';\n            break;\n        case 'j':\n     \
    \       ans += 'J';\n            break;\n        case 'k':\n            ans +=\
    \ 'K';\n            break;\n        case 'l':\n            ans += 'L';\n     \
    \       break;\n        case 'm':\n            ans += 'M';\n            break;\n\
    \        case 'n':\n            ans += 'N';\n            break;\n        case\
    \ 'o':\n            ans += 'O';\n            break;\n        case 'p':\n     \
    \       ans += 'P';\n            break;\n        case 'q':\n            ans +=\
    \ 'Q';\n            break;\n        case 'r':\n            ans += 'R';\n     \
    \       break;\n        case 's':\n            ans += 'S';\n            break;\n\
    \        case 't':\n            ans += 'T';\n            break;\n        case\
    \ 'u':\n            ans += 'U';\n            break;\n        case 'v':\n     \
    \       ans += 'V';\n            break;\n        case 'w':\n            ans +=\
    \ 'W';\n            break;\n        case 'x':\n            ans += 'X';\n     \
    \       break;\n        case 'y':\n            ans += 'Y';\n            break;\n\
    \        case 'z':\n            ans += 'Z';\n            break;\n        case\
    \ 'A':\n            ans += 'a';\n            break;\n        case 'B':\n     \
    \       ans += 'b';\n            break;\n        case 'C':\n            ans +=\
    \ 'c';\n            break;\n        case 'D':\n            ans += 'd';\n     \
    \       break;\n        case 'E':\n            ans += 'e';\n            break;\n\
    \        case 'F':\n            ans += 'f';\n            break;\n        case\
    \ 'G':\n            ans += 'g';\n            break;\n        case 'H':\n     \
    \       ans += 'h';\n            break;\n        case 'I':\n            ans +=\
    \ 'i';\n            break;\n        case 'J':\n            ans += 'j';\n     \
    \       break;\n        case 'K':\n            ans += 'k';\n            break;\n\
    \        case 'L':\n            ans += 'l';", "    std::string encoded = \"\"\
    ;\n    for (char c : message) {\n        char encoded = toupper(c);\n        encoded\
    \ = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded, c);\n\
    \        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowels(encoded, c);\n        encoded = replaceVowels(encoded,\
    \ c);\n        encoded = replaceVowel", "    std::string encodedMessage;\n   \
    \ for (int i = 0; i < message.size(); i++) {\n        char letter = message[i];\n\
    \        if (letter >= 'a' && letter <= 'z') {\n            letter = letter -\
    \ 'a' + 'A';\n        }\n        if (letter >= 'A' && letter <= 'Z') {\n     \
    \       letter = letter - 'A' + 'a';\n        }\n        encodedMessage += letter;\n\
    \    }\n    return encodedMessage;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        ans += (isalpha(c)) ? toupper(c) : tolower(c);\n  \
    \  }\n    for (auto &c : ans) {\n        if (c != 'a' && c != 'e' && c != 'i'\
    \ && c != 'o' && c != 'u') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u') {\n            ans[ans.find(c) + 1] = toupper(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n\
    \        } else {\n            ans += c;\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c) + 1] +=\
    \ std::toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c) + 1] += std::tolower(c);\n        }\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    for (auto &c: message) {\n\
    \        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n       \
    \ } else {\n            ans += c;\n        }\n    }\n    for (auto &c: ans) {\n\
    \        if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c: ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = std::tolower(c);\n\
    \        }\n    }\n    for (auto &c: ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = std::tolower(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ ('a' <= c && c <= 'z') {\n            ans += c;\n        } else if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'A';\n\
    \        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans[i] = 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c &&\
    \ c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'A';\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O", "    std::string ans = \"\";\n    for(int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        ans += c;\n    }\n    for(int\
    \ i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        ans[i] =\
    \ tolower(c);\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'a';\n        }\n        if(c == 'o' || c == 'u')\
    \ {\n            ans[i] = 'e';\n        }\n        if(c == 'i' || c == 'u') {\n\
    \            ans[i] = 'i';\n        }\n        if(c == 'o' || c == 'u') {\n  \
    \          ans[i] = 'o';\n        }\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n        if(c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'e';\n \
    \       }\n        if(c == 'i' || c == 'u') {\n            ans[i] = 'i';\n   \
    \     }\n        if(c == 'o' || c == 'u') {\n            ans[i] = 'o';\n     \
    \   }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c\
    \ : message) {\n        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n\
    \        }\n        else if (std::isupper(c)) {\n            ans += std::tolower(c);\n\
    \        }\n        else if (std::islower(c)) {\n            ans += c;\n     \
    \   }\n        else if (std::isdigit(c)) {\n            ans += c;\n        }\n\
    \        else if (c == '.' || c == '!' || c == '?') {\n            ans += c;\n\
    \        }\n        else if (c == '(' || c == ')' || c == '[' || c == ']' || c\
    \ == ':' || c == ';' || c == '-' || c == '_' || c == '+') {\n            ans +=\
    \ c;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans += std::tolower(c);\n        }\n        else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  ans += std::toupper(c);\n        }\n        else if (c == '!' || c == '?')\
    \ {\n            ans += c;\n        }\n        else if (c == '.' || c == '!' ||\
    \ c == '?') {\n            ans += c;\n        }\n        else if (c == '(' ||\
    \ c == ')' || c == '[' || c == ']' || c == ':' || c == ';' || c == '-' || c ==\
    \ '_' || c == '+') {\n            ans += c;\n        }\n        else if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += std::tolower(c);\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans += std::toupper(c);\n        }\n        else if (c\
    \ == '!' || c == '?') {\n            ans += c;\n        }\n        else if (c\
    \ == '.' || c == '!' || c == '?') {\n            ans += c;\n        }\n      \
    \  else if (c == '(' || c == ')' || c == '[' || c == ']' || c == ':' || c == ';'\
    \ || c == '-' || c == '_' || c == '+') {\n            ans += c;\n        }\n \
    \       else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans += std::tolower(c);\n        }\n        else if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += std::toupper(c);\n\
    \        }\n        else if (c == '!' || c == '?') {\n            ans += c;\n\
    \        }\n        else if (c == '.' || c == '", "    std::string ans = \"\"\
    ;\n    for (auto &i : message) {\n        char c = i;\n        switch (c) {\n\
    \        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n\
    \        case 'u':\n            ans += 'A';\n            break;\n        case\
    \ 'b':\n        case 'f':\n        case 'g':\n        case 'h':\n        case\
    \ 'j':\n            ans += 'B';\n            break;\n        case 'c':\n     \
    \   case 'd':\n        case 'j':\n        case 'k':\n        case 'l':\n     \
    \       ans += 'C';\n            break;\n        case 'm':\n        case 'n':\n\
    \        case 'p':\n        case 's':\n            ans += 'M';\n            break;\n\
    \        case 'r':\n        case 't':\n        case 'v':\n            ans += 'R';\n\
    \            break;\n        case 'w':\n        case 'x':\n        case 'z':\n\
    \            ans += 'W';\n            break;\n        case 'y':\n        case\
    \ 'z':\n            ans += 'Y';\n            break;\n        default:\n      \
    \      ans += c;\n        }\n    }\n    for (auto &i : ans) {\n        switch\
    \ (i) {\n        case 'A':\n        case 'B':\n        case 'C':\n        case\
    \ 'D':\n        case 'E':\n        case 'F':\n        case 'G':\n        case\
    \ 'H':\n        case 'I':\n        case 'J':\n        case 'K':\n        case\
    \ 'L':\n        case 'M':\n        case 'N':\n        case 'O':\n        case\
    \ 'P':\n        case 'Q':\n        case 'R':\n        case 'S':\n        case\
    \ 'T':\n        case 'U':\n        case 'V':\n        case 'W':\n        case\
    \ 'X':\n        case 'Y':\n        case 'Z':\n        case 'a':\n        case\
    \ 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n        case\
    \ 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n        case\
    \ 'j':\n        case 'k':\n        case 'l':\n        case 'm':\n        case\
    \ 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n        case\
    \ 'r':\n        case 's':\n        case 't':\n        case 'u':\n        case\
    \ 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n        case\
    \ 'z':\n            ans[i] = 'A';\n            break;\n        case 'A':\n   \
    \     case 'B':\n        case 'C':\n        case 'D':\n        case 'E':\n   \
    \     case 'F':\n        case 'G':\n        case 'H':\n        case 'I':\n   \
    \     case 'J':\n        case 'K':\n        case 'L':\n        case 'M':\n   \
    \     case 'N':\n        case 'O':\n        case 'P':\n        case 'Q':\n   \
    \     case 'R':\n        case 'S':\n        case 'T':\n        case '", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.size(); i++) {\n        char c\
    \ = message[i];\n        char d = c;\n        if (c >= 'a' && c <= 'z') {\n  \
    \          d = c + 2;\n        }\n        else if (c >= 'A' && c <= 'Z') {\n \
    \           d = c + 1;\n        }\n        ans += d;\n    }\n    for (int i =\
    \ 0; i < ans.size(); i++) {\n        char c = ans[i];\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'A';\n\
    \        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            ans[i] = 'a';\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c)\
    \ ? tolower(c) : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans[ans.", "    std::string ans\
    \ = \"\";\n    for (char c : message) {\n        if ('A' <= c && c <= 'Z') {\n\
    \            ans += c;\n        } else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += 'A';\n        } else if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n\
    \        }\n    }\n    for (char c : ans) {\n        if ('A' <= c && c <= 'Z')\
    \ {\n            ans += c;\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'a';\n\
    \        }\n    }\n    return ans;", "    std::string encodedMessage = \"\";\n\
    \    for (auto &letter : message) {\n        switch (letter) {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n                encodedMessage += letter;\n          \
    \      break;\n            case 'A':\n            case 'E':\n            case\
    \ 'I':\n            case 'O':\n            case 'U':\n                encodedMessage\
    \ += letter;\n                break;\n            default:\n                encodedMessage\
    \ += letter;\n                break;\n        }\n    }\n    for (auto &vowel :\
    \ encodedMessage) {\n        switch (vowel) {\n            case 'a':\n       \
    \     case 'e':\n            case 'i':\n            case 'o':\n            case\
    \ 'u':\n                encodedMessage += vowel;\n                break;\n   \
    \         case 'A':\n            case 'E':\n            case 'I':\n          \
    \  case 'O':\n            case 'U':\n                encodedMessage += vowel;\n\
    \                break;\n            default:\n                encodedMessage\
    \ += vowel;\n                break;\n        }\n    }\n    return encodedMessage;",
  "    std::string encoded = \"\";\n    for (char c : message) {\n        if (std::isalpha(c))\
    \ {\n            char temp = c;\n            std::swap(temp, std::toupper(c));\n\
    \            encoded.push_back(temp);\n        }\n    }\n    for (char c : encoded)\
    \ {\n        if (c == 'A') {\n            encoded.push_back('E');\n        } else\
    \ if (c == 'E') {\n            encoded.push_back('A');\n        } else if (c ==\
    \ 'I') {\n            encoded.push_back('O');\n        } else if (c == 'O') {\n\
    \            encoded.push_back('I');\n        } else if (c == 'U') {\n       \
    \     encoded.push_back('U');\n        } else if (c == 'a') {\n            encoded.push_back('e');\n\
    \        } else if (c == 'e') {\n            encoded.push_back('a');\n       \
    \ } else if (c == 'i') {\n            encoded.push_back('o');\n        } else\
    \ if (c == 'o') {\n            encoded.push_back('i');\n        } else if (c ==\
    \ 'u') {\n            encoded.push_back('u');\n        }\n    }\n    return encoded;",
  "    std::string encoded = \"\";\n    for (char c : message) {\n        char newC\
    \ = c;\n        if (c >= 'a' && c <= 'z') {\n            newC = c + 2;\n     \
    \   }\n        else if (c >= 'A' && c <= 'Z') {\n            newC = c + 1;\n \
    \       }\n        else if (c >= '0' && c <= '9') {\n            newC = c;\n \
    \       }\n        encoded = encoded + newC;\n    }\n    return encoded;", " \
    \   std::string ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c)\
    \ ? tolower(c) : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 2] = tolower(ans[ans.find(c) + 2]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 2] = toupper(ans[ans.find(c) + 2]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = tolower(ans[ans.find(c)\
    \ + 2]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 2] = toupper(ans[ans.find(c) + 2]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 2] = tolower(ans[ans.find(c) + 2]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = toupper(ans[ans.find(c)\
    \ + 2]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = tolower(ans[ans.find(c) + 2]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 2] = toupper(ans[ans.find(c) + 2]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.", "    std::string encoded\
    \ = \"\";\n    for (char c : message) {\n        char newChar = c;\n        if\
    \ (newChar == 'a' || newChar == 'e' || newChar == 'i' || newChar == 'o' || newChar\
    \ == 'u' || newChar == 'A' || newChar == 'E' || newChar == 'I' || newChar == 'O'\
    \ || newChar == 'U') {\n            newChar = c;\n        }\n        else if (newChar\
    \ == 'a' || newChar == 'e' || newChar == 'i' || newChar == 'o' || newChar == 'u'\
    \ || newChar == 'A' || newChar == 'E' || newChar == 'I' || newChar == 'O' || newChar\
    \ == 'U') {\n            newChar = c;\n        }\n        else if (newChar ==\
    \ 'A' || newChar == 'E' || newChar == 'I' || newChar == 'O' || newChar == 'U')\
    \ {\n            newChar = c;\n        }\n        else if (newChar == 'a' || newChar\
    \ == 'e' || newChar == 'i' || newChar == 'o' || newChar == 'u' || newChar == 'A'\
    \ || newChar == 'E' || newChar == 'I' || newChar == 'O' || newChar == 'U') {\n\
    \            newChar = c;\n        }\n        else if (newChar == 'A' || newChar\
    \ == 'E' || newChar == 'I' || newChar == 'O' || newChar == 'U') {\n          \
    \  newChar = c;\n        }\n        else if (newChar == 'a' || newChar == 'e'\
    \ || newChar == 'i' || newChar == 'o' || newChar == 'u' || newChar == 'A' || newChar\
    \ == 'E' || newChar == 'I' || newChar == 'O' || newChar == 'U') {\n          \
    \  newChar = c;\n        }\n        else if (newChar == 'A' || newChar == 'E'\
    \ || newChar == 'I' || newChar == 'O' || newChar == 'U') {\n            newChar\
    \ = c;\n        }\n        else if (newChar == 'a' || newChar == 'e' || newChar\
    \ == 'i' || newChar == 'o' || newChar == 'u' || newChar == 'A' || newChar == 'E'\
    \ || newChar == 'I' || newChar == 'O' || newChar == 'U') {\n            newChar\
    \ = c;\n        }\n        else if (newChar == 'A' || newChar == 'E' || newChar\
    \ == 'I' || newChar == 'O' || newChar == 'U') {\n            newChar = c;\n  \
    \      }\n        else if (newChar == 'a' || newChar == 'e' || newChar == 'i'\
    \ || newChar == 'o' || newChar == 'u' || newChar == 'A' || newChar == 'E' || newChar\
    \ == 'I' || newChar == 'O' || newChar == 'U') {\n            newChar = c;\n  \
    \      }\n        else if (new", "    std::string ans = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        char c = message[i];\n        ans\
    \ += (c >= 'a' && c <= 'z') ? c : ((c >= 'A' && c <= 'Z') ? c : ((c >= '0' &&\
    \ c <= '9') ? c : 'a'));\n    }\n    for (int i = 0; i < ans.length(); i++) {\n\
    \        char c = ans[i];\n        ans[i] = ((c >= 'a' && c <= 'z') ? c : ((c\
    \ >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c : 'a')));\n    }\n   \
    \ for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n       \
    \ ans[i] = ((c >= 'a' && c <= 'z') ? c : ((c >= 'A' && c <= 'Z') ? c : ((c >=\
    \ '0' && c <= '9') ? c : 'a')));\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        ans[i] = ((c >= 'a' && c <= 'z') ?\
    \ c : ((c >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c : 'a')));\n  \
    \  }\n    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        ans[i] = ((c >= 'a' && c <= 'z') ? c : ((c >= 'A' && c <= 'Z') ? c :\
    \ ((c >= '0' && c <= '9') ? c : 'a')));\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        ans[i] = ((c >= 'a' && c <= 'z') ?\
    \ c : ((c >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c : 'a')));\n  \
    \  }\n    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        ans[i] = ((c >= 'a' && c <= 'z') ? c : ((c >= 'A' && c <= 'Z') ? c :\
    \ ((c >= '0' && c <= '9') ? c : 'a')));\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        ans[i] = ((c >= 'a' && c <= 'z') ?\
    \ c : ((c >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c : 'a", "    std::string\
    \ ans = \"\";\n    for (char c : message) {\n        ans += (tolower(c) - 'a'\
    \ + 2) % 26 + 'a';\n    }\n    for (char c : ans) {\n        ans[ans.find(c)]\
    \ = tolower(c);\n    }\n    return ans;", "    std::string encoded = \"\";\n \
    \   for (auto &c : message) {\n        switch (c) {\n        case 'a':\n     \
    \       encoded += \"A\";\n            break;\n        case 'b':\n           \
    \ encoded += \"B\";\n            break;\n        case 'c':\n            encoded\
    \ += \"C\";\n            break;\n        case 'd':\n            encoded += \"\
    D\";\n            break;\n        case 'e':\n            encoded += \"E\";\n \
    \           break;\n        case 'f':\n            encoded += \"F\";\n       \
    \     break;\n        case 'g':\n            encoded += \"G\";\n            break;\n\
    \        case 'h':\n            encoded += \"H\";\n            break;\n      \
    \  case 'i':\n            encoded += \"I\";\n            break;\n        case\
    \ 'j':\n            encoded += \"J\";\n            break;\n        case 'k':\n\
    \            encoded += \"K\";\n            break;\n        case 'l':\n      \
    \      encoded += \"L\";\n            break;\n        case 'm':\n            encoded\
    \ += \"M\";\n            break;\n        case 'n':\n            encoded += \"\
    N\";\n            break;\n        case 'o':\n            encoded += \"O\";\n \
    \           break;\n        case 'p':\n            encoded += \"P\";\n       \
    \     break;\n        case 'q':\n            encoded += \"Q\";\n            break;\n\
    \        case 'r':\n            encoded += \"R\";\n            break;\n      \
    \  case 's':\n            encoded += \"S\";\n            break;\n        case\
    \ 't':\n            encoded += \"T\";\n            break;\n        case 'u':\n\
    \            encoded += \"U\";\n            break;\n        case 'v':\n      \
    \      encoded += \"V\";\n            break;\n        case 'w':\n            encoded\
    \ += \"W\";\n            break;\n        case 'x':\n            encoded += \"\
    X\";\n            break;\n        case 'y':\n            encoded += \"Y\";\n \
    \           break;\n        case 'z':\n            encoded += \"Z\";\n       \
    \     break;\n        case 'A':\n            encoded += \"a\";\n            break;\n\
    \        case 'B':\n            encoded += \"b\";\n            break;\n      \
    \  case 'C':\n            encoded += \"c\";\n            break;\n        case\
    \ 'D':\n            encoded += \"d\";\n            break;\n        case 'E':\n\
    \            encoded += \"e\";\n            break;\n        case 'F':\n      \
    \      encoded += \"f\";\n            break;\n        case 'G':\n            encoded\
    \ += \"g\";\n            break;\n        case 'H':\n            encoded += \"\
    h\";\n            break;\n        case 'I':\n            encoded += \"i\";\n \
    \           break;\n        case 'J':\n            encoded += \"j\";\n       \
    \     break;\n        case 'K':\n            encoded += \"k\";\n            break;\n\
    \        case 'L':\n            encoded += \"l\";\n            break;\n      \
    \  case 'M':\n            encoded += \"m\";\n            break;\n        case\
    \ 'N':\n            encoded += \"n\";\n            break;\n        case 'O':\n\
    \            encoded += \"o\";\n            break;\n        case 'P':\n", "  \
    \  std::string ans = \"\";\n    for (char c : message) {\n        if (std::isalpha(c))\
    \ {\n            ans += std::toupper(c);\n        } else {\n            ans +=\
    \ c;\n        }\n    }\n    for (char c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c) + 1] = (std::toupper(c) - 'A');\n        }\n\
    \    }\n    for (char c : ans) {\n        if (std::isalpha(c)) {\n           \
    \ ans[ans.find(c) + 1] = (std::tolower(c) - 'a');\n        }\n    }\n    return\
    \ ans;", "    std::string encoded = \"\";\n    for (char c : message) {\n    \
    \    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \     encoded += c;\n        } else {\n            char temp = c;\n          \
    \  int index = c - 'a';\n            int index2 = c - 'a';\n            int index3\
    \ = c - 'a';\n            int index4 = c - 'a';\n            int index5 = c -\
    \ 'a';\n            int index6 = c - 'a';\n            int index7 = c - 'a';\n\
    \            int index8 = c - 'a';\n            int index9 = c - 'a';\n      \
    \      int index10 = c - 'a';\n            int index11 = c - 'a';\n          \
    \  int index12 = c - 'a';\n            int index13 = c - 'a';\n            int\
    \ index14 = c - 'a';\n            int index15 = c - 'a';\n            int index16\
    \ = c - 'a';\n            int index17 = c - 'a';\n            int index18 = c\
    \ - 'a';\n            int index19 = c - 'a';\n            int index20 = c - 'a';\n\
    \            int index21 = c - 'a';\n            int index22 = c - 'a';\n    \
    \        int index23 = c - 'a';\n            int index24 = c - 'a';\n        \
    \    int index25 = c - 'a';\n            int index26 = c - 'a';\n            int\
    \ index27 = c - 'a';\n            int index28 = c - 'a';\n            int index29\
    \ = c - 'a';\n            int index30 = c - 'a';\n            int index31 = c\
    \ - 'a';\n            int index32 = c - 'a';\n            int index33 = c - 'a';\n\
    \            int index34 = c - 'a';\n            int index35 = c - 'a';\n    \
    \        int index36 = c - 'a';\n            int index37 = c - 'a';\n        \
    \    int index38 = c - 'a';\n            int index39 = c - 'a';\n            int\
    \ index40 = c - 'a';\n            int index41 = c - 'a';\n            int index42\
    \ = c - 'a';\n            int index43 = c - 'a';\n            int index44 = c\
    \ - 'a';\n            int index45 = c - 'a';\n            int index46 = c - 'a';\n\
    \            int index47 = c - 'a';\n            int index48 = c - 'a", "    std::string\
    \ ans;\n    for(int i=0;i<message.length();i++) {\n        char c = message[i];\n\
    \        switch(c) {\n            case 'a':\n            case 'e':\n         \
    \   case 'i':\n            case 'o':\n            case 'u':\n                ans\
    \ += 'A';\n                break;\n            case 'b':\n            case 'f':\n\
    \            case 'n':\n            case 'r':\n            case 't':\n       \
    \         ans += 'B';\n                break;\n            case 'c':\n       \
    \     case 'g':\n            case 'j':\n            case 'k':\n            case\
    \ 'm':\n                ans += 'C';\n                break;\n            case\
    \ 'd':\n            case 'h':\n            case 'j':\n            case 'k':\n\
    \            case 'n':\n                ans += 'D';\n                break;\n\
    \            case 'e':\n            case 'f':\n            case 'h':\n       \
    \     case 'k':\n            case 'n':\n                ans += 'E';\n        \
    \        break;\n            case 'f':\n            case 'g':\n            case\
    \ 'j':\n            case 'k':\n            case 'n':\n                ans += 'F';\n\
    \                break;\n            case 'g':\n            case 'h':\n      \
    \      case 'j':\n            case 'k':\n            case 'n':\n             \
    \   ans += 'G';\n                break;\n            case 'h':\n            case\
    \ 'j':\n            case 'k':\n            case 'n':\n                ans += 'H';\n\
    \                break;\n            case 'i':\n            case 'j':\n      \
    \      case 'k':\n            case 'l':\n                ans += 'I';\n       \
    \         break;\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n                ans += 'J';\n                break;\n            case\
    \ 'k':\n            case 'l':\n                ans += 'K';\n                break;\n\
    \            case 'l':\n                ans += 'L';\n                break;\n\
    \            case 'm':\n                ans += 'M';\n                break;\n\
    \            case 'n':\n                ans += 'N';\n                break;\n\
    \            case 'o':\n                ans += 'O';\n                break;\n\
    \            case 'p':\n                ans += 'P';\n                break;\n\
    \            case 'q':\n                ans += 'Q';\n                break;\n\
    \            case 'r':\n                ans += 'R';\n                break;\n\
    \            case 's':\n                ans += 'S';\n                break;\n\
    \            case 't':\n                ans += 'T';\n                break;\n\
    \            case 'u':\n                ans += 'U';\n                break;\n\
    \            case 'v':\n                ans += 'V';\n                break;\n\
    \            case 'w':\n                ans += 'W';\n                break;\n\
    \            case 'x':\n                ans += 'X';\n                break;\n\
    \            case 'y':\n                ans += 'Y';\n                break;\n\
    \            case 'z':\n                ans += 'Z';\n                break;\n\
    \            default:", "    std::string encoded = \"\";\n    for (char c : message)\
    \ {\n        if ('A' <= c && c <= 'Z') {\n            encoded += c;\n        }\
    \ else {\n            int index = c - 'A';\n            int index2 = c - 'a';\n\
    \            int index3 = c - 'A';\n            int index4 = c - 'a';\n      \
    \      int index5 = c - 'A';\n            int index6 = c - 'a';\n            int\
    \ index7 = c - 'A';\n            int index8 = c - 'a';\n            int index9\
    \ = c - 'A';\n            int index10 = c - 'a';\n            int index11 = c\
    \ - 'A';\n            int index12 = c - 'a';\n            int index13 = c - 'A';\n\
    \            int index14 = c - 'a';\n            int index15 = c - 'A';\n    \
    \        int index16 = c - 'a';\n            int index17 = c - 'A';\n        \
    \    int index18 = c - 'a';\n            int index19 = c - 'A';\n            int\
    \ index20 = c - 'a';\n            int index21 = c - 'A';\n            int index22\
    \ = c - 'a';\n            int index23 = c - 'A';\n            int index24 = c\
    \ - 'a';\n            int index25 = c - 'A';\n            int index26 = c - 'a';\n\
    \            int index27 = c - 'A';\n            int index28 = c - 'a';\n    \
    \        int index29 = c - 'A';\n            int index30 = c - 'a';\n        \
    \    int index31 = c - 'A';\n            int index32 = c - 'a';\n            int\
    \ index33 = c - 'A';\n            int index34 = c - 'a';\n            int index35\
    \ = c - 'A';\n            int index36 = c - 'a';\n            int index37 = c\
    \ - 'A';\n            int index38 = c - 'a';\n            int index39 = c - 'A';\n\
    \            int index40 = c - 'a';\n            int index41 = c - 'A';\n    \
    \        int index42 = c - 'a';\n            int index43 = c - 'A';\n        \
    \    int index44 = c - 'a';\n            int index45 = c - 'A';\n            int\
    \ index46 = c - 'a';\n            int index47 = c - 'A';\n            int index48\
    \ = c - 'a';\n            int index49 = c - 'A';\n            int index", "  \
    \  std::string ans = \"\";\n    for (char c : message) {\n        if ('a' <= c\
    \ && c <= 'z') {\n            ans += c;\n        }\n        else if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += c + 2;\n\
    \        }\n        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c - 2;\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] >= 'A' && message[i] <= 'Z') {\n     \
    \       ans += message[i];\n        }\n        else if (message[i] >= '0' && message[i]\
    \ <= '9') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '!' || message[i] == '?') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '-') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '_') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '/') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '\\\\') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '(') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == ')') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '+') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '=') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '[') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == ']') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '{') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '}') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '<') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '>') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '|') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '~') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '^') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '&') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '%') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '!') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '?') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '*') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '$') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '(') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == ')') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '+') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '=') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] == '[') {", "    std::string encoded =\
    \ \"\";\n    for (auto &c : message) {\n        switch (c) {\n        case 'a':\n\
    \            encoded += \"A\";\n            break;\n        case 'b':\n      \
    \      encoded += \"B\";\n            break;\n        case 'c':\n            encoded\
    \ += \"C\";\n            break;\n        case 'd':\n            encoded += \"\
    D\";\n            break;\n        case 'e':\n            encoded += \"E\";\n \
    \           break;\n        case 'f':\n            encoded += \"F\";\n       \
    \     break;\n        case 'g':\n            encoded += \"G\";\n            break;\n\
    \        case 'h':\n            encoded += \"H\";\n            break;\n      \
    \  case 'i':\n            encoded += \"I\";\n            break;\n        case\
    \ 'j':\n            encoded += \"J\";\n            break;\n        case 'k':\n\
    \            encoded += \"K\";\n            break;\n        case 'l':\n      \
    \      encoded += \"L\";\n            break;\n        case 'm':\n            encoded\
    \ += \"M\";\n            break;\n        case 'n':\n            encoded += \"\
    N\";\n            break;\n        case 'o':\n            encoded += \"O\";\n \
    \           break;\n        case 'p':\n            encoded += \"P\";\n       \
    \     break;\n        case 'q':\n            encoded += \"Q\";\n            break;\n\
    \        case 'r':\n            encoded += \"R\";\n            break;\n      \
    \  case 's':\n            encoded += \"S\";\n            break;\n        case\
    \ 't':\n            encoded += \"T\";\n            break;\n        case 'u':\n\
    \            encoded += \"U\";\n            break;\n        case 'v':\n      \
    \      encoded += \"V\";\n            break;\n        case 'w':\n            encoded\
    \ += \"W\";\n            break;\n        case 'x':\n            encoded += \"\
    X\";\n            break;\n        case 'y':\n            encoded += \"Y\";\n \
    \           break;\n        case 'z':\n            encoded += \"Z\";\n       \
    \     break;\n        case 'A':\n            encoded += \"a\";\n            break;\n\
    \        case 'B':\n            encoded += \"b\";\n            break;\n      \
    \  case 'C':\n            encoded += \"c\";\n            break;\n        case\
    \ 'D':\n            encoded += \"d\";\n            break;\n        case 'E':\n\
    \            encoded += \"e\";\n            break;\n        case 'F':\n      \
    \      encoded += \"f\";\n            break;\n        case 'G':\n            encoded\
    \ += \"g\";\n            break;\n        case 'H':\n            encoded += \"\
    h\";\n            break;\n        case 'I':\n            encoded += \"i\";\n \
    \           break;\n        case 'J':\n            encoded += \"j\";\n       \
    \     break;\n        case 'K':\n            encoded += \"k\";\n            break;\n\
    \        case 'L':\n            encoded += \"l\";\n            break;\n      \
    \  case 'M':\n            encoded += \"m\";\n            break;\n        case\
    \ 'N':\n            encoded += \"n\";\n            break;\n        case 'O':\n\
    \            encoded += \"o\";\n            break;\n        case 'P':\n", "  \
    \  std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        ans += (tolower(c) - 'a' + 2) % 26 + 'a';\n\
    \    }\n    return ans;", "    std::string encoded = \"\";\n    for (auto &c :\
    \ message) {\n        auto pos = tolower(c) - 'a';\n        auto next = pos +\
    \ 2;\n        if (next < 26) {\n            encoded += toupper(c);\n         \
    \   encoded += tolower(message[pos]);\n            encoded += toupper(message[next]);\n\
    \        } else {\n            encoded += toupper(c);\n            encoded +=\
    \ tolower(message[pos]);\n        }\n    }\n    return encoded;", "    std::string\
    \ encoded = \"\";\n    for (char c : message) {\n        char encoded = tolower(c);\n\
    \        encoded = replaceChar(encoded, \"a\", \"t\");\n        encoded = replaceChar(encoded,\
    \ \"e\", \"s\");\n        encoded = replaceChar(encoded, \"i\", \"h\");\n    \
    \    encoded = replaceChar(encoded, \"o\", \"k\");\n        encoded = replaceChar(encoded,\
    \ \"u\", \"g\");\n        encoded = replaceChar(encoded, \"y\", \"f\");\n    \
    \    encoded = replaceChar(encoded, \"A\", \"T\");\n        encoded = replaceChar(encoded,\
    \ \"E\", \"S\");\n        encoded = replaceChar(encoded, \"I\", \"H\");\n    \
    \    encoded = replaceChar(encoded, \"O\", \"K\");\n        encoded = replaceChar(encoded,\
    \ \"U\", \"G\");\n        encoded = replaceChar(encoded, \"Y\", \"F\");\n    \
    \    encoded = replaceChar(encoded, \"a\", \"t\");\n        encoded = replaceChar(encoded,\
    \ \"e\", \"s\");\n        encoded = replaceChar(encoded, \"i\", \"h\");\n    \
    \    encoded = replaceChar(encoded, \"o\", \"k\");\n        encoded = replaceChar(encoded,\
    \ \"u\", \"g\");\n        encoded = replaceChar(encoded, \"y\", \"f\");\n    \
    \    encoded = replaceChar(encoded, \"A\", \"T\");\n        encoded = replaceChar(encoded,\
    \ \"E\", \"S\");\n        encoded = replaceChar(encoded, \"I\", \"H\");\n    \
    \    encoded = replaceChar(encoded, \"O\", \"K\");\n        encoded = replaceChar(encoded,\
    \ \"U\", \"G\");\n        encoded = replaceChar(encoded, \"Y\", \"F\");\n    \
    \    encoded = replaceChar(encoded, \"a\", \"t\");\n        encoded = replaceChar(encoded,\
    \ \"e\", \"s\");\n        encoded = replaceChar(encoded, \"i\", \"h\");\n    \
    \    encoded = replaceChar(encoded, \"o\", \"k\");\n        encoded = replaceChar(encoded,\
    \ \"u\", \"g\");\n        encoded = replaceChar(encoded, \"y\", \"f\");\n    \
    \    encoded = replaceChar(encoded, \"A\", \"T\");\n        encoded = replaceChar(encoded,\
    \ \"E\", \"S\");\n        encoded = replaceChar(encoded, \"I\", \"H\");\n    \
    \    encoded = replaceChar(encoded, \"O\", \"K\");\n        encoded = replaceChar(encoded,\
    \ \"U\", \"G\");\n        encoded = replaceChar(encoded, \"Y\", \"F\");\n    \
    \    encoded = replaceChar(encoded, \"a\", \"t\");\n        encoded = replaceChar(encoded,\
    \ \"e\", \"s\");\n        encoded = replaceChar(encoded, \"i\", \"h\");\n    \
    \    encoded = replace", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n   \
    \     } else {\n            ans += c;\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)] =\
    \ std::toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (char c : message) {\n        ans\
    \ += (c >= 'a' && c <= 'z') ? tolower(c) : toupper(c);\n    }\n    for (char c\
    \ : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   for (auto &c : message) {\n        ans += (std::toupper(c) - 'A' + 2) % 26\
    \ + 'A';\n    }\n    for (auto &c : ans) {\n        ans[ans.find(c) - 2] = ans[ans.find(c)\
    \ - 1]; \n    }\n    return ans;", "    std::string ans = \"\";\n    for(int i\
    \ = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans += c;\n        }\n        else {\n         \
    \   ans += 'a' + message[i] - 'a';\n        }\n    }\n    return ans;", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if ('a' <= c && c <= 'z') {\n            encoded +=\
    \ c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            char nextLetter = message[++i];\n            if (nextLetter\
    \ == 'a' || nextLetter == 'e' || nextLetter == 'i' || nextLetter == 'o' || nextLetter\
    \ == 'u') {\n                encoded += nextLetter;\n            }\n        }\n\
    \    }\n    return encoded;", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < message.length(); i++) {\n        char c = message[i];\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n\
    \        }\n        else {\n            ans += 'A' + (c - 'a');\n        }\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (std::tolower(c) == c) ? std::toupper(c) : c;\n    }\n   \
    \ for (char c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            ans[ans.find(c) + 2] = std::tolower(c);\n      \
    \  }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = std::toupper(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (char\
    \ c : message) {\n        ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n\
    \    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    return ans;", "    std::string encodedMessage;\n    for(char\
    \ c : message) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            encodedMessage += c;\n        }\n        else if(c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encodedMessage\
    \ += c;\n        }\n        else {\n            encodedMessage += toupper(c);\n\
    \        }\n    }\n    for(char c : encodedMessage) {\n        if(c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encodedMessage\
    \ += tolower(c);\n        }\n    }\n    for(char c : encodedMessage) {\n     \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   encodedMessage += toupper(c);\n        }\n        else if(c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encodedMessage += tolower(c);\n\
    \        }\n    }\n    return encodedMessage;", "    std::string ans = \"\";\n\
    \    for (char c : message) {\n        if (c >= 'a' && c <= 'z') {\n         \
    \   ans += c;\n        } else if (c >= 'A' && c <= 'Z') {\n            ans +=\
    \ c;\n        } else if (c >= '0' && c <= '9') {\n            ans += c;\n    \
    \    } else if (c == '.') {\n            ans += c;\n        } else if (c == '!')\
    \ {\n            ans += c;\n        } else if (c == '?') {\n            ans +=\
    \ c;\n        } else if (c == '-') {\n            ans += c;\n        } else if\
    \ (c == '_') {\n            ans += c;\n        } else if (c == '/') {\n      \
    \      ans += c;\n        } else if (c == '\\\\') {\n            ans += c;\n \
    \       } else if (c == '(') {\n            ans += c;\n        } else if (c ==\
    \ ')') {\n            ans += c;\n        } else if (c == '*') {\n            ans\
    \ += c;\n        } else if (c == '+') {\n            ans += c;\n        } else\
    \ if (c == '=') {\n            ans += c;\n        } else if (c == '[') {\n   \
    \         ans += c;\n        } else if (c == ']') {\n            ans += c;\n \
    \       } else if (c == '{') {\n            ans += c;\n        } else if (c ==\
    \ '}') {\n            ans += c;\n        } else if (c == '<') {\n            ans\
    \ += c;\n        } else if (c == '>') {\n            ans += c;\n        } else\
    \ if (c == '%') {\n            ans += c;\n        } else if (c == '!') {\n   \
    \         ans += c;\n        } else if (c == '~') {\n            ans += c;\n \
    \       } else if (c == '@') {\n            ans += c;\n        } else if (c ==\
    \ '^') {\n            ans += c;\n        } else if (c == '&') {\n            ans\
    \ += c;\n        } else if (c == '*') {\n            ans += c;\n        } else\
    \ if (c == '(') {\n            ans += c;\n        } else if (c == ')') {\n   \
    \         ans += c;\n        } else if (c == '-') {\n            ans += c;\n \
    \       } else if (c == '_') {\n            ans += c;\n        } else if (c ==\
    \ '/') {\n            ans += c;\n        } else if (c == '\\\\') {\n         \
    \   ans += c;\n        } else if (c == '[') {\n            ans += c;\n       \
    \ } else if (c == ']') {\n            ans += c;\n        } else if (c == '{')\
    \ {\n            ans += c;\n        } else if (c == '}') {\n            ans +=\
    \ c;\n        } else if (c == '<') {\n            ans += c;\n        } else if\
    \ (c == '>') {\n            ans += c;\n        } else if (c == '%') {\n      \
    \      ans += c;\n        } else if (c == '!') {\n            ans += c;\n    \
    \    } else if (c == '~') {\n            ans += c;\n        } else if (c == '@')\
    \ {\n            ans += c;\n        } else if (", "    std::string ans = \"\"\
    ;\n    for (auto &i : message) {\n        switch (i) {\n            case 'a':\n\
    \            case 'e':\n            case 'i':\n            case 'o':\n       \
    \     case 'u':\n                ans += 'A';\n                break;\n       \
    \     case 'b':\n            case 'f':\n            case 'n':\n            case\
    \ 'r':\n            case 't':\n                ans += 'B';\n                break;\n\
    \            case 'c':\n            case 'g':\n            case 'k':\n       \
    \     case 'm':\n            case 's':\n                ans += 'C';\n        \
    \        break;\n            case 'd':\n            case 'h':\n            case\
    \ 'j':\n            case 'k':\n            case 'n':\n                ans += 'D';\n\
    \                break;\n            case 'e':\n            case 'f':\n      \
    \      case 'h':\n            case 'j':\n            case 'k':\n            case\
    \ 'n':\n                ans += 'E';\n                break;\n            case\
    \ 'f':\n            case 'g':\n            case 'h':\n            case 'j':\n\
    \            case 'k':\n            case 'n':\n                ans += 'F';\n \
    \               break;\n            case 'g':\n            case 'h':\n       \
    \     case 'j':\n            case 'k':\n            case 'n':\n              \
    \  ans += 'G';\n                break;\n            case 'h':\n            case\
    \ 'j':\n            case 'k':\n            case 'n':\n                ans += 'H';\n\
    \                break;\n            case 'j':\n            case 'k':\n      \
    \      case 'n':\n                ans += 'J';\n                break;\n      \
    \      case 'k':\n            case 'n':\n                ans += 'K';\n       \
    \         break;\n            case 'n':\n                ans += 'N';\n       \
    \         break;\n            case 'o':\n            case 'p':\n            case\
    \ 'q':\n            case 'r':\n            case 's':\n                ans += 'O';\n\
    \                break;\n            case 'p':\n            case 'q':\n      \
    \      case 'r':\n            case 's':\n                ans += 'P';\n       \
    \         break;\n            case 'q':\n            case 'r':\n            case\
    \ 's':\n                ans += 'Q';\n                break;\n            case\
    \ 'r':\n            case 's':\n                ans += 'R';\n                break;\n\
    \            case 's':\n                ans += 'S';\n                break;\n\
    \            case 't':\n            case 'u':\n            case 'v':\n       \
    \     case 'w':\n            case 'x':\n            case 'y':\n            case\
    \ 'z':\n                ans += 'T';\n                break;\n            case\
    \ 'u':\n            case 'v':\n            case 'w':\n            case 'x':\n\
    \            case 'y':\n            case 'z':\n                ans += 'U';\n \
    \               break;\n            case 'v':\n            case 'w':\n       \
    \     case 'x':\n            case 'y':\n            case 'z':\n              \
    \  ans += 'V';\n                break;\n            case 'w':\n            case\
    \ 'x':\n            case 'y", "    std::string encoded = \"\";\n    for (auto\
    \ &c : message) {\n        auto pos = std::find(message.begin(), message.end(),\
    \ c);\n        auto pos2 = std::find(message.begin(), message.end(), c+1);\n \
    \       auto pos3 = std::find(message.begin(), message.end(), c+2);\n        auto\
    \ pos4 = std::find(message.begin(), message.end(), c+3);\n        auto pos5 =\
    \ std::find(message.begin(), message.end(), c+4);\n        auto pos6 = std::find(message.begin(),\
    \ message.end(), c+5);\n        auto pos7 = std::find(message.begin(), message.end(),\
    \ c+6);\n        auto pos8 = std::find(message.begin(), message.end(), c+7);\n\
    \        auto pos9 = std::find(message.begin(), message.end(), c+8);\n       \
    \ auto pos10 = std::find(message.begin(), message.end(), c+9);\n        auto pos11\
    \ = std::find(message.begin(), message.end(), c+10);\n        auto pos12 = std::find(message.begin(),\
    \ message.end(), c+11);\n        auto pos13 = std::find(message.begin(), message.end(),\
    \ c+12);\n        auto pos14 = std::find(message.begin(), message.end(), c+13);\n\
    \        auto pos15 = std::find(message.begin(), message.end(), c+14);\n     \
    \   auto pos16 = std::find(message.begin(), message.end(), c+15);\n        auto\
    \ pos17 = std::find(message.begin(), message.end(), c+16);\n        auto pos18\
    \ = std::find(message.begin(), message.end(), c+17);\n        auto pos19 = std::find(message.begin(),\
    \ message.end(), c+18);\n        auto pos20 = std::find(message.begin(), message.end(),\
    \ c+19);\n        auto pos21 = std::find(message.begin(), message.end(), c+20);\n\
    \        auto pos22 = std::find(message.begin(), message.end(), c+21);\n     \
    \   auto pos23 = std::find(message.begin(), message.end(), c+22);\n        auto\
    \ pos24 = std::find(message.begin(), message.end(), c+23);\n        auto pos25\
    \ = std::find(message.begin(), message.end(), c+24);\n        auto pos26 = std::find(message.begin(),\
    \ message.end(), c+25);\n        auto pos27 = std::find(message.begin(), message.end(),\
    \ c+26);\n        auto pos28 = std::find(message.begin(), message.end(), c+27);\n\
    \        auto pos29 = std::find(message.begin(), message.end(), c+28);\n     \
    \   auto pos30 = std::find(message.begin(), ", "    std::string encoded = \"\"\
    ;\n    for (char c : message) {\n        char temp = c;\n        temp = temp -\
    \ 'a' + 1;\n        if (temp > 'z') {\n            temp = 'z' + temp - 'a';\n\
    \        }\n        encoded = encoded + temp;\n    }\n    return encoded;", " \
    \   std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'A' + (c - 'a');\n        }\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n         \
    \   ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans += 'A';\n        } else if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'a';\n      \
    \  }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else\
    \ if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n          \
    \  ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <=\
    \ c && c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'A';\n \
    \       } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans[i] = 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O", "    std::string ans = \"\";\n \
    \   for (auto &c : message) {\n        if (std::isalpha(c)) {\n            ans\
    \ += std::toupper(c);\n        }\n        else if (std::islower(c)) {\n      \
    \      ans += std::tolower(c);\n        }\n        else if (std::isupper(c)) {\n\
    \            ans += std::toupper(c);\n        }\n        else if (std::isspace(c))\
    \ {\n            ans += \" \";\n        }\n        else if (c == '.') {\n    \
    \        ans += \".\";\n        }\n        else if (c == '?') {\n            ans\
    \ += \"?\";\n        }\n        else if (c == '!') {\n            ans += \"!\"\
    ;\n        }\n        else if (c == '-') {\n            ans += \"-\";\n      \
    \  }\n        else if (c == '_') {\n            ans += \"_\";\n        }\n   \
    \     else if (c == '/') {\n            ans += \"/\";\n        }\n        else\
    \ if (c == '\\\\') {\n            ans += \"\\\\\";\n        }\n        else if\
    \ (c == '(') {\n            ans += \"(\";\n        }\n        else if (c == ')')\
    \ {\n            ans += \")\";\n        }\n        else if (c == '+') {\n    \
    \        ans += \"+\";\n        }\n        else if (c == '=') {\n            ans\
    \ += \"=\";\n        }\n        else if (c == '[') {\n            ans += \"[\"\
    ;\n        }\n        else if (c == ']') {\n            ans += \"]\";\n      \
    \  }\n        else if (c == '{') {\n            ans += \"{\";\n        }\n   \
    \     else if (c == '}') {\n            ans += \"}\"; \n        }\n        else\
    \ if (c == '<') {\n            ans += \"<\";\n        }\n        else if (c ==\
    \ '>') {\n            ans += \">\";\n        }\n        else if (c == '!') {\n\
    \            ans += \"!\";\n        }\n        else if (c == '.') {\n        \
    \    ans += \".\";\n        }\n        else if (c == '?') {\n            ans +=\
    \ \"?\";\n        }\n        else if (c == '!') {\n            ans += \"!\";\n\
    \        }\n        else if (c == '-') {\n            ans += \"-\";\n        }\n\
    \        else if (c == '_') {\n            ans += \"_\";\n        }\n        else\
    \ if (c == '/') {\n            ans += \"/\";\n        }\n        else if (c ==\
    \ '\\\\') {\n            ans += \"\\\\\";\n        }\n        else if (c == '(')\
    \ {\n            ans += \"(\";\n        }\n        else if (c == ')') {\n    \
    \        ans += \")\";\n        }\n        else if (c == '+') {\n            ans\
    \ += \"+\";\n        }\n        else if (c == '=') {\n            ans += \"=\"\
    ;\n        }\n        else if (c == '[') {\n            ans += \"[\";\n", "  \
    \  std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans +=\
    \ c;\n        }\n        else if (c == 'a' || c == 'A') {\n            ans +=\
    \ 'A';\n        }\n        else if (c == 'e' || c == 'E') {\n            ans +=\
    \ 'E';\n        }\n        else if (c == 'i' || c == 'I') {\n            ans +=\
    \ 'I';\n        }\n        else if (c == 'o' || c == 'O') {\n            ans +=\
    \ 'O';\n        }\n        else if (c == 'u' || c == 'U') {\n            ans +=\
    \ 'U';\n        }\n        else if (c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'a';\n        }\n        else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'A';\n        }\n\
    \        else if (c == 'a' || c == 'A') {\n            ans += 'a';\n        }\n\
    \        else if (c == 'e' || c == 'E') {\n            ans += 'e';\n        }\n\
    \        else if (c == 'i' || c == 'I') {\n            ans += 'i';\n        }\n\
    \        else if (c == 'o' || c == 'O') {\n            ans += 'o';\n        }\n\
    \        else if (c == 'u' || c == 'U') {\n            ans += 'u';\n        }\n\
    \    }\n    return ans;", "    std::string encoded = \"\";\n    for(int i = 0;\
    \ i < message.size(); i++) {\n        if(message[i] >= 'a' && message[i] <= 'z')\
    \ {\n            encoded += message[i];\n        }\n        else if(message[i]\
    \ >= 'A' && message[i] <= 'Z') {\n            encoded += message[i];\n       \
    \ }\n        else if(message[i] == 'a' || message[i] == 'e' || message[i] == 'i'\
    \ || message[i] == 'o' || message[i] == 'u') {\n            encoded += message[i];\n\
    \        }\n        else if(message[i] == 'A' || message[i] == 'E' || message[i]\
    \ == 'I' || message[i] == 'O' || message[i] == 'U') {\n            encoded +=\
    \ message[i];\n        }\n        else {\n            char temp = message[i];\n\
    \            int index = message[i] - 'a';\n            int index2 = message[i+1]\
    \ - 'a';\n            int index3 = message[i+2] - 'a';\n            int index4\
    \ = message[i+3] - 'a';\n            int index5 = message[i+4] - 'a';\n      \
    \      int index6 = message[i+5] - 'a';\n            int index7 = message[i+6]\
    \ - 'a';\n            int index8 = message[i+7] - 'a';\n            int index9\
    \ = message[i+8] - 'a';\n            int index10 = message[i+9] - 'a';\n     \
    \       int index11 = message[i+10] - 'a';\n            int index12 = message[i+11]\
    \ - 'a';\n            int index13 = message[i+12] - 'a';\n            int index14\
    \ = message[i+13] - 'a';\n            int index15 = message[i+14] - 'a';\n   \
    \         int index16 = message[i+15] - 'a';\n            int index17 = message[i+16]\
    \ - 'a';\n            int index18 = message[i+17] - 'a';\n            int index19\
    \ = message[i+18] - 'a';\n            int index20 = message[i+19] - 'a';\n   \
    \         int index21 = message[i+20] - 'a';\n            int index22 = message[i+21]\
    \ - 'a';\n            int index23 = message[i+22] - 'a';\n            int index24\
    \ = message[i+23] - 'a';\n            int index25 = message[i+24] - 'a';\n   \
    \         int index26 = message[i+25] - 'a';\n            int index27 = message[i+26]\
    \ - 'a';\n            int index28 = message[i+27] - 'a';\n            int index29\
    \ = message[i+28] - 'a';\n            int index30 = message[i+29] - 'a", "   \
    \ std::string encoded = \"\";\n    for (char &c : message) {\n        if (c >=\
    \ 'a' && c <= 'z') {\n            c += ('a' - 'A');\n        }\n        else if\
    \ (c >= 'A' && c <= 'Z') {\n            c += ('A' - 'a');\n        }\n       \
    \ else if (c == 'a' || c == 'A') {\n            c = 'A';\n        }\n        else\
    \ if (c == 'e' || c == 'E') {\n            c = 'E';\n        }\n        else if\
    \ (c == 'i' || c == 'I') {\n            c = 'I';\n        }\n        else if (c\
    \ == 'o' || c == 'O') {\n            c = 'O';\n        }\n        else if (c ==\
    \ 'u' || c == 'U') {\n            c = 'U';\n        }\n        else if (c == 'y'\
    \ || c == 'Y') {\n            c = 'Y';\n        }\n        else if (c == 'h' ||\
    \ c == 'H') {\n            c = 'H';\n        }\n        else if (c == 'w' || c\
    \ == 'W') {\n            c = 'W';\n        }\n        else if (c == 'r' || c ==\
    \ 'R') {\n            c = 'R';\n        }\n        else if (c == 's' || c == 'S')\
    \ {\n            c = 'S';\n        }\n        else if (c == 'd' || c == 'D') {\n\
    \            c = 'D';\n        }\n        else if (c == 'f' || c == 'F') {\n \
    \           c = 'F';\n        }\n        else if (c == 'g' || c == 'G') {\n  \
    \          c = 'G';\n        }\n        else if (c == 'p' || c == 'P') {\n   \
    \         c = 'P';\n        }\n        else if (c == 'v' || c == 'V') {\n    \
    \        c = 'V';\n        }\n        else if (c == 'c' || c == 'C') {\n     \
    \       c = 'C';\n        }\n        else if (c == 'm' || c == 'M') {\n      \
    \      c = 'M';\n        }\n        else if (c == 'k' || c == 'K') {\n       \
    \     c = 'K';\n        }\n        else if (c == 'b' || c == 'B') {\n        \
    \    c = 'B';\n        }\n        else if (c == 'j' || c == 'J') {\n         \
    \   c = 'J';\n        }\n        else if (c == 'x' || c == 'X') {\n          \
    \  c = 'X';\n        }\n        else if (c == 'q' || c == 'Q') {\n           \
    \ c = 'Q';\n        }\n        else if (c == 'z' || c == 'Z') {\n            c\
    \ = 'Z';\n        }\n        else if (c == 't' || c == 'T') {\n            c =\
    \ 'T';\n        }\n        else if (c == 'n' || c == 'N') {\n            c = 'N';\n\
    \        }\n        else if (c == 'm' || c == 'M') {\n            c = 'M';\n \
    \       }\n        else if (c == 'l' || c == 'L') {\n", "    std::string ans =\
    \ \"\";\n    for (auto &c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.size() -\
    \ 2] = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.size()\
    \ - 2] = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.size()\
    \ - 2] = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.size()\
    \ - 2] = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.size()\
    \ - 2] = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.size()\
    \ - 2] = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.size()\
    \ - 2] = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.size()\
    \ - 2] = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.size()\
    \ - 2] = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.size()\
    \ - 2] = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {", "    std::string\
    \ ans = \"\";\n    for (auto &i : message) {\n        switch (i) {\n         \
    \   case 'a':\n                ans += \"A\";\n                break;\n       \
    \     case 'b':\n                ans += \"B\";\n                break;\n     \
    \       case 'c':\n                ans += \"C\";\n                break;\n   \
    \         case 'd':\n                ans += \"D\";\n                break;\n \
    \           case 'e':\n                ans += \"E\";\n                break;\n\
    \            case 'f':\n                ans += \"F\";\n                break;\n\
    \            case 'g':\n                ans += \"G\";\n                break;\n\
    \            case 'h':\n                ans += \"H\";\n                break;\n\
    \            case 'i':\n                ans += \"I\";\n                break;\n\
    \            case 'j':\n                ans += \"J\";\n                break;\n\
    \            case 'k':\n                ans += \"K\";\n                break;\n\
    \            case 'l':\n                ans += \"L\";\n                break;\n\
    \            case 'm':\n                ans += \"M\";\n                break;\n\
    \            case 'n':\n                ans += \"N\";\n                break;\n\
    \            case 'o':\n                ans += \"O\";\n                break;\n\
    \            case 'p':\n                ans += \"P\";\n                break;\n\
    \            case 'q':\n                ans += \"Q\";\n                break;\n\
    \            case 'r':\n                ans += \"R\";\n                break;\n\
    \            case 's':\n                ans += \"S\";\n                break;\n\
    \            case 't':\n                ans += \"T\";\n                break;\n\
    \            case 'u':\n                ans += \"U\";\n                break;\n\
    \            case 'v':\n                ans += \"V\";\n                break;\n\
    \            case 'w':\n                ans += \"W\";\n                break;\n\
    \            case 'x':\n                ans += \"X\";\n                break;\n\
    \            case 'y':\n                ans += \"Y\";\n                break;\n\
    \            case 'z':\n                ans += \"Z\";\n                break;\n\
    \            case 'A':\n                ans += \"a\";\n                break;\n\
    \            case 'B':\n                ans += \"b\";\n                break;\n\
    \            case 'C':\n                ans += \"c\";\n                break;\n\
    \            case 'D':\n                ans += \"d\";\n                break;\n\
    \            case 'E':\n                ans += \"e\";\n                break;\n\
    \            case 'F':\n                ans += \"f\";\n                break;\n\
    \            case 'G':\n                ans += \"g\";\n                break;\n\
    \            case 'H':\n                ans += \"h\";\n                break;\n\
    \            case 'I':\n                ans += \"i\";\n                break;\n\
    \            case 'J':\n                ans += \"j\";\n                break;\n\
    \            case 'K':\n                ans += \"k\";\n                break;\n\
    \            case 'L':\n                ans += \"l\";\n                break;\n\
    \            case 'M", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char\
    \ c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   for (char c : message) {\n        if ('a' <= c && c <= 'z') {\n          \
    \  ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U' || c == 'Y') {\n            ans += 'a';\n        } else {\n    \
    \        ans += 'A';\n        }\n    }\n    for (char c : message) {\n       \
    \ if ('a' <= c && c <= 'z') {\n            ans += c;\n        } else if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c == 'Y') {\n       \
    \     ans += 'a';\n        } else {\n            ans += 'A';\n        }\n    }\n\
    \    return ans;", "    std::string ans = \"\";\n    for (auto &c : message) {\n\
    \        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n       \
    \ } else {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n\
    \        if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            ans[ans.find(c)] = std::tolower(ans[ans.find(c)]);\n        }\n \
    \   }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n           \
    \ ans[ans.find(c)] = std::toupper(ans[ans.find(c)]);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)]\
    \ = std::tolower(ans[ans.find(c)]);\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    for (char c : message) {\n        ans += (tolower(c)\
    \ - 'a' + 1) % 26 + 'a';\n    }\n    for (char c : ans) {\n        ans += (tolower(c)\
    \ - 'a' + 2) % 26 + 'a';\n    }\n    return ans;", "    std::string encoded =\
    \ \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if (message[i]\
    \ >= 'a' && message[i] <= 'z') {\n            encoded += message[i];\n       \
    \ }\n        else if (message[i] >= 'A' && message[i] <= 'Z') {\n            encoded\
    \ += message[i];\n        }\n        else if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i]\
    \ == 'y') {\n            int index = message[i] - 'a';\n            int index2\
    \ = message[i + 2] - 'a';\n            encoded += message[index];\n          \
    \  encoded += message[index2];\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (char c : message) {\n        ans += (std::toupper(c) -\
    \ 'A' + 2) % 26 + 'A';\n    }\n    for (char c : ans) {\n        ans[ans.find(c)\
    \ - 2] = c;\n    }\n    return ans;", "    std::string encoded = \"\";\n    for\
    \ (char c : message) {\n        char newC = c;\n        if (c >= 'a' && c <= 'z')\
    \ {\n            newC = c + 2;\n        }\n        else if (c >= 'A' && c <= 'Z')\
    \ {\n            newC = c - 2;\n        }\n        else if (c >= '0' && c <= '9')\
    \ {\n            newC = c + 1;\n        }\n        encoded = encoded + newC;\n\
    \    }\n    return encoded;", "    std::string ans = \"\";\n    for (char c :\
    \ message) {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n\
    \    for (char c : ans) {\n        ans.replace(ans.find(c), 2, tolower(c));\n\
    \    }\n    for (char c : ans) {\n        ans.replace(ans.find(c), 1, toupper(c));\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &i : message)\
    \ {\n        switch (i) {\n        case 'a':\n            ans += \"A\";\n    \
    \        break;\n        case 'b':\n            ans += \"B\";\n            break;\n\
    \        case 'c':\n            ans += \"C\";\n            break;\n        case\
    \ 'd':\n            ans += \"D\";\n            break;\n        case 'e':\n   \
    \         ans += \"E\";\n            break;\n        case 'f':\n            ans\
    \ += \"F\";\n            break;\n        case 'g':\n            ans += \"G\";\n\
    \            break;\n        case 'h':\n            ans += \"H\";\n          \
    \  break;\n        case 'i':\n            ans += \"I\";\n            break;\n\
    \        case 'j':\n            ans += \"J\";\n            break;\n        case\
    \ 'k':\n            ans += \"K\";\n            break;\n        case 'l':\n   \
    \         ans += \"L\";\n            break;\n        case 'm':\n            ans\
    \ += \"M\";\n            break;\n        case 'n':\n            ans += \"N\";\n\
    \            break;\n        case 'o':\n            ans += \"O\";\n          \
    \  break;\n        case 'p':\n            ans += \"P\";\n            break;\n\
    \        case 'q':\n            ans += \"Q\";\n            break;\n        case\
    \ 'r':\n            ans += \"R\";\n            break;\n        case 's':\n   \
    \         ans += \"S\";\n            break;\n        case 't':\n            ans\
    \ += \"T\";\n            break;\n        case 'u':\n            ans += \"U\";\n\
    \            break;\n        case 'v':\n            ans += \"V\";\n          \
    \  break;\n        case 'w':\n            ans += \"W\";\n            break;\n\
    \        case 'x':\n            ans += \"X\";\n            break;\n        case\
    \ 'y':\n            ans += \"Y\";\n            break;\n        case 'z':\n   \
    \         ans += \"Z\";\n            break;\n        case 'A':\n            ans\
    \ += \"a\";\n            break;\n        case 'B':\n            ans += \"b\";\n\
    \            break;\n        case 'C':\n            ans += \"c\";\n          \
    \  break;\n        case 'D':\n            ans += \"d\";\n            break;\n\
    \        case 'E':\n            ans += \"e\";\n            break;\n        case\
    \ 'F':\n            ans += \"f\";\n            break;\n        case 'G':\n   \
    \         ans += \"g\";\n            break;\n        case 'H':\n            ans\
    \ += \"h\";\n            break;\n        case 'I':\n            ans += \"i\";\n\
    \            break;\n        case 'J':\n            ans += \"j\";\n          \
    \  break;\n        case 'K':\n            ans += \"k\";\n            break;\n\
    \        case 'L':\n            ans += \"l\";\n            break;\n        case\
    \ 'M", "    std::string ans = \"\";\n    for (auto &c : message) {\n        ans\
    \ += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto &c : ans) {\n\
    \        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n   \
    \         c = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n     \
    \   if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n        \
    \    c = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if\
    \ (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c\
    \ = tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            c = toupper(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        if ('a' <= c && c <= 'z') {\n            ans += c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans += 'A';\n        } else if (c == 'O' || c == 'U') {\n   \
    \         ans += 'O';\n        } else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += 'a';\n        } else if (c == 'o'\
    \ || c == 'u') {\n            ans += 'o';\n        }\n    }\n    for (auto &c\
    \ : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[ans.find(c)] = 'A';\n        } else if (c == 'O' ||\
    \ c == 'U') {\n            ans[ans.find(c)] = 'O';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)]\
    \ = 'a';\n        } else if (c == 'o' || c == 'u') {\n            ans[ans.find(c)]\
    \ = 'o';\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         ans += c;\n        }\n        else {\n            ans += 'A' + (c -\
    \ 'a');\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n    \
    \    char c = ans[i];\n        if (c == 'A') {\n            ans[i] = 'a';\n  \
    \      }\n        else if (c == 'a') {\n            ans[i] = 'A';\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto\
    \ &c : ans) {\n        if (std::find(message.begin(), message.end(), c) == message.end())\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    if (std::find(message.begin(), message.end(), c) == message.end()) {\n  \
    \          ans += c;\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for (char c : message) {\n        ans += (c >= 'a' && c <= 'z')\
    \ ? c : ((c >= 'A' && c <= 'Z') ? c : ((c >= '0' && c <= '9') ? c : 'A'));\n \
    \   }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'A')\
    \ {\n            ans[i] = 'a';\n        } else if (ans[i] == 'a') {\n        \
    \    ans[i] = 'A';\n        } else if (ans[i] == '0') {\n            ans[i] =\
    \ '0';\n        } else if (ans[i] == '9') {\n            ans[i] = '9';\n     \
    \   } else if (ans[i] == 'Z') {\n            ans[i] = 'z';\n        } else if\
    \ (ans[i] == 'z') {\n            ans[i] = 'Z';\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'A') {\n            ans[i]\
    \ = 'a';\n        } else if (ans[i] == 'a') {\n            ans[i] = 'A';\n   \
    \     } else if (ans[i] == '0') {\n            ans[i] = '0';\n        } else if\
    \ (ans[i] == '9') {\n            ans[i] = '9';\n        } else if (ans[i] == 'Z')\
    \ {\n            ans[i] = 'z';\n        } else if (ans[i] == 'z') {\n        \
    \    ans[i] = 'Z';\n        }\n    }\n    for (int i = 0; i < ans.size(); i++)\
    \ {\n        if (ans[i] == 'a') {\n            ans[i] = 'A';\n        } else if\
    \ (ans[i] == 'A') {\n            ans[i] = 'a';\n        } else if (ans[i] == '0')\
    \ {\n            ans[i] = '0';\n        } else if (ans[i] == '9') {\n        \
    \    ans[i] = '9';\n        } else if (ans[i] == 'Z') {\n            ans[i] =\
    \ 'z';\n        } else if (ans[i] == 'z') {\n            ans[i] = 'Z';\n     \
    \   }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (ans[i] ==\
    \ 'A') {\n            ans[i] = 'a';\n        } else if (ans[i] == 'a') {\n   \
    \         ans[i] = 'A';\n        } else if (ans[i] == '0') {\n            ans[i]\
    \ = '0';\n        } else if (ans[i] == '9') {\n            ans[i] = '9';\n   \
    \     } else if (ans[i] == 'Z') {\n            ans[i] = 'z';\n        } else if\
    \ (ans[i] == 'z') {\n            ans[i] = 'Z';\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        if (ans[i] == 'a') {\n            ans[i]\
    \ = 'A';\n        } else if (ans[i] == 'A') {\n            ans[i] = 'a';\n   \
    \     } else if (ans[i] == '0') {\n            ans[i] = '0';\n        } else if\
    \ (ans[i] == '9') {\n            ans[i] = '9';\n        } else if (ans[i] == 'Z')\
    \ {\n            ans[i] = '", "    std::string ans = \"\";\n    for(int i = 0;\
    \ i < message.length(); i++) {\n        char c = message[i];\n        ans += c;\n\
    \    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if(c >= 'a' && c <= 'z') {\n            ans[i] = c + 2;\n        }\n\
    \        else if(c >= 'A' && c <= 'Z') {\n            ans[i] = c + 2;\n      \
    \  }\n        else if(c >= '0' && c <= '9') {\n            ans[i] = c + 1;\n \
    \       }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n  \
    \  }\n    for (int i = 0; i < ans.size(); i++) {\n        if (isupper(ans[i]))\
    \ {\n            ans[i] = tolower(ans[i]);\n        }\n    }\n    for (int i =\
    \ 0; i < ans.size(); i++) {\n        if (isupper(ans[i]) && isupper(ans[i + 1]))\
    \ {\n            ans[i] = tolower(ans[i + 1]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        if (isupper(ans[i]) && islower(ans[i\
    \ + 1])) {\n            ans[i] = toupper(ans[i + 1]);\n        }\n    }\n    for\
    \ (int i = 0; i < ans.size(); i++) {\n        if (isupper(ans[i]) && islower(ans[i\
    \ + 1]) && isupper(ans[i + 2])) {\n            ans[i] = toupper(ans[i + 2]);\n\
    \        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (isupper(ans[i])\
    \ && islower(ans[i + 1]) && islower(ans[i + 2])) {\n            ans[i] = toupper(ans[i\
    \ + 2]);\n        }\n    }\n    for (int i = 0; i < ans.size(); i++) {\n     \
    \   if (isupper(ans[i]) && islower(ans[i + 1]) && isupper(ans[i + 2]) && isupper(ans[i\
    \ + 3])) {\n            ans[i] = toupper(ans[i + 3]);\n        }\n    }\n    for\
    \ (int i = 0; i < ans.size(); i++) {\n        if (isupper(ans[i]) && islower(ans[i\
    \ + 1]) && islower(ans[i + 2]) && isupper(ans[i + 3]) && islower(ans[i + 4]))\
    \ {\n            ans[i] = toupper(ans[i + 4]);\n        }\n    }\n    for (int\
    \ i = 0; i < ans.size(); i++) {\n        if (isupper(ans[i]) && islower(ans[i\
    \ + 1]) && islower(ans[i + 2]) && islower(ans[i + 3]) && isupper(ans[i + 4]) &&\
    \ islower(ans[i + 5])) {\n            ans[i] = toupper(ans[i + 5]);\n        }\n\
    \    }\n    for (int i = 0; i < ans.size(); i++) {\n        if (isupper(ans[i])\
    \ && islower(ans[i + 1]) && islower(ans[i + 2]) && islower(ans[i + 3]) && islower(ans[i\
    \ + 4]) && islower(ans[i + 5]) && isupper(ans[i + 6])) {\n            ans[i] =\
    \ toupper(ans[i + 6]);\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        if (isupper(ans[i]) && islower(ans[i + 1]) && islower(ans[i\
    \ + 2]) && islower(ans[i + 3]) && islower(ans[i + 4]) && islower(ans[i + 5]) &&\
    \ islower(ans[i + 6]) && isupper(ans[i", "    std::string ans = \"\";\n    for\
    \ (auto &c : message) {\n        ans += (char) toupper(c);\n    }\n    for (auto\
    \ &c : ans) {\n        if (c == 'A') {\n            ans += 'B';\n        } else\
    \ if (c == 'E') {\n            ans += 'F';\n        } else if (c == 'I') {\n \
    \           ans += 'J';\n        } else if (c == 'O') {\n            ans += 'M';\n\
    \        } else if (c == 'U') {\n            ans += 'N';\n        } else if (c\
    \ == 'Y') {\n            ans += 'P';\n        } else if (c == 'a') {\n       \
    \     ans += 'b';\n        } else if (c == 'e') {\n            ans += 'f';\n \
    \       } else if (c == 'i') {\n            ans += 'j';\n        } else if (c\
    \ == 'o') {\n            ans += 'm';\n        } else if (c == 'u') {\n       \
    \     ans += 'n';\n        } else if (c == 'y') {\n            ans += 'p';\n \
    \       }\n    }\n    for (auto &c : ans) {\n        if (c == 'B') {\n       \
    \     ans += 'A';\n        } else if (c == 'F') {\n            ans += 'E';\n \
    \       } else if (c == 'J') {\n            ans += 'I';\n        } else if (c\
    \ == 'M') {\n            ans += 'O';\n        } else if (c == 'N') {\n       \
    \     ans += 'U';\n        } else if (c == 'P') {\n            ans += 'Y';\n \
    \       } else if (c == 'a') {\n            ans += 'e';\n        } else if (c\
    \ == 'e') {\n            ans += 'a';\n        } else if (c == 'i') {\n       \
    \     ans += 'i';\n        } else if (c == 'o') {\n            ans += 'o';\n \
    \       } else if (c == 'u') {\n            ans += 'u';\n        } else if (c\
    \ == 'y') {\n            ans += 'y';\n        }\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        if (message[i] >= 'a' && message[i] <= 'z') {\n            ans += message[i];\n\
    \        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n            ans\
    \ += message[i];\n        } else if (message[i] >= '0' && message[i] <= '9') {\n\
    \            ans += message[i];\n        } else if (message[i] == '.' || message[i]\
    \ == '!' || message[i] == '?') {\n            ans += message[i];\n        } else\
    \ if (message[i] == '-' || message[i] == '_' || message[i] == '/' || message[i]\
    \ == '\\\\') {\n            ans += message[i];\n        } else if (message[i]\
    \ == '(' || message[i] == ')' || message[i] == '[' || message[i] == ']' || message[i]\
    \ == '{' || message[i] == '}') {\n            ans += message[i];\n        } else\
    \ if (message[i] == '$' || message[i] == '%' || message[i] == '&' || message[i]\
    \ == '*' || message[i] == '+' || message[i] == '-' || message[i] == '.' || message[i]\
    \ == '/' || message[i] == '\\\\') {\n            ans += message[i];\n        }\
    \ else if (message[i] == '<' || message[i] == '>' || message[i] == '|' || message[i]\
    \ == '~' || message[i] == '^' || message[i] == '~' || message[i] == '`' || message[i]\
    \ == '\"' || message[i] == '@' || message[i] == '#' || message[i] == '$' || message[i]\
    \ == '%' || message[i] == '&' || message[i] == '*' || message[i] == '+' || message[i]\
    \ == '-' || message[i] == '.' || message[i] == '/' || message[i] == '\\\\') {\n\
    \            ans += message[i];\n        } else if (message[i] == 'a' || message[i]\
    \ == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u') {\n \
    \           ans += message[i];\n        } else if (message[i] == 'A' || message[i]\
    \ == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U') {\n \
    \           ans += message[i];\n        } else if (message[i] == '0' || message[i]\
    \ == '1' || message[i] == '2' || message[i] == '3' || message[i] == '4' || message[i]\
    \ == '5' || message[i] == '6' || message[i] == '7' || message[i] == '8' || message[i]\
    \ == '9') {\n            ans += message[i];\n        } else if (message[i] ==\
    \ '!' || message[i] == '?') {\n            ans += message[i];\n        } else\
    \ if (message[i] == '.' || message[i] == '-' || message[i] == '_' || message[i]\
    \ == '/' || message[i] == '\\\\') {\n            ans += message[i];\n        }\
    \ else if (message[i] == '(' || message[i] == ')' || message[i] == '[' || message[i]\
    \ == ']' || message[i]", "    std::string encoded = \"\";\n    for (int i = 0;\
    \ i < message.length(); i++) {\n        char c = message[i];\n        if (c >=\
    \ 'a' && c <= 'z') {\n            encoded += c;\n        } else if (c >= 'A' &&\
    \ c <= 'Z') {\n            encoded += c;\n        } else if (c >= '0' && c <=\
    \ '9') {\n            encoded += c;\n        } else if (c == '.') {\n        \
    \    encoded += c;\n        } else if (c == '!') {\n            encoded += c;\n\
    \        } else if (c == '?') {\n            encoded += c;\n        } else if\
    \ (c == '-') {\n            encoded += c;\n        } else if (c == '_') {\n  \
    \          encoded += c;\n        } else if (c == '*') {\n            encoded\
    \ += c;\n        } else if (c == '(') {\n            encoded += c;\n        }\
    \ else if (c == ')') {\n            encoded += c;\n        } else if (c == '/')\
    \ {\n            encoded += c;\n        } else if (c == '\\\\') {\n          \
    \  encoded += c;\n        } else if (c == '|') {\n            encoded += c;\n\
    \        } else if (c == '[') {\n            encoded += c;\n        } else if\
    \ (c == ']') {\n            encoded += c;\n        } else if (c == '{') {\n  \
    \          encoded += c;\n        } else if (c == '}') {\n            encoded\
    \ += c;\n        } else if (c == '<') {\n            encoded += c;\n        }\
    \ else if (c == '>') {\n            encoded += c;\n        } else if (c == '%')\
    \ {\n            encoded += c;\n        } else if (c == '&') {\n            encoded\
    \ += c;\n        } else if (c == '=') {\n            encoded += c;\n        }\
    \ else if (c == '+') {\n            encoded += c;\n        } else if (c == '!')\
    \ {\n            encoded += c;\n        } else if (c == '~') {\n            encoded\
    \ += c;\n        } else if (c == '@') {\n            encoded += c;\n        }\
    \ else if (c == '^') {\n            encoded += c;\n        } else if (c == '`')\
    \ {\n            encoded += c;\n        } else if (c == '|') {\n            encoded\
    \ += c;\n        } else if (c == '~') {\n            encoded += c;\n        }\
    \ else if (c == '`') {\n            encoded += c;\n        } else if (c == '~')\
    \ {\n            encoded += c;\n        } else if (c == '`') {\n            encoded\
    \ += c;\n        } else if (c == '~') {\n            encoded += c;\n        }\
    \ else if (c == '`') {\n            encoded += c;\n        } else if (c == '~')\
    \ {\n            encoded += c;\n        } else if (c == '`') {\n            encoded\
    \ += c;\n        } else if (c == '~') {\n            encoded += c;\n        }\
    \ else if (c == '`') {\n            encoded += c;\n        } else if (c == '~')\
    \ {\n            encoded += c;\n        } else if (c == '`') {\n            encoded\
    \ += c;\n        } else if (c == '~') {\n            encoded += c;\n        }\
    \ else if (c == '`", "    std::string encodedMessage = \"\";\n    for (char c\
    \ : message) {\n        encodedMessage += toupper(c);\n    }\n    for (char c\
    \ : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            encodedMessage += tolower(c);\n        }\n    }\n   \
    \ for (char c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            encodedMessage += toupper(c);\n        }\n\
    \    }\n    for (char c : message) {\n        if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            encodedMessage += tolower(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += toupper(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += tolower(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += toupper(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += tolower(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += toupper(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += tolower(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += toupper(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += tolower(c);\n\
    \        }\n    }\n    for (char c : message) {\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encodedMessage += toupper(c);\n\
    \        }", "    std::string ans = \"\";\n    for (auto &c : message) {\n   \
    \     switch (c) {\n        case 'a':\n            ans += \"A\";\n           \
    \ break;\n        case 'b':\n            ans += \"B\";\n            break;\n \
    \       case 'c':\n            ans += \"C\";\n            break;\n        case\
    \ 'd':\n            ans += \"D\";\n            break;\n        case 'e':\n   \
    \         ans += \"E\";\n            break;\n        case 'f':\n            ans\
    \ += \"F\";\n            break;\n        case 'g':\n            ans += \"G\";\n\
    \            break;\n        case 'h':\n            ans += \"H\";\n          \
    \  break;\n        case 'i':\n            ans += \"I\";\n            break;\n\
    \        case 'j':\n            ans += \"J\";\n            break;\n        case\
    \ 'k':\n            ans += \"K\";\n            break;\n        case 'l':\n   \
    \         ans += \"L\";\n            break;\n        case 'm':\n            ans\
    \ += \"M\";\n            break;\n        case 'n':\n            ans += \"N\";\n\
    \            break;\n        case 'o':\n            ans += \"O\";\n          \
    \  break;\n        case 'p':\n            ans += \"P\";\n            break;\n\
    \        case 'q':\n            ans += \"Q\";\n            break;\n        case\
    \ 'r':\n            ans += \"R\";\n            break;\n        case 's':\n   \
    \         ans += \"S\";\n            break;\n        case 't':\n            ans\
    \ += \"T\";\n            break;\n        case 'u':\n            ans += \"U\";\n\
    \            break;\n        case 'v':\n            ans += \"V\";\n          \
    \  break;\n        case 'w':\n            ans += \"W\";\n            break;\n\
    \        case 'x':\n            ans += \"X\";\n            break;\n        case\
    \ 'y':\n            ans += \"Y\";\n            break;\n        case 'z':\n   \
    \         ans += \"Z\";\n            break;\n        case 'A':\n            ans\
    \ += \"a\";\n            break;\n        case 'B':\n            ans += \"b\";\n\
    \            break;\n        case 'C':\n            ans += \"c\";\n          \
    \  break;\n        case 'D':\n            ans += \"d\";\n            break;\n\
    \        case 'E':\n            ans += \"e\";\n            break;\n        case\
    \ 'F':\n            ans += \"f\";\n            break;\n        case 'G':\n   \
    \         ans += \"g\";\n            break;\n        case 'H':\n            ans\
    \ += \"h\";\n            break;\n        case 'I':\n            ans += \"i\";\n\
    \            break;\n        case 'J':\n            ans += \"j\";\n          \
    \  break;\n        case 'K':\n            ans += \"k\";\n            break;\n\
    \        case 'L':\n            ans += \"l\";\n            break;\n        case\
    \ 'M", "    std::string encoded = \"\";\n    for (int i = 0; i < message.length();\
    \ i++) {\n        char c = message[i];\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded += c;\n        } else {\n            int index = c - 'A';\n\
    \            char a = encoded.at(index);\n            char b = encoded.at(index\
    \ + 1);\n            char c = encoded.at(index + 2);\n            char d = encoded.at(index\
    \ + 3);\n            char e = encoded.at(index + 4);\n            char f = encoded.at(index\
    \ + 5);\n            char g = encoded.at(index + 6);\n            char h = encoded.at(index\
    \ + 7);\n            char i = encoded.at(index + 8);\n            char j = encoded.at(index\
    \ + 9);\n            char k = encoded.at(index + 10);\n            char l = encoded.at(index\
    \ + 11);\n            char m = encoded.at(index + 12);\n            char n = encoded.at(index\
    \ + 13);\n            char o = encoded.at(index + 14);\n            char p = encoded.at(index\
    \ + 15);\n            char q = encoded.at(index + 16);\n            char r = encoded.at(index\
    \ + 17);\n            char s = encoded.at(index + 18);\n            char t = encoded.at(index\
    \ + 19);\n            char u = encoded.at(index + 20);\n            char v = encoded.at(index\
    \ + 21);\n            char w = encoded.at(index + 22);\n            char x = encoded.at(index\
    \ + 23);\n            char y = encoded.at(index + 24);\n            char z = encoded.at(index\
    \ + 25);\n            char A = encoded.at(index + 26);\n            char B = encoded.at(index\
    \ + 27);\n            char C = encoded.at(index + 28);\n            char D = encoded.at(index\
    \ + 29);\n            char E = encoded.at(index + 30);\n            char F = encoded.at(index\
    \ + 31);\n            char G = encoded.at(index + 32);\n            char H = encoded.at(index\
    \ + 33);\n            char I = encoded.at(index + 34);\n            char J = encoded.at(index\
    \ + 35);\n            char K = encoded.at(index + 36);\n            char L = encoded.at(index\
    \ + 37);\n            char M = encoded.at(index + 38);\n            char N = encoded.at(index\
    \ + 39);\n            char O = encoded.at(index + 40);\n            char P = encoded.at(index\
    \ + 41);\n            char Q = encoded.at(index + 42);\n            char R = encoded.at(index\
    \ + 43);\n            char S = encoded.at(index + 44);\n            char T = encoded.at(index\
    \ + 45);\n            char U = encoded.at(index + 46);\n            char V = encoded.at(index\
    \ + 47", "    std::string ans = \"\";\n    for (char c : message) {\n        ans\
    \ += (isalpha(c) ? toupper(c) : c);\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        char c = ans[i];\n        if (isalpha(c)) {\n            ans[i]\
    \ = toupper(ans[i + 1]);\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        char c = ans[i];\n        if (isalpha(c)) {\n            ans[i]\
    \ = tolower(ans[i + 1]);\n        }\n    }\n    for (int i = 0; i < ans.size();\
    \ i++) {\n        char c = ans[i];\n        if (isalpha(c)) {\n            ans[i]\
    \ = toupper(ans[i + 1]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char\
    \ c = message[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            ans += c;\n        } else {\n            ans += 'A'\
    \ + (c - 'a');\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n\
    \        if (ans[i] != 'A') {\n            ans[i] = ans[i] - 'a';\n        }\n\
    \    }\n    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'A')\
    \ {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        if (ans[i] == 'a') {\n            ans[i] = 'A';\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c: message)\
    \ {\n        ans += (std::tolower(c) == c) ? std::toupper(c) : std::tolower(c);\n\
    \    }\n    for (auto &c: ans) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c: ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = std::tolower(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans\
    \ += c;\n        }\n        else if (c == 'A' || c == 'E' || c == 'I' || c ==\
    \ 'O' || c == 'U') {\n            ans += c;\n        }\n        else if (c ==\
    \ 'a' || c == 'A') {\n            ans += 'A';\n        }\n        else if (c ==\
    \ 'e' || c == 'E') {\n            ans += 'E';\n        }\n        else if (c ==\
    \ 'i' || c == 'I') {\n            ans += 'I';\n        }\n        else if (c ==\
    \ 'o' || c == 'O') {\n            ans += 'O';\n        }\n        else if (c ==\
    \ 'u' || c == 'U') {\n            ans += 'U';\n        }\n        else if (c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'a';\n      \
    \  }\n        else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans += 'A';\n        }\n        else if (c == 'a' || c == 'A')\
    \ {\n            ans += 'a';\n        }\n        else if (c == 'e' || c == 'E')\
    \ {\n            ans += 'e';\n        }\n        else if (c == 'i' || c == 'I')\
    \ {\n            ans += 'i';\n        }\n        else if (c == 'o' || c == 'O')\
    \ {\n            ans += 'o';\n        }\n        else if (c == 'u' || c == 'U')\
    \ {\n            ans += 'u';\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (std::toupper(c)\
    \ - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c : ans) {\n        ans.replace(ans.find(c),\
    \ 1, \"K\");\n        ans.replace(ans.find(c), 2, \"S\");\n        ans.replace(ans.find(c),\
    \ 3, \"C\");\n        ans.replace(ans.find(c), 4, \"G\");\n        ans.replace(ans.find(c),\
    \ 5, \"H\");\n        ans.replace(ans.find(c), 6, \"T\");\n        ans.replace(ans.find(c),\
    \ 7, \"M\");\n        ans.replace(ans.find(c), 8, \"P\");\n        ans.replace(ans.find(c),\
    \ 9, \"O\");\n        ans.replace(ans.find(c), 10, \"N\");\n        ans.replace(ans.find(c),\
    \ 11, \"R\");\n        ans.replace(ans.find(c), 12, \"F\");\n        ans.replace(ans.find(c),\
    \ 13, \"V\");\n        ans.replace(ans.find(c), 14, \"A\");\n        ans.replace(ans.find(c),\
    \ 15, \"E\");\n        ans.replace(ans.find(c), 16, \"D\");\n        ans.replace(ans.find(c),\
    \ 17, \"G\");\n        ans.replace(ans.find(c), 18, \"B\");\n        ans.replace(ans.find(c),\
    \ 19, \"H\");\n        ans.replace(ans.find(c), 20, \"J\");\n        ans.replace(ans.find(c),\
    \ 21, \"K\");\n        ans.replace(ans.find(c), 22, \"L\");\n        ans.replace(ans.find(c),\
    \ 23, \"M\");\n        ans.replace(ans.find(c), 24, \"N\");\n        ans.replace(ans.find(c),\
    \ 25, \"P\");\n        ans.replace(ans.find(c), 26, \"Q\");\n        ans.replace(ans.find(c),\
    \ 27, \"R\");\n        ans.replace(ans.find(c), 28, \"S\");\n        ans.replace(ans.find(c),\
    \ 29, \"T\");\n        ans.replace(ans.find(c), 30, \"U\");\n        ans.replace(ans.find(c),\
    \ 31, \"V\");\n        ans.replace(ans.find(c), 32, \"W\");\n        ans.replace(ans.find(c),\
    \ 33, \"X\");\n        ans.replace(ans.find(c), 34, \"Y\");\n        ans.replace(ans.find(c),\
    \ 35, \"Z\");\n        ans.replace(ans.find(c), 36, \"a\");\n        ans.replace(an",
  "    std::string ans = \"\";\n    for (char c : message) {\n        ans += (std::tolower(c)\
    \ == c) ? std::toupper(c) : c;\n    }\n    for (int i = 0; i < ans.size(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans[i] = 'A';\n        }\n        else\
    \ if (c == 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g') {\n          \
    \  ans[i] = 'B';\n        }\n        else if (c == 'h' || c == 'j' || c == 'k'\
    \ || c == 'l' || c == 'm') {\n            ans[i] = 'C';\n        }\n        else\
    \ if (c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's') {\n          \
    \  ans[i] = 'D';\n        }\n        else if (c == 't' || c == 'v' || c == 'w'\
    \ || c == 'x' || c == 'y') {\n            ans[i] = 'E';\n        }\n        else\
    \ if (c == 'z' || c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' ||\
    \ c == 'F' || c == 'G') {\n            ans[i] = 'F';\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (auto &c : message) {\n       \
    \ char temp = c;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A' +\
    \ 1;\n        ans += temp;\n    }\n    return ans;", "    std::string encoded\
    \ = \"\";\n    for (auto &c: message) {\n        switch (c) {\n            case\
    \ 'a':\n                encoded += \"A\";\n                break;\n          \
    \  case 'b':\n                encoded += \"B\";\n                break;\n    \
    \        case 'c':\n                encoded += \"C\";\n                break;\n\
    \            case 'd':\n                encoded += \"D\";\n                break;\n\
    \            case 'e':\n                encoded += \"E\";\n                break;\n\
    \            case 'f':\n                encoded += \"F\";\n                break;\n\
    \            case 'g':\n                encoded += \"G\";\n                break;\n\
    \            case 'h':\n                encoded += \"H\";\n                break;\n\
    \            case 'i':\n                encoded += \"I\";\n                break;\n\
    \            case 'j':\n                encoded += \"J\";\n                break;\n\
    \            case 'k':\n                encoded += \"K\";\n                break;\n\
    \            case 'l':\n                encoded += \"L\";\n                break;\n\
    \            case 'm':\n                encoded += \"M\";\n                break;\n\
    \            case 'n':\n                encoded += \"N\";\n                break;\n\
    \            case 'o':\n                encoded += \"O\";\n                break;\n\
    \            case 'p':\n                encoded += \"P\";\n                break;\n\
    \            case 'q':\n                encoded += \"Q\";\n                break;\n\
    \            case 'r':\n                encoded += \"R\";\n                break;\n\
    \            case 's':\n                encoded += \"S\";\n                break;\n\
    \            case 't':\n                encoded += \"T\";\n                break;\n\
    \            case 'u':\n                encoded += \"U\";\n                break;\n\
    \            case 'v':\n                encoded += \"V\";\n                break;\n\
    \            case 'w':\n                encoded += \"W\";\n                break;\n\
    \            case 'x':\n                encoded += \"X\";\n                break;\n\
    \            case 'y':\n                encoded += \"Y\";\n                break;\n\
    \            case 'z':\n                encoded += \"Z\";\n                break;\n\
    \            case 'A':\n                encoded += \"a\";\n                break;\n\
    \            case 'B':\n                encoded += \"b\";\n                break;\n\
    \            case 'C':\n                encoded += \"c\";\n                break;\n\
    \            case 'D':\n                encoded += \"d\";\n                break;\n\
    \            case 'E':\n                encoded += \"e\";\n                break;\n\
    \            case 'F':\n                encoded += \"f\";\n                break;\n\
    \            case 'G':\n                encoded += \"g\";\n                break;\n\
    \            case 'H':\n                encoded += \"h\";\n                break;\n\
    \            case 'I':\n                encoded += \"i\";\n                break;\n\
    \            case 'J':\n                encoded += \"j\";\n                break;\n\
    \            case 'K':\n                encoded += \"k\";\n                break;\n\
    \            case 'L':\n                encoded += \"l\";\n                break;\n\
    \            case 'M':\n                encoded += \"m\";\n                break;\n\
    \            case 'N':\n                encoded += \"n\";\n                break;\n\
    \            case 'O':\n                encoded += \"o\";\n                break;\n\
    \            case 'P':\n                ", "    std::string ans = \"\";\n    for\
    \ (auto &c : message) {\n        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n\
    \        } else {\n            ans += c;\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            ans[ans.find(c)] = std::tolower(ans[ans.find(c)]);\n        }\n \
    \   }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n           \
    \ ans[ans.find(c)] = std::toupper(ans[ans.find(c)]);\n        }\n    }\n    for\
    \ (auto &c : ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)]\
    \ = std::tolower(ans[ans.find(c)]);\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    for (auto &c : message) {\n        ans += (std::tolower(c)\
    \ == c) ? std::toupper(c) : c;\n    }\n    for (auto &c : ans) {\n        if (std::tolower(c)\
    \ == 'a' || std::tolower(c) == 'e' || std::tolower(c) == 'i' || std::tolower(c)\
    \ == 'o' || std::tolower(c) == 'u') {\n            ans[ans.find(c) + 2] = std::tolower(ans[ans.find(c)\
    \ + 2]);\n        }\n    }\n    for (auto &c : ans) {\n        if (std::tolower(c)\
    \ == 'a' || std::tolower(c) == 'e' || std::tolower(c) == 'i' || std::tolower(c)\
    \ == 'o' || std::tolower(c) == 'u') {\n            ans[ans.find(c) + 2] = std::toupper(ans[ans.find(c)\
    \ + 2]);\n        }\n    }\n    return ans;", "    std::string encoded = \"\"\
    ;\n    for (auto &c : message) {\n        auto pos = find_if(c, end('a')) - 2;\n\
    \        if (pos == std::string::npos) {\n            pos = find_if(c, end('z'))\
    \ - 2;\n        }\n        if (pos == std::string::npos) {\n            pos =\
    \ find_if(c, end('A')) - 2;\n        }\n        if (pos == std::string::npos)\
    \ {\n            pos = find_if(c, end('Z')) - 2;\n        }\n        if (pos ==\
    \ std::string::npos) {\n            pos = find_if(c, end('a')) - 1;\n        }\n\
    \        if (pos == std::string::npos) {\n            pos = find_if(c, end('z'))\
    \ - 1;\n        }\n        if (pos == std::string::npos) {\n            pos =\
    \ find_if(c, end('A')) - 1;\n        }\n        if (pos == std::string::npos)\
    \ {\n            pos = find_if(c, end('Z')) - 1;\n        }\n        if (pos ==\
    \ std::string::npos) {\n            pos = find_if(c, end('a')) + 1;\n        }\n\
    \        if (pos == std::string::npos) {\n            pos = find_if(c, end('z'))\
    \ + 1;\n        }\n        if (pos == std::string::npos) {\n            pos =\
    \ find_if(c, end('A')) + 1;\n        }\n        if (pos == std::string::npos)\
    \ {\n            pos = find_if(c, end('Z')) + 1;\n        }\n        encoded =\
    \ encoded + c;\n        encoded = encoded + toupper(static_cast<char>(pos));\n\
    \    }\n    return encoded;", "    std::string encoded = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        char c = message[i];\n        char\
    \ a = c;\n        char b = c;\n        char d = c;\n        char e = c;\n    \
    \    char f = c;\n        char g = c;\n        char h = c;\n        char i = c;\n\
    \        char j = c;\n        char k = c;\n        char l = c;\n        char m\
    \ = c;\n        char n = c;\n        char o = c;\n        char p = c;\n      \
    \  char q = c;\n        char r = c;\n        char s = c;\n        char t = c;\n\
    \        char u = c;\n        char v = c;\n        char w = c;\n        char x\
    \ = c;\n        char y = c;\n        char z = c;\n        char A = c;\n      \
    \  char B = c;\n        char C = c;\n        char D = c;\n        char E = c;\n\
    \        char F = c;\n        char G = c;\n        char H = c;\n        char I\
    \ = c;\n        char J = c;\n        char K = c;\n        char L = c;\n      \
    \  char M = c;\n        char N = c;\n        char O = c;\n        char P = c;\n\
    \        char Q = c;\n        char R = c;\n        char S = c;\n        char T\
    \ = c;\n        char U = c;\n        char V = c;\n        char W = c;\n      \
    \  char X = c;\n        char Y = c;\n        char Z = c;\n        char aA = c;\n\
    \        char aB = c;\n        char aC = c;\n        char aD = c;\n        char\
    \ aE = c;\n        char aF = c;\n        char aG = c;\n        char aH = c;\n\
    \        char aI = c;\n        char aJ = c;\n        char aK = c;\n        char\
    \ aL = c;\n        char aM = c;\n        char aN = c;\n        char aO = c;\n\
    \        char aP = c;\n        char aQ = c;\n        char aR = c;\n        char\
    \ aS = c;\n        char aT = c;\n        char aU = c;\n        char aV = c;\n\
    \        char aW = c;\n        char aX = c;\n        char aY = c;\n        char\
    \ aZ = c;\n        char bA = c;\n        char bB = c;\n        char bC = c;\n\
    \        char bD = c;\n        char bE = c;\n        char bF = c;\n        char\
    \ bG = c;\n        char bH = c;\n        char bI = c;\n        char bJ = c;",
  "    std::string encoded = \"\";\n    for (auto &c : message) {\n        switch\
    \ (c) {\n            case 'a':\n                encoded += \"A\";\n          \
    \      break;\n            case 'b':\n                encoded += \"B\";\n    \
    \            break;\n            case 'c':\n                encoded += \"C\";\n\
    \                break;\n            case 'd':\n                encoded += \"\
    D\";\n                break;\n            case 'e':\n                encoded +=\
    \ \"E\";\n                break;\n            case 'f':\n                encoded\
    \ += \"F\";\n                break;\n            case 'g':\n                encoded\
    \ += \"G\";\n                break;\n            case 'h':\n                encoded\
    \ += \"H\";\n                break;\n            case 'i':\n                encoded\
    \ += \"I\";\n                break;\n            case 'j':\n                encoded\
    \ += \"J\";\n                break;\n            case 'k':\n                encoded\
    \ += \"K\";\n                break;\n            case 'l':\n                encoded\
    \ += \"L\";\n                break;\n            case 'm':\n                encoded\
    \ += \"M\";\n                break;\n            case 'n':\n                encoded\
    \ += \"N\";\n                break;\n            case 'o':\n                encoded\
    \ += \"O\";\n                break;\n            case 'p':\n                encoded\
    \ += \"P\";\n                break;\n            case 'q':\n                encoded\
    \ += \"Q\";\n                break;\n            case 'r':\n                encoded\
    \ += \"R\";\n                break;\n            case 's':\n                encoded\
    \ += \"S\";\n                break;\n            case 't':\n                encoded\
    \ += \"T\";\n                break;\n            case 'u':\n                encoded\
    \ += \"U\";\n                break;\n            case 'v':\n                encoded\
    \ += \"V\";\n                break;\n            case 'w':\n                encoded\
    \ += \"W\";\n                break;\n            case 'x':\n                encoded\
    \ += \"X\";\n                break;\n            case 'y':\n                encoded\
    \ += \"Y\";\n                break;\n            case 'z':\n                encoded\
    \ += \"Z\";\n                break;\n            case 'A':\n                encoded\
    \ += \"a\";\n                break;\n            case 'B':\n                encoded\
    \ += \"b\";\n                break;\n            case 'C':\n                encoded\
    \ += \"c\";\n                break;\n            case 'D':\n                encoded\
    \ += \"d\";\n                break;\n            case 'E':\n                encoded\
    \ += \"e\";\n                break;\n            case 'F':\n                encoded\
    \ += \"f\";\n                break;\n            case 'G':\n                encoded\
    \ += \"g\";\n                break;\n            case 'H':\n                encoded\
    \ += \"h\";\n                break;\n            case 'I':\n                encoded\
    \ += \"i\";\n                break;\n            case 'J':\n                encoded\
    \ += \"j\";\n                break;\n            case 'K':\n                encoded\
    \ += \"k\";\n                break;\n            case 'L':\n                encoded\
    \ += \"l\";\n                break;\n            case 'M':\n                encoded\
    \ += \"m\";\n                break;\n            case 'N':\n                encoded\
    \ += \"n\";\n                break;\n            case 'O':\n                encoded\
    \ += \"o\";\n                break;\n            case 'P':\n", "    std::string\
    \ encoded = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        if\
    \ (message[i] >= 'a' && message[i] <= 'z') {\n            encoded += message[i]\
    \ - 'a' + 'A';\n        } else if (message[i] >= 'A' && message[i] <= 'Z') {\n\
    \            encoded += message[i] - 'A' + 'a';\n        } else {\n          \
    \  encoded += message[i];\n        }\n    }\n    return encoded;", "    std::string\
    \ ans;\n    for(int i=0;i<message.length();i++) {\n        char c = message[i];\n\
    \        ans += c;\n    }\n    for(int i=0;i<ans.length();i++) {\n        char\
    \ c = ans[i];\n        if(c>='a' && c<='z') {\n            ans[i] = c-32;\n  \
    \      }\n        else if(c>='A' && c<='Z') {\n            ans[i] = c-48;\n  \
    \      }\n        else if(c>='0' && c<='9') {\n            ans[i] = c-47;\n  \
    \      }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        char temp = c;\n        temp = temp - 'a' + 26;\n \
    \       ans += temp;\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' &&\
    \ c <= 'z') {\n            c = c + 26;\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for (auto &c : message) {\n        ans += (std::tolower(c)\
    \ == c) ? std::toupper(c) : c;\n    }\n    for (auto &c : ans) {\n        auto\
    \ pos = std::find(ans.begin(), ans.end(), c);\n        if (pos != ans.end()) {\n\
    \            ans.replace(pos, 1, std::tolower(ans[pos]));\n        }\n    }\n\
    \    for (auto &c : ans) {\n        auto pos = std::find(ans.begin(), ans.end(),\
    \ c);\n        if (pos != ans.end()) {\n            ans.replace(pos, 1, std::toupper(ans[pos]));\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &i : message) {\n        switch (i) {\n            case 'a':\n            case\
    \ 'e':\n            case 'i':\n            case 'o':\n            case 'u':\n\
    \                ans += \"A\";\n                break;\n            case 'b':\n\
    \            case 'f':\n            case 'k':\n            case 'n':\n       \
    \         ans += \"B\";\n                break;\n            case 'c':\n     \
    \       case 'g':\n            case 'j':\n            case 'p':\n            \
    \    ans += \"C\";\n                break;\n            case 'd':\n          \
    \  case 'h':\n            case 'q':\n            case 's':\n                ans\
    \ += \"D\";\n                break;\n            case 'e':\n            case 'j':\n\
    \            case 't':\n            case 'x':\n                ans += \"E\";\n\
    \                break;\n            case 'f':\n            case 'h':\n      \
    \      case 'x':\n                ans += \"F\";\n                break;\n    \
    \        case 'g':\n            case 'k':\n            case 'n':\n           \
    \     ans += \"G\";\n                break;\n            case 'h':\n         \
    \   case 'j':\n            case 'p':\n                ans += \"H\";\n        \
    \        break;\n            case 'i':\n            case 'k':\n            case\
    \ 'n':\n                ans += \"I\";\n                break;\n            case\
    \ 'j':\n            case 't':\n            case 'x':\n                ans += \"\
    J\";\n                break;\n            case 'k':\n            case 'n':\n \
    \               ans += \"K\";\n                break;\n            case 'l':\n\
    \            case 'm':\n            case 'n':\n                ans += \"L\";\n\
    \                break;\n            case 'm':\n            case 'n':\n      \
    \          ans += \"M\";\n                break;\n            case 'o':\n    \
    \        case 'p':\n                ans += \"O\";\n                break;\n  \
    \          case 'q':\n            case 's':\n                ans += \"Q\";\n \
    \               break;\n            case 'r':\n            case 't':\n       \
    \     case 'u':\n                ans += \"R\";\n                break;\n     \
    \       case 's':\n            case 't':\n            case 'u':\n            \
    \    ans += \"S\";\n                break;\n            case 't':\n          \
    \  case 'u':\n                ans += \"T\";\n                break;\n        \
    \    case 'v':\n            case 'w':\n            case 'x':\n               \
    \ ans += \"V\";\n                break;\n            case 'w':\n            case\
    \ 'x':\n                ans += \"W\";\n                break;\n            case\
    \ 'x':\n                ans += \"X\";\n                break;\n            default:\n\
    \                ans += i;\n                break;\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (char c : message) {\n        ans\
    \ += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (char c : ans) {\n\
    \        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n   \
    \         ans[ans.find(c) + 2] = tolower(c);\n        }\n    }\n    for (char\
    \ c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n        }\n    }\n \
    \   return ans;", "    std::string ans = \"\";\n    for (auto &i : message) {\n\
    \        switch (i) {\n            case 'a':\n                ans += \"A\";\n\
    \                break;\n            case 'b':\n                ans += \"B\";\n\
    \                break;\n            case 'c':\n                ans += \"C\";\n\
    \                break;\n            case 'd':\n                ans += \"D\";\n\
    \                break;\n            case 'e':\n                ans += \"E\";\n\
    \                break;\n            case 'f':\n                ans += \"F\";\n\
    \                break;\n            case 'g':\n                ans += \"G\";\n\
    \                break;\n            case 'h':\n                ans += \"H\";\n\
    \                break;\n            case 'i':\n                ans += \"I\";\n\
    \                break;\n            case 'j':\n                ans += \"J\";\n\
    \                break;\n            case 'k':\n                ans += \"K\";\n\
    \                break;\n            case 'l':\n                ans += \"L\";\n\
    \                break;\n            case 'm':\n                ans += \"M\";\n\
    \                break;\n            case 'n':\n                ans += \"N\";\n\
    \                break;\n            case 'o':\n                ans += \"O\";\n\
    \                break;\n            case 'p':\n                ans += \"P\";\n\
    \                break;\n            case 'q':\n                ans += \"Q\";\n\
    \                break;\n            case 'r':\n                ans += \"R\";\n\
    \                break;\n            case 's':\n                ans += \"S\";\n\
    \                break;\n            case 't':\n                ans += \"T\";\n\
    \                break;\n            case 'u':\n                ans += \"U\";\n\
    \                break;\n            case 'v':\n                ans += \"V\";\n\
    \                break;\n            case 'w':\n                ans += \"W\";\n\
    \                break;\n            case 'x':\n                ans += \"X\";\n\
    \                break;\n            case 'y':\n                ans += \"Y\";\n\
    \                break;\n            case 'z':\n                ans += \"Z\";\n\
    \                break;\n            case 'A':\n                ans += \"a\";\n\
    \                break;\n            case 'B':\n                ans += \"b\";\n\
    \                break;\n            case 'C':\n                ans += \"c\";\n\
    \                break;\n            case 'D':\n                ans += \"d\";\n\
    \                break;\n            case 'E':\n                ans += \"e\";\n\
    \                break;\n            case 'F':\n                ans += \"f\";\n\
    \                break;\n            case 'G':\n                ans += \"g\";\n\
    \                break;\n            case 'H':\n                ans += \"h\";\n\
    \                break;\n            case 'I':\n                ans += \"i\";\n\
    \                break;\n            case 'J':\n                ans += \"j\";\n\
    \                break;\n            case 'K':\n                ans += \"k\";\n\
    \                break;\n            case 'L':\n                ans += \"l\";\n\
    \                break;\n            case 'M", "    std::string ans = \"\";\n\
    \    for (char c : message) {\n        ans += (std::toupper(c) - 'A' + 2) % 26\
    \ + 'A';\n    }\n    for (char c : ans) {\n        ans[ans.find(c) - 2] = c;\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (char c\
    \ : ans) {\n        ans[ans.find(c)] = tolower(c);\n    }\n    return ans;", " \
    \   std::string encoded = \"\";\n    for (auto &c : message) {\n        switch\
    \ (c) {\n            case 'A':\n            case 'a':\n                encoded\
    \ += \"a\";\n                break;\n            case 'B':\n            case 'b':\n\
    \                encoded += \"b\";\n                break;\n            case 'C':\n\
    \            case 'c':\n                encoded += \"c\";\n                break;\n\
    \            case 'D':\n            case 'd':\n                encoded += \"d\"\
    ;\n                break;\n            case 'E':\n            case 'e':\n    \
    \            encoded += \"e\";\n                break;\n            case 'F':\n\
    \            case 'f':\n                encoded += \"f\";\n                break;\n\
    \            case 'G':\n            case 'g':\n                encoded += \"g\"\
    ;\n                break;\n            case 'H':\n            case 'h':\n    \
    \            encoded += \"h\";\n                break;\n            case 'I':\n\
    \            case 'i':\n                encoded += \"i\";\n                break;\n\
    \            case 'J':\n            case 'j':\n                encoded += \"j\"\
    ;\n                break;\n            case 'K':\n            case 'k':\n    \
    \            encoded += \"k\";\n                break;\n            case 'L':\n\
    \            case 'l':\n                encoded += \"l\";\n                break;\n\
    \            case 'M':\n            case 'm':\n                encoded += \"m\"\
    ;\n                break;\n            case 'N':\n            case 'n':\n    \
    \            encoded += \"n\";\n                break;\n            case 'O':\n\
    \            case 'o':\n                encoded += \"o\";\n                break;\n\
    \            case 'P':\n            case 'p':\n                encoded += \"p\"\
    ;\n                break;\n            case 'Q':\n            case 'q':\n    \
    \            encoded += \"q\";\n                break;\n            case 'R':\n\
    \            case 'r':\n                encoded += \"r\";\n                break;\n\
    \            case 'S':\n            case 's':\n                encoded += \"s\"\
    ;\n                break;\n            case 'T':\n            case 't':\n    \
    \            encoded += \"t\";\n                break;\n            case 'U':\n\
    \            case 'u':\n                encoded += \"u\";\n                break;\n\
    \            case 'V':\n            case 'v':\n                encoded += \"v\"\
    ;\n                break;\n            case 'W':\n            case 'w':\n    \
    \            encoded += \"w\";\n                break;\n            case 'X':\n\
    \            case 'x':\n                encoded += \"x\";\n                break;\n\
    \            case 'Y':\n            case 'y':\n                encoded += \"y\"\
    ;\n                break;\n            case 'Z':\n            case 'z':\n    \
    \            encoded += \"z\";\n                break;\n            default:\n\
    \                assert(false);\n        }\n    }\n    for (auto &c : encoded)\
    \ {\n        switch (c) {\n            case 'a':\n            case 'A':\n    \
    \            encoded[0] = 'A';\n                break;\n            case 'b':\n\
    \            case 'B':\n                encoded[0] = 'B';\n                break;\n\
    \            case 'c':\n            case 'C':\n                encoded[0] = 'C';\n\
    \                break;\n            case 'd':\n            case 'D':\n", "  \
    \  std::string ans = \"\";\n    for (char c : message) {\n        ans += (c >=\
    \ 'a' && c <= 'z') ? (c + 2) : (c + 1);\n    }\n    for (char c : ans) {\n   \
    \     ans[ans.find(c) - 1] = c;\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += c;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'A' + (c - 'a' + 2);\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            ans += c;\n        }\n        else if(c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans +=\
    \ c;\n        }\n        else {\n            ans += 'a' + message[i] - 'a';\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        char temp = c;\n        temp = temp - 'a' + 1;\n  \
    \      temp = temp - 'A' + 1;\n        ans += temp;\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for (char c : message) {\n        ans += (char)(c\
    \ + 1);\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 1] = (char)(c\
    \ + 2);\n        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) -\
    \ 1] = (char)(c + 2);\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for (auto &c : message) {\n        switch (c) {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n                ans += 'A';\n                break;\n\
    \            case 'b':\n            case 'f':\n            case 'n':\n       \
    \     case 'r':\n            case 't':\n                ans += 'B';\n        \
    \        break;\n            case 'c':\n            case 'g':\n            case\
    \ 'j':\n            case 'k':\n            case 'm':\n                ans += 'C';\n\
    \                break;\n            case 'd':\n            case 'h':\n      \
    \      case 'j':\n            case 'k':\n            case 'n':\n             \
    \   ans += 'D';\n                break;\n            case 'e':\n            case\
    \ 'f':\n            case 'k':\n            case 'l':\n            case 'm':\n\
    \                ans += 'E';\n                break;\n            case 'f':\n\
    \            case 'g':\n            case 'h':\n            case 'j':\n       \
    \     case 'k':\n            case 'n':\n                ans += 'F';\n        \
    \        break;\n            case 'g':\n            case 'h':\n            case\
    \ 'j':\n            case 'k':\n            case 'l':\n            case 'm':\n\
    \                ans += 'G';\n                break;\n            case 'h':\n\
    \            case 'j':\n            case 'k':\n            case 'l':\n       \
    \     case 'm':\n                ans += 'H';\n                break;\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'l':\n            case 'm':\n                ans += 'I';\n                break;\n\
    \            case 'j':\n            case 'k':\n            case 'l':\n       \
    \     case 'm':\n                ans += 'J';\n                break;\n       \
    \     case 'k':\n            case 'l':\n            case 'm':\n              \
    \  ans += 'K';\n                break;\n            case 'l':\n            case\
    \ 'm':\n                ans += 'L';\n                break;\n            case\
    \ 'm':\n                ans += 'M';\n                break;\n            case\
    \ 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n\
    \            case 'r':\n            case 's':\n            case 't':\n       \
    \         ans += 'N';\n                break;\n            case 'o':\n       \
    \     case 'p':\n            case 'q':\n            case 'r':\n            case\
    \ 's':\n            case 't':\n                ans += 'O';\n                break;\n\
    \            case 'p':\n            case 'q':\n            case 'r':\n       \
    \     case 's':\n            case 't':\n                ans += 'P';\n        \
    \        break;\n            case 'q':\n            case 'r':\n            case\
    \ 's':\n            case 't':\n                ans += 'Q';\n                break;\n\
    \            case 'r':\n            case 's':\n            case 't':\n       \
    \         ans += 'R';\n                break;\n            case 's':\n       \
    \     case 't':\n                ans += ", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        } else {\n            ans += 'A' + (c - 'a');\n        }\n    }\n\
    \    return ans;", "    std::string encoded = \"\";\n    for (char c : message)\
    \ {\n        if ('A' <= c && c <= 'Z') {\n            encoded += c;\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       encoded += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            encoded += c;\n        } else if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded\
    \ += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            encoded += c;\n        } else if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            encoded += c;\n        }\
    \ else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n     \
    \       encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            encoded += c;\n        } else if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            encoded\
    \ += c;\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            encoded += c;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            encoded += c;\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       encoded += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U') {\n            encoded += c;\n        } else if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded\
    \ += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U') {\n            encoded += c;\n        } else if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            encoded += c;\n        }\
    \ else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n     \
    \       encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            encoded += c;\n        } else if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ", "   \
    \ std::string ans = \"\";\n    for (char c : message) {\n        ans += (std::toupper(c)\
    \ - 'A' + 2) % 26 + 'A';\n    }\n    for (char c : ans) {\n        ans[ans.find(c)]\
    \ = std::toupper(c);\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        ans += (tolower(c) - 'a' + 2) % 26 + 'a';\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for (int i = 0; i < message.length(); i++) {\n\
    \        char c = message[i];\n        if ('a' <= c && c <= 'z') {\n         \
    \   ans += c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans += 'A';\n        } else if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'a';\n      \
    \  } else {\n            ans += c;\n        }\n    }\n    for (int i = 0; i <\
    \ ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c && c <=\
    \ 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c == 'E' ||\
    \ c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'A';\n        } else\
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n         \
    \   ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n            ans[i] = 'A';\n        } else if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n \
    \       }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char c\
    \ = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n  \
    \      } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n\
    \            ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n      \
    \  if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c &&\
    \ c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c == 'E'\
    \ || ", "    std::string ans = \"\";\n    for (auto &i : message) {\n        switch\
    \ (i) {\n            case 'a':\n            case 'e':\n            case 'i':\n\
    \            case 'o':\n            case 'u':\n                ans += 'A';\n \
    \               break;\n            case 'b':\n            case 'f':\n       \
    \     case 'k':\n            case 'p':\n            case 's':\n              \
    \  ans += 'B';\n                break;\n            case 'c':\n            case\
    \ 'd':\n            case 'm':\n            case 't':\n                ans += 'C';\n\
    \                break;\n            case 'e':\n            case 'f':\n      \
    \      case 'g':\n            case 'h':\n            case 'j':\n             \
    \   ans += 'D';\n                break;\n            case 'f':\n            case\
    \ 'g':\n            case 'h':\n            case 'k':\n            case 'p':\n\
    \            case 's':\n                ans += 'E';\n                break;\n\
    \            case 'g':\n            case 'h':\n            case 'j':\n       \
    \     case 'k':\n            case 'p':\n            case 's':\n              \
    \  ans += 'F';\n                break;\n            case 'h':\n            case\
    \ 'j':\n            case 'k':\n            case 'p':\n            case 's':\n\
    \                ans += 'G';\n                break;\n            case 'i':\n\
    \            case 'j':\n            case 'k':\n            case 'p':\n       \
    \     case 's':\n                ans += 'H';\n                break;\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n            case\
    \ 'p':\n            case 's':\n                ans += 'I';\n                break;\n\
    \            case 'j':\n            case 'k':\n            case 'p':\n       \
    \     case 's':\n                ans += 'J';\n                break;\n       \
    \     case 'k':\n            case 'p':\n            case 's':\n              \
    \  ans += 'K';\n                break;\n            case 'p':\n            case\
    \ 's':\n                ans += 'P';\n                break;\n            case\
    \ 's':\n                ans += 'S';\n                break;\n            default:\n\
    \                ans += i;\n        }\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for (char c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (char c : ans) {\n        if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2]\
    \ = tolower(c);\n        }\n    }\n    for (char c : ans) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = toupper(c);\n        }\n    }\n    return ans;", "    std::string encodedMessage\
    \ = \"\";\n    for (auto &letter : message) {\n        encodedMessage += std::string(std::toupper(letter),\
    \ std::toupper(letter) + 2);\n    }\n    for (auto &vowel : \"AEIOU\") {\n   \
    \     encodedMessage += std::string(std::toupper(vowel), std::toupper(vowel) +\
    \ 2);\n    }\n    for (auto &letter : encodedMessage) {\n        encodedMessage.replace(letter,\
    \ 1, std::tolower(letter));\n    }\n    return encodedMessage;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c\
    \ == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) +\
    \ 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[an", "    std::string ans\
    \ = \"\";\n    for (auto &c : message) {\n        ans += (std::tolower(c) - 'a')\
    \ + 1;\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a' && c <= 'z')\
    \ {\n            ans[ans.size() - 1 - c] = ans[ans.size() - 1 - c] + (c - 'a');\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c >= '", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (auto &c : ans) {\n        if (isalpha(c)) {\n\
    \            int pos = toupper(c) - 'A';\n            ans[pos] = tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (isalpha(c)) {\n    \
    \        int pos = toupper(c) - 'A';\n            ans[pos] = tolower(c);\n   \
    \     }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c: message) {\n        char c = c;\n        if (c >= 'a' && c <= 'z') {\n \
    \           c = c + 2;\n        }\n        if (c >= 'A' && c <= 'Z') {\n     \
    \       c = c - 2;\n        }\n        ans += c;\n    }\n    for (auto &c: ans)\
    \ {\n        if (c >= 'a' && c <= 'z') {\n            c = c + 1;\n        }\n\
    \        if (c >= 'A' && c <= 'Z') {\n            c = c - 1;\n        }\n    \
    \    ans += c;\n    }\n    return ans;", "    std::string ans = \"\";\n    for\
    \ (char c : message) {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n\
    \    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        }\n        else {\n            ans += 'A' + (c - 'a');\n       \
    \ }\n    }\n    return ans;", "    std::string encodedMessage = \"\";\n    for\
    \ (auto &letter : message) {\n        encodedMessage += toupper(letter);\n   \
    \ }\n    for (auto &vowel : \"AEIOU\") {\n        encodedMessage += tolower(vowel);\n\
    \    }\n    for (auto &letter : encodedMessage) {\n        encodedMessage.replace(encodedMessage.find(vowel),\
    \ 2, letter);\n    }\n    return encodedMessage;", "    std::string ans = \"\"\
    ;\n    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        ans += c;\n    }\n    for (int i = 0; i < ans.length(); i++) {\n    \
    \    char c = ans[i];\n        if (c >= 'a' && c <= 'z') {\n            ans[i]\
    \ = c + 'A' - 'a';\n        } else if (c >= 'A' && c <= 'Z') {\n            ans[i]\
    \ = c + 'a' - 'A';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'a' || c == 'A') {\n         \
    \   ans[i] = 'A';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'A' || c == 'a') {\n         \
    \   ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'A' || c == 'a') {\n         \
    \   ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'a' || c == 'A') {\n         \
    \   ans[i] = 'A';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'A' || c == 'a') {\n         \
    \   ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'a' || c == 'A') {\n         \
    \   ans[i] = 'A';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'A' || c == 'a') {\n         \
    \   ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'a' || c == 'A') {\n         \
    \   ans[i] = 'A';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'A' || c == 'a') {\n         \
    \   ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'a' || c == 'A') {\n         \
    \   ans[i] = 'A';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'A' || c == 'a') {\n         \
    \   ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c == 'a' || c == 'A') {\n         \
    \   ans[i] = 'A';\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        char c = ans[i];\n        if (c", "    std::string ans = \"\";\n\
    \    for (char c : message) {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n\
    \    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 2] = tolower(c);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            ans += c;\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans += c;\n        } else\
    \ {\n            ans += std::tolower(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += c;\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans += c;\n        } else\
    \ {\n            ans += std::tolower(c);\n        }\n    }\n    return ans;",
  "    std::string encoded = \"\";\n    for (auto &c : message) {\n        char newC\
    \ = c;\n        if (newC == 'a' || newC == 'e' || newC == 'i' || newC == 'o' ||\
    \ newC == 'u') {\n            newC = newC + 'A' - 'a';\n        }\n        if\
    \ (newC == 'A' || newC == 'E' || newC == 'I' || newC == 'O' || newC == 'U') {\n\
    \            newC = newC + 'a' - 'A';\n        }\n        encoded.append(newC);\n\
    \    }\n    return encoded;", "    std::string ans = \"\";\n    for (auto &c :\
    \ message) {\n        char temp = c;\n        temp = temp - 'a' + 1;\n       \
    \ temp = temp - 'A' + 1;\n        ans += temp;\n    }\n    return ans;", "   \
    \ std::string encoded = \"\";\n    for (auto &c : message) {\n        switch (c)\
    \ {\n            case 'A':\n            case 'E':\n            case 'I':\n   \
    \         case 'O':\n            case 'U':\n                encoded += \"a\";\n\
    \                break;\n            case 'B':\n            case 'F':\n      \
    \      case 'J':\n            case 'K':\n            case 'M':\n            case\
    \ 'N':\n                encoded += \"b\";\n                break;\n          \
    \  case 'C':\n            case 'G':\n            case 'L':\n            case 'P':\n\
    \            case 'Q':\n            case 'S':\n                encoded += \"c\"\
    ;\n                break;\n            case 'D':\n            case 'H':\n    \
    \        case 'K':\n            case 'N':\n            case 'R':\n           \
    \     encoded += \"d\";\n                break;\n            case 'E':\n     \
    \       case 'I':\n            case 'O':\n            case 'U':\n            \
    \    encoded += \"e\";\n                break;\n            case 'F':\n      \
    \      case 'J':\n            case 'K':\n            case 'M':\n            case\
    \ 'N':\n                encoded += \"f\";\n                break;\n          \
    \  case 'G':\n            case 'L':\n            case 'P':\n            case 'Q':\n\
    \            case 'S':\n                encoded += \"g\";\n                break;\n\
    \            case 'H':\n            case 'K':\n            case 'N':\n       \
    \     case 'R':\n                encoded += \"h\";\n                break;\n \
    \           case 'I':\n            case 'O':\n            case 'U':\n        \
    \        encoded += \"i\";\n                break;\n            case 'J':\n  \
    \          case 'K':\n            case 'M':\n            case 'N':\n         \
    \       encoded += \"j\";\n                break;\n            case 'K':\n   \
    \         case 'N':\n            case 'R':\n                encoded += \"k\";\n\
    \                break;\n            case 'M':\n            case 'N':\n      \
    \          encoded += \"m\";\n                break;\n            case 'N':\n\
    \            case 'R':\n                encoded += \"n\";\n                break;\n\
    \            case 'O':\n            case 'U':\n                encoded += \"o\"\
    ;\n                break;\n            case 'P':\n            case 'Q':\n    \
    \        case 'S':\n                encoded += \"p\";\n                break;\n\
    \            case 'R':\n                encoded += \"r\";\n                break;\n\
    \            case 'S':\n                encoded += \"s\";\n                break;\n\
    \            case 'T':\n                encoded += \"t\";\n                break;\n\
    \            case 'U':\n                encoded += \"u\";\n                break;\n\
    \            case 'V':\n                encoded += \"v\";\n                break;\n\
    \            case 'W':\n                encoded += \"w\";\n                break;\n\
    \            case 'X':\n                encoded += \"x\";\n                break;\n\
    \            case 'Y':\n                encoded += \"y\";\n                break;\n\
    \            case 'Z':\n                encoded += \"z\";\n                break;\n\
    \            default:\n                assert(false);\n        }\n    }\n    return\
    \ encoded;", "    std::string encodedMessage = \"\";\n    for (int i = 0; i <\
    \ message.length(); i++) {\n        char currentChar = message[i];\n        if\
    \ (currentChar == 'a') {\n            encodedMessage += \"A\";\n        } else\
    \ if (currentChar == 'b') {\n            encodedMessage += \"B\";\n        } else\
    \ if (currentChar == 'c') {\n            encodedMessage += \"C\";\n        } else\
    \ if (currentChar == 'd') {\n            encodedMessage += \"D\";\n        } else\
    \ if (currentChar == 'e') {\n            encodedMessage += \"E\";\n        } else\
    \ if (currentChar == 'f') {\n            encodedMessage += \"F\";\n        } else\
    \ if (currentChar == 'g') {\n            encodedMessage += \"G\";\n        } else\
    \ if (currentChar == 'h') {\n            encodedMessage += \"H\";\n        } else\
    \ if (currentChar == 'i') {\n            encodedMessage += \"I\";\n        } else\
    \ if (currentChar == 'j') {\n            encodedMessage += \"J\";\n        } else\
    \ if (currentChar == 'k') {\n            encodedMessage += \"K\";\n        } else\
    \ if (currentChar == 'l') {\n            encodedMessage += \"L\";\n        } else\
    \ if (currentChar == 'm') {\n            encodedMessage += \"M\";\n        } else\
    \ if (currentChar == 'n') {\n            encodedMessage += \"N\";\n        } else\
    \ if (currentChar == 'o') {\n            encodedMessage += \"O\";\n        } else\
    \ if (currentChar == 'p') {\n            encodedMessage += \"P\";\n        } else\
    \ if (currentChar == 'q') {\n            encodedMessage += \"Q\";\n        } else\
    \ if (currentChar == 'r') {\n            encodedMessage += \"R\";\n        } else\
    \ if (currentChar == 's') {\n            encodedMessage += \"S\";\n        } else\
    \ if (currentChar == 't') {\n            encodedMessage += \"T\";\n        } else\
    \ if (currentChar == 'u') {\n            encodedMessage += \"U\";\n        } else\
    \ if (currentChar == 'v') {\n            encodedMessage += \"V\";\n        } else\
    \ if (currentChar == 'w') {\n            encodedMessage += \"W\";\n        } else\
    \ if (currentChar == 'x') {\n            encodedMessage += \"X\";\n        } else\
    \ if (currentChar == 'y') {\n            encodedMessage += \"Y\";\n        } else\
    \ if (currentChar == 'z') {\n            encodedMessage += \"Z\";\n        } else\
    \ if (currentChar == 'A') {\n            encodedMessage += \"a\";\n        } else\
    \ if (currentChar == 'B') {\n            encodedMessage += \"b\";\n        } else\
    \ if (currentChar == 'C') {\n            encodedMessage += \"c\";\n        } else\
    \ if (currentChar == 'D') {\n            encodedMessage += \"d\";\n        } else\
    \ if (currentChar == 'E') {\n            encodedMessage += \"e\";\n        } else\
    \ if (currentChar == 'F') {\n            encodedMessage += \"f\";\n        } else\
    \ if (currentChar == 'G') {\n            encodedMessage += \"g\";\n        } else\
    \ if (currentChar == 'H') {\n            encodedMessage += \"h\";\n        } else\
    \ if (currentChar == 'I') {\n            encodedMessage += \"i\";\n        } else\
    \ if (", "    std::string ans = \"\";\n    for (char c : message) {\n        ans\
    \ += (char) tolower(c);\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'A';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'a';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'e';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'i';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'o';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'u';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'A';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'a';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'e';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = 'i';\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {", "    std::string ans =\
    \ \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += c;\n        }\n        else if(c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans += c;\n        }\n        else {\n\
    \            ans += 'A' + message[i] - 'a';\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for (auto &c : message) {\n        char temp =\
    \ c;\n        temp = temp - 'a' + 1;\n        temp = temp - 'A' + 1;\n       \
    \ ans += temp;\n    }\n    return ans;", "    std::string ans = \"\";\n    for\
    \ (auto &c : message) {\n        ans += (std::tolower(c) == c) ? std::toupper(c)\
    \ : std::tolower(c);\n    }\n    for (auto &c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 2] = std::tolower(ans[ans.find(c) + 2]);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[ans.find(c) + 2] = std::toupper(ans[ans.find(c) + 2]);\n\
    \        }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for\
    \ (auto &c : message) {\n        if (std::isalpha(c)) {\n            std::string\
    \ s = \"\";\n            for (auto &i : c) {\n                s += (std::tolower(i)\
    \ == i ? std::toupper(i) : i);\n            }\n            encoded.append(s);\n\
    \        } else {\n            encoded.append(c);\n        }\n    }\n    for (auto\
    \ &i : encoded) {\n        std::string s = \"\";\n        for (auto &j : i) {\n\
    \            if (std::isalpha(j)) {\n                s += (std::tolower(j) ==\
    \ j ? std::toupper(j) : j);\n            } else {\n                s += j;\n \
    \           }\n        }\n        encoded.append(s);\n    }\n    return encoded;",
  "    std::string ans = \"\";\n    for (char c : message) {\n        ans += (isupper(c))\
    \ ? tolower(c) : toupper(c);\n    }\n    for (char c : ans) {\n        if (c ==\
    \ 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 2] = tolower(c);\n        }\n    }\n    for (char c : ans) {\n        if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 2] = toupper(c);\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            ans += c + 2;\n        } else if (c >= 'A' && c <= 'Z') {\n     \
    \       ans += c + 2;\n        } else if (c >= '0' && c <= '9') {\n          \
    \  ans += c;\n        }\n    }\n    for (auto &c : ans) {\n        if (c >= 'a'\
    \ && c <= 'z') {\n            ans[ans.find(c)] = c + 2;\n        } else if (c\
    \ >= 'A' && c <= 'Z') {\n            ans[ans.find(c)] = c + 2;\n        } else\
    \ if (c >= '0' && c <= '9') {\n            ans[ans.find(c)] = c;\n        }\n\
    \    }\n    return ans;", "    std::string ans;\n    for(int i=0;i<message.length();i++)\
    \ {\n        ans += message[i];\n    }\n    for(int i=0;i<ans.length();i++) {\n\
    \        char c = ans[i];\n        if(c>='a' && c<='z') {\n            ans[i]\
    \ = c-32;\n        }\n        else if(c>='A' && c<='Z') {\n            ans[i]\
    \ = c-48;\n        }\n        else if(c>='0' && c<='9') {\n            ans[i]\
    \ = c-48;\n        }\n        else if(c>='a' && c<='z') {\n            ans[i]\
    \ = c-32;\n        }\n        else if(c>='A' && c<='Z') {\n            ans[i]\
    \ = c-48;\n        }\n        else if(c>='0' && c<='9') {\n            ans[i]\
    \ = c-48;\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    for (auto &c : message) {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n\
    \    }\n    for (auto &c : ans) {\n        switch (c) {\n        case 'A':\n \
    \           ans += 'B';\n            break;\n        case 'B':\n            ans\
    \ += 'C';\n            break;\n        case 'C':\n            ans += 'D';\n  \
    \          break;\n        case 'D':\n            ans += 'E';\n            break;\n\
    \        case 'E':\n            ans += 'F';\n            break;\n        case\
    \ 'F':\n            ans += 'G';\n            break;\n        case 'G':\n     \
    \       ans += 'H';\n            break;\n        case 'H':\n            ans +=\
    \ 'I';\n            break;\n        case 'I':\n            ans += 'J';\n     \
    \       break;\n        case 'J':\n            ans += 'K';\n            break;\n\
    \        case 'K':\n            ans += 'L';\n            break;\n        case\
    \ 'L':\n            ans += 'M';\n            break;\n        case 'M':\n     \
    \       ans += 'N';\n            break;\n        case 'N':\n            ans +=\
    \ 'O';\n            break;\n        case 'O':\n            ans += 'P';\n     \
    \       break;\n        case 'P':\n            ans += 'Q';\n            break;\n\
    \        case 'Q':\n            ans += 'R';\n            break;\n        case\
    \ 'R':\n            ans += 'S';\n            break;\n        case 'S':\n     \
    \       ans += 'T';\n            break;\n        case 'T':\n            ans +=\
    \ 'U';\n            break;\n        case 'U':\n            ans += 'V';\n     \
    \       break;\n        case 'V':\n            ans += 'W';\n            break;\n\
    \        case 'W':\n            ans += 'X';\n            break;\n        case\
    \ 'X':\n            ans += 'Y';\n            break;\n        case 'Y':\n     \
    \       ans += 'Z';\n            break;\n        case 'Z':\n            ans +=\
    \ 'a';\n            break;\n        case 'a':\n            ans += 'b';\n     \
    \       break;\n        case 'b':\n            ans += 'c';\n            break;\n\
    \        case 'c':\n            ans += 'd';\n            break;\n        case\
    \ 'd':\n            ans += 'e';\n            break;\n        case 'e':\n     \
    \       ans += 'f';\n            break;\n        case 'f':\n            ans +=\
    \ 'g';\n            break;\n        case 'g':\n            ans += 'h';\n     \
    \       break;\n        case 'h':\n            ans += 'i';\n            break;\n\
    \        case 'i':\n            ans += 'j';\n            break;\n        case\
    \ 'j':\n            ans += 'k';\n            break;\n", "    std::string ans =\
    \ \"\";\n    for (auto &c : message) {\n        switch (c) {\n            case\
    \ 'a':\n            case 'e':\n            case 'i':\n            case 'o':\n\
    \            case 'u':\n                ans += 'A';\n                break;\n\
    \            case 'b':\n            case 'f':\n            case 'n':\n       \
    \     case 'r':\n            case 't':\n                ans += 'B';\n        \
    \        break;\n            case 'c':\n            case 'g':\n            case\
    \ 'h':\n            case 'j':\n            case 'k':\n                ans += 'C';\n\
    \                break;\n            case 'd':\n            case 'j':\n      \
    \      case 'k':\n            case 'l':\n            case 'm':\n             \
    \   ans += 'D';\n                break;\n            case 'e':\n            case\
    \ 'f':\n            case 'g':\n            case 'h':\n            case 'i':\n\
    \            case 'k':\n                ans += 'E';\n                break;\n\
    \            case 'f':\n            case 'g':\n            case 'h':\n       \
    \     case 'i':\n            case 'j':\n            case 'k':\n              \
    \  ans += 'F';\n                break;\n            case 'g':\n            case\
    \ 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n\
    \                ans += 'G';\n                break;\n            case 'h':\n\
    \            case 'i':\n            case 'j':\n            case 'k':\n       \
    \         ans += 'H';\n                break;\n            case 'i':\n       \
    \     case 'j':\n            case 'k':\n                ans += 'I';\n        \
    \        break;\n            case 'j':\n            case 'k':\n              \
    \  ans += 'J';\n                break;\n            case 'k':\n              \
    \  ans += 'K';\n                break;\n            case 'l':\n            case\
    \ 'm':\n                ans += 'L';\n                break;\n            case\
    \ 'n':\n            case 'o':\n            case 'p':\n            case 'q':\n\
    \            case 'r':\n            case 's':\n                ans += 'N';\n \
    \               break;\n            case 'o':\n            case 'p':\n       \
    \     case 'q':\n            case 'r':\n            case 's':\n              \
    \  ans += 'O';\n                break;\n            case 'p':\n            case\
    \ 'q':\n            case 'r':\n            case 's':\n                ans += 'P';\n\
    \                break;\n            case 'q':\n            case 'r':\n      \
    \      case 's':\n                ans += 'Q';\n                break;\n      \
    \      case 'r':\n            case 's':\n                ans += 'R';\n       \
    \         break;\n            case 's':\n                ans += 'S';\n       \
    \         break;\n            case 't':\n            case 'u':\n            case\
    \ 'v':\n            case 'w':\n            case 'x':\n            case 'y':\n\
    \            case 'z':\n                ans += 'T';\n                break;\n\
    \            case 'u':\n            case 'v':\n            case 'w':\n       \
    \     case 'x':\n            case 'y':\n            case 'z", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        char a = c;\n        char b = c;\n        char d = c;\n\
    \        char e = c;\n        char f = c;\n        char g = c;\n        char h\
    \ = c;\n        char j = c;\n        char k = c;\n        char l = c;\n      \
    \  char m = c;\n        char n = c;\n        char o = c;\n        char p = c;\n\
    \        char q = c;\n        char r = c;\n        char s = c;\n        char t\
    \ = c;\n        char u = c;\n        char v = c;\n        char w = c;\n      \
    \  char x = c;\n        char y = c;\n        char z = c;\n        char A = c;\n\
    \        char B = c;\n        char C = c;\n        char D = c;\n        char E\
    \ = c;\n        char F = c;\n        char G = c;\n        char H = c;\n      \
    \  char I = c;\n        char J = c;\n        char K = c;\n        char L = c;\n\
    \        char M = c;\n        char N = c;\n        char O = c;\n        char P\
    \ = c;\n        char Q = c;\n        char R = c;\n        char S = c;\n      \
    \  char T = c;\n        char U = c;\n        char V = c;\n        char W = c;\n\
    \        char X = c;\n        char Y = c;\n        char Z = c;\n        char aA\
    \ = c;\n        char aB = c;\n        char aC = c;\n        char aD = c;\n   \
    \     char aE = c;\n        char aF = c;\n        char aG = c;\n        char aH\
    \ = c;\n        char aI = c;\n        char aJ = c;\n        char aK = c;\n   \
    \     char aL = c;\n        char aM = c;\n        char aN = c;\n        char aO\
    \ = c;\n        char aP = c;\n        char aQ = c;\n        char aR = c;\n   \
    \     char aS = c;\n        char aT = c;\n        char aU = c;\n        char aV\
    \ = c;\n        char aW = c;\n        char aX = c;\n        char aY = c;\n   \
    \     char aZ = c;\n        char bA = c;\n        char bB = c;\n        char bC\
    \ = c;\n        char bD = c;\n        char bE = c;\n        char bF = c;\n   \
    \     char bG = c;\n        char bH = c;\n        char bI = c;\n        char bJ\
    \ = c;\n        char b", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        char temp = c;\n        temp = temp - 'a' + 1;\n        if (temp\
    \ > 'z') {\n            temp = 'z' - temp;\n        }\n        ans += temp;\n\
    \    }\n    for (auto &c : ans) {\n        char temp = c;\n        temp = temp\
    \ - 'a' + 1;\n        if (temp > 'z') {\n            temp = 'z' - temp;\n    \
    \    }\n        ans += temp;\n    }\n    return ans;", "    std::string ans =\
    \ \"\";\n    for (auto &c : message) {\n        ans += (std::tolower(c) - 'a'\
    \ + 2) % 26 + 'a';\n    }\n    for (auto &c : ans) {\n        if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n            ans[ans.size()\
    \ - 1] += c;\n        }\n    }\n    return ans;", "    std::string encodedMessage\
    \ = \"\";\n    for (auto &c : message) {\n        auto pos = std::find(message.begin(),\
    \ message.end(), 'a');\n        auto pos2 = std::find(message.begin(), message.end(),\
    \ 'e');\n        auto pos3 = std::find(message.begin(), message.end(), 'i');\n\
    \        auto pos4 = std::find(message.begin(), message.end(), 'o');\n       \
    \ auto pos5 = std::find(message.begin(), message.end(), 'u');\n        auto pos6\
    \ = std::find(message.begin(), message.end(), 'A');\n        auto pos7 = std::find(message.begin(),\
    \ message.end(), 'E');\n        auto pos8 = std::find(message.begin(), message.end(),\
    \ 'I');\n        auto pos9 = std::find(message.begin(), message.end(), 'O');\n\
    \        auto pos10 = std::find(message.begin(), message.end(), 'U');\n      \
    \  auto pos11 = std::find(message.begin(), message.end(), 'a');\n        auto\
    \ pos12 = std::find(message.begin(), message.end(), 'e');\n        auto pos13\
    \ = std::find(message.begin(), message.end(), 'i');\n        auto pos14 = std::find(message.begin(),\
    \ message.end(), 'o');\n        auto pos15 = std::find(message.begin(), message.end(),\
    \ 'u');\n        auto pos16 = std::find(message.begin(), message.end(), 'A');\n\
    \        auto pos17 = std::find(message.begin(), message.end(), 'E');\n      \
    \  auto pos18 = std::find(message.begin(), message.end(), 'I');\n        auto\
    \ pos19 = std::find(message.begin(), message.end(), 'O');\n        auto pos20\
    \ = std::find(message.begin(), message.end(), 'U');\n        auto pos21 = std::find(message.begin(),\
    \ message.end(), 'a');\n        auto pos22 = std::find(message.begin(), message.end(),\
    \ 'e');\n        auto pos23 = std::find(message.begin(), message.end(), 'i');\n\
    \        auto pos24 = std::find(message.begin(), message.end(), 'o');\n      \
    \  auto pos25 = std::find(message.begin(), message.end(), 'u');\n        auto\
    \ pos26 = std::find(message.begin(), message.end(), 'A');\n        auto pos27\
    \ = std::find(message.begin(), message.end(), 'E');\n        auto pos28 = std::find(message.begin(),\
    \ message.end(), 'I');\n        auto pos29 = std::find(message.begin(), message.end(),\
    \ 'O');\n        auto pos30 = std::find(message.begin(), message.end(), 'U');\n\
    \        auto pos31 = std::find(message.begin(), message.end(), 'a');\n      \
    \  auto pos32 = std::find(message.begin(), message.end(), 'e');", "    std::string\
    \ encoded = \"\";\n    for (auto &c : message) {\n        switch (c) {\n     \
    \       case 'a':\n                encoded += \"A\";\n                break;\n\
    \            case 'b':\n                encoded += \"B\";\n                break;\n\
    \            case 'c':\n                encoded += \"C\";\n                break;\n\
    \            case 'd':\n                encoded += \"D\";\n                break;\n\
    \            case 'e':\n                encoded += \"E\";\n                break;\n\
    \            case 'f':\n                encoded += \"F\";\n                break;\n\
    \            case 'g':\n                encoded += \"G\";\n                break;\n\
    \            case 'h':\n                encoded += \"H\";\n                break;\n\
    \            case 'i':\n                encoded += \"I\";\n                break;\n\
    \            case 'j':\n                encoded += \"J\";\n                break;\n\
    \            case 'k':\n                encoded += \"K\";\n                break;\n\
    \            case 'l':\n                encoded += \"L\";\n                break;\n\
    \            case 'm':\n                encoded += \"M\";\n                break;\n\
    \            case 'n':\n                encoded += \"N\";\n                break;\n\
    \            case 'o':\n                encoded += \"O\";\n                break;\n\
    \            case 'p':\n                encoded += \"P\";\n                break;\n\
    \            case 'q':\n                encoded += \"Q\";\n                break;\n\
    \            case 'r':\n                encoded += \"R\";\n                break;\n\
    \            case 's':\n                encoded += \"S\";\n                break;\n\
    \            case 't':\n                encoded += \"T\";\n                break;\n\
    \            case 'u':\n                encoded += \"U\";\n                break;\n\
    \            case 'v':\n                encoded += \"V\";\n                break;\n\
    \            case 'w':\n                encoded += \"W\";\n                break;\n\
    \            case 'x':\n                encoded += \"X\";\n                break;\n\
    \            case 'y':\n                encoded += \"Y\";\n                break;\n\
    \            case 'z':\n                encoded += \"Z\";\n                break;\n\
    \            case 'A':\n                encoded += \"a\";\n                break;\n\
    \            case 'B':\n                encoded += \"b\";\n                break;\n\
    \            case 'C':\n                encoded += \"c\";\n                break;\n\
    \            case 'D':\n                encoded += \"d\";\n                break;\n\
    \            case 'E':\n                encoded += \"e\";\n                break;\n\
    \            case 'F':\n                encoded += \"f\";\n                break;\n\
    \            case 'G':\n                encoded += \"g\";\n                break;\n\
    \            case 'H':\n                encoded += \"h\";\n                break;\n\
    \            case 'I':\n                encoded += \"i\";\n                break;\n\
    \            case 'J':\n                encoded += \"j\";\n                break;\n\
    \            case 'K':\n                encoded += \"k\";\n                break;\n\
    \            case 'L':\n                encoded += \"l\";\n                break;\n\
    \            case 'M':\n                encoded += \"m\";\n                break;\n\
    \            case 'N':\n                encoded += \"n\";\n                break;\n\
    \            case 'O':\n                encoded += \"o\";\n                break;\n\
    \            case 'P':\n", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (isupper(c)) ? (tolower(c)) : (toupper(c));\n    }\n    for\
    \ (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'A') {\n       \
    \     ans[i] = 'a';\n        } else if (ans[i] == 'E') {\n            ans[i] =\
    \ 'e';\n        } else if (ans[i] == 'I') {\n            ans[i] = 'i';\n     \
    \   } else if (ans[i] == 'O') {\n            ans[i] = 'o';\n        } else if\
    \ (ans[i] == 'U') {\n            ans[i] = 'u';\n        }\n    }\n    for (int\
    \ i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i] == 'e'\
    \ || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i] =\
    \ ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n\
    \        if (ans[i] == 'A' || ans[i] == 'E' || ans[i] == 'I' || ans[i] == 'O'\
    \ || ans[i] == 'U') {\n            ans[i] = ans[i - 1];\n        }\n    }\n  \
    \  for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'A' || ans[i] == 'E' || ans[i] == 'I' || ans[i] ==\
    \ 'O' || ans[i] == 'U') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'A' || ans[i] == 'E' || ans[i] == 'I' || ans[i] ==\
    \ 'O' || ans[i] == 'U') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || ans[i] == 'u') {\n            ans[i]\
    \ = ans[i - 1];\n        }\n    }\n    for (int i = 0; i < ans.length(); i++)\
    \ {\n        if (ans[i] == 'A' || ans[i] == 'E' || ans[i] == 'I' || ans[i] ==\
    \ 'O' || ans[i] == 'U') {\n            ans[i] = ans[i - 1];\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        if (ans[i] == 'a' || ans[i]\
    \ == 'e' || ans[i] == 'i' || ans[i] == 'o' || an", "    std::string ans = \"\"\
    ;\n    for (char c : message) {\n        ans += (std::toupper(c) - 'A' + 2) %\
    \ 26 + 'A';\n    }\n    for (char c : ans) {\n        ans[ans.find(c)] = std::toupper(c);\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &i : message)\
    \ {\n        ans += (std::tolower(i) - 'a' + 2) % 26 + 'a';\n    }\n    for (auto\
    \ &i : ans) {\n        if (i == 'a') {\n            ans += 'A';\n        }\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ message.length(); i++) {\n        char c = message[i];\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += c;\n\
    \        }\n        else {\n            ans += 'A' + (c - 'a');\n        }\n \
    \   }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n    }\n    for (auto\
    \ &c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'A' || c == 'E' || c\
    \ == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.", "  \
    \  std::string ans;\n    for(int i=0;i<message.length();i++){\n        if(message[i]=='a'\
    \ || message[i]=='e' || message[i]=='i' || message[i]=='o' || message[i]=='u'){\n\
    \            ans += message[i];\n        }\n        else if(message[i]=='A' ||\
    \ message[i]=='E' || message[i]=='I' || message[i]=='O' || message[i]=='U'){\n\
    \            ans += message[i];\n        }\n        else if(message[i]=='b'){\n\
    \            ans += 'b';\n        }\n        else if(message[i]=='c'){\n     \
    \       ans += 'c';\n        }\n        else if(message[i]=='d'){\n          \
    \  ans += 'd';\n        }\n        else if(message[i]=='f'){\n            ans\
    \ += 'f';\n        }\n        else if(message[i]=='g'){\n            ans += 'g';\n\
    \        }\n        else if(message[i]=='h'){\n            ans += 'h';\n     \
    \   }\n        else if(message[i]=='j'){\n            ans += 'j';\n        }\n\
    \        else if(message[i]=='k'){\n            ans += 'k';\n        }\n     \
    \   else if(message[i]=='l'){\n            ans += 'l';\n        }\n        else\
    \ if(message[i]=='m'){\n            ans += 'm';\n        }\n        else if(message[i]=='n'){\n\
    \            ans += 'n';\n        }\n        else if(message[i]=='p'){\n     \
    \       ans += 'p';\n        }\n        else if(message[i]=='q'){\n          \
    \  ans += 'q';\n        }\n        else if(message[i]=='r'){\n            ans\
    \ += 'r';\n        }\n        else if(message[i]=='s'){\n            ans += 's';\n\
    \        }\n        else if(message[i]=='t'){\n            ans += 't';\n     \
    \   }\n        else if(message[i]=='v'){\n            ans += 'v';\n        }\n\
    \        else if(message[i]=='w'){\n            ans += 'w';\n        }\n     \
    \   else if(message[i]=='x'){\n            ans += 'x';\n        }\n        else\
    \ if(message[i]=='y'){\n            ans += 'y';\n        }\n        else if(message[i]=='z'){\n\
    \            ans += 'z';\n        }\n        else if(message[i]=='A'){\n     \
    \       ans += 'A';\n        }\n        else if(message[i]=='B'){\n          \
    \  ans += 'B';\n        }\n        else if(message[i]=='C'){\n            ans\
    \ += 'C';\n        }\n        else if(", "    std::string ans = \"\";\n    for\
    \ (auto &c : message) {\n        ans += (std::tolower(c) - 'a' + 2) % 26 + 'a';\n\
    \    }\n    for (auto &c : ans) {\n        ans[ans.find(c) - 1] = (std::tolower(c)\
    \ - 'a' + 2) % 26 + 'a';\n    }\n    return ans;", "    std::string ans = \"\"\
    ;\n    for (char c : message) {\n        ans += (tolower(c) - 'a' + 2) % 26 +\
    \ 'a';\n    }\n    return ans;", "    std::string encoded = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            encoded\
    \ = encoded + c;\n        }\n        else {\n            int index = c - 'a';\n\
    \            int index2 = index + 2;\n            char temp = encoded[i - 1];\n\
    \            encoded[i - 1] = encoded[index];\n            encoded[index] = encoded[index2];\n\
    \            encoded[index2] = temp;\n        }\n    }\n    return encoded;",
  "    std::string ans = \"\";\n    for (char c : message) {\n        ans += (isupper(c)\
    \ ? tolower(c) : toupper(c));\n    }\n    for (char c : ans) {\n        if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)\
    \ + 1] = tolower(ans[ans.find(c) + 1]);\n        }\n    }\n    for (char c : ans)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            ans[ans.find(c) + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n\
    \    }\n    return ans;", "    std::string encodedMessage;\n    for(char &c: message)\
    \ {\n        switch(c) {\n            case 'a':\n                encodedMessage\
    \ += \"A\";\n                break;\n            case 'b':\n                encodedMessage\
    \ += \"B\";\n                break;\n            case 'c':\n                encodedMessage\
    \ += \"C\";\n                break;\n            case 'd':\n                encodedMessage\
    \ += \"D\";\n                break;\n            case 'e':\n                encodedMessage\
    \ += \"E\";\n                break;\n            case 'f':\n                encodedMessage\
    \ += \"F\";\n                break;\n            case 'g':\n                encodedMessage\
    \ += \"G\";\n                break;\n            case 'h':\n                encodedMessage\
    \ += \"H\";\n                break;\n            case 'i':\n                encodedMessage\
    \ += \"I\";\n                break;\n            case 'j':\n                encodedMessage\
    \ += \"J\";\n                break;\n            case 'k':\n                encodedMessage\
    \ += \"K\";\n                break;\n            case 'l':\n                encodedMessage\
    \ += \"L\";\n                break;\n            case 'm':\n                encodedMessage\
    \ += \"M\";\n                break;\n            case 'n':\n                encodedMessage\
    \ += \"N\";\n                break;\n            case 'o':\n                encodedMessage\
    \ += \"O\";\n                break;\n            case 'p':\n                encodedMessage\
    \ += \"P\";\n                break;\n            case 'q':\n                encodedMessage\
    \ += \"Q\";\n                break;\n            case 'r':\n                encodedMessage\
    \ += \"R\";\n                break;\n            case 's':\n                encodedMessage\
    \ += \"S\";\n                break;\n            case 't':\n                encodedMessage\
    \ += \"T\";\n                break;\n            case 'u':\n                encodedMessage\
    \ += \"U\";\n                break;\n            case 'v':\n                encodedMessage\
    \ += \"V\";\n                break;\n            case 'w':\n                encodedMessage\
    \ += \"W\";\n                break;\n            case 'x':\n                encodedMessage\
    \ += \"X\";\n                break;\n            case 'y':\n                encodedMessage\
    \ += \"Y\";\n                break;\n            case 'z':\n                encodedMessage\
    \ += \"Z\";\n                break;\n            case 'A':\n                encodedMessage\
    \ += \"A\";\n                break;\n            case 'B':\n                encodedMessage\
    \ += \"B\";\n                break;\n            case 'C':\n                encodedMessage\
    \ += \"C\";\n                break;\n            case 'D':\n                encodedMessage\
    \ += \"D\";\n                break;\n            case 'E':\n                encodedMessage\
    \ += \"E\";\n                break;\n            case 'F':\n                encodedMessage\
    \ += \"F\";\n                break;\n            case 'G':\n                encodedMessage\
    \ += \"G\";\n                break;\n            case 'H':\n                encodedMessage\
    \ += \"H\";\n                break;\n            case 'I':\n                encodedMessage\
    \ += \"I\";\n                break;\n            case 'J':\n                encodedMessage\
    \ += \"J\";\n                break;\n            case 'K':\n                encodedMessage\
    \ += \"K\";\n                break;\n            case 'L':\n                encodedMessage\
    \ += \"L\";\n                break;\n            case '", "    std::string ans\
    \ = \"\";\n    for (auto &c : message) {\n        if (c >= 'a' && c <= 'z') {\n\
    \            ans += c + 1;\n        } else if (c >= 'A' && c <= 'Z') {\n     \
    \       ans += c + 1;\n        } else if (c >= '0' && c <= '9') {\n          \
    \  ans += c + 1;\n        } else if (c == '.' || c == '!' || c == '?' || c ==\
    \ '-' || c == '_' || c == '/' || c == '\\\\' || c == '(' || c == ')' || c == '*'\
    \ || c == '+' || c == '=' || c == '[' || c == ']' || c == '{' || c == '}' || c\
    \ == '|' || c == '~') {\n            ans += c;\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for (char &c : message) {\n        char temp =\
    \ c;\n        temp = temp - 'a' + 2;\n        if (temp > 'z') {\n            temp\
    \ = 'z';\n        }\n        ans += temp;\n    }\n    for (char &c : ans) {\n\
    \        c = c + message[c - 'a'];\n    }\n    return ans;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        }\n        else {\n            ans\
    \ += 'A' + (c - 'a');\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for (auto &c : message) {\n        ans += (tolower(c) == c) ? toupper(c)\
    \ : tolower(c);\n    }\n    for (auto &c : ans) {\n        switch (c) {\n    \
    \    case 'a':\n            ans += 'b';\n            break;\n        case 'b':\n\
    \            ans += 'c';\n            break;\n        case 'c':\n            ans\
    \ += 'd';\n            break;\n        case 'd':\n            ans += 'e';\n  \
    \          break;\n        case 'e':\n            ans += 'f';\n            break;\n\
    \        case 'f':\n            ans += 'g';\n            break;\n        case\
    \ 'g':\n            ans += 'h';\n            break;\n        case 'h':\n     \
    \       ans += 'i';\n            break;\n        case 'i':\n            ans +=\
    \ 'j';\n            break;\n        case 'j':\n            ans += 'k';\n     \
    \       break;\n        case 'k':\n            ans += 'l';\n            break;\n\
    \        case 'l':\n            ans += 'm';\n            break;\n        case\
    \ 'm':\n            ans += 'n';\n            break;\n        case 'n':\n     \
    \       ans += 'o';\n            break;\n        case 'o':\n            ans +=\
    \ 'p';\n            break;\n        case 'p':\n            ans += 'q';\n     \
    \       break;\n        case 'q':\n            ans += 'r';\n            break;\n\
    \        case 'r':\n            ans += 's';\n            break;\n        case\
    \ 's':\n            ans += 't';\n            break;\n        case 't':\n     \
    \       ans += 'u';\n            break;\n        case 'u':\n            ans +=\
    \ 'v';\n            break;\n        case 'v':\n            ans += 'w';\n     \
    \       break;\n        case 'w':\n            ans += 'x';\n            break;\n\
    \        case 'x':\n            ans += 'y';\n            break;\n        case\
    \ 'y':\n            ans += 'z';\n            break;\n        case 'z':\n     \
    \       ans += 'a';\n            break;\n        default:\n            ans +=\
    \ c;\n            break;\n        }\n    }\n    return ans;", "    std::string\
    \ encoded = \"\";\n    for(int i = 0; i < message.size(); i++) {\n        char\
    \ c = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            encoded += c;\n        }\n        else {\n        \
    \    char nextLetter = message[(i + 1) % (message.size())];\n            char\
    \ nextVowel = message[(i + 2) % (message.size())];\n            char nextVowel2\
    \ = message[(i + 3) % (message.size())];\n            char nextVowel3 = message[(i\
    \ + 4) % (message.size())];\n            char nextVowel4 = message[(i + 5) % (message.size())];\n\
    \            char nextVowel5 = message[(i + 6) % (message.size())];\n        \
    \    char nextVowel6 = message[(i + 7) % (message.size())];\n            char\
    \ nextVowel7 = message[(i + 8) % (message.size())];\n            char nextVowel8\
    \ = message[(i + 9) % (message.size())];\n            char nextVowel9 = message[(i\
    \ + 10) % (message.size())];\n            char nextVowel10 = message[(i + 11)\
    \ % (message.size())];\n            char nextVowel11 = message[(i + 12) % (message.size())];\n\
    \            char nextVowel12 = message[(i + 13) % (message.size())];\n      \
    \      char nextVowel13 = message[(i + 14) % (message.size())];\n            char\
    \ nextVowel14 = message[(i + 15) % (message.size())];\n            char nextVowel15\
    \ = message[(i + 16) % (message.size())];\n            char nextVowel16 = message[(i\
    \ + 17) % (message.size())];\n            char nextVowel17 = message[(i + 18)\
    \ % (message.size())];\n            char nextVowel18 = message[(i + 19) % (message.size())];\n\
    \            char nextVowel19 = message[(i + 20) % (message.size())];\n      \
    \      char nextVowel20 = message[(i + 21) % (message.size())];\n            char\
    \ nextVowel21 = message[(i + 22) % (message.size())];\n            char nextVowel22\
    \ = message[(i + 23) % (message.size())];\n            char nextVowel23 = message[(i\
    \ + 24) % (message.size())];\n            char nextVowel24 = message[(i + 25)\
    \ % (message.size())];\n            char nextVowel25 = message[(i", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c\
    \ = message[i];\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        } else {\n            ans += 'A' +\
    \ (c - 'a');\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n\
    \        char c = ans[i];\n        if(c == 'A') {\n            ans[i] = 'a';\n\
    \        } else if(c == 'a') {\n            ans[i] = 'A';\n        }\n    }\n\
    \    return ans;", "    std::string ans;\n    for(int i=0;i<message.length();i++){\n\
    \        char c = message[i];\n        if(c>='a' && c<='z'){\n            ans\
    \ += message[i];\n        }\n        else if(c>='A' && c<='Z'){\n            ans\
    \ += message[i];\n        }\n        else if(c>='a' && c<='z'){\n            ans\
    \ += message[i];\n        }\n        else if(c>='A' && c<='Z'){\n            ans\
    \ += message[i];\n        }\n    }\n    return ans;", "    std::string ans = \"\
    \";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(isalpha(c)) {\n            ans += toupper(c);\n        }\n       \
    \ else {\n            ans += c;\n        }\n    }\n    for(int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if(isalpha(c)) {\n            ans[i]\
    \ = tolower(c);\n        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n\
    \        char c = ans[i];\n        if(isalpha(c)) {\n            ans[i] = toupper(c);\n\
    \        }\n    }\n    for(int i = 0; i < ans.length(); i++) {\n        char c\
    \ = ans[i];\n        if(isalpha(c)) {\n            ans[i] = tolower(c);\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (int i\
    \ = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ ('a' <= c && c <= 'z') {\n            ans += c;\n        } else if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans += 'A';\n\
    \        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans[i] = 'A';\n        } else if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n\
    \        } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\
    \ {\n            ans[i] = 'A';\n        } else if (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            ans[i] = 'a';\n        }\n    }\n\
    \    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n    \
    \    if ('a' <= c && c <= 'z') {\n            ans[i] = c;\n        } else if (c\
    \ == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[i]\
    \ = 'A';\n        } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans[i] = 'a';\n        }\n    }\n    for (int i = 0;\
    \ i < ans.length(); i++) {\n        char c = ans[i];\n        if ('a' <= c &&\
    \ c <= 'z') {\n            ans[i] = c;\n        } else if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[i] = 'A';\n        }\
    \ else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       ans[i] = 'a';\n        }\n    }\n    for (int i = 0; i < ans.length();\
    \ i++) {\n        char c = ans[i];\n        if ('a' <= c && c <= 'z') {\n    \
    \        ans[i] = c;\n        } else if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O", "    std::string ans = \"\";\n    for (char c : message) {\n       \
    \ if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (char c : ans) {\n     \
    \   if (c == 'A') {\n            ans += 'B';\n        } else if (c == 'E') {\n\
    \            ans += 'F';\n        } else if (c == 'I') {\n            ans += 'J';\n\
    \        } else if (c == 'O') {\n            ans += 'M';\n        } else if (c\
    \ == 'U') {\n            ans += 'N';\n        } else if (c == 'Y') {\n       \
    \     ans += 'R';\n        } else if (c == 'a') {\n            ans += 'b';\n \
    \       } else if (c == 'e') {\n            ans += 'f';\n        } else if (c\
    \ == 'i') {\n            ans += 'j';\n        } else if (c == 'o') {\n       \
    \     ans += 'm';\n        } else if (c == 'u') {\n            ans += 'n';\n \
    \       } else if (c == 'y') {\n            ans += 'r';\n        }\n    }\n  \
    \  return ans;", "    std::string encoded = \"\";\n    for (auto &c: message)\
    \ {\n        switch (c) {\n            case 'a':\n            case 'e':\n    \
    \        case 'i':\n            case 'o':\n            case 'u':\n           \
    \     encoded += 'A';\n                break;\n            case 'b':\n       \
    \     case 'f':\n            case 'k':\n            case 'n':\n            case\
    \ 'p':\n                encoded += 'B';\n                break;\n            case\
    \ 'c':\n            case 'd':\n            case 'g':\n            case 'j':\n\
    \            case 'q':\n                encoded += 'C';\n                break;\n\
    \            case 'h':\n            case 'j':\n            case 'l':\n       \
    \     case 'n':\n            case 'q':\n                encoded += 'D';\n    \
    \            break;\n            case 'e':\n            case 'f':\n          \
    \  case 'g':\n            case 'k':\n            case 'l':\n            case 'm':\n\
    \                encoded += 'E';\n                break;\n            case 'f':\n\
    \            case 'g':\n            case 'k':\n            case 'l':\n       \
    \     case 'n':\n            case 'p':\n                encoded += 'F';\n    \
    \            break;\n            case 'g':\n            case 'k':\n          \
    \  case 'l':\n            case 'n':\n            case 'p':\n                encoded\
    \ += 'G';\n                break;\n            case 'h':\n            case 'j':\n\
    \            case 'l':\n            case 'n':\n            case 'q':\n       \
    \         encoded += 'H';\n                break;\n            case 'i':\n   \
    \         case 'j':\n            case 'k':\n            case 'l':\n          \
    \  case 'm':\n                encoded += 'I';\n                break;\n      \
    \      case 'j':\n            case 'k':\n            case 'l':\n            case\
    \ 'm':\n                encoded += 'J';\n                break;\n            case\
    \ 'k':\n            case 'l':\n            case 'm':\n                encoded\
    \ += 'K';\n                break;\n            case 'l':\n            case 'm':\n\
    \                encoded += 'L';\n                break;\n            case 'm':\n\
    \                encoded += 'M';\n                break;\n            case 'n':\n\
    \            case 'o':\n            case 'p':\n                encoded += 'N';\n\
    \                break;\n            case 'o':\n            case 'p':\n      \
    \          encoded += 'O';\n                break;\n            case 'p':\n  \
    \              encoded += 'P';\n                break;\n            case 'q':\n\
    \                encoded += 'Q';\n                break;\n            case 'r':\n\
    \            case 's':\n            case 't':\n                encoded += 'R';\n\
    \                break;\n            case 's':\n            case 't':\n      \
    \          encoded += 'S';\n                break;\n            case 't':\n  \
    \              encoded += 'T';\n                break;\n            case 'u':\n\
    \                encoded += 'U';\n                break;\n            case 'v':\n\
    \                encoded += 'V';\n                break;\n            case 'w':\n\
    \                encoded += 'W';\n                break;\n            case 'x':\n\
    \                encoded += 'X';\n                break;\n            case 'y':\n\
    \                encoded += 'Y';\n", "    std::string encodedMessage = \"\";\n\
    \    for (int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        encodedMessage += tolower(c);\n    }\n    for (int i = 0; i < encodedMessage.length();\
    \ i++) {\n        char c = encodedMessage[i];\n        encodedMessage += toupper(c);\n\
    \    }\n    for (int i = 0; i < encodedMessage.length(); i++) {\n        char\
    \ c = encodedMessage[i];\n        encodedMessage += tolower(c);\n    }\n    return\
    \ encodedMessage;", "    std::string ans = \"\";\n    for (char c : message) {\n\
    \        ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (char\
    \ c : ans) {\n        ans[ans.find(c) - 1] = (std::toupper(c) - 'A' + 2) % 26\
    \ + 'A';\n    }\n    return ans;"]
stop_tokens:
- "\n}"
