name: HumanEval_93_encode
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes\
  \ a message, and encodes in such a \n// way that it swaps case of all letters, replaces\
  \ all vowels in \n// the message with the letter that appears 2 places ahead of\
  \ that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n\
  // >>> encode((\"test\"))\n// (\"TGST\")\n// >>> encode((\"This is a message\"))\n\
  // (\"tHKS KS C MGSSCGG\")\nstd::string encode(std::string message) {\n"
tests: "}\nint main() {\n    auto candidate = encode;\n    assert(candidate((\"TEST\"\
  )) == (\"tgst\"));\n    assert(candidate((\"Mudasir\")) == (\"mWDCSKR\"));\n   \
  \ assert(candidate((\"YES\")) == (\"ygs\"));\n    assert(candidate((\"This is a\
  \ message\")) == (\"tHKS KS C MGSSCGG\"));\n    assert(candidate((\"I DoNt KnOw\
  \ WhAt tO WrItE\")) == (\"k dQnT kNqW wHcT Tq wRkTg\"));\n}\n"
completions: ["    std::string ans = \"\";\n    for (auto &c : message) {\n      \
    \  if (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else\
    \ {\n            ans += c;\n        }\n    }\n    for (auto &c : ans) {\n    \
    \    if (std::isalpha(c)) {\n            ans[ans.find(c)] = std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c)) {\n\
    \            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if (std::isalpha(c)) {\n            ans[ans.find(c)] =\
    \ std::toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if (std::isalpha(c))\
    \ {\n            ans[ans.find(c)] = std::tolower(c);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for (auto &c : message) {\n       \
    \ ans += (isalpha(c)) ? (toupper(c)) : (tolower(c));\n    }\n    for (auto &c\
    \ : ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans[ans.find(c) + 2] = toupper(ans[ans.find(c) + 2]);\n     \
    \   }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = tolower(ans[ans.find(c)\
    \ - 2]);\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n \
    \   for (auto &c : message) {\n        switch (c) {\n            case 'a':\n \
    \           case 'e':\n            case 'i':\n            case 'o':\n        \
    \    case 'u':\n                ans += 'A';\n                break;\n        \
    \    case 'b':\n            case 'f':\n            case 'n':\n            case\
    \ 'r':\n            case 't':\n                ans += 'B';\n                break;\n\
    \            case 'c':\n            case 'd':\n            case 'g':\n       \
    \     case 'h':\n            case 'j':\n                ans += 'C';\n        \
    \        break;\n            case 'e':\n            case 'f':\n            case\
    \ 'g':\n            case 'h':\n            case 'k':\n                ans += 'D';\n\
    \                break;\n            case 'f':\n            case 'g':\n      \
    \      case 'h':\n            case 'j':\n                ans += 'E';\n       \
    \         break;\n            case 'g':\n            case 'h':\n            case\
    \ 'j':\n                ans += 'F';\n                break;\n            case\
    \ 'h':\n            case 'j':\n                ans += 'G';\n                break;\n\
    \            case 'i':\n            case 'j':\n                ans += 'H';\n \
    \               break;\n            case 'k':\n                ans += 'I';\n \
    \               break;\n            case 'l':\n                ans += 'J';\n \
    \               break;\n            case 'm':\n                ans += 'K';\n \
    \               break;\n            case 'n':\n                ans += 'L';\n \
    \               break;\n            case 'o':\n                ans += 'M';\n \
    \               break;\n            case 'p':\n                ans += 'N';\n \
    \               break;\n            case 'q':\n                ans += 'O';\n \
    \               break;\n            case 'r':\n                ans += 'P';\n \
    \               break;\n            case 's':\n                ans += 'Q';\n \
    \               break;\n            case 't':\n                ans += 'R';\n \
    \               break;\n            case 'u':\n                ans += 'S';\n \
    \               break;\n            case 'v':\n                ans += 'T';\n \
    \               break;\n            case 'w':\n                ans += 'U';\n \
    \               break;\n            case 'x':\n                ans += 'V';\n \
    \               break;\n            case 'y':\n                ans += 'W';\n \
    \               break;\n            case 'z':\n                ans += 'X';\n \
    \               break;\n            default:\n                ans += c;\n    \
    \    }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c\
    \ : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n            ans += c;\n        } else {\n            ans += tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) + 2] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c) - 2] = tolower(c);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans\
    \ += c;\n        } else {\n            ans += std::toupper(c);\n        }\n  \
    \  }\n    for (int i = 0; i < ans.length(); i++) {\n        char c = ans[i];\n\
    \        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n   \
    \         ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c ==\
    \ 'U') {\n            ans[i] = 'a';\n        } else {\n            ans[i] = std::tolower(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length(); i++) {\n        char\
    \ c = ans[i];\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n            ans[i] = 'A';\n        } else {\n            ans[i] = std::toupper(c);\n\
    \        }\n    }\n    for (int i = 0; i < ans.length", "    std::string encoded\
    \ = \"\";\n    for (char c : message) {\n        if ('A' <= c && c <= 'Z') {\n\
    \            encoded += c;\n        } else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            encoded += c + 2;\n        } else {\n\
    \            encoded += c;\n        }\n    }\n    return encoded;", "    std::string\
    \ ans = \"\";\n    for (auto &c : message) {\n        ans += (std::toupper(c)\
    \ - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c : ans) {\n        ans[ans.find(c)\
    \ - 2] = ans[ans.find(c) - 2].tolower() + \n            ans[ans.find(c) - 2].toupper();\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        ans += (std::tolower(c) == c) ? std::toupper(c) : c;\n    }\n   \
    \ for (auto &c : ans) {\n        std::map<char, char> vowels;\n        vowels['a']\
    \ = 'A';\n        vowels['e'] = 'E';\n        vowels['i'] = 'I';\n        vowels['o']\
    \ = 'O';\n        vowels['u'] = 'U';\n        vowels['y'] = 'Y';\n        vowels['A']\
    \ = 'a';\n        vowels['E'] = 'e';\n        vowels['I'] = 'i';\n        vowels['O']\
    \ = 'o';\n        vowels['U'] = 'u';\n        vowels['Y'] = 'y';\n        vowels['a']\
    \ = 'A';\n        vowels['e'] = 'E';\n        vowels['i'] = 'I';\n        vowels['o']\
    \ = 'O';\n        vowels['u'] = 'U';\n        vowels['y'] = 'Y';\n        std::map<char,\
    \ char> vowels2;\n        vowels2['A'] = 'a';\n        vowels2['E'] = 'e';\n \
    \       vowels2['I'] = 'i';\n        vowels2['O'] = 'o';\n        vowels2['U']\
    \ = 'u';\n        vowels2['Y'] = 'y';\n        std::map<char, char> vowels3;\n\
    \        vowels3['A'] = 'A';\n        vowels3['E'] = 'E';\n        vowels3['I']\
    \ = 'I';\n        vowels3['O'] = 'O';\n        vowels3['U'] = 'U';\n        vowels3['Y']\
    \ = 'Y';\n        std::map<char, char> vowels4;\n        vowels4['A'] = 'a';\n\
    \        vowels4['E'] = 'e';\n        vowels4['I'] = 'i';\n        vowels4['O']\
    \ = 'o';\n        vowels4['U'] = 'u';\n        vowels4['Y'] = 'y';\n        std::map<char,\
    \ char> vowels5;\n        vowels5['A'] = 'A';\n        vowels5['E'] = 'E';\n \
    \       vowels5['I'] = 'I';\n        vowels5['O'] = 'O';\n        vowels5['U']\
    \ = 'U';\n        vowels5['Y'] = 'Y';\n        std::map<char, char> vowels6;\n\
    \        vowels6['A'] = 'a';\n        vowels6['E'] = 'e';\n        vowels6['I']\
    \ = 'i';\n        vowels6['O'] = 'o", "    std::string ans = \"\";\n    for (auto\
    \ &c : message) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            ans += c;\n        } else {\n            ans += std::tolower(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n    }\n    for (auto &c :\
    \ ans) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            ans += 'A';\n        } else {\n            ans += std::toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans += 'A';\n        } else\
    \ {\n            ans += std::toupper(c);\n        }\n", "    std::string ans =\
    \ \"\";\n    for (char c : message) {\n        ans += (isupper(c) ? tolower(c)\
    \ : toupper(c));\n    }\n    for (char c : ans) {\n        if (c == 'A' || c ==\
    \ 'E' || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n            ans[ans.find(c)] = tolower(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)] = toupper(ans[ans.find(c)]);\n\
    \        }\n    }\n    for (char c : ans) {", "    std::string ans = \"\";\n \
    \   for (int i = 0; i < message.length(); i++) {\n        if (message[i] >= 'a'\
    \ && message[i] <= 'z') {\n            ans += message[i];\n        }\n       \
    \ else if (message[i] >= 'A' && message[i] <= 'Z') {\n            ans += message[i];\n\
    \        }\n        else if (message[i] >= '0' && message[i] <= '9') {\n     \
    \       ans += message[i];\n        }\n        else if (message[i] == '.' || message[i]\
    \ == '!' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '.') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '!') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '?' || message[i] == '.') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '?') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '!') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '.') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '!') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '.' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '!' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '.') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '!' || message[i] ==\
    \ '.') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '?') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '?' || message[i] == '!') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '!' || message[i] ==\
    \ '?') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i] == '!') {\n            ans += message[i];\n        }\n\
    \        else if (message[i] == '!' || message[i] == '.') {\n            ans +=\
    \ message[i];\n        }\n        else if (message[i] == '?' || message[i] ==\
    \ '!') {\n            ans += message[i];\n        }\n        else if (message[i]\
    \ == '.' || message[i]", "    std::string ans = \"\";\n    for (auto &c : message)\
    \ {\n        if (std::isalpha(c)) {\n            ans += std::toupper(c);\n   \
    \     }\n        else if (std::islower(c)) {\n            ans += std::tolower(c);\n\
    \        }\n        else if (std::isupper(c)) {\n            ans += std::toupper(c);\n\
    \        }\n        else if (std::isspace(c)) {\n            ans += \" \";\n \
    \       }\n        else if (c == '.') {\n            ans += \" \";\n        }\n\
    \        else if (c == '?') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '!') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '-') {\n            ans += \" \";\n        }\n        else if (c == '_') {\n\
    \            ans += \" \";\n        }\n        else if (c == '/') {\n        \
    \    ans += \" \";\n        }\n        else if (c == '\\\\') {\n            ans\
    \ += \" \";\n        }\n        else if (c == '(') {\n            ans += \" \"\
    ;\n        }\n        else if (c == ')') {\n            ans += \" \";\n      \
    \  }\n        else if (c == '[') {\n            ans += \" \";\n        }\n   \
    \     else if (c == ']') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '{') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '}') {\n            ans += \" \";\n        }\n        else if (c == '<') {\n\
    \            ans += \" \";\n        }\n        else if (c == '>') {\n        \
    \    ans += \" \";\n        }\n        else if (c == '%') {\n            ans +=\
    \ \" \";\n        }\n        else if (c == '$') {\n            ans += \" \";\n\
    \        }\n        else if (c == '&') {\n            ans += \" \";\n        }\n\
    \        else if (c == '*') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '!') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '\"') {\n            ans += \" \";\n        }\n        else if (c == '\\'')\
    \ {\n            ans += \" \";\n        }\n        else if (c == '~') {\n    \
    \        ans += \" \";\n        }\n        else if (c == '@') {\n            ans\
    \ += \" \";\n        }\n        else if (c == '^') {\n            ans += \" \"\
    ;\n        }\n        else if (c == '|') {\n            ans += \" \";\n      \
    \  }\n        else if (c == '~') {\n            ans += \" \";\n        }\n   \
    \     else if (c == '>') {\n            ans += \" \";\n        }\n        else\
    \ if (c == '<') {\n            ans += \" \";\n        }\n        else if (c ==\
    \ '=') {\n            ans += \" \";\n        }\n        else if (c == '+') {\n\
    \            ans += \" \";\n        }", "    std::string ans = \"\";\n    for\
    \ (char c : message) {\n        ans += (isupper(c) ? tolower(c) : toupper(c));\n\
    \    }\n    for (char c : ans) {\n        if (c == 'A' || c == 'E' || c == 'I'\
    \ || c == 'O' || c == 'U') {\n            ans[ans.find(c) + 1] = tolower(ans[ans.find(c)\
    \ + 1]);\n        }\n    }\n    for (char c : ans) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans[ans.find(c)\
    \ + 1] = toupper(ans[ans.find(c) + 1]);\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for (auto &c : message) {\n        ans += (std::toupper(c)\
    \ - 'A' + 2) % 26 + 'A';\n    }\n    for (auto &c : ans) {\n        ans.replace(ans.find(c),\
    \ 2, c);\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &c: message) {\n        if (std::tolower(c) == c) ans += c;\n        else ans\
    \ += std::tolower(std::toupper(c));\n    }\n    for (auto &c: ans) {\n       \
    \ if (std::isalpha(c)) ans = ans.replace(c, 'A' + std::toupper(c) - 'A');\n  \
    \  }\n    for (auto &c: ans) {\n        if (std::isupper(c)) ans = ans.replace(c,\
    \ 'a' + std::tolower(c) - 'a');\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < message.length(); i++) {\n        char c = message[i];\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n    \
    \        ans += c;\n        }\n        else {\n            ans += 'A' + (c - 'a');\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for(int\
    \ i = 0; i < message.length(); i++) {\n        char c = message[i];\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans +=\
    \ c;\n        }\n        else {\n            ans += 'A' + (c - 'a');\n       \
    \ }\n    }\n    return ans;", "    std::string encoded = \"\";\n    for (auto\
    \ &c : message) {\n        switch (c) {\n            case 'a':\n             \
    \   encoded += \"A\";\n                break;\n            case 'b':\n       \
    \         encoded += \"B\";\n                break;\n            case 'c':\n \
    \               encoded += \"C\";\n                break;\n            case 'd':\n\
    \                encoded += \"D\";\n                break;\n            case 'e':\n\
    \                encoded += \"E\";\n                break;\n            case 'f':\n\
    \                encoded += \"F\";\n                break;\n            case 'g':\n\
    \                encoded += \"G\";\n                break;\n            case 'h':\n\
    \                encoded += \"H\";\n                break;\n            case 'i':\n\
    \                encoded += \"I\";\n                break;\n            case 'j':\n\
    \                encoded += \"J\";\n                break;\n            case 'k':\n\
    \                encoded += \"K\";\n                break;\n            case 'l':\n\
    \                encoded += \"L\";\n                break;\n            case 'm':\n\
    \                encoded += \"M\";\n                break;\n            case 'n':\n\
    \                encoded += \"N\";\n                break;\n            case 'o':\n\
    \                encoded += \"O\";\n                break;\n            case 'p':\n\
    \                encoded += \"P\";\n                break;\n            case 'q':\n\
    \                encoded += \"Q\";\n                break;\n            case 'r':\n\
    \                encoded += \"R\";\n                break;\n            case 's':\n\
    \                encoded += \"S\";\n                break;\n            case 't':\n\
    \                encoded += \"T\";\n                break;\n            case 'u':\n\
    \                encoded += \"U\";\n                break;\n            case 'v':\n\
    \                encoded += \"V\";\n                break;\n            case 'w':\n\
    \                encoded += \"W\";\n                break;\n            case 'x':\n\
    \                encoded += \"X\";\n                break;\n            case 'y':\n\
    \                encoded += \"Y\";\n                break;\n            case 'z':\n\
    \                encoded += \"Z\";\n                break;\n            case 'A':\n\
    \                encoded += \"a\";\n                break;\n            case 'B':\n\
    \                encoded += \"b\";\n                break;\n            case 'C':\n\
    \                encoded += \"c\";\n                break;\n            case 'D':\n\
    \                encoded += \"d\";\n                break;\n            case 'E':\n\
    \                encoded += \"e\";\n                break;\n            case 'F':\n\
    \                encoded += \"f\";\n                break;\n            case 'G':\n\
    \                encoded += \"g\";\n                break;\n            case 'H':\n\
    \                encoded += \"h\";\n                break;\n            case 'I':\n\
    \                encoded += \"i\";\n                break;\n            case 'J':\n\
    \                encoded += \"j\";\n                break;\n            case 'K':\n\
    \                encoded += \"k\";\n                break;\n            case 'L':\n\
    \                encoded += \"l\";\n                break;\n            case 'M':\n\
    \                encoded += \"m\";\n                break;\n            case 'N':\n\
    \                encoded += \"n\";\n                break;\n            case 'O':\n\
    \                encoded += \"o\";\n                break;\n            case 'P':\n",
  "    std::string ans = \"\";\n    for (auto &c : message) {\n        if ('A' <=\
    \ c && c <= 'Z') {\n            ans += c;\n        } else {\n            ans +=\
    \ tolower(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a' <=\
    \ c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n  \
    \  }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n       \
    \     ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z')\
    \ {\n            ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n     \
    \       ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z')\
    \ {\n            ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto\
    \ &c : ans) {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)]\
    \ = toupper(c);\n        }\n    }\n    for (auto &c : ans) {\n        if ('a'\
    \ <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n        }\n\
    \    }\n    for (auto &c : ans) {\n        if ('a' <= c && c <= 'z') {\n     \
    \       ans[ans.find(c)] = toupper(c);\n        }\n    }\n    for (auto &c : ans)\
    \ {\n        if ('a' <= c && c <= 'z') {\n            ans[ans.find(c)] = toupper(c);\n\
    \        }\n    }\n", "    std::string ans = \"\";\n    for (char c : message)\
    \ {\n        ans += (std::toupper(c) - 'A' + 2) % 26 + 'A';\n    }\n    for (char\
    \ c : ans) {\n        ans.replace(ans.find(c), 2, c);\n    }\n    return ans;"]
stop_tokens:
- "\n}"
