language: cpp
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    long diff = 0;\n    long count = 0;\n    for(long\
    \ i = 0; i < game.size(); i++) {\n        sum += game[i];\n        for(long j\
    \ = 0; j < guess.size(); j++) {\n            diff = abs(game[i] - guess[j]);\n\
    \            if(diff == 0) {\n                count++;\n            }\n      \
    \      if(diff < sum) {\n                result.push_back(diff);\n           \
    \ }\n        }\n    }\n    if(count == guess.size()) {\n        result.push_back(0);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0t653icd.cpp: In function 'int main()':\n/tmp/tmp0t653icd.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0t653icd.cpp:2:\n/tmp/tmp0t653icd.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp0t653icd.cpp:40:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp0t653icd.cpp:40:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0t653icd.cpp:40:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp0t653icd.cpp:40:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0t653icd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(size_t\
    \ i = 0; i < guess.size(); i++) {\n        if(game[i] == guess[i]) {\n       \
    \     score++;\n        } else {\n            diff = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvtrmy1p.cpp: In function 'int main()':\n/tmp/tmpjvtrmy1p.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjvtrmy1p.cpp:2:\n/tmp/tmpjvtrmy1p.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpjvtrmy1p.cpp:32:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpjvtrmy1p.cpp:32:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjvtrmy1p.cpp:32:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpjvtrmy1p.cpp:32:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjvtrmy1p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score;\n    long diff;\n    long diff2;\n    long diff3;\n\
    \    long diff4;\n    long diff5;\n    long diff6;\n    long diff7;\n    long\
    \ diff8;\n    long diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n\
    \    long diff13;\n    long diff14;\n    long diff15;\n    long diff16;\n    long\
    \ diff17;\n    long diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n\
    \    long diff22;\n    long diff23;\n    long diff24;\n    long diff25;\n    long\
    \ diff26;\n    long diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n\
    \    long diff31;\n    long diff32;\n    long diff33;\n    long diff34;\n    long\
    \ diff35;\n    long diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n\
    \    long diff40;\n    long diff41;\n    long diff42;\n    long diff43;\n    long\
    \ diff44;\n    long diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n\
    \    long diff49;\n    long diff50;\n    long diff51;\n    long diff52;\n    long\
    \ diff53;\n    long diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n\
    \    long diff58;\n    long diff59;\n    long diff60;\n    long diff61;\n    long\
    \ diff62;\n    long diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n\
    \    long diff67;\n    long diff68;\n    long diff69;\n    long diff70;\n    long\
    \ diff71;\n    long diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n\
    \    long diff76;\n    long diff77;\n    long diff78;\n    long diff79;\n    long\
    \ diff80;\n    long diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n\
    \    long diff85;\n    long diff86;\n\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcq9y9qgj.cpp: In function 'int main()':\n/tmp/tmpcq9y9qgj.cpp:108:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcq9y9qgj.cpp:2:\n/tmp/tmpcq9y9qgj.cpp:109:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpcq9y9qgj.cpp:109:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpcq9y9qgj.cpp:109:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcq9y9qgj.cpp:109:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpcq9y9qgj.cpp:109:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcq9y9qgj.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _Inp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long diff = 0;\n    long sum = 0;\n    long\
    \ count = 0;\n    for (long i = 0; i < game.size(); i++) {\n        sum += game[i];\n\
    \        count += 1;\n    }\n    for (long i = 0; i < guess.size(); i++) {\n \
    \       diff = abs(guess[i] - score);\n        if (diff == 0) {\n            result.push_back(0);\n\
    \        } else {\n            result.push_back(diff);\n        }\n    }\n   \
    \ for (long i = 0; i < guess.size(); i++) {\n        if (guess[i] == sum) {\n\
    \            result.push_back(0);\n        } else {\n            result.push_back(abs(guess[i]\
    \ - sum));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy30af0xo.cpp: In function 'int main()':\n/tmp/tmpy30af0xo.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy30af0xo.cpp:2:\n/tmp/tmpy30af0xo.cpp:45:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpy30af0xo.cpp:45:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpy30af0xo.cpp:45:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy30af0xo.cpp:45:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpy30af0xo.cpp:45:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy30af0xo.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score;\n    long diff;\n    long sum = 0;\n\
    \    long count = 0;\n    long max = 0;\n    long min = 0;\n    long mid = 0;\n\
    \    long mid2 = 0;\n    long mid3 = 0;\n    long mid4 = 0;\n    long mid5 = 0;\n\
    \    long mid6 = 0;\n    long mid7 = 0;\n    long mid8 = 0;\n    long mid9 = 0;\n\
    \    long mid10 = 0;\n    long mid11 = 0;\n    long mid12 = 0;\n    long mid13\
    \ = 0;\n    long mid14 = 0;\n    long mid15 = 0;\n    long mid16 = 0;\n    long\
    \ mid17 = 0;\n    long mid18 = 0;\n    long mid19 = 0;\n    long mid20 = 0;\n\
    \    long mid21 = 0;\n    long mid22 = 0;\n    long mid23 = 0;\n    long mid24\
    \ = 0;\n    long mid25 = 0;\n    long mid26 = 0;\n    long mid27 = 0;\n    long\
    \ mid28 = 0;\n    long mid29 = 0;\n    long mid30 = 0;\n    long mid31 = 0;\n\
    \    long mid32 = 0;\n    long mid33 = 0;\n    long mid34 = 0;\n    long mid35\
    \ = 0;\n    long mid36 = 0;\n    long mid37 = 0;\n    long mid38 = 0;\n    long\
    \ mid39 = 0;\n    long mid40 = 0;\n    long mid41 = 0;\n    long mid42 = 0;\n\
    \    long mid43 = 0;\n    long mid44 = 0;\n    long mid45 = 0;\n    long mid46\
    \ = 0;\n    long mid47 = 0;\n    long mid48 = 0;\n    long mid49 = 0;\n    long\
    \ mid50 = 0;\n    long mid51 = 0;\n    long mid52 = 0;\n    long mid53 = 0;\n\
    \    long mid54 = 0;\n    long mid55 = 0;\n    long mid56 = 0;\n    long mid57\
    \ = 0;\n    long mid58 = 0;\n    long mid59 = 0;\n    long mid60 = 0;\n    long\
    \ mid61 = 0;\n    long mid62 = 0;\n    long mid63 = 0;\n    long mid64 = 0;\n\
    \    long mid65 = 0;\n    long mid66 = 0;\n    long mid67 = 0;\n    long mid68\
    \ = 0;\n    long mid69 = 0;\n    long mid70 = 0;\n    long mid71 = 0;\n    long\
    \ mid72 = 0;\n    long mid73 = 0;\n    long mid74 = 0;\n    long mid75 = 0;\n\
    \    long mid76 = 0;\n    long mid77 = 0;\n    long mid78 = 0;\n    long mid79\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxt7j83af.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpxt7j83af.cpp:103:1: error: expected\
    \ initializer before '}' token\n }\n ^\n/tmp/tmpxt7j83af.cpp: In function 'int\
    \ main()':\n/tmp/tmpxt7j83af.cpp:105:10: error: 'candidate' does not name a type\n\
    \     auto candidate = compare;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxt7j83af.cpp:2:\n/tmp/tmpxt7j83af.cpp:106:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpxt7j83af.cpp:106:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpxt7j83af.cpp:106:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpxt7j83af.cpp:106:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpxt7j83af.cpp:106:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpxt7j83af.cpp:2:\n/usr/include/c++/4.8.2/bi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9l0bk6r.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpa9l0bk6r.cpp:18:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmpa9l0bk6r.cpp:72:10: error: redeclaration of 'long int i'\n     long i\
    \ = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:20:10: error: 'long int i' previously\
    \ declared here\n     long i = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:73:10: error:\
    \ redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:21:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpa9l0bk6r.cpp:74:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:22:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:75:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:23:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpa9l0bk6r.cpp:76:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:24:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:77:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:25:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpa9l0bk6r.cpp:78:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:26:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:79:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:27:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpa9l0bk6r.cpp:80:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:28:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpa9l0bk6r.cpp:81:10: error:\
    \ redeclaration of"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zgokmv5.cpp: In function 'int main()':\n/tmp/tmp2zgokmv5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2zgokmv5.cpp:2:\n/tmp/tmp2zgokmv5.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp2zgokmv5.cpp:27:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp2zgokmv5.cpp:27:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2zgokmv5.cpp:27:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2zgokmv5.cpp:27:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2zgokmv5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long diff2\
    \ = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n    long diff5 = 0;\n    long\
    \ diff6 = 0;\n    long diff7 = 0;\n    long diff8 = 0;\n    long diff9 = 0;\n\
    \    long diff10 = 0;\n    long diff11 = 0;\n    long diff12 = 0;\n    long diff13\
    \ = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n    long diff16 = 0;\n   \
    \ long diff17 = 0;\n    long diff18 = 0;\n    long diff19 = 0;\n    long diff20\
    \ = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n    long diff23 = 0;\n   \
    \ long diff24 = 0;\n    long diff25 = 0;\n    long diff26 = 0;\n    long diff27\
    \ = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n    long diff30 = 0;\n   \
    \ long diff31 = 0;\n    long diff32 = 0;\n    long diff33 = 0;\n    long diff34\
    \ = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n    long diff37 = 0;\n   \
    \ long diff38 = 0;\n    long diff39 = 0;\n    long diff40 = 0;\n    long diff41\
    \ = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n    long diff44 = 0;\n   \
    \ long diff45 = 0;\n    long diff46 = 0;\n    long diff47 = 0;\n    long diff48\
    \ = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n    long diff51 = 0;\n   \
    \ long diff52 = 0;\n    long diff53 = 0;\n    long diff54 = 0;\n    long diff55\
    \ = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n    long diff58 = 0;\n   \
    \ long diff59 = 0;\n    long diff60 = 0;\n    long diff61 = 0;\n    long diff62\
    \ = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n    long diff65 = 0;\n   \
    \ long diff66 = 0;\n    long diff67 = 0;\n    long diff68 = 0;\n    long diff69\
    \ = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n    long diff72 = 0;\n   \
    \ long diff73 = 0;\n    long diff74 = 0;\n    long diff75 = 0;\n    long diff76\
    \ = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n    long diff79 = 0;\n   \
    \ long diff80 = 0;\n    long diff81 = 0;\n    long diff82 = 0;\n    long diff83\
    \ = 0;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_j57z9fp.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmp_j57z9fp.cpp:18:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmp_j57z9fp.cpp: In function 'int main()':\n/tmp/tmp_j57z9fp.cpp:104:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_j57z9fp.cpp:2:\n/tmp/tmp_j57z9fp.cpp:105:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp_j57z9fp.cpp:105:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp_j57z9fp.cpp:105:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_j57z9fp.cpp:105:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_j57z9fp.cpp:105:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        score += game[i] * guess[i];\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        result[i] = abs(score - guess[i]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6a6zll8.cpp: In function 'int main()':\n/tmp/tmpe6a6zll8.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe6a6zll8.cpp:2:\n/tmp/tmpe6a6zll8.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpe6a6zll8.cpp:29:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpe6a6zll8.cpp:29:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe6a6zll8.cpp:29:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpe6a6zll8.cpp:29:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe6a6zll8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        guess = guess[i];\n        score =\
    \ game[i];\n        diff = abs(guess - score);\n        if (guess == score) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjc302e7.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpdjc302e7.cpp:19:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmpdjc302e7.cpp:20:34: error: request for member 'size' in 'guess', which\
    \ is of non-class type 'long int'\n     for (size_t i = 0; i < guess.size(); i++)\
    \ {\n                                  ^\n/tmp/tmpdjc302e7.cpp:21:24: error: invalid\
    \ types 'long int[size_t {aka long unsigned int}]' for array subscript\n     \
    \    guess = guess[i];\n                        ^\n/tmp/tmpdjc302e7.cpp: In function\
    \ 'int main()':\n/tmp/tmpdjc302e7.cpp:33:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = compare;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdjc302e7.cpp:2:\n/tmp/tmpdjc302e7.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdjc302e7.cpp:34:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdjc302e7.cpp:34:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdjc302e7.cpp:34:95: error: no matching function "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpomp4373k.cpp: In function 'int main()':\n/tmp/tmpomp4373k.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpomp4373k.cpp:2:\n/tmp/tmpomp4373k.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpomp4373k.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpomp4373k.cpp:26:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpomp4373k.cpp:26:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpomp4373k.cpp:26:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpomp4373k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    for (size_t i = 0; i < guess.size(); i++) {\n   \
    \     result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ra1tmae.cpp: In function 'int main()':\n/tmp/tmp5ra1tmae.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ra1tmae.cpp:2:\n/tmp/tmp5ra1tmae.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp5ra1tmae.cpp:25:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp5ra1tmae.cpp:25:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ra1tmae.cpp:25:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5ra1tmae.cpp:25:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5ra1tmae.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long diff = 0;\n    long sum = 0;\n    long\
    \ count = 0;\n    long sum2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n \
    \   long count3 = 0;\n    long sum4 = 0;\n    long count4 = 0;\n    long sum5\
    \ = 0;\n    long count5 = 0;\n    long sum6 = 0;\n    long count6 = 0;\n    long\
    \ sum7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long count8 = 0;\n\
    \    long sum9 = 0;\n    long count9 = 0;\n    long sum10 = 0;\n    long count10\
    \ = 0;\n    long sum11 = 0;\n    long count11 = 0;\n    long sum12 = 0;\n    long\
    \ count12 = 0;\n    long sum13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n\
    \    long count14 = 0;\n    long sum15 = 0;\n    long count15 = 0;\n    long sum16\
    \ = 0;\n    long count16 = 0;\n    long sum17 = 0;\n    long count17 = 0;\n  \
    \  long sum18 = 0;\n    long count18 = 0;\n    long sum19 = 0;\n    long count19\
    \ = 0;\n    long sum20 = 0;\n    long count20 = 0;\n    long sum21 = 0;\n    long\
    \ count21 = 0;\n    long sum22 = 0;\n    long count22 = 0;\n    long sum23 = 0;\n\
    \    long count23 = 0;\n    long sum24 = 0;\n    long count24 = 0;\n    long sum25\
    \ = 0;\n    long count25 = 0;\n    long sum26 = 0;\n    long count26 = 0;\n  \
    \  long sum27 = 0;\n    long count27 = 0;\n    long sum28 = 0;\n    long count28\
    \ = 0;\n    long sum29 = 0;\n    long count29 = 0;\n    long sum30 = 0;\n    long\
    \ count30 = 0;\n    long sum31 = 0;\n    long count31 = 0;\n    long sum32 = 0;\n\
    \    long count32 = 0;\n    long sum33 = 0;\n    long count33 = 0;\n    long sum34\
    \ = 0;\n    long count34 = 0;\n    long sum35 = 0;\n    long count35 = 0;\n  \
    \  long sum36 = 0;\n    long count36 = 0;\n    long sum37 = 0;\n    long count37\
    \ = 0;\n    long sum38 = 0;\n    long count38 = 0;\n    long sum39 = 0;\n    long\
    \ count39 = 0;\n    long sum40 = 0;\n    long count40 = 0;\n    long sum41 = 0;\n\
    \    long count41 = 0;\n    long sum42 = 0;\n    long count42\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi57e31mi.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpi57e31mi.cpp:104:1: error: expected\
    \ initializer before '}' token\n }\n ^\n/tmp/tmpi57e31mi.cpp: In function 'int\
    \ main()':\n/tmp/tmpi57e31mi.cpp:106:10: error: 'candidate' does not name a type\n\
    \     auto candidate = compare;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi57e31mi.cpp:2:\n/tmp/tmpi57e31mi.cpp:107:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpi57e31mi.cpp:107:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpi57e31mi.cpp:107:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpi57e31mi.cpp:107:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpi57e31mi.cpp:107:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi57e31mi.cpp:2:\n/usr/include/c++/4.8.2/bi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess\
    \ - game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n  \
    \      result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n        score += diff;\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        guess = guess[i];\n        diff = guess -\
    \ game[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n    \
    \    result[i] = diff;\n\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpaf8ghop0.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpaf8ghop0.cpp:18:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmpaf8ghop0.cpp:20:34: error: request for member 'size' in 'guess', which\
    \ is of non-class type 'long int'\n     for (size_t i = 0; i < guess.size(); i++)\
    \ {\n                                  ^\n/tmp/tmpaf8ghop0.cpp:21:24: error: invalid\
    \ types 'long int[size_t {aka long unsigned int}]' for array subscript\n     \
    \    guess = guess[i];\n                        ^\n/tmp/tmpaf8ghop0.cpp:29:34:\
    \ error: request for member 'size' in 'guess', which is of non-class type 'long\
    \ int'\n     for (size_t i = 0; i < guess.size(); i++) {\n                   \
    \               ^\n/tmp/tmpaf8ghop0.cpp:30:24: error: invalid types 'long int[size_t\
    \ {aka long unsigned int}]' for array subscript\n         guess = guess[i];\n\
    \                        ^\n/tmp/tmpaf8ghop0.cpp:38:34: error: request for member\
    \ 'size' in 'guess', which is of non-class type 'long int'\n     for (size_t i\
    \ = 0; i < guess.size(); i++) {\n                                  ^\n/tmp/tmpaf8ghop0.cpp:39:24:\
    \ error: invalid types 'long int[size_t {aka long unsigned int}]' for array subscript\n\
    \         guess = guess[i];\n                        ^\n/tmp/tmpaf8ghop0.cpp:47:34:\
    \ error: request for member 'size' in 'guess', which is of non-class type 'long\
    \ int'\n     for (size_t i = 0; i < guess.size(); i++) {\n                   \
    \               ^\n/tmp/tmpaf8ghop0.cpp:48:24: error: invalid types 'long int[size_t\
    \ {aka long unsigned int}]' for array subscript\n         guess = guess[i];\n\
    \                        ^\n/tmp/tmpaf8ghop0.cpp:56:34: error: request for member\
    \ 'size' in 'guess', which is of non-class type 'long int'\n     for (size_t i\
    \ = 0; i < guess.size(); i++) {\n                                  ^\n/tmp/tmpaf8ghop0.cpp:57:24:\
    \ error: invalid types 'long int[size_t {aka long unsigned int}]' for array subscript\n\
    \         guess = guess[i];\n                        ^\n/tmp/tmpaf"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        guess = guess[i];\n        score =\
    \ game[i];\n        diff = abs(guess - score);\n        if (guess == score) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjc302e7.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpdjc302e7.cpp:19:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmpdjc302e7.cpp:20:34: error: request for member 'size' in 'guess', which\
    \ is of non-class type 'long int'\n     for (size_t i = 0; i < guess.size(); i++)\
    \ {\n                                  ^\n/tmp/tmpdjc302e7.cpp:21:24: error: invalid\
    \ types 'long int[size_t {aka long unsigned int}]' for array subscript\n     \
    \    guess = guess[i];\n                        ^\n/tmp/tmpdjc302e7.cpp: In function\
    \ 'int main()':\n/tmp/tmpdjc302e7.cpp:33:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = compare;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdjc302e7.cpp:2:\n/tmp/tmpdjc302e7.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdjc302e7.cpp:34:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdjc302e7.cpp:34:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdjc302e7.cpp:34:95: error: no matching function "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long sum2\
    \ = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n    long\
    \ sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long diff5 = 0;\n  \
    \  long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long diff7 = 0;\n\
    \    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n    long diff9 =\
    \ 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11 = 0;\n    long\
    \ diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n\
    \    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n    long sum15\
    \ = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long\
    \ sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n\
    \    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22 = 0;\n    long\
    \ diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long sum24 = 0;\n\
    \    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n    long sum26\
    \ = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27 = 0;\n    long\
    \ sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long diff29 = 0;\n\
    \    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n    long diff31\
    \ = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33 = 0;\n    long\
    \ diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long sum35 = 0;\n\
    \    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n    long sum37\
    \ = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38 = 0;\n    long\
    \ sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long diff40 = 0;\n\
    \    long sum41 = 0;\n    long diff41 = 0;\n    long sum42 = 0;\n    long diff42\
    \ = 0;\n    long sum\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt6xubcd5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpt6xubcd5.cpp:103:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpt6xubcd5.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n\
    \    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp904g_x4b.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp904g_x4b.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp904g_x4b.cpp:72:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   72 |     long i = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:20:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   20 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:73:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   73 |     long j = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:21:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   21 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:74:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   74 |     long k = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:22:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   22 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:75:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   75 |     long l = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:23:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   23 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:76:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   76 |     long m = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:24:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   24 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:77:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   77 |     long n = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:25:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   25 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:78:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   78 |     long o = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:26:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   26 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:79:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   79 |     long p = 0;\n      |          ^\n/tmp/tmp904g_x4b.cpp:27:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   27 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmp904g_"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long\
    \ score2 = 0;\n    long guess2 = 0;\n    long diff2 = 0;\n    long score3 = 0;\n\
    \    long guess3 = 0;\n    long diff3 = 0;\n    long score4 = 0;\n    long guess4\
    \ = 0;\n    long diff4 = 0;\n    long score5 = 0;\n    long guess5 = 0;\n    long\
    \ diff5 = 0;\n    long score6 = 0;\n    long guess6 = 0;\n    long diff6 = 0;\n\
    \    long score7 = 0;\n    long guess7 = 0;\n    long diff7 = 0;\n    long score8\
    \ = 0;\n    long guess8 = 0;\n    long diff8 = 0;\n    long score9 = 0;\n    long\
    \ guess9 = 0;\n    long diff9 = 0;\n    long score10 = 0;\n    long guess10 =\
    \ 0;\n    long diff10 = 0;\n    long score11 = 0;\n    long guess11 = 0;\n   \
    \ long diff11 = 0;\n    long score12 = 0;\n    long guess12 = 0;\n    long diff12\
    \ = 0;\n    long score13 = 0;\n    long guess13 = 0;\n    long diff13 = 0;\n \
    \   long score14 = 0;\n    long guess14 = 0;\n    long diff14 = 0;\n    long score15\
    \ = 0;\n    long guess15 = 0;\n    long diff15 = 0;\n    long score16 = 0;\n \
    \   long guess16 = 0;\n    long diff16 = 0;\n    long score17 = 0;\n    long guess17\
    \ = 0;\n    long diff17 = 0;\n    long score18 = 0;\n    long guess18 = 0;\n \
    \   long diff18 = 0;\n    long score19 = 0;\n    long guess19 = 0;\n    long diff19\
    \ = 0;\n    long score20 = 0;\n    long guess20 = 0;\n    long diff20 = 0;\n \
    \   long score21 = 0;\n    long guess21 = 0;\n    long diff21 = 0;\n    long score22\
    \ = 0;\n    long guess22 = 0;\n    long diff22 = 0;\n    long score23 = 0;\n \
    \   long guess23 = 0;\n    long diff23 = 0;\n    long score24 = 0;\n    long guess24\
    \ = 0;\n    long diff24 = 0;\n    long score25 = 0;\n    long guess25 = 0;\n \
    \   long diff25 = 0;\n    long score26 = 0;\n    long guess26 = 0;\n    long diff26\
    \ = 0;\n    long score27 = 0;\n    long guess27 = 0;\n    long diff27 = 0;\n \
    \   long score28 = 0;\n    long guess28 = 0;\n    long diff28 = 0;\n    long score29\
    \ = 0;\n    long guess29 = 0;\n\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9w0uhll8.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp9w0uhll8.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp9w0uhll8.cpp:105:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  105 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB\
    \ = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n\
    \    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long\
    \ KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO =\
    \ 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n\
    \    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long\
    \ XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB\
    \ = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF\
    \ = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ\
    \ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN\
    \ = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR\
    \ = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV\
    \ = 0;\n    long WWW = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mr42vi6.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp_mr42vi6.cpp:114:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmp_mr42vi6.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  if (game[i] == guess[i]) {\n            score = 0;\n        } else {\n    \
    \        score = abs(game[i] - guess[i]);\n        }\n        result[i] = score;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    for (size_t i = 0; i < guess.size(); i++) {\n   \
    \     result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ra1tmae.cpp: In function 'int main()':\n/tmp/tmp5ra1tmae.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ra1tmae.cpp:2:\n/tmp/tmp5ra1tmae.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp5ra1tmae.cpp:25:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp5ra1tmae.cpp:25:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ra1tmae.cpp:25:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5ra1tmae.cpp:25:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5ra1tmae.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long index\
    \ = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n    long\
    \ diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n    long diff8 = 0;\n\
    \    long diff9 = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long diff12\
    \ = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n   \
    \ long diff16 = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19\
    \ = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n   \
    \ long diff23 = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26\
    \ = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n   \
    \ long diff30 = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33\
    \ = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n   \
    \ long diff37 = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40\
    \ = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n   \
    \ long diff44 = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47\
    \ = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n   \
    \ long diff51 = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54\
    \ = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n   \
    \ long diff58 = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61\
    \ = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n   \
    \ long diff65 = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68\
    \ = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n   \
    \ long diff72 = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75\
    \ = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n   \
    \ long diff79 = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82\
    \ = 0;\n\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2m7oezrx.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp2m7oezrx.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp2m7oezrx.cpp:103:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  103 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long score2 = 0;\n    long guess2 = 0;\n    long diff2 = 0;\n    long\
    \ score3 = 0;\n    long guess3 = 0;\n    long diff3 = 0;\n    long score4 = 0;\n\
    \    long guess4 = 0;\n    long diff4 = 0;\n    long score5 = 0;\n    long guess5\
    \ = 0;\n    long diff5 = 0;\n    long score6 = 0;\n    long guess6 = 0;\n    long\
    \ diff6 = 0;\n    long score7 = 0;\n    long guess7 = 0;\n    long diff7 = 0;\n\
    \    long score8 = 0;\n    long guess8 = 0;\n    long diff8 = 0;\n    long score9\
    \ = 0;\n    long guess9 = 0;\n    long diff9 = 0;\n    long score10 = 0;\n   \
    \ long guess10 = 0;\n    long diff10 = 0;\n    long score11 = 0;\n    long guess11\
    \ = 0;\n    long diff11 = 0;\n    long score12 = 0;\n    long guess12 = 0;\n \
    \   long diff12 = 0;\n    long score13 = 0;\n    long guess13 = 0;\n    long diff13\
    \ = 0;\n    long score14 = 0;\n    long guess14 = 0;\n    long diff14 = 0;\n \
    \   long score15 = 0;\n    long guess15 = 0;\n    long diff15 = 0;\n    long score16\
    \ = 0;\n    long guess16 = 0;\n    long diff16 = 0;\n    long score17 = 0;\n \
    \   long guess17 = 0;\n    long diff17 = 0;\n    long score18 = 0;\n    long guess18\
    \ = 0;\n    long diff18 = 0;\n    long score19 = 0;\n    long guess19 = 0;\n \
    \   long diff19 = 0;\n    long score20 = 0;\n    long guess20 = 0;\n    long diff20\
    \ = 0;\n    long score21 = 0;\n    long guess21 = 0;\n    long diff21 = 0;\n \
    \   long score22 = 0;\n    long guess22 = 0;\n    long diff22 = 0;\n    long score23\
    \ = 0;\n    long guess23 = 0;\n    long diff23 = 0;\n    long score24 = 0;\n \
    \   long guess24 = 0;\n    long diff24 = 0;\n    long score25 = 0;\n    long guess25\
    \ = 0;\n    long diff25 = 0;\n    long score26 = 0;\n    long guess26 = 0;\n \
    \   long diff26 = 0;\n    long score27 = 0;\n    long guess27 = 0;\n    long diff27\
    \ = 0;\n    long score28 = 0;\n    long guess28 = 0;\n    long diff28 = 0;\n \
    \   long score29 = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpraguyj3o.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpraguyj3o.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpraguyj3o.cpp:104:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  104 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    long diff = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long sum3\
    \ = 0;\n    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long\
    \ sum5 = 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n  \
    \  long sum7 = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n\
    \    long sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10\
    \ = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long\
    \ diff12 = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n\
    \    long diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16\
    \ = 0;\n    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long\
    \ sum18 = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n\
    \    long sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21\
    \ = 0;\n    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long\
    \ diff23 = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n\
    \    long diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27\
    \ = 0;\n    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long\
    \ sum29 = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n\
    \    long sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32\
    \ = 0;\n    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long\
    \ diff34 = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n\
    \    long diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38\
    \ = 0;\n    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long\
    \ sum40 = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n\
    \    long sum42 = 0;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcjiebx_o: /tmp/tmpcjiebx_o.cpp:107: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    long score = 0;\n    long diff\
    \ = 0;\n    for (size_t i = 0; i < game.size(); ++i) {\n        score += game[i];\n\
    \        diff += abs(guess[i] - score);\n        result[i] = diff;\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp8_3uke9: /tmp/tmpp8_3uke9.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        score = game[i];\n        diff = abs(guess\
    \ - score);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9jfpk2j.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpv9jfpk2j.cpp:22:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   22 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv9jfpk2j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpv9jfpk2j.cpp:22:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for (long\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = game[i]\
    \ - guess[i];\n        result[i] = abs(diff);\n    }\n    if (sum == 0)\n    \
    \    return result;\n    for (long i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = abs(result[i] - sum);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyy2954uw: /tmp/tmpyy2954uw.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            score++;\n        } else\
    \ {\n            diff = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxhlylbvr: /tmp/tmpxhlylbvr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821936
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    for (size_t i = 0; i < game.size(); ++i) {\n     \
    \   result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long sum = 0;\n    long count = 0;\n   \
    \ long sum2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long count3 =\
    \ 0;\n    long sum4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n    long count5\
    \ = 0;\n    long sum6 = 0;\n    long count6 = 0;\n    long sum7 = 0;\n    long\
    \ count7 = 0;\n    long sum8 = 0;\n    long count8 = 0;\n    long sum9 = 0;\n\
    \    long count9 = 0;\n    long sum10 = 0;\n    long count10 = 0;\n    long sum11\
    \ = 0;\n    long count11 = 0;\n    long sum12 = 0;\n    long count12 = 0;\n  \
    \  long sum13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n    long count14\
    \ = 0;\n    long sum15 = 0;\n    long count15 = 0;\n    long sum16 = 0;\n    long\
    \ count16 = 0;\n    long sum17 = 0;\n    long count17 = 0;\n    long sum18 = 0;\n\
    \    long count18 = 0;\n    long sum19 = 0;\n    long count19 = 0;\n    long sum20\
    \ = 0;\n    long count20 = 0;\n    long sum21 = 0;\n    long count21 = 0;\n  \
    \  long sum22 = 0;\n    long count22 = 0;\n    long sum23 = 0;\n    long count23\
    \ = 0;\n    long sum24 = 0;\n    long count24 = 0;\n    long sum25 = 0;\n    long\
    \ count25 = 0;\n    long sum26 = 0;\n    long count26 = 0;\n    long sum27 = 0;\n\
    \    long count27 = 0;\n    long sum28 = 0;\n    long count28 = 0;\n    long sum29\
    \ = 0;\n    long count29 = 0;\n    long sum30 = 0;\n    long count30 = 0;\n  \
    \  long sum31 = 0;\n    long count31 = 0;\n    long sum32 = 0;\n    long count32\
    \ = 0;\n    long sum33 = 0;\n    long count33 = 0;\n    long sum34 = 0;\n    long\
    \ count34 = 0;\n    long sum35 = 0;\n    long count35 = 0;\n    long sum36 = 0;\n\
    \    long count36 = 0;\n    long sum37 = 0;\n    long count37 = 0;\n    long sum38\
    \ = 0;\n    long count38 = 0;\n    long sum39 = 0;\n    long count39 = 0;\n  \
    \  long sum40 = 0;\n    long count40 = 0;\n    long sum41 = 0;\n    long count41\
    \ = 0;\n    long sum42 = 0;\n    long count42 = 0;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpni4z8dwv: /tmp/tmpni4z8dwv.cpp:106: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821936
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long sum2 = 0;\n    long sum3\
    \ = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7\
    \ = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long\
    \ sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n\
    \    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18\
    \ = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long\
    \ sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n\
    \    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29\
    \ = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long\
    \ sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n\
    \    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40\
    \ = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long\
    \ sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n\
    \    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51\
    \ = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long\
    \ sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n\
    \    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62\
    \ = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long\
    \ sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n\
    \    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73\
    \ = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long\
    \ sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n\
    \    long sum81 = 0;\n    long sum82 = 0;\n    long sum83 = 0;\n    long sum84\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_7i_ve1.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpo_7i_ve1.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpo_7i_ve1.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score - game[i]);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpl9fcebnt: /tmp/tmpl9fcebnt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        guess = guess[i];\n        score = game[i];\n        if (guess\
    \ == score) {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = abs(guess - score);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyf1gzl0d.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyf1gzl0d.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpyf1gzl0d.cpp:19:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   19 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmpyf1gzl0d.cpp:20:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   20 |         guess = guess[i];\n      |                        ^\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long max =\
    \ 0;\n    long min = 0;\n    long sum = 0;\n    long count = 0;\n    long sum2\
    \ = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long count3 = 0;\n    long\
    \ sum4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n    long count5 = 0;\n\
    \    long sum6 = 0;\n    long count6 = 0;\n    long sum7 = 0;\n    long count7\
    \ = 0;\n    long sum8 = 0;\n    long count8 = 0;\n    long sum9 = 0;\n    long\
    \ count9 = 0;\n    long sum10 = 0;\n    long count10 = 0;\n    long sum11 = 0;\n\
    \    long count11 = 0;\n    long sum12 = 0;\n    long count12 = 0;\n    long sum13\
    \ = 0;\n    long count13 = 0;\n    long sum14 = 0;\n    long count14 = 0;\n  \
    \  long sum15 = 0;\n    long count15 = 0;\n    long sum16 = 0;\n    long count16\
    \ = 0;\n    long sum17 = 0;\n    long count17 = 0;\n    long sum18 = 0;\n    long\
    \ count18 = 0;\n    long sum19 = 0;\n    long count19 = 0;\n    long sum20 = 0;\n\
    \    long count20 = 0;\n    long sum21 = 0;\n    long count21 = 0;\n    long sum22\
    \ = 0;\n    long count22 = 0;\n    long sum23 = 0;\n    long count23 = 0;\n  \
    \  long sum24 = 0;\n    long count24 = 0;\n    long sum25 = 0;\n    long count25\
    \ = 0;\n    long sum26 = 0;\n    long count26 = 0;\n    long sum27 = 0;\n    long\
    \ count27 = 0;\n    long sum28 = 0;\n    long count28 = 0;\n    long sum29 = 0;\n\
    \    long count29 = 0;\n    long sum30 = 0;\n    long count30 = 0;\n    long sum31\
    \ = 0;\n    long count31 = 0;\n    long sum32 = 0;\n    long count32 = 0;\n  \
    \  long sum33 = 0;\n    long count33 = 0;\n    long sum34 = 0;\n    long count34\
    \ = 0;\n    long sum35 = 0;\n    long count35 = 0;\n    long sum36 = 0;\n    long\
    \ count36 = 0;\n    long sum37 = 0;\n    long count37 = 0;\n    long sum38 = 0;\n\
    \    long count38 = 0;\n    long sum39 = 0;\n    long count39 = 0;\n    long sum40\
    \ = 0;\n    long count40 = 0;\n    long sum41 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4p2m7dp.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpb4p2m7dp.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpb4p2m7dp.cpp:104:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmpb4p2m7dp.cpp:104:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    while (i < game.size() && j < guess.size())\
    \ {\n        if (game[i] == guess[j]) {\n            score++;\n            i++;\n\
    \            j++;\n        } else if (game[i] > guess[j]) {\n            diff++;\n\
    \            i++;\n        } else {\n            diff++;\n            j++;\n \
    \       }\n    }\n    while (i < game.size()) {\n        diff++;\n        i++;\n\
    \    }\n    while (j < guess.size()) {\n        diff++;\n        j++;\n    }\n\
    \    if (diff == 0) {\n        result[0] = 0;\n    } else {\n        result[0]\
    \ = abs(diff - score);\n    }\n    while (i < game.size()) {\n        while (j\
    \ < guess.size()) {\n            if (game[i] == guess[j]) {\n                score++;\n\
    \                i++;\n                j++;\n            } else if (game[i] >\
    \ guess[j]) {\n                diff++;\n                i++;\n            } else\
    \ {\n                diff++;\n                j++;\n            }\n        }\n\
    \        while (i < game.size()) {\n            diff++;\n            i++;\n  \
    \      }\n        while (j < guess.size()) {\n            diff++;\n          \
    \  j++;\n        }\n        if (diff == 0) {\n            result[guess.size()\
    \ - 1] = abs(diff - score);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq80d3zgu.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpq80d3zgu.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpq80d3zgu.cpp:23:41: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   23 |     while (i < game.size() && j < guess.size()) {\n     \
    \ |                                         ^~~~\n/tmp/tmpq80d3zgu.cpp:24:31:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 24 |         if (game[i] == guess[j]) {\n      |                           \
    \    ^\n/tmp/tmpq80d3zgu.cpp:28:37: error: invalid types \u2018long int[long int]\u2019\
    \ for array subscript\n   28 |         } else if (game[i] > guess[j]) {\n    \
    \  |                                     ^\n/tmp/tmpq80d3zgu.cpp:40:22: error:\
    \ request for member \u2018size\u2019 in \u2018guess\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   40 |     while (j < guess.size()) {\n      | \
    \                     ^~~~\n/tmp/tmpq80d3zgu.cpp:50:26: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   50 |         while (j < guess.size()) {\n      |             \
    \             ^~~~\n/tmp/tmpq80d3zgu.cpp:51:35: error: invalid types \u2018long\
    \ int[long int]\u2019 for array subscript\n   51 |             if (game[i] ==\
    \ guess[j]) {\n      |                                   ^\n/tmp/tmpq80d3zgu.cpp:55:41:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 55 |             } else if (game[i] > guess[j]) {\n      |                 \
    \                        ^\n/tmp/tmpq80d3zgu.cpp:67:26: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   67 |         while (j < guess.size()) {\n      |             \
    \             ^~~~\n/tmp/tmpq80d3zgu.cpp:72:26: error: request for member \u2018\
    size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long int\u2019\
    \n   72 |             result[guess.size() - 1] = abs(diff - score);\n      | \
    \                         ^~~~\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n\
    \    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long sum5 =\
    \ 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long sum7\
    \ = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long\
    \ sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n\
    \    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long diff12\
    \ = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long\
    \ diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n\
    \    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long sum18\
    \ = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n    long\
    \ sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n\
    \    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long diff23\
    \ = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n    long\
    \ diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n\
    \    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long sum29\
    \ = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n    long\
    \ sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n\
    \    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long diff34\
    \ = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n    long\
    \ diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n\
    \    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long sum40\
    \ = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n    long\
    \ sum42 = 0;\n\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmptjhhms9b: /tmp/tmptjhhms9b.cpp:107: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(long\
    \ i = 0; i < guess.size(); i++) {\n        if(game[i] == guess[i]) {\n       \
    \     score++;\n        }\n        else {\n            diff = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7chex5ev: /tmp/tmp7chex5ev.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_2kkysl.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpu_2kkysl.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpu_2kkysl.cpp:73:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   73 |     long i = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:21:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   21 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:74:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   74 |     long j = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:22:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   22 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:75:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   75 |     long k = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:23:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   23 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:76:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   76 |     long l = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:24:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   24 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:77:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   77 |     long m = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:25:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   25 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:78:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   78 |     long n = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:26:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   26 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:79:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   79 |     long o = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:27:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   27 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:80:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   80 |     long p = 0;\n      |          ^\n/tmp/tmpu_2kkysl.cpp:28:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   28 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpu_2kk"
  stdout: ''
  timestamp: 1659821938
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for (long\
    \ i = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = game[i]\
    \ - guess[i];\n        if (diff < 0) {\n            diff *= -1;\n        }\n \
    \       result[i] = diff;\n    }\n    if (sum == 0)\n        return result;\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(result[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqtaj03uj: /tmp/tmpqtaj03uj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        score = game[i];\n        diff = abs(guess - score);\n     \
    \   if (diff == 0) {\n            result[i] = 0;\n        } else {\n         \
    \   result[i] = diff;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4nqk89z.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpu4nqk89z.cpp:21:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   21 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpu4nqk89z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpu4nqk89z.cpp:21:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zgokmv5.cpp: In function 'int main()':\n/tmp/tmp2zgokmv5.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2zgokmv5.cpp:2:\n/tmp/tmp2zgokmv5.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp2zgokmv5.cpp:27:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp2zgokmv5.cpp:27:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2zgokmv5.cpp:27:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2zgokmv5.cpp:27:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2zgokmv5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n \
    \   while (i < guess.size() && j < game.size()) {\n        if (game[j] == guess[i])\
    \ {\n            score++;\n            diff = 0;\n            i++;\n         \
    \   j++;\n        } else if (game[j] > guess[i]) {\n            diff++;\n    \
    \        i++;\n        } else {\n            diff++;\n            j++;\n     \
    \   }\n    }\n    while (i < guess.size()) {\n        result[i] = 0;\n       \
    \ i++;\n    }\n    while (j < game.size()) {\n        result[i] = 0;\n       \
    \ j++;\n    }\n    result[i] = abs(diff - score);\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnd8gd2j2: /tmp/tmpnd8gd2j2.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long int score = 0;\n    for(long long int i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            score++;\n        }\n\
    \        else {\n            score += abs(game[i] - guess[i]);\n        }\n  \
    \  }\n    for(long long int i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821938
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = std::abs(guess - game[i]);\n        if (diff == 0)\n            result[i]\
    \ = 0;\n        else\n            result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf9pvtcf5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpf9pvtcf5.cpp:19:31: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   19 |         diff = std::abs(guess - game[i]);\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf9pvtcf5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpf9pvtcf5.cpp:19:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   19 |         diff = std::abs(guess - game[i]);\n      |                 \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_trait"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        score = game[i];\n        diff = abs(guess\
    \ - score);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9jfpk2j.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpv9jfpk2j.cpp:22:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   22 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv9jfpk2j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpv9jfpk2j.cpp:22:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            score++;\n        } else\
    \ {\n            diff = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxhlylbvr: /tmp/tmpxhlylbvr.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long sum = 0;\n    long long diff = std::abs(game[0] - guess[0]);\n\
    \    for (int i = 1; i < guess.size(); i++) {\n        sum += std::abs(game[i]\
    \ - guess[i]);\n        diff = std::abs(game[i] - guess[i]);\n        result[i]\
    \ = std::abs(game[i] - guess[i]);\n    }\n    if (sum == 0)\n        return result;\n\
    \    std::vector<long> temp(guess.size());\n    for (int i = 0; i < guess.size();\
    \ i++) {\n        temp[i] = result[i] - diff;\n    }\n    return temp;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpotvtetfk: /tmp/tmpotvtetfk.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    for (size_t i = 0; i < guess.size(); i++) {\n   \
    \     result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ra1tmae.cpp: In function 'int main()':\n/tmp/tmp5ra1tmae.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ra1tmae.cpp:2:\n/tmp/tmp5ra1tmae.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp5ra1tmae.cpp:25:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp5ra1tmae.cpp:25:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ra1tmae.cpp:25:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5ra1tmae.cpp:25:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5ra1tmae.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8uo3cj91: /tmp/tmp8uo3cj91.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long sum2\
    \ = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n    long\
    \ sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long diff5 = 0;\n  \
    \  long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long diff7 = 0;\n\
    \    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n    long diff9 =\
    \ 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11 = 0;\n    long\
    \ diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n\
    \    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n    long sum15\
    \ = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long\
    \ sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n\
    \    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22 = 0;\n    long\
    \ diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long sum24 = 0;\n\
    \    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n    long sum26\
    \ = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27 = 0;\n    long\
    \ sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long diff29 = 0;\n\
    \    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n    long diff31\
    \ = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33 = 0;\n    long\
    \ diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long sum35 = 0;\n\
    \    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n    long sum37\
    \ = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38 = 0;\n    long\
    \ sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long diff40 = 0;\n\
    \    long sum41 = 0;\n    long diff41 = 0;\n    long sum42 = 0;\n    long diff42\
    \ = 0;\n    long sum\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt6xubcd5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpt6xubcd5.cpp:103:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpt6xubcd5.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        score\
    \ += game[i] * guess[i];\n    }\n    for (long i = 0; i < guess.size(); i++) {\n\
    \        result[i] = abs(score - guess[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2piawfuz: /tmp/tmp2piawfuz.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ ++i) {\n        score = game[i];\n        diff = abs(guess - score);\n     \
    \   result[i] = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o339f5z.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp9o339f5z.cpp:21:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   21 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9o339f5z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9o339f5z.cpp:21:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long sum = 0;\n    long diff = 0;\n    long count\
    \ = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long count2 = 0;\n    long\
    \ sum3 = 0;\n    long diff3 = 0;\n    long count3 = 0;\n    long sum4 = 0;\n \
    \   long diff4 = 0;\n    long count4 = 0;\n    long sum5 = 0;\n    long diff5\
    \ = 0;\n    long count5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long\
    \ count6 = 0;\n    long sum7 = 0;\n    long diff7 = 0;\n    long count7 = 0;\n\
    \    long sum8 = 0;\n    long diff8 = 0;\n    long count8 = 0;\n    long sum9\
    \ = 0;\n    long diff9 = 0;\n    long count9 = 0;\n    long sum10 = 0;\n    long\
    \ diff10 = 0;\n    long count10 = 0;\n    long sum11 = 0;\n    long diff11 = 0;\n\
    \    long count11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long count12\
    \ = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long count13 = 0;\n   \
    \ long sum14 = 0;\n    long diff14 = 0;\n    long count14 = 0;\n    long sum15\
    \ = 0;\n    long diff15 = 0;\n    long count15 = 0;\n    long sum16 = 0;\n   \
    \ long diff16 = 0;\n    long count16 = 0;\n    long sum17 = 0;\n    long diff17\
    \ = 0;\n    long count17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n   \
    \ long count18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n    long count19\
    \ = 0;\n    long sum20 = 0;\n    long diff20 = 0;\n    long count20 = 0;\n   \
    \ long sum21 = 0;\n    long diff21 = 0;\n    long count21 = 0;\n    long sum22\
    \ = 0;\n    long diff22 = 0;\n    long count22 = 0;\n    long sum23 = 0;\n   \
    \ long diff23 = 0;\n    long count23 = 0;\n    long sum24 = 0;\n    long diff24\
    \ = 0;\n    long count24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n   \
    \ long count25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long count26\
    \ = 0;\n    long sum27 = 0;\n    long diff27 = 0;\n    long count27 = 0;\n   \
    \ long sum28 = 0;\n    long diff28 = 0;\n    long count28 = 0;\n    long sum29\
    \ = 0;\n    long diff29\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7657foyc.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp7657foyc.cpp:104:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmp7657foyc.cpp:104:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821938
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    for (size_t i = 0; i < game.size(); i++) {\n        if (game[i] != guess[i])\
    \ {\n            result[i] = abs(game[i] - guess[i]);\n        } else {\n    \
    \        result[i] = 0;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long sum = 0;\n    long count = 0;\n   \
    \ long max = 0;\n    long min = 0;\n    long sum2 = 0;\n    long count2 = 0;\n\
    \    long max2 = 0;\n    long min2 = 0;\n    long sum3 = 0;\n    long count3 =\
    \ 0;\n    long max3 = 0;\n    long min3 = 0;\n    long sum4 = 0;\n    long count4\
    \ = 0;\n    long max4 = 0;\n    long min4 = 0;\n    long sum5 = 0;\n    long count5\
    \ = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long sum6 = 0;\n    long count6\
    \ = 0;\n    long max6 = 0;\n    long min6 = 0;\n    long sum7 = 0;\n    long count7\
    \ = 0;\n    long max7 = 0;\n    long min7 = 0;\n    long sum8 = 0;\n    long count8\
    \ = 0;\n    long max8 = 0;\n    long min8 = 0;\n    long sum9 = 0;\n    long count9\
    \ = 0;\n    long max9 = 0;\n    long min9 = 0;\n    long sum10 = 0;\n    long\
    \ count10 = 0;\n    long max10 = 0;\n    long min10 = 0;\n    long sum11 = 0;\n\
    \    long count11 = 0;\n    long max11 = 0;\n    long min11 = 0;\n    long sum12\
    \ = 0;\n    long count12 = 0;\n    long max12 = 0;\n    long min12 = 0;\n    long\
    \ sum13 = 0;\n    long count13 = 0;\n    long max13 = 0;\n    long min13 = 0;\n\
    \    long sum14 = 0;\n    long count14 = 0;\n    long max14 = 0;\n    long min14\
    \ = 0;\n    long sum15 = 0;\n    long count15 = 0;\n    long max15 = 0;\n    long\
    \ min15 = 0;\n    long sum16 = 0;\n    long count16 = 0;\n    long max16 = 0;\n\
    \    long min16 = 0;\n    long sum17 = 0;\n    long count17 = 0;\n    long max17\
    \ = 0;\n    long min17 = 0;\n    long sum18 = 0;\n    long count18 = 0;\n    long\
    \ max18 = 0;\n    long min18 = 0;\n    long sum19 = 0;\n    long count19 = 0;\n\
    \    long max19 = 0;\n    long min19 = 0;\n    long sum20 = 0;\n    long count20\
    \ = 0;\n    long max20 = 0;\n    long min20 = 0;\n    long sum21 = 0;\n    long\
    \ count21 = 0;\n    long max21 = 0;\n    long min21 = 0;\n    long sum22 = 0;\n\
    \    long count\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq75npkx8.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpq75npkx8.cpp:105:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  105 | }\n      | ^\n/tmp/tmpq75npkx8.cpp:105:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n\
    \    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long\
    \ G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n\
    \    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long\
    \ P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n\
    \    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long\
    \ Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long AC = 0;\n\
    \    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG = 0;\n    long\
    \ AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n    long AL =\
    \ 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long AP = 0;\n\
    \    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT = 0;\n    long\
    \ AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n    long AY =\
    \ 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long BC = 0;\n\
    \    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG = 0;\n    long\
    \ BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n    long BL =\
    \ 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long BP = 0;\n\
    \    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT = 0;\n    long\
    \ BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n    long BY =\
    \ 0;\n    long BZ = 0;\n    long CA = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_7ftziu.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp5_7ftziu.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp5_7ftziu.cpp:117:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  117 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long sum2 = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n\
    \    long diff3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long sum5 =\
    \ 0;\n    long diff5 = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long sum7\
    \ = 0;\n    long diff7 = 0;\n    long sum8 = 0;\n    long diff8 = 0;\n    long\
    \ sum9 = 0;\n    long diff9 = 0;\n    long sum10 = 0;\n    long diff10 = 0;\n\
    \    long sum11 = 0;\n    long diff11 = 0;\n    long sum12 = 0;\n    long diff12\
    \ = 0;\n    long sum13 = 0;\n    long diff13 = 0;\n    long sum14 = 0;\n    long\
    \ diff14 = 0;\n    long sum15 = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n\
    \    long diff16 = 0;\n    long sum17 = 0;\n    long diff17 = 0;\n    long sum18\
    \ = 0;\n    long diff18 = 0;\n    long sum19 = 0;\n    long diff19 = 0;\n    long\
    \ sum20 = 0;\n    long diff20 = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n\
    \    long sum22 = 0;\n    long diff22 = 0;\n    long sum23 = 0;\n    long diff23\
    \ = 0;\n    long sum24 = 0;\n    long diff24 = 0;\n    long sum25 = 0;\n    long\
    \ diff25 = 0;\n    long sum26 = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n\
    \    long diff27 = 0;\n    long sum28 = 0;\n    long diff28 = 0;\n    long sum29\
    \ = 0;\n    long diff29 = 0;\n    long sum30 = 0;\n    long diff30 = 0;\n    long\
    \ sum31 = 0;\n    long diff31 = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n\
    \    long sum33 = 0;\n    long diff33 = 0;\n    long sum34 = 0;\n    long diff34\
    \ = 0;\n    long sum35 = 0;\n    long diff35 = 0;\n    long sum36 = 0;\n    long\
    \ diff36 = 0;\n    long sum37 = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n\
    \    long diff38 = 0;\n    long sum39 = 0;\n    long diff39 = 0;\n    long sum40\
    \ = 0;\n    long diff40 = 0;\n    long sum41 = 0;\n    long diff41 = 0;\n    long\
    \ sum42 = 0;\n\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmptjhhms9b: /tmp/tmptjhhms9b.cpp:107: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WWW\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6m3_qzhw.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp6m3_qzhw.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp6m3_qzhw.cpp:114:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmp6m3_qzhw.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for(size_t i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            score++;\n        } else\
    \ {\n            diff = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmphp9h9ns0: /tmp/tmphp9h9ns0.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n \
    \   long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1f56tin.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpa1f56tin.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpa1f56tin.cpp:47:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   47 |     long i = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:21:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   21 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:48:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   48 |     long j = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:22:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   22 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:49:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   49 |     long k = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:23:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   23 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:50:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   50 |     long l = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:24:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   24 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:51:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   51 |     long m = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:25:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   25 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:52:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   52 |     long n = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:26:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   26 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:53:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   53 |     long o = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:27:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   27 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:54:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   54 |     long p = 0;\n      |          ^\n/tmp/tmpa1f56tin.cpp:28:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   28 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpa1f56"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB\
    \ = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n\
    \    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long\
    \ KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO =\
    \ 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n\
    \    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long\
    \ XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB\
    \ = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF\
    \ = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ\
    \ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN\
    \ = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR\
    \ = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV\
    \ = 0;\n    long WWW = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mr42vi6.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp_mr42vi6.cpp:114:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmp_mr42vi6.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long\
    \ sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long\
    \ sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n  \
    \  long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 =\
    \ 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long\
    \ sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n\
    \    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26\
    \ = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long\
    \ sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n\
    \    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37\
    \ = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long\
    \ sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n\
    \    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48\
    \ = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long\
    \ sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n\
    \    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59\
    \ = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long\
    \ sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n\
    \    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70\
    \ = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long\
    \ sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n\
    \    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long sum81\
    \ = 0;\n    long sum82 = 0;\n    long sum83 = 0;\n    long sum84 = 0;\n    long\
    \ \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph_6pqa00.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmph_6pqa00.cpp:103:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmph_6pqa00.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long\
    \ AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF =\
    \ 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n\
    \    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long\
    \ AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS =\
    \ 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n\
    \    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long\
    \ BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF =\
    \ 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n\
    \    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long\
    \ BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS =\
    \ 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n\
    \    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyd7oecfa.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyd7oecfa.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpyd7oecfa.cpp:118:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  118 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    long long int sum = 0;\n    long\
    \ long int sum2 = 0;\n    long long int sum3 = 0;\n    long long int sum4 = 0;\n\
    \    long long int sum5 = 0;\n    long long int sum6 = 0;\n    long long int sum7\
    \ = 0;\n    long long int sum8 = 0;\n    long long int sum9 = 0;\n    long long\
    \ int sum10 = 0;\n    long long int sum11 = 0;\n    long long int sum12 = 0;\n\
    \    long long int sum13 = 0;\n    long long int sum14 = 0;\n    long long int\
    \ sum15 = 0;\n    long long int sum16 = 0;\n    long long int sum17 = 0;\n   \
    \ long long int sum18 = 0;\n    long long int sum19 = 0;\n    long long int sum20\
    \ = 0;\n    long long int sum21 = 0;\n    long long int sum22 = 0;\n    long long\
    \ int sum23 = 0;\n    long long int sum24 = 0;\n    long long int sum25 = 0;\n\
    \    long long int sum26 = 0;\n    long long int sum27 = 0;\n    long long int\
    \ sum28 = 0;\n    long long int sum29 = 0;\n    long long int sum30 = 0;\n   \
    \ long long int sum31 = 0;\n    long long int sum32 = 0;\n    long long int sum33\
    \ = 0;\n    long long int sum34 = 0;\n    long long int sum35 = 0;\n    long long\
    \ int sum36 = 0;\n    long long int sum37 = 0;\n    long long int sum38 = 0;\n\
    \    long long int sum39 = 0;\n    long long int sum40 = 0;\n    long long int\
    \ sum41 = 0;\n    long long int sum42 = 0;\n    long long int sum43 = 0;\n   \
    \ long long int sum44 = 0;\n    long long int sum45 = 0;\n    long long int sum46\
    \ = 0;\n    long long int sum47 = 0;\n    long long int sum48 = 0;\n    long long\
    \ int sum49 = 0;\n    long long int sum50 = 0;\n    long long int sum51 = 0;\n\
    \    long long int sum52 = 0;\n    long long int sum53 = 0;\n    long long int\
    \ sum54 = 0;\n    long long int sum55 = 0;\n    long long int sum56 = 0;\n   \
    \ long long int sum57 = 0;\n    long long int sum58 = 0;\n    long long int sum59\
    \ = 0;\n    long long int sum60 = 0;\n    long long int sum61 = 0;\n    long long\
    \ int sum62 = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmperzr1i7o.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmperzr1i7o.cpp:81:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmperzr1i7o.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long\
    \ diff2 = 0;\n    long diff3 = 0;\n    long diff4 = 0;\n    long diff5 = 0;\n\
    \    long diff6 = 0;\n    long diff7 = 0;\n    long diff8 = 0;\n    long diff9\
    \ = 0;\n    long diff10 = 0;\n    long diff11 = 0;\n    long diff12 = 0;\n   \
    \ long diff13 = 0;\n    long diff14 = 0;\n    long diff15 = 0;\n    long diff16\
    \ = 0;\n    long diff17 = 0;\n    long diff18 = 0;\n    long diff19 = 0;\n   \
    \ long diff20 = 0;\n    long diff21 = 0;\n    long diff22 = 0;\n    long diff23\
    \ = 0;\n    long diff24 = 0;\n    long diff25 = 0;\n    long diff26 = 0;\n   \
    \ long diff27 = 0;\n    long diff28 = 0;\n    long diff29 = 0;\n    long diff30\
    \ = 0;\n    long diff31 = 0;\n    long diff32 = 0;\n    long diff33 = 0;\n   \
    \ long diff34 = 0;\n    long diff35 = 0;\n    long diff36 = 0;\n    long diff37\
    \ = 0;\n    long diff38 = 0;\n    long diff39 = 0;\n    long diff40 = 0;\n   \
    \ long diff41 = 0;\n    long diff42 = 0;\n    long diff43 = 0;\n    long diff44\
    \ = 0;\n    long diff45 = 0;\n    long diff46 = 0;\n    long diff47 = 0;\n   \
    \ long diff48 = 0;\n    long diff49 = 0;\n    long diff50 = 0;\n    long diff51\
    \ = 0;\n    long diff52 = 0;\n    long diff53 = 0;\n    long diff54 = 0;\n   \
    \ long diff55 = 0;\n    long diff56 = 0;\n    long diff57 = 0;\n    long diff58\
    \ = 0;\n    long diff59 = 0;\n    long diff60 = 0;\n    long diff61 = 0;\n   \
    \ long diff62 = 0;\n    long diff63 = 0;\n    long diff64 = 0;\n    long diff65\
    \ = 0;\n    long diff66 = 0;\n    long diff67 = 0;\n    long diff68 = 0;\n   \
    \ long diff69 = 0;\n    long diff70 = 0;\n    long diff71 = 0;\n    long diff72\
    \ = 0;\n    long diff73 = 0;\n    long diff74 = 0;\n    long diff75 = 0;\n   \
    \ long diff76 = 0;\n    long diff77 = 0;\n    long diff78 = 0;\n    long diff79\
    \ = 0;\n    long diff80 = 0;\n    long diff81 = 0;\n    long diff82 = 0;\n   \
    \ long diff83\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7561e9b.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpk7561e9b.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpk7561e9b.cpp:103:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpk7561e9b.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    long score = 0;\n    long diff = 0;\n    long\
    \ guess = 0;\n    long game = 0;\n    long index = 0;\n    long sum = 0;\n   \
    \ long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long game = 0;\n\
    \    long index = 0;\n    long sum = 0;\n    long score = 0;\n    long diff =\
    \ 0;\n    long guess = 0;\n    long game = 0;\n    long index = 0;\n    long sum\
    \ = 0;\n    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long\
    \ game = 0;\n    long index = 0;\n    long sum = 0;\n    long score = 0;\n   \
    \ long diff = 0;\n    long guess = 0;\n    long game = 0;\n    long index = 0;\n\
    \    long sum = 0;\n    long score = 0;\n    long diff = 0;\n    long guess =\
    \ 0;\n    long game = 0;\n    long index = 0;\n    long sum = 0;\n    long score\
    \ = 0;\n    long diff = 0;\n    long guess = 0;\n    long game = 0;\n    long\
    \ index = 0;\n    long sum = 0;\n    long score = 0;\n    long diff = 0;\n   \
    \ long guess = 0;\n    long game = 0;\n    long index = 0;\n    long sum = 0;\n\
    \    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long game =\
    \ 0;\n    long index = 0;\n    long sum = 0;\n    long score = 0;\n    long diff\
    \ = 0;\n    long guess = 0;\n    long game = 0;\n    long index = 0;\n    long\
    \ sum = 0;\n    long score = 0;\n    long diff = 0;\n    long guess = 0;\n   \
    \ long game = 0;\n    long index = 0;\n    long sum = 0;\n    long score = 0;\n\
    \    long diff = 0;\n    long guess = 0;\n    long game = 0;\n    long index =\
    \ 0;\n    long sum = 0;\n    long score = 0;\n    long diff = 0;\n    long guess\
    \ = 0;\n    long game = 0;\n    long index = 0;\n    long sum = 0;\n    long score\
    \ = 0;\n    long diff = 0;\n    long guess = 0;\n    long game = 0;\n    long\
    \ index = 0;\n    long sum = 0;\n    long score = 0;\n    long diff = 0;\n   \
    \ long guess = 0;\n    long game = 0;\n    long index = 0;\n    long sum = 0;\n\
    \    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long game =\
    \ 0;\n    long index = 0;\n    long sum = 0;\n    long score = 0;\n    long diff\
    \ = 0;\n    long guess = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8py9s4i.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpr8py9s4i.cpp:21:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   21 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpr8py9s4i.cpp:22:10: error: declaration of\
    \ \u2018long int game\u2019 shadows a parameter\n   22 |     long game = 0;\n\
    \      |          ^~~~\n/tmp/tmpr8py9s4i.cpp:24:10: error: redeclaration of \u2018\
    long int sum\u2019\n   24 |     long sum = 0;\n      |          ^~~\n/tmp/tmpr8py9s4i.cpp:18:10:\
    \ note: \u2018long int sum\u2019 previously declared here\n   18 |     long sum\
    \ = 0;\n      |          ^~~\n/tmp/tmpr8py9s4i.cpp:25:10: error: redeclaration\
    \ of \u2018long int score\u2019\n   25 |     long score = 0;\n      |        \
    \  ^~~~~\n/tmp/tmpr8py9s4i.cpp:19:10: note: \u2018long int score\u2019 previously\
    \ declared here\n   19 |     long score = 0;\n      |          ^~~~~\n/tmp/tmpr8py9s4i.cpp:26:10:\
    \ error: redeclaration of \u2018long int diff\u2019\n   26 |     long diff = 0;\n\
    \      |          ^~~~\n/tmp/tmpr8py9s4i.cpp:20:10: note: \u2018long int diff\u2019\
    \ previously declared here\n   20 |     long diff = 0;\n      |          ^~~~\n\
    /tmp/tmpr8py9s4i.cpp:27:10: error: redeclaration of \u2018long int guess\u2019\
    \n   27 |     long guess = 0;\n      |          ^~~~~\n/tmp/tmpr8py9s4i.cpp:21:10:\
    \ note: \u2018long int guess\u2019 previously declared here\n   21 |     long\
    \ guess = 0;\n      |          ^~~~~\n/tmp/tmpr8py9s4i.cpp:28:10: error: redeclaration\
    \ of \u2018long int game\u2019\n   28 |     long game = 0;\n      |          ^~~~\n\
    /tmp/tmpr8py9s4i.cpp:22:10: note: \u2018long int game\u2019 previously declared\
    \ here\n   22 |     long game = 0;\n      |          ^~~~\n/tmp/tmpr8py9s4i.cpp:29:10:\
    \ error: redeclaration of \u2018long int index\u2019\n   29 |     long index =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpr8py9s4i.cpp:23:10: note: \u2018long int\
    \ index\u2019 previously declared here\n   23 |     long index = 0;\n      | \
    \         ^~~~~\n/tmp/tmpr8py9s4i.cpp:30:10: error: redeclaration of \u2018long\
    \ int sum\u2019\n   30 |     long sum = 0;\n      |          ^~~\n/tmp/tmpr8py9s4i.cpp:18:10:\
    \ note: \u2018long int sum\u2019 previously declared here\n   18 |     long"
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long diff = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n\
    \    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n\
    \    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long\
    \ V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5nb45rm.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpv5nb45rm.cpp:72:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   72 |     long i = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:20:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   20 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:73:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   73 |     long j = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:21:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   21 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:74:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   74 |     long k = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:22:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   22 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:75:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   75 |     long l = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:23:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   23 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:76:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   76 |     long m = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:24:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   24 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:77:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   77 |     long n = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:25:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   25 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:78:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   78 |     long o = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:26:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   26 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:79:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   79 |     long p = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:27:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   27 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:80:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   80 |     long q = 0;\n      |          ^\n/tmp/tmpv5nb45rm.cpp:28:10:\
    \ note: \u2018long int"
  stdout: ''
  timestamp: 1659821940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score;\n    long diff;\n    long diff2;\n    long diff3;\n    long diff4;\n\
    \    long diff5;\n    long diff6;\n    long diff7;\n    long diff8;\n    long\
    \ diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n\
    \    long diff14;\n    long diff15;\n    long diff16;\n    long diff17;\n    long\
    \ diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n\
    \    long diff23;\n    long diff24;\n    long diff25;\n    long diff26;\n    long\
    \ diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n\
    \    long diff32;\n    long diff33;\n    long diff34;\n    long diff35;\n    long\
    \ diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n\
    \    long diff41;\n    long diff42;\n    long diff43;\n    long diff44;\n    long\
    \ diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n\
    \    long diff50;\n    long diff51;\n    long diff52;\n    long diff53;\n    long\
    \ diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n\
    \    long diff59;\n    long diff60;\n    long diff61;\n    long diff62;\n    long\
    \ diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n\
    \    long diff68;\n    long diff69;\n    long diff70;\n    long diff71;\n    long\
    \ diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n\
    \    long diff77;\n    long diff78;\n    long diff79;\n    long diff80;\n    long\
    \ diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n\
    \    long diff86;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpysq6udbo: /tmp/tmpysq6udbo.cpp:108: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    long long score = 0;\n    long\
    \ long guess = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n        score\
    \ += game[i];\n        guess += guess[i];\n        result[i] = abs(guess - score);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpormk8igb.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpormk8igb.cpp:19:15: error: declaration\
    \ of \u2018long long int guess\u2019 shadows a parameter\n   19 |     long long\
    \ guess = 0;\n      |               ^~~~~\n/tmp/tmpormk8igb.cpp:22:25: error:\
    \ invalid types \u2018long long int[size_t {aka long unsigned int}]\u2019 for\
    \ array subscript\n   22 |         guess += guess[i];\n      |               \
    \          ^\n"
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long sum2\
    \ = 0;\n    long diff2 = 0;\n    long sum3 = 0;\n    long diff3 = 0;\n    long\
    \ sum4 = 0;\n    long diff4 = 0;\n    long sum5 = 0;\n    long diff5 = 0;\n  \
    \  long sum6 = 0;\n    long diff6 = 0;\n    long sum7 = 0;\n    long diff7 = 0;\n\
    \    long sum8 = 0;\n    long diff8 = 0;\n    long sum9 = 0;\n    long diff9 =\
    \ 0;\n    long sum10 = 0;\n    long diff10 = 0;\n    long sum11 = 0;\n    long\
    \ diff11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n    long sum13 = 0;\n\
    \    long diff13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n    long sum15\
    \ = 0;\n    long diff15 = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long\
    \ sum17 = 0;\n    long diff17 = 0;\n    long sum18 = 0;\n    long diff18 = 0;\n\
    \    long sum19 = 0;\n    long diff19 = 0;\n    long sum20 = 0;\n    long diff20\
    \ = 0;\n    long sum21 = 0;\n    long diff21 = 0;\n    long sum22 = 0;\n    long\
    \ diff22 = 0;\n    long sum23 = 0;\n    long diff23 = 0;\n    long sum24 = 0;\n\
    \    long diff24 = 0;\n    long sum25 = 0;\n    long diff25 = 0;\n    long sum26\
    \ = 0;\n    long diff26 = 0;\n    long sum27 = 0;\n    long diff27 = 0;\n    long\
    \ sum28 = 0;\n    long diff28 = 0;\n    long sum29 = 0;\n    long diff29 = 0;\n\
    \    long sum30 = 0;\n    long diff30 = 0;\n    long sum31 = 0;\n    long diff31\
    \ = 0;\n    long sum32 = 0;\n    long diff32 = 0;\n    long sum33 = 0;\n    long\
    \ diff33 = 0;\n    long sum34 = 0;\n    long diff34 = 0;\n    long sum35 = 0;\n\
    \    long diff35 = 0;\n    long sum36 = 0;\n    long diff36 = 0;\n    long sum37\
    \ = 0;\n    long diff37 = 0;\n    long sum38 = 0;\n    long diff38 = 0;\n    long\
    \ sum39 = 0;\n    long diff39 = 0;\n    long sum40 = 0;\n    long diff40 = 0;\n\
    \    long sum41 = 0;\n    long diff41 = 0;\n    long sum42 = 0;\n    long diff42\
    \ = 0;\n    long sum\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt6xubcd5.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpt6xubcd5.cpp:103:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmpt6xubcd5.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long \n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpekdr9_9f.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpekdr9_9f.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpekdr9_9f.cpp:117:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  117 | }\n      | ^\n/tmp/tmpekdr9_9f.cpp:117:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw1lfxc59: /tmp/tmpw1lfxc59.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpoq8rhoss: /tmp/tmpoq8rhoss.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o\
    \ = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n \
    \   long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x\
    \ = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n \
    \   long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G\
    \ = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n \
    \   long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P\
    \ = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n \
    \   long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y\
    \ = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n \
    \   long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkgwkgclz.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpkgwkgclz.cpp:71:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   71 |     long i = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:19:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   19 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:72:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   72 |     long j = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:20:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   20 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:73:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   73 |     long k = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:21:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   21 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:74:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   74 |     long l = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:22:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   22 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:75:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   75 |     long m = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:23:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   23 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:76:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   76 |     long n = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:24:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   24 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:77:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   77 |     long o = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:25:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   25 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:78:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   78 |     long p = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:26:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   26 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:79:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   79 |     long q = 0;\n      |          ^\n/tmp/tmpkgwkgclz.cpp:27:10:\
    \ note: \u2018long int"
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    long total = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        total += game[i] - guess[i];\n    \
    \    result[i] = total;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbxm613zb: /tmp/tmpbxm613zb.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long difference = 0;\n    long\
    \ score2 = 0;\n    long guess2 = 0;\n    long difference2 = 0;\n    long score3\
    \ = 0;\n    long guess3 = 0;\n    long difference3 = 0;\n    long score4 = 0;\n\
    \    long guess4 = 0;\n    long difference4 = 0;\n    long score5 = 0;\n    long\
    \ guess5 = 0;\n    long difference5 = 0;\n    long score6 = 0;\n    long guess6\
    \ = 0;\n    long difference6 = 0;\n    long score7 = 0;\n    long guess7 = 0;\n\
    \    long difference7 = 0;\n    long score8 = 0;\n    long guess8 = 0;\n    long\
    \ difference8 = 0;\n    long score9 = 0;\n    long guess9 = 0;\n    long difference9\
    \ = 0;\n    long score10 = 0;\n    long guess10 = 0;\n    long difference10 =\
    \ 0;\n    long score11 = 0;\n    long guess11 = 0;\n    long difference11 = 0;\n\
    \    long score12 = 0;\n    long guess12 = 0;\n    long difference12 = 0;\n  \
    \  long score13 = 0;\n    long guess13 = 0;\n    long difference13 = 0;\n    long\
    \ score14 = 0;\n    long guess14 = 0;\n    long difference14 = 0;\n    long score15\
    \ = 0;\n    long guess15 = 0;\n    long difference15 = 0;\n    long score16 =\
    \ 0;\n    long guess16 = 0;\n    long difference16 = 0;\n    long score17 = 0;\n\
    \    long guess17 = 0;\n    long difference17 = 0;\n    long score18 = 0;\n  \
    \  long guess18 = 0;\n    long difference18 = 0;\n    long score19 = 0;\n    long\
    \ guess19 = 0;\n    long difference19 = 0;\n    long score20 = 0;\n    long guess20\
    \ = 0;\n    long difference20 = 0;\n    long score21 = 0;\n    long guess21 =\
    \ 0;\n    long difference21 = 0;\n    long score22 = 0;\n    long guess22 = 0;\n\
    \    long difference22 = 0;\n    long score23 = 0;\n    long guess23 = 0;\n  \
    \  long difference23 = 0;\n    long score24 = 0;\n    long guess24 = 0;\n    long\
    \ difference24 = 0;\n    long score25 = 0;\n    long guess25 = 0;\n    long difference25\
    \ = 0;\n    long score26 = 0;\n    long guess26 = 0;\n    long difference26 =\
    \ 0;\n    long score27 = 0;\n    long guess27 = 0;\n    long difference27 = 0;\n\
    \    long score28 = 0;\n    long guess28 = 0;\n    long difference28 = 0;\n  \
    \  long score29 = 0;\n    long guess29 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpts4oisql.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpts4oisql.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpts4oisql.cpp:104:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  104 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    long minDiff\
    \ = std::numeric_limits<long>::max();\n    long maxDiff = std::numeric_limits<long>::min();\n\
    \    long minScore = std::numeric_limits<long>::max();\n    long maxScore = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGame = std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGame = std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGame = std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGame = std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGame = std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGame = std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<long>::min();\n\
    \    long minGame = std::numeric_limits<long>::max();\n    long maxGame = std::numeric_limits<long>::min();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = std::numeric_limits<\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp67acgn2a.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp67acgn2a.cpp:28:10: error: redeclaration\
    \ of \u2018long int minGuess\u2019\n   28 |     long minGuess = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~\n/tmp/tmp67acgn2a.cpp:24:10: note: \u2018long int minGuess\u2019\
    \ previously declared here\n   24 |     long minGuess = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~\n/tmp/tmp67acgn2a.cpp:29:10: error: redeclaration of\
    \ \u2018long int maxGuess\u2019\n   29 |     long maxGuess = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~~\n/tmp/tmp67acgn2a.cpp:25:10: note: \u2018long int maxGuess\u2019\
    \ previously declared here\n   25 |     long maxGuess = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~~\n/tmp/tmp67acgn2a.cpp:30:10: error: redeclaration of\
    \ \u2018long int minGame\u2019\n   30 |     long minGame = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~\n/tmp/tmp67acgn2a.cpp:26:10: note: \u2018long int minGame\u2019\
    \ previously declared here\n   26 |     long minGame = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~\n/tmp/tmp67acgn2a.cpp:31:10: error: redeclaration of\
    \ \u2018long int maxGame\u2019\n   31 |     long maxGame = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~\n/tmp/tmp67acgn2a.cpp:27:10: note: \u2018long int maxGame\u2019\
    \ previously declared here\n   27 |     long maxGame = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~\n/tmp/tmp67acgn2a.cpp:32:10: error: redeclaration of\
    \ \u2018long int minGuess\u2019\n   32 |     long minGuess = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~\n/tmp/tmp67acgn2a.cpp:24:10: note: \u2018long int minGuess\u2019\
    \ previously declared here\n   24 |     long minGuess = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~\n/tmp/tmp67acgn2a.cpp:33:10: error: redeclaration of\
    \ \u2018long int maxGuess\u2019\n   33 |     long maxGuess = std::numeric_limits<long>::min();\n\
    \      |          ^~~~~~~~\n/tmp/tmp67acgn2a.cpp:25:10: note: \u2018long int maxGuess\u2019\
    \ previously declared here\n   25 |     long maxGuess = std::numeric_limits<long>::min();\n\
    \      |    "
  stdout: ''
  timestamp: 1659821940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    long sum = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        result[i] = abs(guess[i] - sum);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9rkatpmd: /tmp/tmp9rkatpmd.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpomp4373k.cpp: In function 'int main()':\n/tmp/tmpomp4373k.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpomp4373k.cpp:2:\n/tmp/tmpomp4373k.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpomp4373k.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpomp4373k.cpp:26:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpomp4373k.cpp:26:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpomp4373k.cpp:26:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpomp4373k.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long sum = 0;\n    long long max = 0;\n    long long min = 0;\n    long\
    \ long diff = 0;\n    long long count = 0;\n    long long sum2 = 0;\n    long\
    \ long max2 = 0;\n    long long min2 = 0;\n    long long diff2 = 0;\n    long\
    \ long count2 = 0;\n    long long sum3 = 0;\n    long long max3 = 0;\n    long\
    \ long min3 = 0;\n    long long diff3 = 0;\n    long long count3 = 0;\n    long\
    \ long sum4 = 0;\n    long long max4 = 0;\n    long long min4 = 0;\n    long long\
    \ diff4 = 0;\n    long long count4 = 0;\n    long long sum5 = 0;\n    long long\
    \ max5 = 0;\n    long long min5 = 0;\n    long long diff5 = 0;\n    long long\
    \ count5 = 0;\n    long long sum6 = 0;\n    long long max6 = 0;\n    long long\
    \ min6 = 0;\n    long long diff6 = 0;\n    long long count6 = 0;\n    long long\
    \ sum7 = 0;\n    long long max7 = 0;\n    long long min7 = 0;\n    long long diff7\
    \ = 0;\n    long long count7 = 0;\n    long long sum8 = 0;\n    long long max8\
    \ = 0;\n    long long min8 = 0;\n    long long diff8 = 0;\n    long long count8\
    \ = 0;\n    long long sum9 = 0;\n    long long max9 = 0;\n    long long min9 =\
    \ 0;\n    long long diff9 = 0;\n    long long count9 = 0;\n    long long sum10\
    \ = 0;\n    long long max10 = 0;\n    long long min10 = 0;\n    long long diff10\
    \ = 0;\n    long long count10 = 0;\n    long long sum11 = 0;\n    long long max11\
    \ = 0;\n    long long min11 = 0;\n    long long diff11 = 0;\n    long long count11\
    \ = 0;\n    long long sum12 = 0;\n    long long max12 = 0;\n    long long min12\
    \ = 0;\n    long long diff12 = 0;\n    long long count12 = 0;\n    long long sum13\
    \ = 0;\n    long long max13 = 0;\n    long long min13 = 0;\n    long long diff13\
    \ = 0;\n    long long count13 = 0;\n    long long sum14 = 0;\n    long long max14\
    \ = 0;\n    long long min14 = 0;\n    long long diff14 = 0;\n    long long count14\
    \ = 0;\n    long long sum15 = 0;\n    long long max15 = 0;\n    long long min15\
    \ = 0;\n    long long diff15 = 0;\n    long long count15 = 0;\n    long long \n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2wdwkz2.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpm2wdwkz2.cpp:93:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmpm2wdwkz2.cpp:93:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821940
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        if (diff == 0) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = diff;\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        score = game[i];\n        diff = abs(guess - score);\n     \
    \   if (diff == 0) {\n            result[i] = 0;\n        } else {\n         \
    \   result[i] = diff;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4nqk89z.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpu4nqk89z.cpp:21:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   21 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpu4nqk89z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpu4nqk89z.cpp:21:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n\
    \    long FF = 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long\
    \ JJ = 0;\n    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN =\
    \ 0;\n    long OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n\
    \    long SS = 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long\
    \ WW = 0;\n    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA\
    \ = 0;\n    long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE\
    \ = 0;\n    long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III\
    \ = 0;\n    long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM\
    \ = 0;\n    long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ\
    \ = 0;\n    long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU\
    \ = 0;\n    long VVV = 0;\n    long WW\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfbmw07u.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpbfbmw07u.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpbfbmw07u.cpp:114:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmpbfbmw07u.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821940
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score;\n    long diff;\n    long sum = 0;\n\
    \    long count = 0;\n    long sum2 = 0;\n    long count2 = 0;\n    long sum3\
    \ = 0;\n    long count3 = 0;\n    long sum4 = 0;\n    long count4 = 0;\n    long\
    \ sum5 = 0;\n    long count5 = 0;\n    long sum6 = 0;\n    long count6 = 0;\n\
    \    long sum7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long count8\
    \ = 0;\n    long sum9 = 0;\n    long count9 = 0;\n    long sum10 = 0;\n    long\
    \ count10 = 0;\n    long sum11 = 0;\n    long count11 = 0;\n    long sum12 = 0;\n\
    \    long count12 = 0;\n    long sum13 = 0;\n    long count13 = 0;\n    long sum14\
    \ = 0;\n    long count14 = 0;\n    long sum15 = 0;\n    long count15 = 0;\n  \
    \  long sum16 = 0;\n    long count16 = 0;\n    long sum17 = 0;\n    long count17\
    \ = 0;\n    long sum18 = 0;\n    long count18 = 0;\n    long sum19 = 0;\n    long\
    \ count19 = 0;\n    long sum20 = 0;\n    long count20 = 0;\n    long sum21 = 0;\n\
    \    long count21 = 0;\n    long sum22 = 0;\n    long count22 = 0;\n    long sum23\
    \ = 0;\n    long count23 = 0;\n    long sum24 = 0;\n    long count24 = 0;\n  \
    \  long sum25 = 0;\n    long count25 = 0;\n    long sum26 = 0;\n    long count26\
    \ = 0;\n    long sum27 = 0;\n    long count27 = 0;\n    long sum28 = 0;\n    long\
    \ count28 = 0;\n    long sum29 = 0;\n    long count29 = 0;\n    long sum30 = 0;\n\
    \    long count30 = 0;\n    long sum31 = 0;\n    long count31 = 0;\n    long sum32\
    \ = 0;\n    long count32 = 0;\n    long sum33 = 0;\n    long count33 = 0;\n  \
    \  long sum34 = 0;\n    long count34 = 0;\n    long sum35 = 0;\n    long count35\
    \ = 0;\n    long sum36 = 0;\n    long count36 = 0;\n    long sum37 = 0;\n    long\
    \ count37 = 0;\n    long sum38 = 0;\n    long count38 = 0;\n    long sum39 = 0;\n\
    \    long count39 = 0;\n    long sum40 = 0;\n    long count40 = 0;\n    long sum41\
    \ = 0;\n    long count41 = 0;\n    long sum42 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpl_fz3ung: /tmp/tmpl_fz3ung.cpp:107: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821941
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long\
    \ game = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long\
    \ q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n\
    \    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long\
    \ z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n\
    \    long e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n\
    \    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long\
    \ b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n\
    \    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long\
    \ t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n\
    \    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long\
    \ \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w41ucgm.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp8w41ucgm.cpp:20:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   20 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp8w41ucgm.cpp:21:10: error: declaration of\
    \ \u2018long int game\u2019 shadows a parameter\n   21 |     long game = 0;\n\
    \      |          ^~~~\n/tmp/tmp8w41ucgm.cpp:48:10: error: redeclaration of \u2018\
    long int i\u2019\n   48 |     long i = 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:22:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   22 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:49:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   49 |     long j = 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:23:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   23 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:50:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   50 |     long k = 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:24:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   24 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:51:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   51 |     long l = 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:25:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   25 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:52:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   52 |     long m = 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:26:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   26 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:53:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   53 |     long n = 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:27:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   27 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:54:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   54 |     long o = 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:28:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   28 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp8w41ucgm.cpp:55:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   55 |     long p = 0;\n      |     "
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ahconp6.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp_ahconp6.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp_ahconp6.cpp:73:10: error: redeclaration\
    \ of \u2018long int i\u2019\n   73 |     long i = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:21:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   21 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:74:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   74 |     long j = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:22:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   22 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:75:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   75 |     long k = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:23:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   23 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:76:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   76 |     long l = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:24:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   24 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:77:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   77 |     long m = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:25:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   25 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:78:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   78 |     long n = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:26:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   26 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:79:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   79 |     long o = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:27:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   27 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:80:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   80 |     long p = 0;\n      |          ^\n/tmp/tmp_ahconp6.cpp:28:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   28 |     long p =\
    \ 0;\n      |          ^\n/tmp/tmp_ahco"
  stdout: ''
  timestamp: 1659821940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score = 0;\n    long guessed = 0;\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            guessed++;\n       \
    \ } else {\n            score = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = score;\n    }\n    if (guessed == game.size()) {\n        return result;\n\
    \    } else {\n        return result;\n    }\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9wqb6jes: /tmp/tmp9wqb6jes.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    long total = 0;\n    long sum = 0;\n    long count =\
    \ 0;\n    for (long i = 0; i < guess.size(); i++) {\n        diff = abs(game[i]\
    \ - guess[i]);\n        sum += diff;\n        total += diff;\n        count +=\
    \ 1;\n    }\n    long average = sum / count;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - average);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwi1j3l9k: /tmp/tmpwi1j3l9k.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score;\n    long diff;\n    long sum = 0;\n    long count\
    \ = 0;\n    long max = 0;\n    long min = 0;\n    long mid = 0;\n    long mid2\
    \ = 0;\n    long mid3 = 0;\n    long mid4 = 0;\n    long mid5 = 0;\n    long mid6\
    \ = 0;\n    long mid7 = 0;\n    long mid8 = 0;\n    long mid9 = 0;\n    long mid10\
    \ = 0;\n    long mid11 = 0;\n    long mid12 = 0;\n    long mid13 = 0;\n    long\
    \ mid14 = 0;\n    long mid15 = 0;\n    long mid16 = 0;\n    long mid17 = 0;\n\
    \    long mid18 = 0;\n    long mid19 = 0;\n    long mid20 = 0;\n    long mid21\
    \ = 0;\n    long mid22 = 0;\n    long mid23 = 0;\n    long mid24 = 0;\n    long\
    \ mid25 = 0;\n    long mid26 = 0;\n    long mid27 = 0;\n    long mid28 = 0;\n\
    \    long mid29 = 0;\n    long mid30 = 0;\n    long mid31 = 0;\n    long mid32\
    \ = 0;\n    long mid33 = 0;\n    long mid34 = 0;\n    long mid35 = 0;\n    long\
    \ mid36 = 0;\n    long mid37 = 0;\n    long mid38 = 0;\n    long mid39 = 0;\n\
    \    long mid40 = 0;\n    long mid41 = 0;\n    long mid42 = 0;\n    long mid43\
    \ = 0;\n    long mid44 = 0;\n    long mid45 = 0;\n    long mid46 = 0;\n    long\
    \ mid47 = 0;\n    long mid48 = 0;\n    long mid49 = 0;\n    long mid50 = 0;\n\
    \    long mid51 = 0;\n    long mid52 = 0;\n    long mid53 = 0;\n    long mid54\
    \ = 0;\n    long mid55 = 0;\n    long mid56 = 0;\n    long mid57 = 0;\n    long\
    \ mid58 = 0;\n    long mid59 = 0;\n    long mid60 = 0;\n    long mid61 = 0;\n\
    \    long mid62 = 0;\n    long mid63 = 0;\n    long mid64 = 0;\n    long mid65\
    \ = 0;\n    long mid66 = 0;\n    long mid67 = 0;\n    long mid68 = 0;\n    long\
    \ mid69 = 0;\n    long mid70 = 0;\n    long mid71 = 0;\n    long mid72 = 0;\n\
    \    long mid73 = 0;\n    long mid74 = 0;\n    long mid75 = 0;\n    long mid76\
    \ = 0;\n    long mid77 = 0;\n    long mid78 = 0;\n    long mid79 = 0;\n    long\
    \ mid\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprtn5qyod.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmprtn5qyod.cpp:104:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmprtn5qyod.cpp:104:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821940
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    long sum = 0;\n    long max = 0;\n    for (size_t i =\
    \ 0; i < guess.size(); i++) {\n        sum += game[i];\n        if (game[i] >\
    \ max) {\n            max = game[i];\n        }\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        diff = guess - sum;\n        result[i] = std::abs(diff[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3shlwrv.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpb3shlwrv.cpp:27:22: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   27 |         diff = guess - sum;\n      |    \
    \            ~~~~~ ^ ~~~\n      |                |       |\n      |          \
    \      |       long int\n      |                std::vector<long int>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpb3shlwrv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpb3shlwrv.cpp:27:24:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |         diff = guess - sum;\n      |                        ^~~\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/inc"
  stdout: ''
  timestamp: 1659821942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long sum = 0;\n    long diff = 0;\n    for(size_t\
    \ i = 0; i < game.size(); i++) {\n        sum += game[i];\n        diff = abs(guess[i]\
    \ - sum);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy_daqm0l: /tmp/tmpy_daqm0l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        if(game[i] == guess[i]) {\n       \
    \     score++;\n        } else {\n            diff = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpaq55j6b9: /tmp/tmpaq55j6b9.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    long minScore\
    \ = std::numeric_limits<long>::max();\n    long maxScore = -std::numeric_limits<long>::max();\n\
    \    long minDiff = std::numeric_limits<long>::max();\n    long maxDiff = -std::numeric_limits<long>::max();\n\
    \    long minGuess = std::numeric_limits<long>::max();\n    long maxGuess = -std::numeric_limits<long>::max();\n\
    \    long minGuesses = std::numeric_limits<long>::max();\n    long maxGuesses\
    \ = -std::numeric_limits<long>::max();\n    long minGuesses = std::numeric_limits<long>::max();\n\
    \    long maxGuesses = -std::numeric_limits<long>::max();\n    long minGuesses\
    \ = std::numeric_limits<long>::max();\n    long maxGuesses = -std::numeric_limits<long>::max();\n\
    \    long minGuesses = std::numeric_limits<long>::max();\n    long maxGuesses\
    \ = -std::numeric_limits<long>::max();\n    long minGuesses = std::numeric_limits<long>::max();\n\
    \    long maxGuesses = -std::numeric_limits<long>::max();\n    long minGuesses\
    \ = std::numeric_limits<long>::max();\n    long maxGuesses = -std::numeric_limits<long>::max();\n\
    \    long minGuesses = std::numeric_limits<long>::max();\n    long maxGuesses\
    \ = -std::numeric_limits<long>::max();\n    long minGuesses = std::numeric_limits<long>::max();\n\
    \    long maxGuesses = -std::numeric_limits<long>::max();\n    long minGuesses\
    \ = std::numeric_limits<long>::max();\n    long maxGuesses = -std::numeric_limits<long>::max();\n\
    \    long minGuesses = std::numeric_limits<long>::max();\n    long maxGuesses\
    \ = -std::numeric_limits<long>::max();\n    long minGuesses = std::numeric_limits<long>::max();\n\
    \    long maxGuesses = -std::numeric_limits<long>::max();\n    long minGuesses\
    \ = std::numeric_limits<long>::max();\n    long maxGuesses = -std::numeric_limits<long>::max();\n\
    \    long minG\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7o_cp0_.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpd7o_cp0_.cpp:28:10: error: redeclaration\
    \ of \u2018long int minGuesses\u2019\n   28 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:26:10: note: \u2018long int\
    \ minGuesses\u2019 previously declared here\n   26 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:29:10: error: redeclaration\
    \ of \u2018long int maxGuesses\u2019\n   29 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:27:10: note: \u2018long int\
    \ maxGuesses\u2019 previously declared here\n   27 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:30:10: error: redeclaration\
    \ of \u2018long int minGuesses\u2019\n   30 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:26:10: note: \u2018long int\
    \ minGuesses\u2019 previously declared here\n   26 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:31:10: error: redeclaration\
    \ of \u2018long int maxGuesses\u2019\n   31 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:27:10: note: \u2018long int\
    \ maxGuesses\u2019 previously declared here\n   27 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:32:10: error: redeclaration\
    \ of \u2018long int minGuesses\u2019\n   32 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:26:10: note: \u2018long int\
    \ minGuesses\u2019 previously declared here\n   26 |     long minGuesses = std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:33:10: error: redeclaration\
    \ of \u2018long int maxGuesses\u2019\n   33 |     long maxGuesses = -std::numeric_limits<long>::max();\n\
    \      |          ^~~~~~~~~~\n/tmp/tmpd7o_cp0_.cpp:27:10: note: \u2018long int\
    \ maxGuesses\u2019 previously de"
  stdout: ''
  timestamp: 1659821942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        score = game[i] + guess[i];\n        if (score < 0) {\n    \
    \        score = -score;\n        }\n        if (score == 0) {\n            result[i]\
    \ = 0;\n        } else {\n            diff = abs(score - game[i]);\n         \
    \   result[i] = diff;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4sngrac5: /tmp/tmp4sngrac5.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            score++;\n        }\
    \ else {\n            diff = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = diff;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmplp_34xry: /tmp/tmplp_34xry.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821943
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        diff = abs(game[i] - guess[i]);\n        if (diff == 0) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n        score += diff;\n    }\n    if (score == 0) {\n        for\
    \ (size_t i = 0; i < guess.size(); i++) {\n            result[i] = 0;\n      \
    \  }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821942
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821942
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long sum = 0;\n    long diff = 0;\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i];\n        diff = game[i] - guess[i];\n      \
    \  if(diff < 0) {\n            diff *= -1;\n        }\n        result[i] = diff;\n\
    \    }\n    for(long i = 0; i < guess.size(); i++) {\n        if(result[i] < 0)\
    \ {\n            result[i] *= -1;\n        }\n    }\n    for(long i = 0; i < guess.size();\
    \ i++) {\n        if(result[i] != 0) {\n            result[i] = abs(result[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += abs(game[i] - guess[i]);\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    if (score == 0)\n        return result;\n    else\n        return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long max = 0;\n    long min = 0;\n\
    \    long mid = 0;\n    long count = 0;\n    long sum = 0;\n    long sum2 = 0;\n\
    \    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n\
    \    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 =\
    \ 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long\
    \ sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n\
    \    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21\
    \ = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long\
    \ sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n\
    \    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32\
    \ = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long\
    \ sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n\
    \    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43\
    \ = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long\
    \ sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n\
    \    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54\
    \ = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long\
    \ sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n\
    \    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65\
    \ = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long\
    \ sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n\
    \    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76\
    \ = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long\
    \ sum80\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2kl9o4ws.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp2kl9o4ws.cpp:103:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmp2kl9o4ws.cpp:103:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821942
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i =\
    \ 0; i < game.size(); i++) {\n        sum += game[i];\n        diff = game[i]\
    \ - guess[i];\n        if(diff < 0) {\n            diff *= -1;\n        }\n  \
    \      result[i] = diff;\n    }\n    for(int i = 0; i < game.size(); i++) {\n\
    \        if(result[i] < 0) {\n            result[i] *= -1;\n        }\n    }\n\
    \    for(int i = 0; i < game.size(); i++) {\n        if(result[i] != 0) {\n  \
    \          result[i] = abs(result[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(score - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpou0xpd4b.cpp: In function 'int main()':\n/tmp/tmpou0xpd4b.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpou0xpd4b.cpp:2:\n/tmp/tmpou0xpd4b.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpou0xpd4b.cpp:28:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpou0xpd4b.cpp:28:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpou0xpd4b.cpp:28:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpou0xpd4b.cpp:28:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpou0xpd4b.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpufrm6qir: /tmp/tmpufrm6qir.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        score = game[i];\n        guess = guess[i];\n\
    \        diff = abs(guess - score);\n        if (guess == score) {\n         \
    \   result[i] = 0;\n        } else {\n            result[i] = diff;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq8kp7ka4.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpq8kp7ka4.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpq8kp7ka4.cpp:22:24: error: invalid types\
    \ \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n \
    \  22 |         guess = guess[i];\n      |                        ^\n"
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n\
    \    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n\
    \    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long sum12\
    \ = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long\
    \ sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n\
    \    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long sum23\
    \ = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long\
    \ sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n\
    \    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long sum34\
    \ = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long\
    \ sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n\
    \    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long sum45\
    \ = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long\
    \ sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n\
    \    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long sum56\
    \ = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long\
    \ sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n\
    \    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long sum67\
    \ = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long\
    \ sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n\
    \    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long sum78\
    \ = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long\
    \ sum82 = 0;\n    long sum83 = 0;\n    long sum84 = 0;\n    long sum85\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9bkffba.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpj9bkffba.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpj9bkffba.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        score\
    \ += game[i] * guess[i];\n    }\n    for (long i = 0; i < guess.size(); i++) {\n\
    \        result[i] = abs(score - guess[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2piawfuz: /tmp/tmp2piawfuz.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score;\n    long diff;\n    long diff2;\n    long diff3;\n    long diff4;\n\
    \    long diff5;\n    long diff6;\n    long diff7;\n    long diff8;\n    long\
    \ diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n    long diff13;\n\
    \    long diff14;\n    long diff15;\n    long diff16;\n    long diff17;\n    long\
    \ diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n    long diff22;\n\
    \    long diff23;\n    long diff24;\n    long diff25;\n    long diff26;\n    long\
    \ diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n    long diff31;\n\
    \    long diff32;\n    long diff33;\n    long diff34;\n    long diff35;\n    long\
    \ diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n    long diff40;\n\
    \    long diff41;\n    long diff42;\n    long diff43;\n    long diff44;\n    long\
    \ diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n    long diff49;\n\
    \    long diff50;\n    long diff51;\n    long diff52;\n    long diff53;\n    long\
    \ diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n    long diff58;\n\
    \    long diff59;\n    long diff60;\n    long diff61;\n    long diff62;\n    long\
    \ diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n    long diff67;\n\
    \    long diff68;\n    long diff69;\n    long diff70;\n    long diff71;\n    long\
    \ diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n    long diff76;\n\
    \    long diff77;\n    long diff78;\n    long diff79;\n    long diff80;\n    long\
    \ diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n    long diff85;\n\
    \    long diff86;\n    long \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcliwhp3.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpxcliwhp3.cpp:105:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  105 | }\n      | ^\n/tmp/tmpxcliwhp3.cpp:105:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long sum2 = 0;\n    long sum3\
    \ = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7\
    \ = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long\
    \ sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n\
    \    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18\
    \ = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long\
    \ sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n\
    \    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29\
    \ = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long\
    \ sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n\
    \    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40\
    \ = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long\
    \ sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n\
    \    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51\
    \ = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long\
    \ sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n\
    \    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62\
    \ = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long\
    \ sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n\
    \    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73\
    \ = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long\
    \ sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n\
    \    long sum81 = 0;\n    long sum82 = 0;\n    long sum83 = 0;\n    long sum84\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_7i_ve1.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpo_7i_ve1.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpo_7i_ve1.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i];\n        result[i] = abs(guess[i] - score);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5ca9ofcm: /tmp/tmp5ca9ofcm.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n\
    \    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long\
    \ AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK =\
    \ 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n\
    \    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long\
    \ AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX =\
    \ 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n\
    \    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long\
    \ BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK =\
    \ 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n\
    \    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long\
    \ BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX =\
    \ 0;\n    long BY = 0;\n    long BZ = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgtes9nkx.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpgtes9nkx.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpgtes9nkx.cpp:117:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  117 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        diff = abs(game[i] - guess[i]);\n        if (diff == 0) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n        score += diff;\n    }\n    if (score == 0) {\n        return\
    \ result;\n    }\n    for (size_t i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = abs(result[i] - score);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp8jh8xywg: /tmp/tmp8jh8xywg.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long difference = 0;\n    long\
    \ index = 0;\n    long scoreIndex = 0;\n    long guessIndex = 0;\n    long differenceIndex\
    \ = 0;\n    long index2 = 0;\n    long scoreIndex2 = 0;\n    long guessIndex2\
    \ = 0;\n    long differenceIndex2 = 0;\n    long index3 = 0;\n    long scoreIndex3\
    \ = 0;\n    long guessIndex3 = 0;\n    long differenceIndex3 = 0;\n    long index4\
    \ = 0;\n    long scoreIndex4 = 0;\n    long guessIndex4 = 0;\n    long differenceIndex4\
    \ = 0;\n    long index5 = 0;\n    long scoreIndex5 = 0;\n    long guessIndex5\
    \ = 0;\n    long differenceIndex5 = 0;\n    long index6 = 0;\n    long scoreIndex6\
    \ = 0;\n    long guessIndex6 = 0;\n    long differenceIndex6 = 0;\n    long index7\
    \ = 0;\n    long scoreIndex7 = 0;\n    long guessIndex7 = 0;\n    long differenceIndex7\
    \ = 0;\n    long index8 = 0;\n    long scoreIndex8 = 0;\n    long guessIndex8\
    \ = 0;\n    long differenceIndex8 = 0;\n    long index9 = 0;\n    long scoreIndex9\
    \ = 0;\n    long guessIndex9 = 0;\n    long differenceIndex9 = 0;\n    long index10\
    \ = 0;\n    long scoreIndex10 = 0;\n    long guessIndex10 = 0;\n    long differenceIndex10\
    \ = 0;\n    long index11 = 0;\n    long scoreIndex11 = 0;\n    long guessIndex11\
    \ = 0;\n    long differenceIndex11 = 0;\n    long index12 = 0;\n    long scoreIndex12\
    \ = 0;\n    long guessIndex12 = 0;\n    long differenceIndex12 = 0;\n    long\
    \ index13 = 0;\n    long scoreIndex13 = 0;\n    long guessIndex13 = 0;\n    long\
    \ differenceIndex13 = 0;\n    long index14 = 0;\n    long scoreIndex14 = 0;\n\
    \    long guessIndex14 = 0;\n    long differenceIndex14 = 0;\n    long index15\
    \ = 0;\n    long scoreIndex15 = 0;\n    long guessIndex15 = 0;\n    long differenceIndex15\
    \ = 0;\n    long index16 = 0;\n    long scoreIndex16 = 0;\n    long guessIndex16\
    \ = 0;\n    long differenceIndex16 = 0;\n    long index17 = 0;\n    long scoreIndex17\
    \ = 0;\n    long guessIndex17 = 0;\n    long differenceIndex17 = 0;\n    long\
    \ index18 = 0;\n    long scoreIndex18 = 0;\n    long guessIndex18 = 0;\n    long\
    \ differenceIndex18 = 0;\n    long index19 = 0;\n    long scoreIndex19 = 0;\n\
    \    long guessIndex19 = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4x9emyc7.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp4x9emyc7.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp4x9emyc7.cpp:96:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   96 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long sum = 0;\n    long diff = 0;\n    long score\
    \ = 0;\n    long guess = 0;\n    long index = 0;\n    long sum2 = 0;\n    long\
    \ diff2 = 0;\n    long score2 = 0;\n    long guess2 = 0;\n    long index2 = 0;\n\
    \    long sum3 = 0;\n    long diff3 = 0;\n    long score3 = 0;\n    long guess3\
    \ = 0;\n    long index3 = 0;\n    long sum4 = 0;\n    long diff4 = 0;\n    long\
    \ score4 = 0;\n    long guess4 = 0;\n    long index4 = 0;\n    long sum5 = 0;\n\
    \    long diff5 = 0;\n    long score5 = 0;\n    long guess5 = 0;\n    long index5\
    \ = 0;\n    long sum6 = 0;\n    long diff6 = 0;\n    long score6 = 0;\n    long\
    \ guess6 = 0;\n    long index6 = 0;\n    long sum7 = 0;\n    long diff7 = 0;\n\
    \    long score7 = 0;\n    long guess7 = 0;\n    long index7 = 0;\n    long sum8\
    \ = 0;\n    long diff8 = 0;\n    long score8 = 0;\n    long guess8 = 0;\n    long\
    \ index8 = 0;\n    long sum9 = 0;\n    long diff9 = 0;\n    long score9 = 0;\n\
    \    long guess9 = 0;\n    long index9 = 0;\n    long sum10 = 0;\n    long diff10\
    \ = 0;\n    long score10 = 0;\n    long guess10 = 0;\n    long index10 = 0;\n\
    \    long sum11 = 0;\n    long diff11 = 0;\n    long score11 = 0;\n    long guess11\
    \ = 0;\n    long index11 = 0;\n    long sum12 = 0;\n    long diff12 = 0;\n   \
    \ long score12 = 0;\n    long guess12 = 0;\n    long index12 = 0;\n    long sum13\
    \ = 0;\n    long diff13 = 0;\n    long score13 = 0;\n    long guess13 = 0;\n \
    \   long index13 = 0;\n    long sum14 = 0;\n    long diff14 = 0;\n    long score14\
    \ = 0;\n    long guess14 = 0;\n    long index14 = 0;\n    long sum15 = 0;\n  \
    \  long diff15 = 0;\n    long score15 = 0;\n    long guess15 = 0;\n    long index15\
    \ = 0;\n    long sum16 = 0;\n    long diff16 = 0;\n    long score16 = 0;\n   \
    \ long guess16 = 0;\n    long index16 = 0;\n    long sum17 = 0;\n    long diff17\
    \ = 0;\n    long score17 = 0;\n    long guess17 = 0;\n    long index17 = 0;\n\
    \    long sum18 = 0;\n    long diff18 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkdx3keli.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpkdx3keli.cpp:21:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   21 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpkdx3keli.cpp:106:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  106 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821943
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        guess = guess[i];\n        score = game[i];\n        if (guess\
    \ == score) {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = abs(guess - score);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyf1gzl0d.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyf1gzl0d.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpyf1gzl0d.cpp:19:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   19 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmpyf1gzl0d.cpp:20:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   20 |         guess = guess[i];\n      |                        ^\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  if (game[i] == guess[i]) {\n            score = 0;\n        } else {\n    \
    \        score = abs(game[i] - guess[i]);\n        }\n        result[i] = score;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long game =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q =\
    \ 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n   \
    \ long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z =\
    \ 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n   \
    \ long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I =\
    \ 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n   \
    \ long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R =\
    \ 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n   \
    \ long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a =\
    \ 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n   \
    \ long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B =\
    \ 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n   \
    \ long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K =\
    \ 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n   \
    \ long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T =\
    \ 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n   \
    \ long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3nfod5oi.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3nfod5oi.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp3nfod5oi.cpp:20:10: error: declaration of\
    \ \u2018long int game\u2019 shadows a parameter\n   20 |     long game = 0;\n\
    \      |          ^~~~\n/tmp/tmp3nfod5oi.cpp:73:10: error: redeclaration of \u2018\
    long int i\u2019\n   73 |     long i = 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:21:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   21 |     long i =\
    \ 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:74:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   74 |     long j = 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:22:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   22 |     long j =\
    \ 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:75:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   75 |     long k = 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:23:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   23 |     long k =\
    \ 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:76:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   76 |     long l = 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:24:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   24 |     long l =\
    \ 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:77:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   77 |     long m = 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:25:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   25 |     long m =\
    \ 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:78:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   78 |     long n = 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:26:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   26 |     long n =\
    \ 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:79:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   79 |     long o = 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:27:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   27 |     long o =\
    \ 0;\n      |          ^\n/tmp/tmp3nfod5oi.cpp:80:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   80 |     long p = 0;\n      |     "
  stdout: ''
  timestamp: 1659821943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long index = 0;\n    long scoreIndex = 0;\n    long guessIndex = 0;\n\
    \    long diffIndex = 0;\n    long scoreIndex2 = 0;\n    long guessIndex2 = 0;\n\
    \    long diffIndex2 = 0;\n    long scoreIndex3 = 0;\n    long guessIndex3 = 0;\n\
    \    long diffIndex3 = 0;\n    long scoreIndex4 = 0;\n    long guessIndex4 = 0;\n\
    \    long diffIndex4 = 0;\n    long scoreIndex5 = 0;\n    long guessIndex5 = 0;\n\
    \    long diffIndex5 = 0;\n    long scoreIndex6 = 0;\n    long guessIndex6 = 0;\n\
    \    long diffIndex6 = 0;\n    long scoreIndex7 = 0;\n    long guessIndex7 = 0;\n\
    \    long diffIndex7 = 0;\n    long scoreIndex8 = 0;\n    long guessIndex8 = 0;\n\
    \    long diffIndex8 = 0;\n    long scoreIndex9 = 0;\n    long guessIndex9 = 0;\n\
    \    long diffIndex9 = 0;\n    long scoreIndex10 = 0;\n    long guessIndex10 =\
    \ 0;\n    long diffIndex10 = 0;\n    long scoreIndex11 = 0;\n    long guessIndex11\
    \ = 0;\n    long diffIndex11 = 0;\n    long scoreIndex12 = 0;\n    long guessIndex12\
    \ = 0;\n    long diffIndex12 = 0;\n    long scoreIndex13 = 0;\n    long guessIndex13\
    \ = 0;\n    long diffIndex13 = 0;\n    long scoreIndex14 = 0;\n    long guessIndex14\
    \ = 0;\n    long diffIndex14 = 0;\n    long scoreIndex15 = 0;\n    long guessIndex15\
    \ = 0;\n    long diffIndex15 = 0;\n    long scoreIndex16 = 0;\n    long guessIndex16\
    \ = 0;\n    long diffIndex16 = 0;\n    long scoreIndex17 = 0;\n    long guessIndex17\
    \ = 0;\n    long diffIndex17 = 0;\n    long scoreIndex18 = 0;\n    long guessIndex18\
    \ = 0;\n    long diffIndex18 = 0;\n    long scoreIndex19 = 0;\n    long guessIndex19\
    \ = 0;\n    long diffIndex19 = 0;\n    long scoreIndex20 = 0;\n    long guessIndex20\
    \ = 0;\n    long diffIndex20 = 0;\n    long scoreIndex21 = 0;\n    long guessIndex21\
    \ = 0;\n    long diffIndex21 = 0;\n    long scoreIndex22 = 0;\n    long guessIndex22\
    \ = 0;\n    long diffIndex22 = 0;\n    long scoreIndex23 = 0;\n    long guessIndex23\
    \ = 0;\n    long diffIndex23 = 0;\n    long scoreIndex24 = 0;\n    long \n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6mqhr4oh.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp6mqhr4oh.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp6mqhr4oh.cpp:93:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmp6mqhr4oh.cpp:93:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score;\n    long diff;\n    long sum = 0;\n\
    \    long count = 0;\n    long max = 0;\n    long min = 0;\n    long maxScore\
    \ = 0;\n    long minScore = 0;\n    long maxDiff = 0;\n    long minDiff = 0;\n\
    \    long maxSum = 0;\n    long minSum = 0;\n    long maxCount = 0;\n    long\
    \ minCount = 0;\n    long maxMax = 0;\n    long minMax = 0;\n    long maxMin =\
    \ 0;\n    long minMin = 0;\n    long maxScoreDiff = 0;\n    long minScoreDiff\
    \ = 0;\n    long maxDiffSum = 0;\n    long minDiffSum = 0;\n    long maxSumCount\
    \ = 0;\n    long minSumCount = 0;\n    long maxCountMax = 0;\n    long minCountMax\
    \ = 0;\n    long maxCountMin = 0;\n    long minCountMin = 0;\n    long maxScoreDiffMax\
    \ = 0;\n    long minScoreDiffMax = 0;\n    long maxDiffSumMax = 0;\n    long minDiffSumMax\
    \ = 0;\n    long maxSumCountMax = 0;\n    long minSumCountMax = 0;\n    long maxCountMaxMax\
    \ = 0;\n    long minCountMaxMax = 0;\n    long maxCountMinMax = 0;\n    long minCountMinMax\
    \ = 0;\n    long maxScoreDiffMin = 0;\n    long minScoreDiffMin = 0;\n    long\
    \ maxDiffSumMin = 0;\n    long minDiffSumMin = 0;\n    long maxSumCountMin = 0;\n\
    \    long minSumCountMin = 0;\n    long maxCountMaxMin = 0;\n    long minCountMaxMin\
    \ = 0;\n    long maxCountMinMin = 0;\n    long minCountMinMin = 0;\n    long maxScore\
    \ = 0;\n    long minScore = 0;\n    long maxDiff = 0;\n    long minDiff = 0;\n\
    \    long maxSum = 0;\n    long minSum = 0;\n    long maxCount = 0;\n    long\
    \ minCount = 0;\n    long maxMax = 0;\n    long minMax = 0;\n    long maxMin =\
    \ 0;\n    long minMin = 0;\n    long maxScoreDiff = 0;\n    long minScoreDiff\
    \ = 0;\n    long maxDiffSum = 0;\n    long minDiffSum = 0;\n    long maxSumCount\
    \ = 0;\n    long minSumCount = 0;\n    long maxCountMax = 0;\n    long minCountMax\
    \ = 0;\n    long maxCountMin = 0;\n    long minCountMin = 0;\n    long maxScoreDiffMax\
    \ = 0;\n    long minScoreDiffMax = 0;\n    long maxDiffSumMax = 0;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6so4ddk.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpr6so4ddk.cpp:66:10: error: redeclaration\
    \ of \u2018long int maxScore\u2019\n   66 |     long maxScore = 0;\n      |  \
    \        ^~~~~~~~\n/tmp/tmpr6so4ddk.cpp:24:10: note: \u2018long int maxScore\u2019\
    \ previously declared here\n   24 |     long maxScore = 0;\n      |          ^~~~~~~~\n\
    /tmp/tmpr6so4ddk.cpp:67:10: error: redeclaration of \u2018long int minScore\u2019\
    \n   67 |     long minScore = 0;\n      |          ^~~~~~~~\n/tmp/tmpr6so4ddk.cpp:25:10:\
    \ note: \u2018long int minScore\u2019 previously declared here\n   25 |     long\
    \ minScore = 0;\n      |          ^~~~~~~~\n/tmp/tmpr6so4ddk.cpp:68:10: error:\
    \ redeclaration of \u2018long int maxDiff\u2019\n   68 |     long maxDiff = 0;\n\
    \      |          ^~~~~~~\n/tmp/tmpr6so4ddk.cpp:26:10: note: \u2018long int maxDiff\u2019\
    \ previously declared here\n   26 |     long maxDiff = 0;\n      |          ^~~~~~~\n\
    /tmp/tmpr6so4ddk.cpp:69:10: error: redeclaration of \u2018long int minDiff\u2019\
    \n   69 |     long minDiff = 0;\n      |          ^~~~~~~\n/tmp/tmpr6so4ddk.cpp:27:10:\
    \ note: \u2018long int minDiff\u2019 previously declared here\n   27 |     long\
    \ minDiff = 0;\n      |          ^~~~~~~\n/tmp/tmpr6so4ddk.cpp:70:10: error: redeclaration\
    \ of \u2018long int maxSum\u2019\n   70 |     long maxSum = 0;\n      |      \
    \    ^~~~~~\n/tmp/tmpr6so4ddk.cpp:28:10: note: \u2018long int maxSum\u2019 previously\
    \ declared here\n   28 |     long maxSum = 0;\n      |          ^~~~~~\n/tmp/tmpr6so4ddk.cpp:71:10:\
    \ error: redeclaration of \u2018long int minSum\u2019\n   71 |     long minSum\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpr6so4ddk.cpp:29:10: note: \u2018long\
    \ int minSum\u2019 previously declared here\n   29 |     long minSum = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpr6so4ddk.cpp:72:10: error: redeclaration of \u2018\
    long int maxCount\u2019\n   72 |     long maxCount = 0;\n      |          ^~~~~~~~\n\
    /tmp/tmpr6so4ddk.cpp:30:10: note: \u2018long int maxCount\u2019 previously declared\
    \ here\n   30 |     long maxCount = 0;\n      |          ^~~~~~~~\n/tmp/tmpr6so4ddk.cpp:73:10:\
    \ error: redeclaration of \u2018long int minCount\u2019\n   73 |     long minCount\
    \ = 0;\n      |      "
  stdout: ''
  timestamp: 1659821944
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    for (size_t i = 0; i < game.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821945
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); ++i) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqtaj03uj: /tmp/tmpqtaj03uj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = std::abs(guess[i] - game[i]);\n        if (diff == 0) {\n           \
    \ result[i] = 0;\n        } else {\n            result[i] = diff;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long sum = 0;\n    long count = 0;\n    long sum2 = 0;\n    long count2\
    \ = 0;\n    long sum3 = 0;\n    long count3 = 0;\n    long sum4 = 0;\n    long\
    \ count4 = 0;\n    long sum5 = 0;\n    long count5 = 0;\n    long sum6 = 0;\n\
    \    long count6 = 0;\n    long sum7 = 0;\n    long count7 = 0;\n    long sum8\
    \ = 0;\n    long count8 = 0;\n    long sum9 = 0;\n    long count9 = 0;\n    long\
    \ sum10 = 0;\n    long count10 = 0;\n    long sum11 = 0;\n    long count11 = 0;\n\
    \    long sum12 = 0;\n    long count12 = 0;\n    long sum13 = 0;\n    long count13\
    \ = 0;\n    long sum14 = 0;\n    long count14 = 0;\n    long sum15 = 0;\n    long\
    \ count15 = 0;\n    long sum16 = 0;\n    long count16 = 0;\n    long sum17 = 0;\n\
    \    long count17 = 0;\n    long sum18 = 0;\n    long count18 = 0;\n    long sum19\
    \ = 0;\n    long count19 = 0;\n    long sum20 = 0;\n    long count20 = 0;\n  \
    \  long sum21 = 0;\n    long count21 = 0;\n    long sum22 = 0;\n    long count22\
    \ = 0;\n    long sum23 = 0;\n    long count23 = 0;\n    long sum24 = 0;\n    long\
    \ count24 = 0;\n    long sum25 = 0;\n    long count25 = 0;\n    long sum26 = 0;\n\
    \    long count26 = 0;\n    long sum27 = 0;\n    long count27 = 0;\n    long sum28\
    \ = 0;\n    long count28 = 0;\n    long sum29 = 0;\n    long count29 = 0;\n  \
    \  long sum30 = 0;\n    long count30 = 0;\n    long sum31 = 0;\n    long count31\
    \ = 0;\n    long sum32 = 0;\n    long count32 = 0;\n    long sum33 = 0;\n    long\
    \ count33 = 0;\n    long sum34 = 0;\n    long count34 = 0;\n    long sum35 = 0;\n\
    \    long count35 = 0;\n    long sum36 = 0;\n    long count36 = 0;\n    long sum37\
    \ = 0;\n    long count37 = 0;\n    long sum38 = 0;\n    long count38 = 0;\n  \
    \  long sum39 = 0;\n    long count39 = 0;\n    long sum40 = 0;\n    long count40\
    \ = 0;\n    long sum41 = 0;\n    long count41 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8b3_3psh.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp8b3_3psh.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmp8b3_3psh.cpp:104:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmp8b3_3psh.cpp:104:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long score2 = 0;\n    long score3\
    \ = 0;\n    long score4 = 0;\n    long score5 = 0;\n    long score6 = 0;\n   \
    \ long score7 = 0;\n    long score8 = 0;\n    long score9 = 0;\n    long score10\
    \ = 0;\n    long score11 = 0;\n    long score12 = 0;\n    long score13 = 0;\n\
    \    long score14 = 0;\n    long score15 = 0;\n    long score16 = 0;\n    long\
    \ score17 = 0;\n    long score18 = 0;\n    long score19 = 0;\n    long score20\
    \ = 0;\n    long score21 = 0;\n    long score22 = 0;\n    long score23 = 0;\n\
    \    long score24 = 0;\n    long score25 = 0;\n    long score26 = 0;\n    long\
    \ score27 = 0;\n    long score28 = 0;\n    long score29 = 0;\n    long score30\
    \ = 0;\n    long score31 = 0;\n    long score32 = 0;\n    long score33 = 0;\n\
    \    long score34 = 0;\n    long score35 = 0;\n    long score36 = 0;\n    long\
    \ score37 = 0;\n    long score38 = 0;\n    long score39 = 0;\n    long score40\
    \ = 0;\n    long score41 = 0;\n    long score42 = 0;\n    long score43 = 0;\n\
    \    long score44 = 0;\n    long score45 = 0;\n    long score46 = 0;\n    long\
    \ score47 = 0;\n    long score48 = 0;\n    long score49 = 0;\n    long score50\
    \ = 0;\n    long score51 = 0;\n    long score52 = 0;\n    long score53 = 0;\n\
    \    long score54 = 0;\n    long score55 = 0;\n    long score56 = 0;\n    long\
    \ score57 = 0;\n    long score58 = 0;\n    long score59 = 0;\n    long score60\
    \ = 0;\n    long score61 = 0;\n    long score62 = 0;\n    long score63 = 0;\n\
    \    long score64 = 0;\n    long score65 = 0;\n    long score66 = 0;\n    long\
    \ score67 = 0;\n    long score68 = 0;\n    long score69 = 0;\n    long score70\
    \ = 0;\n    long score71 = 0;\n    long score72 = 0;\n    long score73 = 0;\n\
    \    long score74 = 0;\n    long score75 = 0;\n    long score76 = 0;\n    long\
    \ score77 = 0;\n    long score78 = 0;\n    long score79 = 0;\n    long score80\
    \ = 0;\n    long score81 = 0;\n    long score82 = 0;\n    long score83 = 0;\n\
    \    long score\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvnkdlnw.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpuvnkdlnw.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpuvnkdlnw.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821944
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long diff = 0;\n    for(size_t i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            result[i] = 0;\n    \
    \    } else {\n            result[i] = abs(game[i] - guess[i]);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821945
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    for (size_t i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i])\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(long\
    \ i = 0; i < guess.size(); i++) {\n        score = game[i];\n        diff = abs(guess\
    \ - score);\n        if(diff == 0) {\n            result[i] = 0;\n        } else\
    \ {\n            result[i] = diff;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplphigpg2.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmplphigpg2.cpp:22:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   22 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplphigpg2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplphigpg2.cpp:22:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659821945
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        if\
    \ (game[i] == guess[i]) {\n            result[i] = 0;\n            score = 0;\n\
    \        } else {\n            score = abs(game[i] - guess[i]);\n            result[i]\
    \ = score;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821945
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(size_t\
    \ i = 0; i < guess.size(); i++) {\n        if(game[i] == guess[i]) {\n       \
    \     score++;\n        }\n        else {\n            diff = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpky26axrp: /tmp/tmpky26axrp.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    long score = 0;\n    long guesses = 0;\n    long scores\
    \ = 0;\n    long guesses2 = 0;\n    long scores2 = 0;\n    long score = 0;\n \
    \   long guess = 0;\n    long guess2 = 0;\n    long diff2 = 0;\n    long score2\
    \ = 0;\n    long guesses3 = 0;\n    long scores3 = 0;\n    long score3 = 0;\n\
    \    long guess3 = 0;\n    long diff3 = 0;\n    long score4 = 0;\n    long guesses4\
    \ = 0;\n    long scores4 = 0;\n    long score5 = 0;\n    long guess5 = 0;\n  \
    \  long diff5 = 0;\n    long score6 = 0;\n    long guesses6 = 0;\n    long scores6\
    \ = 0;\n    long score7 = 0;\n    long guess7 = 0;\n    long diff7 = 0;\n    long\
    \ score8 = 0;\n    long guesses8 = 0;\n    long scores8 = 0;\n    long score9\
    \ = 0;\n    long guess9 = 0;\n    long diff9 = 0;\n    long score10 = 0;\n   \
    \ long guesses10 = 0;\n    long scores10 = 0;\n    long score11 = 0;\n    long\
    \ guess11 = 0;\n    long diff11 = 0;\n    long score12 = 0;\n    long guesses12\
    \ = 0;\n    long scores12 = 0;\n    long score13 = 0;\n    long guess13 = 0;\n\
    \    long diff13 = 0;\n    long score14 = 0;\n    long guesses14 = 0;\n    long\
    \ scores14 = 0;\n    long score15 = 0;\n    long guess15 = 0;\n    long diff15\
    \ = 0;\n    long score16 = 0;\n    long guesses16 = 0;\n    long scores16 = 0;\n\
    \    long score17 = 0;\n    long guess17 = 0;\n    long diff17 = 0;\n    long\
    \ score18 = 0;\n    long guesses18 = 0;\n    long scores18 = 0;\n    long score19\
    \ = 0;\n    long guess19 = 0;\n    long diff19 = 0;\n    long score20 = 0;\n \
    \   long guesses20 = 0;\n    long scores20 = 0;\n    long score21 = 0;\n    long\
    \ guess21 = 0;\n    long diff21 = 0;\n    long score22 = 0;\n    long guesses22\
    \ = 0;\n    long scores22 = 0;\n    long score23 = 0;\n    long guess23 = 0;\n\
    \    long diff23 = 0;\n    long score24 = 0;\n    long guesses24 = 0;\n    long\
    \ scores24 = 0;\n    long score25 = 0;\n    long guess25 = 0;\n    long diff25\
    \ = 0;\n    long score26 = 0;\n    long guesses26 = 0;\n    long scores26 = 0;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5f2r0muq.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp5f2r0muq.cpp:23:10: error: redeclaration\
    \ of \u2018long int score\u2019\n   23 |     long score = 0;\n      |        \
    \  ^~~~~\n/tmp/tmp5f2r0muq.cpp:18:10: note: \u2018long int score\u2019 previously\
    \ declared here\n   18 |     long score = 0;\n      |          ^~~~~\n/tmp/tmp5f2r0muq.cpp:24:10:\
    \ error: declaration of \u2018long int guess\u2019 shadows a parameter\n   24\
    \ |     long guess = 0;\n      |          ^~~~~\n/tmp/tmp5f2r0muq.cpp:102:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  102 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < guess.size(); i++) {\n        sum += game[i];\n        diff = abs(guess\
    \ - game[i]);\n        if(diff == 0) {\n            result[i] = 0;\n        }\
    \ else {\n            result[i] = diff;\n        }\n    }\n    for(int i = 0;\
    \ i < guess.size(); i++) {\n        if(result[i] == 0) {\n            result[i]\
    \ = sum;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3lz77rx9.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp3lz77rx9.cpp:22:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   22 |         diff = abs(guess - game[i]);\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3lz77rx9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3lz77rx9.cpp:22:34:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         diff = abs(guess - game[i]);\n      |                      \
    \            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \       "
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        score += game[i] * guess[i];\n    }\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        result[i] = abs(score - guess[i]);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6a6zll8.cpp: In function 'int main()':\n/tmp/tmpe6a6zll8.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe6a6zll8.cpp:2:\n/tmp/tmpe6a6zll8.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpe6a6zll8.cpp:29:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpe6a6zll8.cpp:29:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe6a6zll8.cpp:29:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpe6a6zll8.cpp:29:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe6a6zll8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for(int\
    \ i = 0; i < guess.size(); i++) {\n        score = game[i];\n        diff = abs(guess\
    \ - score);\n        if(diff == 0) {\n            result[i] = 0;\n        } else\
    \ {\n            result[i] = diff;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4e3n4fxx.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp4e3n4fxx.cpp:22:26: error: no match\
    \ for \u2018operator-\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018long int\u2019)\n   22 |         diff = abs(guess - score);\n    \
    \  |                    ~~~~~ ^ ~~~~~\n      |                    |       |\n\
    \      |                    |       long int\n      |                    std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4e3n4fxx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4e3n4fxx.cpp:22:28:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         diff = abs(guess - score);\n      |                        \
    \    ^~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from"
  stdout: ''
  timestamp: 1659821945
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] * guess[i];\n        result[i] = abs(score - guess[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp25m6i1rd: /tmp/tmp25m6i1rd.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long maxScore = std::max(game.front(),\
    \ guess.front());\n    long minScore = std::min(game.back(), guess.back());\n\
    \    long maxDiff = maxScore - minScore;\n    long minDiff = maxScore - maxDiff;\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuess = std::min(game.front(), guess.front());\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuess = std::min(game.front(), guess.front());\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuess = std::min(game.front(), guess.front());\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuess = std::min(game.front(), guess.front());\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuess = std::min(game.front(), guess.front());\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuess = std::min(game.front(), guess.front());\n\
    \    long maxGuess = std::max(game.back(), guess.back());\n    long minGuess =\
    \ std::min(game.front(), guess.front());\n    long maxGuess = std::max(game.back(),\
    \ guess.back());\n    long minGuess = \n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp03eqgmgy.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp03eqgmgy.cpp:25:10: error: redeclaration\
    \ of \u2018long int maxGuess\u2019\n   25 |     long maxGuess = std::max(game.back(),\
    \ guess.back());\n      |          ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:23:10: note:\
    \ \u2018long int maxGuess\u2019 previously declared here\n   23 |     long maxGuess\
    \ = std::max(game.back(), guess.back());\n      |          ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:26:10:\
    \ error: redeclaration of \u2018long int minGuess\u2019\n   26 |     long minGuess\
    \ = std::min(game.front(), guess.front());\n      |          ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:24:10:\
    \ note: \u2018long int minGuess\u2019 previously declared here\n   24 |     long\
    \ minGuess = std::min(game.front(), guess.front());\n      |          ^~~~~~~~\n\
    /tmp/tmp03eqgmgy.cpp:27:10: error: redeclaration of \u2018long int maxGuess\u2019\
    \n   27 |     long maxGuess = std::max(game.back(), guess.back());\n      |  \
    \        ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:23:10: note: \u2018long int maxGuess\u2019\
    \ previously declared here\n   23 |     long maxGuess = std::max(game.back(),\
    \ guess.back());\n      |          ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:28:10: error:\
    \ redeclaration of \u2018long int minGuess\u2019\n   28 |     long minGuess =\
    \ std::min(game.front(), guess.front());\n      |          ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:24:10:\
    \ note: \u2018long int minGuess\u2019 previously declared here\n   24 |     long\
    \ minGuess = std::min(game.front(), guess.front());\n      |          ^~~~~~~~\n\
    /tmp/tmp03eqgmgy.cpp:29:10: error: redeclaration of \u2018long int maxGuess\u2019\
    \n   29 |     long maxGuess = std::max(game.back(), guess.back());\n      |  \
    \        ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:23:10: note: \u2018long int maxGuess\u2019\
    \ previously declared here\n   23 |     long maxGuess = std::max(game.back(),\
    \ guess.back());\n      |          ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:30:10: error:\
    \ redeclaration of \u2018long int minGuess\u2019\n   30 |     long minGuess =\
    \ std::min(game.front(), guess.front());\n      |          ^~~~~~~~\n/tmp/tmp03eqgmgy.cpp:24:10:\
    \ note: \u2018long int minGuess\u2019 previously declared here\n   24 |     long\
    \ m"
  stdout: ''
  timestamp: 1659821945
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += abs(game[i] - guess[i]);\n        result[i] = score;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4vb1wsg8: /tmp/tmp4vb1wsg8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821945
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  if (game[i] == guess[i]) {\n            score = 0;\n        } else {\n    \
    \        score = abs(game[i] - guess[i]);\n        }\n        result[i] = score;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long diff = 0;\n    for(size_t\
    \ i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i]) {\n        \
    \    score++;\n        }\n        else {\n            diff = abs(game[i] - guess[i]);\n\
    \        }\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmprlsgepw3: /tmp/tmprlsgepw3.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,
    (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659821945
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for(size_t i = 0; i < guess.size(); i++) {\n        diff\
    \ = abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long long score = 0;\n    long long diff = 0;\n    long long guess = 0;\n\
    \    long long score2 = 0;\n    long long diff2 = 0;\n    long long guess2 = 0;\n\
    \    long long score3 = 0;\n    long long diff3 = 0;\n    long long guess3 = 0;\n\
    \    long long score4 = 0;\n    long long diff4 = 0;\n    long long guess4 = 0;\n\
    \    long long score5 = 0;\n    long long diff5 = 0;\n    long long guess5 = 0;\n\
    \    long long score6 = 0;\n    long long diff6 = 0;\n    long long guess6 = 0;\n\
    \    long long score7 = 0;\n    long long diff7 = 0;\n    long long guess7 = 0;\n\
    \    long long score8 = 0;\n    long long diff8 = 0;\n    long long guess8 = 0;\n\
    \    long long score9 = 0;\n    long long diff9 = 0;\n    long long guess9 = 0;\n\
    \    long long score10 = 0;\n    long long diff10 = 0;\n    long long guess10\
    \ = 0;\n    long long score11 = 0;\n    long long diff11 = 0;\n    long long guess11\
    \ = 0;\n    long long score12 = 0;\n    long long diff12 = 0;\n    long long guess12\
    \ = 0;\n    long long score13 = 0;\n    long long diff13 = 0;\n    long long guess13\
    \ = 0;\n    long long score14 = 0;\n    long long diff14 = 0;\n    long long guess14\
    \ = 0;\n    long long score15 = 0;\n    long long diff15 = 0;\n    long long guess15\
    \ = 0;\n    long long score16 = 0;\n    long long diff16 = 0;\n    long long guess16\
    \ = 0;\n    long long score17 = 0;\n    long long diff17 = 0;\n    long long guess17\
    \ = 0;\n    long long score18 = 0;\n    long long diff18 = 0;\n    long long guess18\
    \ = 0;\n    long long score19 = 0;\n    long long diff19 = 0;\n    long long guess19\
    \ = 0;\n    long long score20 = 0;\n    long long diff20 = 0;\n    long long guess20\
    \ = 0;\n    long long score21 = 0;\n    long long diff21 = 0;\n    long long guess21\
    \ = 0;\n    long long score22 = 0;\n    long long diff22 = 0;\n    long long guess22\
    \ = 0;\n    long long score23 = 0;\n    long long diff23 = 0;\n    long long guess23\
    \ = 0;\n    long long score24 = 0;\n    long long diff24 = 0;\n    long long guess24\
    \ = 0;\n    long long score25 = 0;\n    long long diff25 = 0;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph4jnb2lv.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmph4jnb2lv.cpp:19:15: error: declaration\
    \ of \u2018long long int guess\u2019 shadows a parameter\n   19 |     long long\
    \ guess = 0;\n      |               ^~~~~\n/tmp/tmph4jnb2lv.cpp:91:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   91 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long diff2 = 0;\n    long diff3\
    \ = 0;\n    long diff4 = 0;\n    long diff5 = 0;\n    long diff6 = 0;\n    long\
    \ diff7 = 0;\n    long diff8 = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n\
    \    long diff11 = 0;\n    long diff12 = 0;\n    long diff13 = 0;\n    long diff14\
    \ = 0;\n    long diff15 = 0;\n    long diff16 = 0;\n    long diff17 = 0;\n   \
    \ long diff18 = 0;\n    long diff19 = 0;\n    long diff20 = 0;\n    long diff21\
    \ = 0;\n    long diff22 = 0;\n    long diff23 = 0;\n    long diff24 = 0;\n   \
    \ long diff25 = 0;\n    long diff26 = 0;\n    long diff27 = 0;\n    long diff28\
    \ = 0;\n    long diff29 = 0;\n    long diff30 = 0;\n    long diff31 = 0;\n   \
    \ long diff32 = 0;\n    long diff33 = 0;\n    long diff34 = 0;\n    long diff35\
    \ = 0;\n    long diff36 = 0;\n    long diff37 = 0;\n    long diff38 = 0;\n   \
    \ long diff39 = 0;\n    long diff40 = 0;\n    long diff41 = 0;\n    long diff42\
    \ = 0;\n    long diff43 = 0;\n    long diff44 = 0;\n    long diff45 = 0;\n   \
    \ long diff46 = 0;\n    long diff47 = 0;\n    long diff48 = 0;\n    long diff49\
    \ = 0;\n    long diff50 = 0;\n    long diff51 = 0;\n    long diff52 = 0;\n   \
    \ long diff53 = 0;\n    long diff54 = 0;\n    long diff55 = 0;\n    long diff56\
    \ = 0;\n    long diff57 = 0;\n    long diff58 = 0;\n    long diff59 = 0;\n   \
    \ long diff60 = 0;\n    long diff61 = 0;\n    long diff62 = 0;\n    long diff63\
    \ = 0;\n    long diff64 = 0;\n    long diff65 = 0;\n    long diff66 = 0;\n   \
    \ long diff67 = 0;\n    long diff68 = 0;\n    long diff69 = 0;\n    long diff70\
    \ = 0;\n    long diff71 = 0;\n    long diff72 = 0;\n    long diff73 = 0;\n   \
    \ long diff74 = 0;\n    long diff75 = 0;\n    long diff76 = 0;\n    long diff77\
    \ = 0;\n    long diff78 = 0;\n    long diff79 = 0;\n    long diff80 = 0;\n   \
    \ long diff81 = 0;\n    long diff82 = 0;\n    long diff83 = 0;\n    long diff84\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4662ge4.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpp4662ge4.cpp:102:1: error: expected\
    \ initializer before \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpp4662ge4.cpp:102:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long long int score = 0;\n    long long int guess = 0;\n    long long int\
    \ diff = 0;\n    long long int score2 = 0;\n    long long int guess2 = 0;\n  \
    \  long long int diff2 = 0;\n    long long int score3 = 0;\n    long long int\
    \ guess3 = 0;\n    long long int diff3 = 0;\n    long long int score4 = 0;\n \
    \   long long int guess4 = 0;\n    long long int diff4 = 0;\n    long long int\
    \ score5 = 0;\n    long long int guess5 = 0;\n    long long int diff5 = 0;\n \
    \   long long int score6 = 0;\n    long long int guess6 = 0;\n    long long int\
    \ diff6 = 0;\n    long long int score7 = 0;\n    long long int guess7 = 0;\n \
    \   long long int diff7 = 0;\n    long long int score8 = 0;\n    long long int\
    \ guess8 = 0;\n    long long int diff8 = 0;\n    long long int score9 = 0;\n \
    \   long long int guess9 = 0;\n    long long int diff9 = 0;\n    long long int\
    \ score10 = 0;\n    long long int guess10 = 0;\n    long long int diff10 = 0;\n\
    \    long long int score11 = 0;\n    long long int guess11 = 0;\n    long long\
    \ int diff11 = 0;\n    long long int score12 = 0;\n    long long int guess12 =\
    \ 0;\n    long long int diff12 = 0;\n    long long int score13 = 0;\n    long\
    \ long int guess13 = 0;\n    long long int diff13 = 0;\n    long long int score14\
    \ = 0;\n    long long int guess14 = 0;\n    long long int diff14 = 0;\n    long\
    \ long int score15 = 0;\n    long long int guess15 = 0;\n    long long int diff15\
    \ = 0;\n    long long int score16 = 0;\n    long long int guess16 = 0;\n    long\
    \ long int diff16 = 0;\n    long long int score17 = 0;\n    long long int guess17\
    \ = 0;\n    long long int diff17 = 0;\n    long long int score18 = 0;\n    long\
    \ long int guess18 = 0;\n    long long int diff18 = 0;\n    long long int score19\
    \ = 0;\n    long long int guess19 = 0;\n    long long int diff19 = 0;\n    long\
    \ long int score20 = 0;\n    long long int guess20 = 0;\n    long long int diff20\
    \ = 0;\n    long long int score21 = 0;\n    long long int guess21 = 0;\n    long\
    \ long int diff21 = 0;\n    long long int score22 = 0;\n    long long int guess22\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdzx0so1b.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpdzx0so1b.cpp:18:19: error: declaration\
    \ of \u2018long long int guess\u2019 shadows a parameter\n   18 |     long long\
    \ int guess = 0;\n      |                   ^~~~~\n/tmp/tmpdzx0so1b.cpp:82:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   82 | }\n      | ^\n\
    /tmp/tmpdzx0so1b.cpp:82:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821945
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB\
    \ = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n\
    \    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long\
    \ KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO =\
    \ 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n\
    \    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long\
    \ XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB\
    \ = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF\
    \ = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ\
    \ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN\
    \ = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR\
    \ = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV\
    \ = 0;\n    long WWW = 0;\n    long \n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mr42vi6.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmp_mr42vi6.cpp:114:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmp_mr42vi6.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += abs(game[i] - guess[i]);\n        result[i] = sum;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpv1cg87ik: /tmp/tmpv1cg87ik.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821945
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long i = 0;\n    long j = 0;\n \
    \   while (i < guess.size() && j < game.size()) {\n        if (guess[i] == game[j])\
    \ {\n            score++;\n            i++;\n            j++;\n        } else\
    \ if (guess[i] > game[j]) {\n            diff++;\n            i++;\n        }\
    \ else {\n            diff++;\n            j++;\n        }\n    }\n    while (i\
    \ < guess.size()) {\n        diff++;\n        i++;\n    }\n    while (j < game.size())\
    \ {\n        score++;\n        j++;\n    }\n    if (score == 0) {\n        result[0]\
    \ = 0;\n    } else {\n        result[0] = diff;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpcovmns9n: /tmp/tmpcovmns9n.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    for (size_t i = 0; i < guess.size(); i++) {\n   \
    \     result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ra1tmae.cpp: In function 'int main()':\n/tmp/tmp5ra1tmae.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ra1tmae.cpp:2:\n/tmp/tmp5ra1tmae.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp5ra1tmae.cpp:25:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp5ra1tmae.cpp:25:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5ra1tmae.cpp:25:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5ra1tmae.cpp:25:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5ra1tmae.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        diff = abs(game[i] - guess[i]);\n \
    \       if (diff == 0) {\n            result[i] = 0;\n        } else {\n     \
    \       result[i] = diff;\n        }\n        score += diff;\n    }\n    if (score\
    \ == 0) {\n        return result;\n    } else {\n        return result;\n    }\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA\
    \ = 0;\n    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n\
    \    long AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long\
    \ AJ = 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN =\
    \ 0;\n    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n\
    \    long AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long\
    \ AW = 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA =\
    \ 0;\n    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n\
    \    long BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long\
    \ BJ = 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN =\
    \ 0;\n    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n\
    \    long BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long\
    \ BW = 0;\n    long BX = 0;\n    long BY = 0;\n    long B\n}\nint main() {\n \
    \   auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpged_nh2j.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpged_nh2j.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpged_nh2j.cpp:117:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  117 | }\n      | ^\n/tmp/tmpged_nh2j.cpp:117:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    for (long i = 0; i < guess.size(); i++) {\n     \
    \   result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long diff = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n\
    \    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long\
    \ GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK =\
    \ 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n\
    \    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long\
    \ TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX =\
    \ 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n\
    \    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n\
    \    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n\
    \    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n\
    \    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n\
    \    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n\
    \    long WWW = 0;\n    long XXX\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe9b75pc4.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpe9b75pc4.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpe9b75pc4.cpp:114:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmpe9b75pc4.cpp:114:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659821946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        guess = guess[i];\n        score = game[i];\n        if (guess\
    \ == score) {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = abs(guess - score);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyf1gzl0d.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpyf1gzl0d.cpp:18:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   18 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpyf1gzl0d.cpp:19:34: error: request for member\
    \ \u2018size\u2019 in \u2018guess\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   19 |     for (size_t i = 0; i < guess.size(); i++) {\n      |\
    \                                  ^~~~\n/tmp/tmpyf1gzl0d.cpp:20:24: error: invalid\
    \ types \u2018long int[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   20 |         guess = guess[i];\n      |                        ^\n"
  stdout: ''
  timestamp: 1659821936
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for(long i = 0; i < game.size();\
    \ i++) {\n        if(game[i] == guess[i]) {\n            result[i] = 0;\n    \
    \        score = 0;\n        } else {\n            score = abs(game[i] - guess[i]);\n\
    \            result[i] = score;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821946
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n       \
    \ diff = std::abs(game[i] - guess[i]);\n        result[i] = diff;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    long diff = 0;\n    long sum\
    \ = 0;\n    long count = 0;\n    long sum2 = 0;\n    long count2 = 0;\n    long\
    \ sum3 = 0;\n    long count3 = 0;\n    long sum4 = 0;\n    long count4 = 0;\n\
    \    long sum5 = 0;\n    long count5 = 0;\n    long sum6 = 0;\n    long count6\
    \ = 0;\n    long sum7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long\
    \ count8 = 0;\n    long sum9 = 0;\n    long count9 = 0;\n    long sum10 = 0;\n\
    \    long count10 = 0;\n    long sum11 = 0;\n    long count11 = 0;\n    long sum12\
    \ = 0;\n    long count12 = 0;\n    long sum13 = 0;\n    long count13 = 0;\n  \
    \  long sum14 = 0;\n    long count14 = 0;\n    long sum15 = 0;\n    long count15\
    \ = 0;\n    long sum16 = 0;\n    long count16 = 0;\n    long sum17 = 0;\n    long\
    \ count17 = 0;\n    long sum18 = 0;\n    long count18 = 0;\n    long sum19 = 0;\n\
    \    long count19 = 0;\n    long sum20 = 0;\n    long count20 = 0;\n    long sum21\
    \ = 0;\n    long count21 = 0;\n    long sum22 = 0;\n    long count22 = 0;\n  \
    \  long sum23 = 0;\n    long count23 = 0;\n    long sum24 = 0;\n    long count24\
    \ = 0;\n    long sum25 = 0;\n    long count25 = 0;\n    long sum26 = 0;\n    long\
    \ count26 = 0;\n    long sum27 = 0;\n    long count27 = 0;\n    long sum28 = 0;\n\
    \    long count28 = 0;\n    long sum29 = 0;\n    long count29 = 0;\n    long sum30\
    \ = 0;\n    long count30 = 0;\n    long sum31 = 0;\n    long count31 = 0;\n  \
    \  long sum32 = 0;\n    long count32 = 0;\n    long sum33 = 0;\n    long count33\
    \ = 0;\n    long sum34 = 0;\n    long count34 = 0;\n    long sum35 = 0;\n    long\
    \ count35 = 0;\n    long sum36 = 0;\n    long count36 = 0;\n    long sum37 = 0;\n\
    \    long count37 = 0;\n    long sum38 = 0;\n    long count38 = 0;\n    long sum39\
    \ = 0;\n    long count39 = 0;\n    long sum40 = 0;\n    long count40 = 0;\n  \
    \  long sum41 = 0;\n    long count41 = 0;\n    long sum42 = 0;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbgf87glx: /tmp/tmpbgf87glx.cpp:106: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (long i = 0; i < guess.size(); i++) {\n        score\
    \ += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnwi6g62g: /tmp/tmpnwi6g62g.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821946
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long diff = 0;\n    for(size_t i = 0; i <\
    \ guess.size(); i++) {\n        if(game[i] == guess[i]) {\n            score++;\n\
    \        } else {\n            diff = abs(game[i] - guess[i]);\n        }\n  \
    \  }\n    result.push_back(score);\n    result.push_back(diff);\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsn242_ir: /tmp/tmpsn242_ir.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,
    (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,
    (long)0, (long)0, (long)3, (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1659821946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    long guess = 0;\n    long score2\
    \ = 0;\n    long diff2 = 0;\n    long guess2 = 0;\n    long score3 = 0;\n    long\
    \ diff3 = 0;\n    long guess3 = 0;\n    long score4 = 0;\n    long diff4 = 0;\n\
    \    long guess4 = 0;\n    long score5 = 0;\n    long diff5 = 0;\n    long guess5\
    \ = 0;\n    long score6 = 0;\n    long diff6 = 0;\n    long guess6 = 0;\n    long\
    \ score7 = 0;\n    long diff7 = 0;\n    long guess7 = 0;\n    long score8 = 0;\n\
    \    long diff8 = 0;\n    long guess8 = 0;\n    long score9 = 0;\n    long diff9\
    \ = 0;\n    long guess9 = 0;\n    long score10 = 0;\n    long diff10 = 0;\n  \
    \  long guess10 = 0;\n    long score11 = 0;\n    long diff11 = 0;\n    long guess11\
    \ = 0;\n    long score12 = 0;\n    long diff12 = 0;\n    long guess12 = 0;\n \
    \   long score13 = 0;\n    long diff13 = 0;\n    long guess13 = 0;\n    long score14\
    \ = 0;\n    long diff14 = 0;\n    long guess14 = 0;\n    long score15 = 0;\n \
    \   long diff15 = 0;\n    long guess15 = 0;\n    long score16 = 0;\n    long diff16\
    \ = 0;\n    long guess16 = 0;\n    long score17 = 0;\n    long diff17 = 0;\n \
    \   long guess17 = 0;\n    long score18 = 0;\n    long diff18 = 0;\n    long guess18\
    \ = 0;\n    long score19 = 0;\n    long diff19 = 0;\n    long guess19 = 0;\n \
    \   long score20 = 0;\n    long diff20 = 0;\n    long guess20 = 0;\n    long score21\
    \ = 0;\n    long diff21 = 0;\n    long guess21 = 0;\n    long score22 = 0;\n \
    \   long diff22 = 0;\n    long guess22 = 0;\n    long score23 = 0;\n    long diff23\
    \ = 0;\n    long guess23 = 0;\n    long score24 = 0;\n    long diff24 = 0;\n \
    \   long guess24 = 0;\n    long score25 = 0;\n    long diff25 = 0;\n    long guess25\
    \ = 0;\n    long score26 = 0;\n    long diff26 = 0;\n    long guess26 = 0;\n \
    \   long score27 = 0;\n    long diff27 = 0;\n    long guess27 = 0;\n    long score28\
    \ = 0;\n    long diff28 = 0;\n    long guess28 = 0;\n    long score29 = 0;\n \
    \   long diff29 = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9zeb_sr.cpp: In function \u2018std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)\u2019:\n/tmp/tmpj9zeb_sr.cpp:19:10: error: declaration\
    \ of \u2018long int guess\u2019 shadows a parameter\n   19 |     long guess =\
    \ 0;\n      |          ^~~~~\n/tmp/tmpj9zeb_sr.cpp:104:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  104 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659821946
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8l68uc3.cpp: In function 'int main()':\n/tmp/tmps8l68uc3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmps8l68uc3.cpp:2:\n/tmp/tmps8l68uc3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmps8l68uc3.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmps8l68uc3.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmps8l68uc3.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmps8l68uc3.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmps8l68uc3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    assert(game.size() == guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821936
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxvz5ug8.cpp: In function 'int main()':\n/tmp/tmpdxvz5ug8.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdxvz5ug8.cpp:2:\n/tmp/tmpdxvz5ug8.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpdxvz5ug8.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdxvz5ug8.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdxvz5ug8.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdxvz5ug8.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
