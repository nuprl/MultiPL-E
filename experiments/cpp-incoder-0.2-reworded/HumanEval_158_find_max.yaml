name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a vector of strings.\n// The vector contains different words. Return the word\
  \ with maximum number\n// of unique characters. If multiple strings have maximum\
  \ number of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>>\
  \ find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
  bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string>\
  \ words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
  cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
  footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) ==\
  \ (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
  nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"\
  this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"})))\
  \ == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
completions: ["    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    int maxCountIndex = 0;\n    for(int i = 0; i < words.size(); i++){\n\
    \        int count = 0;\n        for(int j = 0; j < words[i].size(); j++){\n \
    \           if(words[i][j] == max){\n                count++;\n            }\n\
    \        }\n        if(count > maxCount){\n            maxCount = count;\n   \
    \         maxCountIndex = i;\n            max = words[i][j];\n        }\n    }\n\
    \    return max;", "    int max = 0;\n    std::string maxWord = \"\";\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max) {\n        \
    \    max = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max = \"\"\
    ;\n    int maxCount = 0;\n    for (auto &word : words) {\n        auto count =\
    \ std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    int n = words.size();\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (words[j] == words[i]) {\n       \
    \         count++;\n            }\n        }\n        if (count > maxCount) {\n\
    \            max = words[i];\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int max_count = 0;\n    std::string max_word = \"\";\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &w : words) {\n        auto count = std::count(w.begin(), w.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = w;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += std::count(word.begin(),\
    \ word.end(), c);\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = word;\n        }\n    }\n    return max;", "   \
    \ std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n \
    \       int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    int max = 0;\n\
    \    std::string maxWord = \"\";\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max)\
    \ {\n            max = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max = \"\";\n    int maxCount = 0;\n \
    \   for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto word\
    \ : words) {\n        int count = 0;\n        for (auto c : word) {\n        \
    \    count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n\
    \        auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    int max = 0;\n    int index = 0;\n    for (auto &word : words)\
    \ {\n        auto count = std::count_if(word.begin(), word.end(), [&](char c)\
    \ {\n            return std::tolower(c) == std::tolower(word[index]);\n      \
    \  });\n        if (count > max) {\n            max = count;\n            index\
    \ = std::distance(word.begin(), std::find(word.begin(), word.end(), word[index]));\n\
    \        }\n    }\n    return words[index];", "    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int max_count = 0;\n    std::string max_word = \"\";\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        std::unordered_map<char, int>\
    \ charCount;\n        for (char c : word) {\n            charCount[c]++;\n   \
    \     }\n        int count = charCount.size();\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max_count) {\n  \
    \          max_count = count;\n            max = word;\n        }\n    }\n   \
    \ return max;", "    std::string maxWord = words[0];\n    int maxCount = 0;\n\
    \    for (size_t i = 1; i < words.size(); i++) {\n        int count = std::count(words[i].begin(),\
    \ words[i].end(), 'a');\n        if (count > maxCount) {\n            maxWord\
    \ = words[i];\n            maxCount = count;\n        }\n    }\n    return maxWord;",
  "    int n = words.size();\n    int max_count = 0;\n    std::string max_word = \"\
    \";\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int\
    \ j = 0; j < n; j++) {\n            if (i == j) continue;\n            if (words[i].compare(words[j])\
    \ > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_word = words[i];\n\
    \        }\n    }\n    return max_word;", "    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        std::sort(word.begin(), word.end());\n        auto\
    \ count = std::unique(word.begin(), word.end()) - word.begin();\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    int max = 0;\n    std::string maxWord\
    \ = \"\";\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += 1;\n        }\n        if (count >\
    \ max) {\n            max = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max;\n  \
    \  int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > count)\
    \ {\n                count = std::count(word.begin(), word.end(), c);\n      \
    \      }\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    //\
    \ Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    int n = words.size();\n    int max = 0;\n    int maxIndex = 0;\n\
    \    std::string maxWord = \"\";\n    for (int i = 0; i < n; i++) {\n        int\
    \ count = 0;\n        for (int j = 0; j < n; j++) {\n            if (words[j].find(words[i])\
    \ != std::string::npos) {\n                count++;\n            }\n        }\n\
    \        if (count > max) {\n            max = count;\n            maxIndex =\
    \ i;\n            maxWord = words[i];\n        }\n    }\n    return maxWord;",
  "    int max_count = 0, max_index = 0;\n    for (size_t i = 0; i < words.size();\
    \ i++) {\n        int count = 0;\n        for (size_t j = 0; j < words[i].size();\
    \ j++) {\n            if (words[i][j] == words[i][j]) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_index = i;\n        }\n    }\n    return words[max_index];",
  "    // Your code here\n    int max_count = 0;\n    std::string max_word = \"\"\
    ;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = word;\n        }\n    }\n    return max;", "   \
    \ // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    std::string maxWord;\n    for (auto &word : words) {\n        int count =\
    \ 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n   \
    \     if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Your code here\n  \
    \  std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n \
    \       std::set<char> chars;\n        for (auto &c : word) {\n            chars.insert(c);\n\
    \        }\n        int count = chars.size();\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int n = words.size();\n    std::string max;\n    int max_count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            if (words[i].size() > words[j].size()) {\n       \
    \         count += 1;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = words[i];\n        }\n\
    \    }\n    return max;", "    std::string max;\n    int maxCount = 0;\n    for\
    \ (auto word : words) {\n        int count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n\
    \        auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    std::string maxWord;\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for(auto &word: words) {\n \
    \       std::unordered_map<char, int> charCount;\n        for(char c: word) {\n\
    \            charCount[c]++;\n        }\n        if(charCount.size() > maxCount)\
    \ {\n            max = word;\n            maxCount = charCount.size();\n     \
    \   }\n    }\n    return max;", "    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         if (std::count(word.begin(), word.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > maxCount) {\n      \
    \      maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    int max_count = 0, max_index = 0;\n    for (size_t i = 0; i\
    \ < words.size(); i++) {\n        int count = 0;\n        for (size_t j = 0; j\
    \ < words[i].size(); j++) {\n            count += words[i][j].size();\n      \
    \  }\n        if (count > max_count) {\n            max_count = count;\n     \
    \       max_index = i;\n        }\n    }\n    return words[max_index];", "   \
    \ std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n  \
    \      int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string maxWord = \"\";\n \
    \   int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += word.size();\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Your code here\n  \
    \  std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n \
    \       int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Your code here\n  \
    \  std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n \
    \       auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    std::string maxWord = \"\";\n    int maxCount = 0;\n \
    \   for (auto word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            maxCount = count;\n    \
    \        maxWord = word;\n        }\n    }\n    return maxWord;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     if (std::count(word.begin(), word.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &w : words) {\n        std::unordered_map<char, int> m;\n        for (auto &c\
    \ : w) {\n            m[c]++;\n        }\n        if (m.size() > maxCount) {\n\
    \            max = w;\n            maxCount = m.size();\n        }\n    }\n  \
    \  return max;", "    // Your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;", "    // Your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > count)\
    \ {\n                count = std::count(word.begin(), word.end(), c);\n      \
    \      }\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    //\
    \ Your code here\n    int max = 0;\n    int maxCount = 0;\n    std::string maxWord\
    \ = \"\";\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            maxCount = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    int\
    \ n = words.size();\n    int max_count = 0;\n    std::string max_word = \"\";\n\
    \    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j\
    \ = 0; j < n; j++) {\n            if (i == j) {\n                continue;\n \
    \           }\n            if (words[i].size() > words[j].size()) {\n        \
    \        count += words[i].size();\n            } else {\n                count\
    \ += words[j].size();\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &w : words) {\n        int count = 0;\n\
    \        for (auto &c : w) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = w;\n            maxCount = count;\n       \
    \ }\n    }\n    return max;", "    // Your code here\n    std::string max = \"\
    \";\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    std::string temp;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            if (std::count(temp.begin(), temp.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max_count = count;\n            max = word;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int max_count = 0;\n    for (auto &word :\
    \ words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max = word;\n        }\n    }\n    return max;", "    std::string max;\n  \
    \  int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word: words) {\n        int count = 0;\n\
    \        for (auto &c: word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int max_count = 0;\n    for (auto &word :\
    \ words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max = word;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &i : words)\
    \ {\n        int count = 0;\n        for (auto &j : i) {\n            count +=\
    \ 1;\n        }\n        if (count > maxCount) {\n            max = i;\n     \
    \       maxCount = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    int max_count = 0;\n    std::string max_word = \"\";\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    int max = 0;\n    std::string maxWord =\
    \ \"\";\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max) {\n\
    \            max = count;\n            maxWord = word;\n        }\n    }\n   \
    \ return maxWord;", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = word.size();\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        int count = 0;\n        for (auto c : word) {\n            count\
    \ += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string maxWord =\
    \ \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    int max = 0;\n    std::string maxWord = \"\"\
    ;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max) {\n\
    \            max = count;\n            maxWord = word;\n        }\n    }\n   \
    \ return maxWord;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = w;\n        }\n    }\n    return max;", "    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > count) {\n                count = std::count(word.begin(),\
    \ word.end(), c);\n            }\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max = \"\";\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto word :\
    \ words) {\n        int count = 0;\n        for (auto c : word) {\n          \
    \  if (std::count(word.begin(), word.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n  \
    \      int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    int max_count\
    \ = 0;\n    std::string max_word = \"\";\n    for (auto &word : words) {\n   \
    \     int count = 0;\n        for (auto &c : word) {\n            count += (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n      \
    \  if (count > max_count) {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    // Your code here\n \
    \   std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        int count = 0;\n        for (auto c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            maxCount = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    int\
    \ max = 0;\n    std::string maxWord = \"\";\n    for (auto &word : words) {\n\
    \        auto count = std::count_if(word.begin(), word.end(), [&](char c) {\n\
    \            return std::isalpha(c);\n        });\n        if (count > max) {\n\
    \            max = count;\n            maxWord = word;\n        }\n    }\n   \
    \ return maxWord;", "    // Write your code here\n    std::string maxWord = \"\
    \";\n    int maxCount = 0;\n    for (auto word : words) {\n        int count =\
    \ 0;\n        for (auto c : word) {\n            count += 1;\n        }\n    \
    \    if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max;\n   \
    \ int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n \
    \       for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &w : words) {\n        auto count = std::count(w.begin(),\
    \ w.end(), 'a');\n        if (count > max_count) {\n            max = w;\n   \
    \         max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        auto count\
    \ = std::count(word.begin(), word.end(), 'a');\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  max = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = w;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > max_count) {\n            max = word;\n            max_count = count;\n  \
    \      }\n    }\n    return max;", "    std::map<char, int> m;\n    for (auto\
    \ &w : words) {\n        for (auto &c : w) {\n            m[c]++;\n        }\n\
    \    }\n    for (auto &c : m) {\n        if (m[c] > 1) {\n            return w;\n\
    \        }\n    }\n    return words[0];", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;", "    int\
    \ max_count = 0, max_index = 0;\n    for (size_t i = 0; i < words.size(); i++)\
    \ {\n        int count = 0;\n        for (size_t j = 0; j < words[i].size(); j++)\
    \ {\n            count += words[i][j].size();\n        }\n        if (count >\
    \ max_count) {\n            max_count = count;\n            max_index = i;\n \
    \       }\n    }\n    return words[max_index];", "    std::string maxWord = \"\
    \";\n    int maxCount = 0;\n    for (auto word : words) {\n        int count =\
    \ 0;\n        for (auto c : word) {\n            count += 1;\n        }\n    \
    \    if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max;\n   \
    \ int max_count = 0;\n    for (auto &w : words) {\n        auto count = std::count(w.begin(),\
    \ w.end(), 'a');\n        if (count > max_count) {\n            max = w;\n   \
    \         max_count = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     if (std::count(word.begin(), word.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   // Your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n  \
    \              count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max;\n  \
    \  int max_count = 0;\n    for (auto &i : words) {\n        auto count = std::count(i.begin(),\
    \ i.end(), 'a');\n        if (count > max_count) {\n            max = i;\n   \
    \         max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    int max = 0;\n    std::string maxWord = \"\";\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max) {\n            max\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n  \
    \              count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    std::string max = \"\";\n    int max_count =\
    \ 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    int\
    \ n = words.size();\n    int max_count = 0;\n    int max_index = -1;\n    for\
    \ (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; j\
    \ < n; j++) {\n            if (i != j) {\n                if (words[i].size()\
    \ > words[j].size()) {\n                    count = words[i].size() - words[j].size();\n\
    \                } else {\n                    count = words[j].size() - words[i].size();\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max_count = count;\n                max_index = j;\n            }\n\
    \        }\n    }\n    return words[max_index];", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max = word;\n            max_count = count;\n  \
    \      }\n    }\n    return max;", "    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    int max_count = 0, max_index = 0;\n    for (size_t i = 0;\
    \ i < words.size(); i++) {\n        int count = 0;\n        for (size_t j = 0;\
    \ j < words[i].size(); j++) {\n            count += words[i][j].size();\n    \
    \    }\n        if (count > max_count) {\n            max_count = count;\n   \
    \         max_index = i;\n        }\n    }\n    return words[max_index];", " \
    \   // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    int max_count = 0;\n    std::string max_word = \"\";\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;", "    std::string max = \"\";\n    int max_count = 0;\n  \
    \  for (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = word;\n        }\n    }\n    return max;", "    int n = words.size();\n\
    \    int m = words[0].size();\n    int max = 0;\n    int max_index = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; j\
    \ < m; j++) {\n            count += words[i][j].size();\n        }\n        if\
    \ (count > max) {\n            max = count;\n            max_index = i;\n    \
    \    }\n    }\n    return words[max_index];", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n   \
    \     int count = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > count) {\n                count = std::count(word.begin(),\
    \ word.end(), c);\n            }\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    // Your code here\n    std::string max = \"\";\n \
    \   int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > max_count) {\n           \
    \ max_count = count;\n            max = word;\n        }\n    }\n    return max;",
  "    std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n \
    \       int count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    int max_count = 0, max_index = -1;\n   \
    \ for (size_t i = 0; i < words.size(); i++) {\n        int count = 0;\n      \
    \  for (size_t j = 0; j < words[i].size(); j++) {\n            count += words[i][j].size();\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_index = i;\n        }\n    }\n    return words[max_index];",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    int n = words.size();\n\
    \    int max_count = 0;\n    int max_index = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        int count = 0;\n        for (int j = 0; j < n; j++) {\n         \
    \   if (i != j) {\n                if (words[i].size() > words[j].size()) {\n\
    \                    count = words[i].size() - words[j].size();\n            \
    \    } else {\n                    count = words[j].size() - words[i].size();\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max_count = count;\n                max_index = j;\n            }\n\
    \        }\n    }\n    return words[max_index];", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        int count = 0;\n        for (auto c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &w : words) {\n        std::unordered_set<char> chars;\n        for (auto &c\
    \ : w) {\n            chars.insert(c);\n        }\n        if (chars.size() >\
    \ maxCount) {\n            max = w;\n            maxCount = chars.size();\n  \
    \      }\n    }\n    return max;", "    int max = 0;\n    std::string maxWord\
    \ = \"\";\n    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&max](char c) {\n            return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c2) {\n                return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c3) {\n                    return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c4) {\n                        return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c5) {\n                            return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c6) {\n                                return max <\
    \ std::count_if(word.begin(), word.end(), [&max](char c7) {\n                \
    \                    return max < std::count_if(word.begin(), word.end(), [&max](char\
    \ c8) {\n                                        return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c9) {\n                                            return\
    \ max < std::count_if(word.begin(), word.end(), [&max](char c10) {\n         \
    \                                       return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c11) {\n                                           \
    \         return max < std::count_if(word.begin(), word.end(), [&max](char c12)\
    \ {\n                                                        return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c13) {\n                                           \
    \                 return max < std::count_if(word.begin(), word.end(), [&max](char\
    \ c14) {\n                                                                return\
    \ max < std::count_if(word.begin(), word.end(), [&max](char c15) {\n         \
    \                                                           return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c16) {\n                                           \
    \                             return max < std::count_if(word.begin(), word.end(),\
    \ [&max](char c17) {\n                                                       \
    \                     return max < std::count_if(word.begin(), word.end(), [&max](char\
    \ c18) {\n                                                                   \
    \             return max < std::count_if(word.begin(), word.end(), [&max](char\
    \ c19) {\n                                                                   \
    \                 return max < std::count_if(word.begin(), word.end(), [&max](char\
    \ c20) {\n                                                                   \
    \                     return max < std::count_if(word.begin(), word.end(), [&max](char\
    \ c21) {\n                                                                   \
    \                         return max < std::count_if(word.begin(), word.end(),\
    \ [&max](char c22) {\n                                                       \
    \                                         return max < std::count_if(word.begin(),\
    \ word.end(), [&max](char c23) {\n                                           \
    \                                                         ", "    // Your code\
    \ here\n    int max = 0;\n    std::string maxWord = \"\";\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max) {\n            max = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Write your code here\n    int\
    \ max = 0;\n    std::string maxWord = \"\";\n    for (auto &i : words) {\n   \
    \     int count = 0;\n        for (auto &j : i) {\n            count += 1;\n \
    \       }\n        if (count > max) {\n            max = count;\n            maxWord\
    \ = i;\n        }\n    }\n    return maxWord;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto word :\
    \ words) {\n        int count = 0;\n        for (auto c : word) {\n          \
    \  count += word.size();\n        }\n        if (count > maxCount) {\n       \
    \     maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max;\n    int maxCount =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::map<char, int> m;\n    for (auto &word : words) {\n\
    \        for (auto &c : word) {\n            m[c]++;\n        }\n    }\n    for\
    \ (auto &c : m) {\n        if (m[c] > 1) {\n            return word;\n       \
    \ }\n    }\n    return words[0];", "    // Your code here\n    std::string max;\n\
    \    size_t maxCount = 0;\n    for (auto &word : words) {\n        size_t count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int max_count = 0;\n    for (auto &x : words) {\n        auto count = std::count(x.begin(),\
    \ x.end(), 'a');\n        if (count > max_count) {\n            max = x;\n   \
    \         max_count = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         if (std::count(word.begin(), word.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > maxCount) {\n      \
    \      maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max;\n    int maxCount =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > maxCount) {\n \
    \           max = word;\n            maxCount = count;\n        }\n    }\n   \
    \ return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u');\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string maxWord = \"\";\n \
    \   int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += 1;\n        }\n  \
    \      if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Your code here\n    int max_count\
    \ = 0;\n    std::string max_word = words[0];\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        auto count\
    \ = std::count_if(word.begin(), word.end(), [&](char c) {\n            return\
    \ std::tolower(c) != 'a';\n        });\n        if (count > max_count) {\n   \
    \         max_count = count;\n            max = word;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int max_count = 0;\n    for (auto &word :\
    \ words) {\n        int count = 0;\n        for (auto &c : word) {\n         \
    \   count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n   \
    \     }\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = word;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto word :\
    \ words) {\n        int count = 0;\n        for (auto c : word) {\n          \
    \  count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    \
    \    }\n        if (count > maxCount) {\n            max = word;\n           \
    \ maxCount = count;\n        }\n    }\n    return max;", "    int n = words.size();\n\
    \    int max_count = 0;\n    std::string max_word = words[0];\n    for (int i\
    \ = 1; i < n; i++) {\n        int count = 0;\n        for (int j = 0; j < i; j++)\
    \ {\n            count += words[j].size();\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;", "    std::string max;\n    int max_count =\
    \ 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::map<char,\
    \ int> m;\n    for (auto &w : words) {\n        for (auto &c : w) {\n        \
    \    m[c]++;\n        }\n    }\n    for (auto &p : m) {\n        if (p.second\
    \ > 1) {\n            return p.first;\n        }\n    }\n    return words[0];",
  "    // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        int count = 0;\n        for (auto c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto word :\
    \ words) {\n        int count = 0;\n        for (auto c : word) {\n          \
    \  count += 1;\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::sort(words.begin(), words.end(), [](const std::string& a, const std::string&\
    \ b) { return a.size() > b.size(); });\n    std::string max_word = words[0];\n\
    \    int max_word_size = words[0].size();\n    for (size_t i = 1; i < words.size();\
    \ i++) {\n        if (words[i].size() > max_word_size) {\n            max_word\
    \ = words[i];\n            max_word_size = words[i].size();\n        }\n    }\n\
    \    return max_word;", "    int max = 0;\n    std::string maxWord = \"\";\n \
    \   for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > max) {\n            max = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    //\
    \ Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    std::string max\
    \ = \"\";\n    int max_count = 0;\n    for (auto &w : words) {\n        int count\
    \ = 0;\n        for (auto &c : w) {\n            if (std::count(w.begin(), w.end(),\
    \ c) > count) {\n                count = std::count(w.begin(), w.end(), c);\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = w;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &w : words) {\n        auto count\
    \ = std::count(w.begin(), w.end(), 'a');\n        if (count > max_count) {\n \
    \           max_count = count;\n            max = w;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string maxWord = \"\";\n    int maxCount = 0;\n   \
    \ for (auto word : words) {\n        int count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            maxCount = count;\n    \
    \        maxWord = word;\n        }\n    }\n    return maxWord;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    int max_count = 0;\n    std::string\
    \ max_word;\n    for (auto &word : words) {\n        int count = 0;\n        for\
    \ (auto &c : word) {\n            count += 1;\n        }\n        if (count >\
    \ max_count) {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max = word;\n            max_count = count;\n  \
    \      }\n    }\n    return max;", "    int max = 0;\n    std::string maxWord\
    \ = \"\";\n    for (auto word : words) {\n        int count = 0;\n        for\
    \ (auto c : word) {\n            count += 1;\n        }\n        if (count > max)\
    \ {\n            max = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        auto count = std::count_if(word.begin(), word.end(),\
    \ [](char c) {\n            return std::tolower(c) != 'a';\n        });\n    \
    \    if (count > maxCount) {\n            max = word;\n            maxCount =\
    \ count;\n        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    int\
    \ n = words.size();\n    std::string max;\n    int max_count = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = 0; j < n;\
    \ j++) {\n            if (i == j) continue;\n            if (words[i].size() >\
    \ words[j].size()) {\n                count += 1;\n            }\n        }\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max = words[i];\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count =\
    \ 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max;\n   \
    \ int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n \
    \       for (auto c : word) {\n            count += (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;"]
stop_tokens:
- "\n}"
