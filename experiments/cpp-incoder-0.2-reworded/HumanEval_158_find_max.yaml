name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a vector of strings.\n// The vector contains different words. Return the word\
  \ with maximum number\n// of unique characters. If multiple strings have maximum\
  \ number of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>>\
  \ find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
  bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string>\
  \ words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
  cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
  footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) ==\
  \ (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
  nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"\
  this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"})))\
  \ == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
completions: ["    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    int maxCountIndex = 0;\n    for(int i = 0; i < words.size(); i++){\n\
    \        int count = 0;\n        for(int j = 0; j < words[i].size(); j++){\n \
    \           if(words[i][j] == max){\n                count++;\n            }\n\
    \        }\n        if(count > maxCount){\n            maxCount = count;\n   \
    \         maxCountIndex = i;\n            max = words[i][j];\n        }\n    }\n\
    \    return max;", "    int max = 0;\n    std::string maxWord = \"\";\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max) {\n        \
    \    max = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max = \"\"\
    ;\n    int maxCount = 0;\n    for (auto &word : words) {\n        auto count =\
    \ std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    int n = words.size();\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (words[j] == words[i]) {\n       \
    \         count++;\n            }\n        }\n        if (count > maxCount) {\n\
    \            max = words[i];\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int max_count = 0;\n    std::string max_word = \"\";\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &w : words) {\n        auto count = std::count(w.begin(), w.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = w;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += std::count(word.begin(),\
    \ word.end(), c);\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = word;\n        }\n    }\n    return max;", "   \
    \ std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n \
    \       int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    int max = 0;\n\
    \    std::string maxWord = \"\";\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max)\
    \ {\n            max = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max = \"\";\n    int maxCount = 0;\n \
    \   for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto word\
    \ : words) {\n        int count = 0;\n        for (auto c : word) {\n        \
    \    count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n\
    \        auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    int max = 0;\n    int index = 0;\n    for (auto &word : words)\
    \ {\n        auto count = std::count_if(word.begin(), word.end(), [&](char c)\
    \ {\n            return std::tolower(c) == std::tolower(word[index]);\n      \
    \  });\n        if (count > max) {\n            max = count;\n            index\
    \ = std::distance(word.begin(), std::find(word.begin(), word.end(), word[index]));\n\
    \        }\n    }\n    return words[index];", "    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int max_count = 0;\n    std::string max_word = \"\";\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;"]
stop_tokens:
- "\n}"
