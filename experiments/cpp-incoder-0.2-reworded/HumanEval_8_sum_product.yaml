name: HumanEval_8_sum_product
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given vector of integers,\
  \ return a tuple consisting of a sum and a product of all the integers in a vector.\n\
  // Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>>\
  \ sum_product((std::vector<long>()))\n// (std::make_tuple(0, 1))\n// >>> sum_product((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})))\n// (std::make_tuple(10, 24))\nstd::tuple<long,\
  \ long> sum_product(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = sum_product;\n    assert(candidate((std::vector<long>()))\
  \ == (std::make_tuple(0, 1)));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1, (long)1}))) == (std::make_tuple(3, 1)));\n    assert(candidate((std::vector<long>({(long)100,\
  \ (long)0}))) == (std::make_tuple(100, 0)));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)5, (long)7}))) == (std::make_tuple(15, 105)));\n    assert(candidate((std::vector<long>({(long)10})))\
  \ == (std::make_tuple(10, 10)));\n}\n"
completions: ["    long sum = 0;\n    long product = 1;\n    for (auto i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto number\
    \ : numbers) {\n        sum += number;\n        product *= number;\n    }\n  \
    \  return std::make_tuple(sum, product);", "    if (numbers.empty()) {\n     \
    \   return std::make_tuple(0, 1);\n    }\n    long long sum = 0;\n    long long\
    \ product = 1;\n    for (auto i : numbers) {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return std::make_tuple(sum, product);", "  long long sum =\
    \ 0;\n  long long product = 1;\n  for (auto i : numbers) {\n    sum += i;\n  \
    \  product *= i;\n  }\n  return std::make_tuple(sum, product);", "    long sum\
    \ = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n\
    \        product *= i;\n    }\n    return std::make_tuple(sum, product);", " \
    \   long sum = 0;\n    long product = 1;\n    for (auto i : numbers) {\n     \
    \   sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum, product);",
  "    long sum = 0;\n    long product = 1;\n    for (auto number : numbers) {\n \
    \       sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto number\
    \ : numbers) {\n        sum += number;\n        product *= number;\n    }\n  \
    \  return std::make_tuple(sum, product);", "    if (numbers.empty()) {\n     \
    \   return std::make_tuple(0, 1);\n    }\n    long long sum = 0;\n    long long\
    \ product = 1;\n    for (auto i : numbers) {\n        sum += i;\n        product\
    \ *= i;\n    }\n    return std::make_tuple(sum, product);", "    long sum = 0;\n\
    \    long product = 1;\n    for (auto i : numbers) {\n        sum += i;\n    \
    \    product *= i;\n    }\n    return std::make_tuple(sum, product);", "    long\
    \ sum = 0;\n    long product = 1;\n    for (auto i : numbers) {\n        sum +=\
    \ i;\n        product *= i;\n    }\n    return std::make_tuple(sum, product);",
  "    long sum = 0;\n    long product = 1;\n    for (auto number : numbers) {\n \
    \       sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    if (numbers.empty()) {\n        return std::make_tuple(0, 1);\n\
    \    }\n    long long sum = 0;\n    long long product = 1;\n    for (long long\
    \ i : numbers) {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ std::make_tuple(sum, product);", "    long sum = 0;\n    long product = 1;\n\
    \    for (auto i : numbers) {\n        sum += i;\n        product *= i;\n    }\n\
    \    return std::make_tuple(sum, product);", "    long sum = 0;\n    long product\
    \ = 1;\n    for (auto n : numbers) {\n        sum += n;\n        product *= n;\n\
    \    }\n    return std::make_tuple(sum, product);", "    long long sum = 0;\n\
    \    long long product = 1;\n    for (auto n : numbers) {\n        sum += n;\n\
    \        product *= n;\n    }\n    return std::make_tuple(sum, product);", " \
    \   long long sum = 0;\n    long long product = 1;\n    for (auto number : numbers)\
    \ {\n        sum += number;\n        product *= number;\n    }\n    return std::make_tuple(sum,\
    \ product);", "    long sum = 0;\n    long product = 1;\n    for (auto i : numbers)\
    \ {\n        sum += i;\n        product *= i;\n    }\n    return std::make_tuple(sum,\
    \ product);"]
stop_tokens:
- "\n}"
