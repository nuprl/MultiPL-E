name: HumanEval_127_intersection
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n\
  // where each interval is a pair of integers. For example, interval = (start, end)\
  \ = (1, 2).\n// The given intervals are closed which means that the interval (start,\
  \ end)\n// includes both start and end.\n// For each given interval, it is assumed\
  \ that its start is less or equal its end.\n// Your task is to determine whether\
  \ the length of intersection of these two \n// intervals is a prime number.\n//\
  \ Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which\
  \ its length is 1, which not a prime number.\n// If the length of the intersection\
  \ is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two\
  \ intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>>\
  \ intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n\
  // >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\"\
  )\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n//\
  \ (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long,\
  \ long> interval2) {\n"
tests: "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1,\
  \ 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3,\
  \ -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2,\
  \ 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11,\
  \ 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2,\
  \ -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
completions: ["    long long start = std::get<0>(interval1);\n    long long end =\
    \ std::get<1>(interval1);\n    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n    }\n    if (start\
    \ > end) {\n        return \"NO\";\n    }\n    long long length = end - start;\n\
    \    if (length == 1) {\n        return \"YES\";\n    }\n    long long mid = start\
    \ + (end - start) / 2;\n    long long prime = 1;\n    for (long long i = 2; i\
    \ <= mid; ++i) {\n        if (mid % i == 0) {\n            prime = 0;\n      \
    \      break;\n        }\n    }\n    if (prime) {\n        return \"YES\";\n \
    \   }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n \
    \   long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length2 == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length2 == 2) {\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n    }\n    long long ans = 1;\n    for (long long i = 3; i <= length2;\
    \ i += 2) {\n        if (length % i == 0) {\n            ans = i;\n          \
    \  break;\n        }\n    }\n    if (ans == 1) {\n        return \"YES\";\n  \
    \  }\n    return \"NO\";", "    long long start1 = interval1.get<0>();\n    long\
    \ long end1 = interval1.get<1>();\n    long long start2 = interval2.get<0>();\n\
    \    long long end2 = interval2.get<1>();\n    long long length = end1 - start1;\n\
    \    long long length2 = end2 - start2;\n    long long ans = 0;\n    if (length\
    \ == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    long long m1 = start1\
    \ + length / 2;\n    long long m2 = start2 + length2 / 2;\n    long long m3 =\
    \ m1 + m2;\n    long long m4 = m1 - m2;\n    long long m5 = m3 - m4;\n    long\
    \ long m6 = m3 - m5;\n    long long m7 = m5 + m6;\n    long long m8 = m7 - m4;\n\
    \    long long m9 = m7 - m8;\n    long long m10 = m9 + m8;\n    long long m11\
    \ = m9 + m10;\n    long long m12 = m11 + m10;\n    long long m13 = m11 + m12;\n\
    \    long long m14 = m13 + m12;\n    long long m15 = m13 + m14;\n    long long\
    \ m16 = m15 + m14;\n    long long m17 = m15 + m16;\n    long long m18 = m17 +\
    \ m16;\n    long long m19 = m17 + m18;\n    long long m20 = m19 + m18;\n    long\
    \ long m21 = m19 + m20;\n    long long m22 = m21 + m20;\n    long long m23 = m21\
    \ + m22;\n    long long m24 = m23 + m22;\n    long long m25 = m23 + m24;\n   \
    \ long long m26 = m25 + m24;\n    long long m27 = m25 + m26;\n    long long m28\
    \ = m27 + m26;\n    long long m29 = m27 + m28;\n    long long m30 = m29 + m28;\n\
    \    long long m31 = m29 + m30;\n    long long m32 = m31 + m30;\n    long long\
    \ m33 = m31 + m32;\n    long long m34 = m33 + m32;\n    long long m35 = m33 +\
    \ m34;\n    long long m36 = m35 + m34;\n    long long m37 = m35 + m36;\n    long\
    \ long m38", "    long long start = std::get<0>(interval1);\n    long long end\
    \ = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length1 = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length1 < length2) {\n      \
    \  std::swap(length1, length2);\n    }\n    if (length1 == length2) {\n      \
    \  if (length1 == 0) {\n            return \"NO\";\n        }\n        if (length1\
    \ == 1) {\n            return \"YES\";\n        }\n    }\n    long long length3\
    \ = length1 - length2;\n    if (length3 == 1) {\n        return \"YES\";\n   \
    \ }\n    if (length3 == 0) {\n        return \"NO\";\n    }\n    long long length4\
    \ = length3 / 2;\n    long long length5 = length3 % 2;\n    long long length6\
    \ = length4 / 2;\n    long long length7 = length4 % 2;\n    long long length8\
    \ = length5 / 2;\n    long long length9 = length5 % 2;\n    long long length10\
    \ = length6 / 2;\n    long long length11 = length6 % 2;\n    long long length12\
    \ = length7 / 2;\n    long long length13 = length7 % 2;\n    long long length14\
    \ = length8 / 2;\n    long long length15 = length8 % 2;\n    long long length16\
    \ = length9 / 2;\n    long long length17 = length9 % 2;\n    long long length18\
    \ = length10 / 2;\n    long long length19 = length10 % 2;\n    long long length20\
    \ = length11 / 2;\n    long long length21 = length11 % 2;\n    long long length22\
    \ = length12 / 2;\n    long long length23 = length12 % 2;\n    long long length24\
    \ = length13 / 2;\n    long long length25 = length13 % 2;\n    long long length26\
    \ = length14 / 2;\n    long long length27 = length14 % 2;\n    long long length28\
    \ = length15 / 2;\n    long long length29 = length15 % 2;\n    long long length30\
    \ = length16 / 2;\n    long long length31 = length16 % 2;\n    long long length32\
    \ = length17 / 2;\n    long long length33 = length17 % 2;\n    long long length34\
    \ = length18 / 2;\n    long long length35 = length18 % 2;\n    long long length36\
    \ = length19 / 2;\n    long long length37 = length19 % 2;\n", "    long long int\
    \ a = std::get<0>(interval1);\n    long long int b = std::get<1>(interval1);\n\
    \    long long int c = std::get<0>(interval2);\n    long long int d = std::get<1>(interval2);\n\
    \    long long int min = a;\n    long long int max = b;\n    long long int mid\
    \ = (min + max) / 2;\n    if (min > max) {\n        return \"NO\";\n    }\n  \
    \  if (a > b) {\n        max = mid;\n    } else {\n        min = mid;\n    }\n\
    \    long long int length = max - min;\n    if (length == 1) {\n        return\
    \ \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n   \
    \ long long int length2 = c - d;\n    if (length2 == 1) {\n        return \"NO\"\
    ;\n    }\n    if (length2 == 2) {\n        return \"YES\";\n    }\n    long long\
    \ int length3 = length2 * length2;\n    if (length3 == 1) {\n        return \"\
    NO\";\n    }\n    if (length3 == 2) {\n        return \"YES\";\n    }\n    long\
    \ long int length4 = length3 * length3;\n    if (length4 == 1) {\n        return\
    \ \"NO\";\n    }\n    if (length4 == 2) {\n        return \"YES\";\n    }\n  \
    \  long long int length5 = length4 * length4;\n    if (length5 == 1) {\n     \
    \   return \"NO\";\n    }\n    if (length5 == 2) {\n        return \"YES\";\n\
    \    }\n    long long int length6 = length5 * length5;\n    if (length6 == 1)\
    \ {\n        return \"NO\";\n    }\n    if (length6 == 2) {\n        return \"\
    YES\";\n    }\n    long long int length7 = length6 * length6;\n    if (length7\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length7 == 2) {\n        return\
    \ \"YES\";\n    }\n    long long int length8 = length7 * length7;\n    if (length8\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length8 == 2) {\n        return\
    \ \"YES\";\n    }\n    long long int length9 = length8 * length8;\n    if (length9\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length9 == 2) {\n        return\
    \ \"YES\";\n    }\n    long long int length10 = length9 * length9;\n    if (length10\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length10 == 2) {\n        return\
    \ \"YES\";\n    }\n    long long int length11 = length10 * length10;\n    if (length11\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length11 == 2) {\n        return\
    \ \"YES\";\n    }\n    long long int length12 = length11 * length11;\n    if (length12\
    \ == 1) {\n        return \"NO\";\n    }\n", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    long long int length = end - start;\n\
    \    if (length == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n\
    \        return \"YES\";\n    }\n    if (length == 3) {\n        return \"YES\"\
    ;\n    }\n    if (length == 5) {\n        return \"YES\";\n    }\n    if (length\
    \ == 7) {\n        return \"YES\";\n    }\n    if (length == 9) {\n        return\
    \ \"YES\";\n    }\n    if (length == 11) {\n        return \"YES\";\n    }\n \
    \   if (length == 13) {\n        return \"YES\";\n    }\n    if (length == 17)\
    \ {\n        return \"YES\";\n    }\n    if (length == 19) {\n        return \"\
    YES\";\n    }\n    if (length == 23) {\n        return \"YES\";\n    }\n    if\
    \ (length == 29) {\n        return \"YES\";\n    }\n    if (length == 31) {\n\
    \        return \"YES\";\n    }\n    if (length == 37) {\n        return \"YES\"\
    ;\n    }\n    if (length == 43) {\n        return \"YES\";\n    }\n    if (length\
    \ == 59) {\n        return \"YES\";\n    }\n    if (length == 73) {\n        return\
    \ \"YES\";\n    }\n    if (length == 89) {\n        return \"YES\";\n    }\n \
    \   if (length == 117) {\n        return \"YES\";\n    }\n    if (length == 131)\
    \ {\n        return \"YES\";\n    }\n    if (length == 167) {\n        return\
    \ \"YES\";\n    }\n    if (length == 193) {\n        return \"YES\";\n    }\n\
    \    if (length == 229) {\n        return \"YES\";\n    }\n    if (length == 297)\
    \ {\n        return \"YES\";\n    }\n    if (length == 383) {\n        return\
    \ \"YES\";\n    }\n    if (length == 431) {\n        return \"YES\";\n    }\n\
    \    if (length == 597) {\n        return \"YES\";\n    }\n    if (length == 743)\
    \ {\n        return \"YES\";\n    }\n    if (length == 897) {\n        return\
    \ \"YES\";\n    }\n    if (length == 1171) {\n        return \"YES\";\n    }\n\
    \    if (length == 1313) {\n        return \"YES\";\n    }\n    if (length ==\
    \ 1667) {\n        return \"YES\";\n    }\n    if (length == 1933) {\n       \
    \ return \"YES\";\n    }\n    if (length == 2239) {\n        return \"YES\";\n\
    \    }\n    if (length == 2979) {\n        return \"YES\";\n    }\n    if (length\
    \ == 3831) {\n        return \"YES\";\n    }\n    if (length == 4313) {\n    \
    \    return \"YES\";\n    }\n    if (length == 5977) {\n        return \"YES\"\
    ;", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 <= 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    long long mid = length / 2;\n    long\
    \ long mid2 = length2 / 2;\n    if (mid * mid2 == length * length2) {\n      \
    \  return \"NO\";\n    }\n    if (mid * mid2 < length * length2) {\n        return\
    \ \"NO\";\n    }\n    if (mid * mid2 > length * length2) {\n        return \"\
    YES\";\n    }\n    return \"YES\";", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int start = std::min(start1, start2);\n    long long int end =\
    \ std::max(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 1) {\n        return \"NO\";\n    }\n    long long int mid = (start + end)\
    \ / 2;\n    if (mid % 2 == 0) {\n        return \"NO\";\n    }\n    long long\
    \ int mid2 = mid / 2;\n    if (mid2 % 2 == 0) {\n        return \"NO\";\n    }\n\
    \    long long int mid3 = mid2 / 2;\n    if (mid3 % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    long long int mid4 = mid3 / 2;\n    if (mid4 % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    long long int mid5 = mid4 / 2;\n    if (mid5\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long long int mid6 = mid5 /\
    \ 2;\n    if (mid6 % 2 == 0) {\n        return \"NO\";\n    }\n    long long int\
    \ mid7 = mid6 / 2;\n    if (mid7 % 2 == 0) {\n        return \"NO\";\n    }\n\
    \    long long int mid8 = mid7 / 2;\n    if (mid8 % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    long long int mid9 = mid8 / 2;\n    if (mid9 % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    long long int mid10 = mid9 / 2;\n    if (mid10\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long long int mid11 = mid10\
    \ / 2;\n    if (mid11 % 2 == 0) {\n        return \"NO\";\n    }\n    long long\
    \ int mid12 = mid11 / 2;\n    if (mid12 % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    long long int mid13 = mid12 / 2;\n    if (mid13 % 2 == 0) {\n    \
    \    return \"NO\";\n    }\n    long long int mid14 = mid13 / 2;\n    if (mid14\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long long int mid15 = mid14\
    \ / 2;\n    if (mid15 % 2 == 0) {\n        return \"NO\";\n    }\n    long long\
    \ int mid16 = mid15 / 2;\n    if (mid16 % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    long long int mid17 = mid16 / 2;\n    if (mid17 % 2 == 0) {\n    \
    \    return \"NO\";\n    }\n    ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (end < end2) {\n        return \"NO\"\
    ;\n    }\n    if (start == start2) {\n        return \"NO\";\n    }\n    if (start\
    \ > end2) {\n        return \"NO\";\n    }\n    if (end < end2) {\n        return\
    \ \"NO\";\n    }\n    if (start == end2) {\n        return \"YES\";\n    }\n \
    \   long long mid = (start + end) / 2;\n    long long mid2 = (start2 + end2) /\
    \ 2;\n    if (mid == mid2) {\n        return \"YES\";\n    }\n    if (mid > mid2)\
    \ {\n        return \"NO\";\n    }\n    return \"NO\";", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    long long ans = length * length2;\n    if (ans == 0) {\n        return \"\
    NO\";\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 2) {\n        return \"YES\";\n    }\n    if (ans % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (ans % 3 == 0) {\n        return \"YES\";\n    }\n  \
    \  if (ans % 5 == 0) {\n        return \"YES\";\n    }\n    if (ans % 7 == 0)\
    \ {\n        return \"YES\";\n    }\n    if (ans % 11 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 13 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 17 == 0) {\n        return \"YES\";\n    }\n    if (ans % 19 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 23 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 29 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 31 == 0) {\n        return \"YES\";\n    }\n    if (ans % 37 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 41 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 43 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 47 == 0) {\n        return \"YES\";\n    }\n    if (ans % 53 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 59 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 61 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 67 == 0) {\n        return \"YES\";\n    }\n    if (ans % 71 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 73 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 79 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 83 == 0) {\n        return \"YES\";\n    }\n    if (ans % 89 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 97 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 101 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 103 == 0) {\n        return \"YES\";\n    }\n    if (ans % 107\
    \ == 0) {\n        return \"YES\";\n    }\n    if (ans % 109 == 0) {\n       \
    \ return \"YES\";\n    }\n    if (ans % 113 == 0) {\n        return \"YES\";\n\
    \    }\n    if (ans % 117 == 0) {\n        return \"YES", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 > length) {\n        std::swap(length, length2);\n    }\n   \
    \ if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    long long length3 = length / length2;\n \
    \   long long length4 = length % length2;\n    if (length3 == 1) {\n        return\
    \ \"YES\";\n    }\n    if (length3 == 0) {\n        return \"NO\";\n    }\n  \
    \  if (length4 == 0) {\n        return \"NO\";\n    }\n    long long length5 =\
    \ length3 / length4;\n    long long length6 = length3 % length4;\n    if (length5\
    \ == 1) {\n        return \"YES\";\n    }\n    if (length5 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length6 == 0) {\n        return \"NO\";\n    }\n   \
    \ long long length7 = length5 / length6;\n    long long length8 = length5 % length6;\n\
    \    if (length7 == 1) {\n        return \"YES\";\n    }\n    if (length7 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length8 == 0) {\n        return \"\
    NO\";\n    }\n    long long length9 = length7 / length8;\n    long long length10\
    \ = length7 % length8;\n    if (length9 == 1) {\n        return \"YES\";\n   \
    \ }\n    if (length9 == 0) {\n        return \"NO\";\n    }\n    if (length10\
    \ == 0) {\n        return \"NO\";\n    }\n    long long length11 = length9 / length10;\n\
    \    long long length12 = length9 % length10;\n    if (length11 == 1) {\n    \
    \    return \"YES\";\n    }\n    if (length11 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length12 == 0) {\n        return \"NO\";\n    }\n    long long\
    \ length13 = length11 / length12;\n    long long length14 = length11 % length12;\n\
    \    if (length13 == 1) {\n        return \"YES\";\n    }\n    if (length13 ==\
    \ 0) {\n        return \"NO\";\n    }\n    if (length14 == 0) {\n        return\
    \ \"NO\";\n    }\n    long long length15 = length13 / length14;\n    long long\
    \ length16 = length13 % length14;\n    if (length15 == 1) {\n", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    long\
    \ long inter = length * length2;\n    long long ans = inter / 2;\n    if (inter\
    \ % 2 == 0) {\n        ans = 1;\n    }\n    if (ans == 1) {\n        return \"\
    YES\";\n    }\n    return \"NO\";", "    long long int l1 = std::get<0>(interval1);\n\
    \    long long int l2 = std::get<0>(interval2);\n    long long int r1 = std::get<1>(interval1);\n\
    \    long long int r2 = std::get<1>(interval2);\n    long long int l3 = l1 + l2;\n\
    \    long long int r3 = r1 + r2;\n    long long int l4 = l3 - r3;\n    if (l4\
    \ >= 2) {\n        return \"NO\";\n    }\n    if (l4 == 1) {\n        return \"\
    YES\";\n    }\n    if (l4 == -1) {\n        return \"YES\";\n    }\n    if (l4\
    \ == -2) {\n        return \"YES\";\n    }\n    if (l4 == -3) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == -4) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == -5) {\n        return \"YES\";\n    }\n    if (l4 == -6) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == -7) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == -8) {\n        return \"YES\";\n    }\n    if (l4 == 9) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 10) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == 11) {\n        return \"YES\";\n    }\n    if (l4 == 12) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 13) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == 14) {\n        return \"YES\";\n    }\n    if (l4 == 15) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 16) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == 17) {\n        return \"YES\";\n    }\n    if (l4 == 18) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 19) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == 20) {\n        return \"YES\";\n    }\n    if (l4 == 21) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 22) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == 23) {\n        return \"YES\";\n    }\n    if (l4 == 24) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 25) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == 26) {\n        return \"YES\";\n    }\n    if (l4 == 27) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 28) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == 29) {\n        return \"YES\";\n    }\n    if (l4 == 30) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == 31) {\n        return \"YES\";\n    }\n    if\
    \ (", "    long long int start1 = std::get<0>(interval1);\n    long long int end1\
    \ = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection = end1\
    \ < end2 ? end1 : end2;\n    long long int endIntersection2 = endIntersection\
    \ - startIntersection;\n    if (endIntersection2 == 0) {\n        return \"NO\"\
    ;\n    }\n    if (endIntersection2 == 1) {\n        return \"YES\";\n    }\n \
    \   long long int startIntersection2 = startIntersection + endIntersection2;\n\
    \    long long int endIntersection3 = endIntersection - startIntersection2;\n\
    \    if (endIntersection3 == 0) {\n        return \"NO\";\n    }\n    if (endIntersection3\
    \ == 1) {\n        return \"YES\";\n    }\n    long long int startIntersection3\
    \ = startIntersection2 + endIntersection3;\n    long long int endIntersection4\
    \ = endIntersection - startIntersection3;\n    if (endIntersection4 == 0) {\n\
    \        return \"NO\";\n    }\n    if (endIntersection4 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long int startIntersection4 = startIntersection3 +\
    \ endIntersection4;\n    long long int endIntersection5 = endIntersection - startIntersection4;\n\
    \    if (endIntersection5 == 0) {\n        return \"NO\";\n    }\n    if (endIntersection5\
    \ == 1) {\n        return \"YES\";\n    }\n    long long int startIntersection5\
    \ = startIntersection4 + endIntersection5;\n    long long int endIntersection6\
    \ = endIntersection - startIntersection5;\n    if (endIntersection6 == 0) {\n\
    \        return \"NO\";\n    }\n    if (endIntersection6 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long int startIntersection6 = startIntersection5 +\
    \ endIntersection6;\n    long long int endIntersection7 = endIntersection - startIntersection6;\n\
    \    if (endIntersection7 == 0) {\n        return \"NO\";\n    }\n    if (endIntersection7\
    \ == 1) {\n        return \"YES\";\n    }\n    long long int startIntersection7\
    \ = startIntersection6 + endIntersection7;\n    long long int endIntersection8\
    \ = endIntersection - startIntersection7;\n    if (endIntersection8 == 0) {\n\
    \        return \"NO\";\n    }\n    if (endIntersection8 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long int startIntersection8 = startInter", "    long\
    \ long int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n     \
    \   return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    if (length < length2) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    if (length < length2) {\n        start\
    \ = std::get<0>(interval1);\n        end = std::get<1>(interval1);\n        start2\
    \ = std::get<0>(interval2);\n        end2 = std::get<1>(interval2);\n        length\
    \ = end - start;\n        length2 = end2 - start2;\n    }\n    if (length < length2)\
    \ {\n        start = std::get<0>(interval2);\n        end = std::get<1>(interval2);\n\
    \        start2 = std::get<0>(interval1);\n        end2 = std::get<1>(interval1);\n\
    \        length = end - start;\n        length2 = end2 - start2;\n    }\n    if\
    \ (length < length2) {\n        start = std::get<0>(interval1);\n        end =\
    \ std::get<1>(interval1);\n        start2 = std::get<0>(interval2);\n        end2\
    \ = std::get<1>(interval2);\n        length = end - start;\n        length2 =\
    \ end2 - start2;\n    }\n    if (length < length2) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    if (length < length2) {\n        start\
    \ = std::get<0>(interval1);\n        end = std::get<1>(interval1);\n        start2\
    \ = std::get<0>(interval2);\n        end2 = std::get<1>(interval2);\n        length\
    \ = end - start;\n        length2 = end2 - start2;\n    }\n    if (length < length2)\
    \ {\n        start = std::get<0>(interval2);\n        end = std::get<1>(interval2);\n\
    \        start2 = std::get<0>(interval1);\n        end2 = std::get<1>(interval1);\n\
    \        length = end - start;\n        length2 = ", "    long long int start1\
    \ = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n    long\
    \ long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    if (start1 < end2 && start2 < end1) {\n        long long int startIntersection\
    \ = start1 < start2 ? start1 : start2;\n        long long int endIntersection\
    \ = end1 < end2 ? end1 : end2;\n        long long int lengthIntersection = endIntersection\
    \ - startIntersection;\n        if (lengthIntersection % 2 == 0) {\n         \
    \   if (lengthIntersection == 2) {\n                return \"YES\";\n        \
    \    } else {\n                return \"NO\";\n            }\n        } else {\n\
    \            return \"NO\";\n        }\n    } else {\n        return \"NO\";\n\
    \    }", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        length = length2;\n    }\n    if (length < 2) {\n        return \"\
    NO\";\n    }\n    long long mid = length / 2;\n    long long mid2 = length2 /\
    \ 2;\n    long long ans = 0;\n    for (long long i = start; i <= end; i++) {\n\
    \        long long count = 0;\n        for (long long j = start2; j <= end2; j++)\
    \ {\n            if (i == j) {\n                count++;\n            }\n    \
    \    }\n        if (count == mid) {\n            ans++;\n        }\n    }\n  \
    \  if (ans == mid2) {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   long long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end2 : start1;\n    long long int\
    \ endIntersection1 = endIntersection;\n    long long int endIntersection2 = endIntersection;\n\
    \    long long int startIntersection1 = startIntersection;\n    long long int\
    \ startIntersection2 = startIntersection;\n    long long int endIntersection1\
    \ = endIntersection;\n    long long int endIntersection2 = endIntersection;\n\
    \    long long int startIntersection3 = startIntersection;\n    long long int\
    \ startIntersection4 = startIntersection;\n    long long int endIntersection3\
    \ = endIntersection;\n    long long int endIntersection4 = endIntersection;\n\
    \    long long int startIntersection5 = startIntersection;\n    long long int\
    \ startIntersection6 = startIntersection;\n    long long int endIntersection5\
    \ = endIntersection;\n    long long int endIntersection6 = endIntersection;\n\
    \    long long int startIntersection7 = startIntersection;\n    long long int\
    \ startIntersection8 = startIntersection;\n    long long int endIntersection7\
    \ = endIntersection;\n    long long int endIntersection8 = endIntersection;\n\
    \    long long int startIntersection9 = startIntersection;\n    long long int\
    \ startIntersection10 = startIntersection;\n    long long int endIntersection9\
    \ = endIntersection;\n    long long int endIntersection10 = endIntersection;\n\
    \    long long int startIntersection11 = startIntersection;\n    long long int\
    \ startIntersection12 = startIntersection;\n    long long int endIntersection11\
    \ = endIntersection;\n    long long int endIntersection12 = endIntersection;\n\
    \    long long int startIntersection13 = startIntersection;\n    long long int\
    \ startIntersection14 = startIntersection;\n    long long int endIntersection13\
    \ = endIntersection;\n    long long int endIntersection14 = endIntersection;\n\
    \    long long int startIntersection15 = startIntersection;\n    long long int\
    \ startIntersection16 = startIntersection;\n    long ", "    long long start1\
    \ = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n    long long\
    \ start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n   \
    \ if (start1 < end2 && start2 < end1) {\n        long long startIntersection =\
    \ start1;\n        long long endIntersection = end2;\n        long long startIntersection2\
    \ = start2;\n        long long endIntersection2 = end1;\n        while (startIntersection\
    \ < endIntersection) {\n            if (startIntersection2 == endIntersection2)\
    \ {\n                return \"NO\";\n            }\n            if (startIntersection2\
    \ == startIntersection + 1) {\n                endIntersection2 = endIntersection;\n\
    \            } else {\n                endIntersection2 = endIntersection + 1;\n\
    \            }\n            startIntersection2 = startIntersection + 1;\n    \
    \    }\n        return \"YES\";\n    }\n    return \"NO\";", "    // Write your\
    \ code here\n    long start1 = interval1.get<0>();\n    long end1 = interval1.get<1>();\n\
    \    long start2 = interval2.get<0>();\n    long end2 = interval2.get<1>();\n\
    \    long start = max(start1, start2);\n    long end = min(end1, end2);\n    long\
    \ length = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n\
    \    if (length == 2) {\n        return \"YES\";\n    }\n    long mid = start\
    \ + (end - start) / 2;\n    if (mid == start) {\n        return \"NO\";\n    }\n\
    \    if (mid == end) {\n        return \"YES\";\n    }\n    if (mid % 2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (mid % 3 == 0) {\n        return \"\
    YES\";\n    }\n    long count = 0;\n    for (long i = start; i <= end; i++) {\n\
    \        if (i % 2 == 0) {\n            count++;\n        }\n        if (i % 3\
    \ == 0) {\n            count++;\n        }\n    }\n    if (count == 2) {\n   \
    \     return \"YES\";\n    }\n    return \"NO\";", "    long long start1 = std::get<0>(interval1);\n\
    \    long long end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end1 - start1\
    \ + end2 - start2;\n    if (length == 0) return \"NO\";\n    if (length == 1)\
    \ return \"YES\";\n    long long mid1 = start1 + end1 / 2;\n    long long mid2\
    \ = start2 + end2 / 2;\n    long long mid = mid1 + mid2;\n    if (mid < 0 || mid\
    \ > length) return \"NO\";\n    long long mid2 = start2 + end2 / 2;\n    long\
    \ long mid1 = start1 + end1 / 2;\n    long long mid = mid1 + mid2;\n    if (mid\
    \ < 0 || mid > length) return \"NO\";\n    long long mid2 = start2 + end2 / 2;\n\
    \    long long mid1 = start1 + end1 / 2;\n    long long mid = mid1 + mid2;\n \
    \   if (mid < 0 || mid > length) return \"NO\";\n    long long mid2 = start2 +\
    \ end2 / 2;\n    long long mid1 = start1 + end1 / 2;\n    long long mid = mid1\
    \ + mid2;\n    if (mid < 0 || mid > length) return \"NO\";\n    long long mid2\
    \ = start2 + end2 / 2;\n    long long mid1 = start1 + end1 / 2;\n    long long\
    \ mid = mid1 + mid2;\n    if (mid < 0 || mid > length) return \"NO\";\n    long\
    \ long mid2 = start2 + end2 / 2;\n    long long mid1 = start1 + end1 / 2;\n  \
    \  long long mid = mid1 + mid2;\n    if (mid < 0 || mid > length) return \"NO\"\
    ;\n    long long mid2 = start2 + end2 / 2;\n    long long mid1 = start1 + end1\
    \ / 2;\n    long long mid = mid1 + mid2;\n    if (mid < 0 || mid > length) return\
    \ \"NO\";\n    long long mid2 = start2 + end2 / 2;\n    long long mid1 = start1\
    \ + end1 / 2;\n    long long mid = mid1 + mid2;\n    if (mid < 0 || mid > length)\
    \ return \"NO\";\n    long long mid2 = start2 + end2 / 2;\n    long long mid1\
    \ = start1 + end1 / 2;\n    long long mid = mid1 + mid2;\n    if (mid < 0 || mid\
    \ > length) return \"NO\";\n    long long mid2 = start2 + end2 / 2;\n    long\
    \ long mid", "    long long int a = interval1.get<0>();\n    long long int b =\
    \ interval1.get<1>();\n    long long int c = interval2.get<0>();\n    long long\
    \ int d = interval2.get<1>();\n    long long int a_prime = a <= c ? a : c;\n \
    \   long long int b_prime = b <= d ? b : d;\n    long long int a_prime_prime =\
    \ a_prime <= b_prime ? a_prime : b_prime;\n    long long int a_prime_prime_prime\
    \ = a_prime_prime <= c ? a_prime_prime : c;\n    long long int b_prime_prime =\
    \ b_prime <= d ? b_prime : d;\n    long long int b_prime_prime_prime = b_prime_prime\
    \ <= c ? b_prime_prime : c;\n    long long int a_prime_prime_prime_prime_prime\
    \ = a_prime_prime_prime <= b_prime ? a_prime_prime_prime : b_prime_prime;\n  \
    \  long long int b_prime_prime_prime_prime = b_prime_prime_prime <= d ? b_prime_prime_prime\
    \ : d;\n    long long int a_prime_prime_prime_prime_prime_prime = a_prime_prime_prime_prime\
    \ <= c ? a_prime_prime_prime_prime : c;\n    long long int b_prime_prime_prime_prime_prime\
    \ = b_prime_prime_prime <= d ? b_prime_prime_prime : d;\n    long long int a_prime_prime_prime_prime_prime_prime_prime\
    \ = a_prime_prime_prime_prime_prime <= c ? a_prime_prime_prime_prime_prime : c;\n\
    \    long long int b_prime_prime_prime_prime_prime_prime = b_prime_prime_prime_prime\
    \ <= d ? b_prime_prime_prime : d;\n    long long int a_prime_prime_prime_prime_prime_prime_prime\
    \ = a_prime_prime_prime_prime_prime <= c ? a_prime_prime_prime_prime_prime : c;\n\
    \    long long int b_prime_prime_prime_prime_prime_prime_prime = b_prime_prime_prime_prime_prime\
    \ <= d ? b_prime_prime_prime_prime : d;\n    long long int a_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = a_prime_prime_prime_prime_prime_", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\"\
    ;\n    }\n    if (length == length2) {\n        if (length == 1) {\n         \
    \   return \"YES\";\n        }\n        if (length == 2) {\n            if (start\
    \ <= end2 && start2 <= end) {\n                return \"YES\";\n            }\n\
    \        }\n    }\n    return \"NO\";", "    // Your code here\n    long long\
    \ start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n   \
    \ long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long length = end1 - start1;\n    long long length2 = end2 - start2;\n\
    \    long long intersection = length * length2;\n    if (intersection == 0)\n\
    \        return \"NO\";\n    if (length == 0)\n        return \"NO\";\n    if\
    \ (length2 == 0)\n        return \"NO\";\n    if (length == length2)\n       \
    \ return \"YES\";\n    if (length < length2)\n        return \"NO\";\n    return\
    \ \"NO\";", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long length = end - start;\n    long length2 = end2 - start2;\n    if (length2\
    \ > length) {\n        return \"NO\";\n    }\n    if (length2 == length) {\n \
    \       return \"YES\";\n    }\n    if (length2 == 0) {\n        return \"NO\"\
    ;\n    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n        return\
    \ \"YES\";\n    }\n    if (length == 4) {\n        return \"YES\";\n    }\n  \
    \  if (length == 5) {\n        return \"YES\";\n    }\n    if (length == 6) {\n\
    \        return \"YES\";\n    }\n    if (length == 7) {\n        return \"YES\"\
    ;\n    }\n    if (length == 8) {\n        return \"YES\";\n    }\n    if (length\
    \ == 9) {\n        return \"YES\";\n    }\n    if (length == 10) {\n        return\
    \ \"YES\";\n    }\n    if (length == 11) {\n        return \"YES\";\n    }\n \
    \   if (length == 12) {\n        return \"YES\";\n    }\n    if (length == 13)\
    \ {\n        return \"YES\";\n    }\n    if (length == 14) {\n        return \"\
    YES\";\n    }\n    if (length == 15) {\n        return \"YES\";\n    }\n    if\
    \ (length == 16) {\n        return \"YES\";\n    }\n    if (length == 17) {\n\
    \        return \"YES\";\n    }\n    if (length == 18) {\n        return \"YES\"\
    ;\n    }\n    if (length == 19) {\n        return \"YES\";\n    }\n    if (length\
    \ == 20) {\n        return \"YES\";\n    }\n    if (length == 21) {\n        return\
    \ \"YES\";\n    }\n    if (length == 22) {\n        return \"YES\";\n    }\n \
    \   if (length == 23) {\n        return \"YES\";\n    }\n    if (length == 24)\
    \ {\n        return \"YES\";\n    }\n    if (length == 25) {\n        return \"\
    YES\";\n    }\n    if (length == 26) {\n        return \"YES\";\n    }\n    if\
    \ (length == 27) {\n        return \"YES\";\n    }\n    if (length == 28) {\n\
    \        return \"YES\";\n    }\n    if (length == 29) {\n        return \"YES\"\
    ;\n    }\n    if (length == 30) {\n        return \"YES\";\n    }\n    if (length\
    \ == 31) {\n        return \"YES\";\n    }\n    if (length == 32) {\n        return\
    \ \"YES\";\n    }\n    if (length == 33) {\n        return \"YES\";\n    }\n \
    \   if (length == 34) {\n        return \"YES\";\n    }\n    if (length == 35)\
    \ {\n        return \"YES\";\n    }\n    if (length == 36) {\n        return \"\
    YES\";\n    }\n    if (length", "    long long start1 = std::get<0>(interval1);\n\
    \    long long end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start1 < start2) {\n  \
    \      std::swap(start1, start2);\n        std::swap(end1, end2);\n    }\n   \
    \ long long startIntersection = start1;\n    long long endIntersection = end1;\n\
    \    long long startIntersection2 = start2;\n    long long endIntersection2 =\
    \ end2;\n    long long startIntersection3 = start1;\n    long long endIntersection3\
    \ = end1;\n    long long startIntersection4 = start2;\n    long long endIntersection4\
    \ = end2;\n    long long startIntersection5 = start1;\n    long long endIntersection5\
    \ = end1;\n    long long startIntersection6 = start2;\n    long long endIntersection6\
    \ = end2;\n    long long startIntersection7 = start1;\n    long long endIntersection7\
    \ = end1;\n    long long startIntersection8 = start2;\n    long long endIntersection8\
    \ = end2;\n    long long startIntersection9 = start1;\n    long long endIntersection9\
    \ = end1;\n    long long startIntersection10 = start2;\n    long long endIntersection10\
    \ = end2;\n    long long startIntersection11 = start1;\n    long long endIntersection11\
    \ = end1;\n    long long startIntersection12 = start2;\n    long long endIntersection12\
    \ = end2;\n    long long startIntersection13 = start1;\n    long long endIntersection13\
    \ = end1;\n    long long startIntersection14 = start2;\n    long long endIntersection14\
    \ = end2;\n    long long startIntersection15 = start1;\n    long long endIntersection15\
    \ = end1;\n    long long startIntersection16 = start2;\n    long long endIntersection16\
    \ = end2;\n    long long startIntersection17 = start1;\n    long long endIntersection17\
    \ = end1;\n    long long startIntersection18 = start2;\n    long long endIntersection18\
    \ = end2;\n    long long startIntersection19 = start1;\n    long long endIntersection19\
    \ = end1;\n    long long startIntersection20 = start2;\n    long long endIntersection20\
    \ = end2;\n    long long startIntersection21 = start1;\n    long long endIntersection2",
  "    long long int start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int startIntersection = start1;\n   \
    \ long long int endIntersection = end1;\n    if (start1 < start2) {\n        startIntersection\
    \ = start2;\n        endIntersection = end1;\n    }\n    if (end1 < end2) {\n\
    \        startIntersection = start1;\n        endIntersection = end2;\n    }\n\
    \    long long int startIntersection2 = startIntersection;\n    long long int\
    \ endIntersection2 = endIntersection;\n    if (startIntersection < startIntersection2)\
    \ {\n        startIntersection2 = startIntersection;\n        endIntersection2\
    \ = endIntersection;\n    }\n    if (endIntersection < endIntersection2) {\n \
    \       startIntersection2 = startIntersection;\n        endIntersection2 = endIntersection;\n\
    \    }\n    long long int startIntersection3 = startIntersection2;\n    long long\
    \ int endIntersection3 = endIntersection2;\n    if (startIntersection2 < startIntersection3)\
    \ {\n        startIntersection3 = startIntersection2;\n        endIntersection3\
    \ = endIntersection2;\n    }\n    if (endIntersection2 < endIntersection3) {\n\
    \        startIntersection3 = startIntersection2;\n        endIntersection3 =\
    \ endIntersection2;\n    }\n    long long int startIntersection4 = startIntersection3;\n\
    \    long long int endIntersection4 = endIntersection3;\n    if (startIntersection3\
    \ < startIntersection4) {\n        startIntersection4 = startIntersection3;\n\
    \        endIntersection4 = endIntersection3;\n    }\n    if (endIntersection3\
    \ < endIntersection4) {\n        startIntersection4 = startIntersection3;\n  \
    \      endIntersection4 = endIntersection3;\n    }\n    long long int startIntersection5\
    \ = startIntersection4;\n    long long int endIntersection5 = endIntersection4;\n\
    \    if (startIntersection4 < startIntersection5) {\n        startIntersection5\
    \ = startIntersection4;\n        endIntersection5 = endIntersection4;\n    }\n\
    \    if (endIntersection4 < endIntersection5) {\n        startIntersection5 =\
    \ startIntersection4;\n        endIntersection5 = endIntersection4;\n    }\n \
    \   long long int startIntersection6 = startIntersection5;\n    long long int\
    \ endIntersection6 = endIntersection5;\n    if (startIntersection5 < startIntersection6)\
    \ {\n        startInter", "    long long start = std::get<0>(interval1);\n   \
    \ long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n\
    \    long long mid = length / 2;\n    long long mid2 = length2 / 2;\n    long\
    \ long mid3 = mid * mid;\n    long long mid4 = mid2 * mid2;\n    long long mid5\
    \ = mid3 * mid3;\n    long long mid6 = mid4 * mid4;\n    long long mid7 = mid5\
    \ * mid5;\n    long long mid8 = mid6 * mid6;\n    long long mid9 = mid7 * mid7;\n\
    \    long long mid10 = mid8 * mid8;\n    long long mid11 = mid9 * mid9;\n    long\
    \ long mid12 = mid10 * mid10;\n    long long mid13 = mid11 * mid11;\n    long\
    \ long mid14 = mid12 * mid12;\n    long long mid15 = mid13 * mid13;\n    long\
    \ long mid16 = mid14 * mid14;\n    long long mid17 = mid15 * mid15;\n    long\
    \ long mid18 = mid16 * mid16;\n    long long mid19 = mid17 * mid17;\n    long\
    \ long mid20 = mid18 * mid18;\n    long long mid21 = mid19 * mid19;\n    long\
    \ long mid22 = mid20 * mid20;\n    long long mid23 = mid21 * mid21;\n    long\
    \ long mid24 = mid22 * mid22;\n    long long mid25 = mid23 * mid23;\n    long\
    \ long mid26 = mid24 * mid24;\n    long long mid27 = mid25 * mid25;\n    long\
    \ long mid28 = mid26 * mid26;\n    long long mid29 = mid27 * mid27;\n    long\
    \ long mid30 = mid28 * mid28;\n    long long mid31 = mid29 * mid29;\n    long\
    \ long mid32 = mid30 * mid30;\n    long long mid33 = mid31 * mid31;\n    long\
    \ long mid34 = mid32 * mid32;\n    long long mid35 = mid33 * mid33;\n    long\
    \ long mid36 = mid34 * ", "    long long start = std::get<0>(interval1);\n   \
    \ long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    if (length < length2) {\n        length = length2;\n    }\n    long long\
    \ mid = length / 2;\n    long long mid2 = length2 / 2;\n    long long mid3 = mid\
    \ * mid2;\n    long long mid4 = mid3 * mid2;\n    long long mid5 = mid4 * mid2;\n\
    \    long long mid6 = mid5 * mid2;\n    long long mid7 = mid6 * mid2;\n    long\
    \ long mid8 = mid7 * mid2;\n    long long mid9 = mid8 * mid2;\n    long long mid10\
    \ = mid9 * mid2;\n    long long mid11 = mid10 * mid2;\n    long long mid12 = mid11\
    \ * mid2;\n    long long mid13 = mid12 * mid2;\n    long long mid14 = mid13 *\
    \ mid2;\n    long long mid15 = mid14 * mid2;\n    long long mid16 = mid15 * mid2;\n\
    \    long long mid17 = mid16 * mid2;\n    long long mid18 = mid17 * mid2;\n  \
    \  long long mid19 = mid18 * mid2;\n    long long mid20 = mid19 * mid2;\n    long\
    \ long mid21 = mid20 * mid2;\n    long long mid22 = mid21 * mid2;\n    long long\
    \ mid23 = mid22 * mid2;\n    long long mid24 = mid23 * mid2;\n    long long mid25\
    \ = mid24 * mid2;\n    long long mid26 = mid25 * mid2;\n    long long mid27 =\
    \ mid26 * mid2;\n    long long mid28 = mid27 * mid2;\n    long long mid29 = mid28\
    \ * mid2;\n    long long mid30 = mid29 * mid2;\n    long long mid31 = mid30 *\
    \ mid2;\n    long long mid32 = mid31 * mid2;\n    long long mid33 = mid32 * mid2;\n\
    \    long long mid34 = mid33 * mid2;\n    long long mid35 = mid34 * mid2;\n  \
    \  long long mid36 = mid35 * mid", "    if (interval1.first > interval1.second)\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (interval2.first\
    \ > interval2.second) {\n        std::swap(interval1, interval2);\n    }\n   \
    \ if (interval1.first > interval2.first) {\n        return \"NO\";\n    }\n  \
    \  if (interval1.second < interval2.second) {\n        return \"NO\";\n    }\n\
    \    if (interval1.second == interval2.second) {\n        return \"NO\";\n   \
    \ }\n    if (interval1.first == interval2.first) {\n        return \"YES\";\n\
    \    }\n    long long a = interval1.second;\n    long long b = interval2.second;\n\
    \    long long c = interval1.first;\n    long long d = interval2.first;\n    long\
    \ long ans = 0;\n    long long n = 0;\n    while (c < d) {\n        long long\
    \ mid = (c + d) / 2;\n        if (mid * mid <= a) {\n            ans += 1;\n \
    \           c += 1;\n        } else {\n            d += 1;\n        }\n    }\n\
    \    if (ans == 0) {\n        return \"NO\";\n    }\n    if (ans == 1) {\n   \
    \     return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\";\n \
    \   }\n    if (ans == 3) {\n        return \"YES\";\n    }\n    if (ans == 4)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 5) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 6) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 7) {\n        return \"YES\";\n    }\n    if (ans == 8) {\n        return \"\
    YES\";\n    }\n    if (ans == 9) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 10) {\n        return \"YES\";\n    }\n    if (ans == 11) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 12) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 13) {\n        return \"YES\";\n    }\n    if (ans == 14) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 15) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 16) {\n        return \"YES\";\n    }\n    if (ans == 17)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 18) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 19) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 20) {\n        return \"YES\";\n    }\n    if (ans == 21) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 22) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 23) {\n        return \"YES\";\n    }\n    if (ans == 24) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 25) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 26) {\n", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = max(start1,\
    \ start2);\n    long long int end = min(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    long long int prime\
    \ = 1;\n    for (long long int i = 2; i <= length; ++i) {\n        if (length\
    \ % i == 0) {\n            prime = 0;\n            break;\n        }\n    }\n\
    \    if (prime) return \"YES\";\n    return \"NO\";", "    long long int start1\
    \ = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int startIntersection = start1;\n   \
    \ long long int endIntersection = end1;\n    if (start1 < start2) {\n        startIntersection\
    \ = start2;\n        endIntersection = end1;\n    }\n    if (end1 < end2) {\n\
    \        startIntersection = start1;\n        endIntersection = end2;\n    }\n\
    \    long long int startIntersection2 = start2;\n    long long int endIntersection2\
    \ = end2;\n    if (start2 < start1) {\n        startIntersection2 = start1;\n\
    \        endIntersection2 = end1;\n    }\n    if (end2 < end1) {\n        startIntersection2\
    \ = start2;\n        endIntersection2 = end2;\n    }\n    if (startIntersection\
    \ < endIntersection && startIntersection2 < endIntersection2) {\n        long\
    \ long int startIntersection3 = startIntersection;\n        long long int endIntersection3\
    \ = endIntersection;\n        if (startIntersection < endIntersection2) {\n  \
    \          startIntersection3 = startIntersection2;\n            endIntersection3\
    \ = endIntersection2;\n        }\n        if (startIntersection2 < endIntersection3)\
    \ {\n            startIntersection3 = startIntersection2;\n            endIntersection3\
    \ = endIntersection2;\n        }\n        if (startIntersection3 < endIntersection)\
    \ {\n            long long int startIntersection4 = startIntersection3;\n    \
    \        long long int endIntersection4 = endIntersection3;\n            if (startIntersection3\
    \ < endIntersection2) {\n                startIntersection4 = startIntersection2;\n\
    \                endIntersection4 = endIntersection2;\n            }\n       \
    \     if (startIntersection2 < endIntersection4) {\n                startIntersection4\
    \ = startIntersection2;\n                endIntersection4 = endIntersection2;\n\
    \            }\n            if (startIntersection4 < endIntersection) {\n    \
    \            long long int startIntersection5 = startIntersection4;\n        \
    \        long long int endIntersection5 = endIntersection4;\n                if\
    \ (startIntersection4 < endIntersection2) {\n                    startIntersection5\
    \ = startIntersection2;\n                    endIntersection5 = endIntersection2;\n\
    \                }\n                if (startIntersection2 < endIntersection5)\
    \ {\n                    startIntersection5 = startIntersection2;\n          \
    \          endIntersection5 = endIntersection2;\n                }\n         \
    \       if (startIntersection5 < endIntersection) {\n                    long\
    \ long ", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long length = end - start;\n    long length2 = end2 - start2;\n  \
    \  if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    long m = length / length2;\n    long n =\
    \ length2 - m;\n    long sum = 0;\n    for (int i = 0; i < m; i++) {\n       \
    \ sum += (start + i) * (end2 + i);\n    }\n    if (sum % length2 == 0) {\n   \
    \     return \"YES\";\n    }\n    return \"NO\";", "    long long int start1 =\
    \ std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int startIntersection = start1;\n   \
    \ long long int endIntersection = end1;\n    long long int startIntersection2\
    \ = start2;\n    long long int endIntersection2 = end2;\n    long long int startIntersection3\
    \ = start1;\n    long long int endIntersection3 = end1;\n    long long int startIntersection4\
    \ = start2;\n    long long int endIntersection4 = end2;\n    long long int startIntersection5\
    \ = start1;\n    long long int endIntersection5 = end1;\n    long long int startIntersection6\
    \ = start2;\n    long long int endIntersection6 = end2;\n    long long int startIntersection7\
    \ = start1;\n    long long int endIntersection7 = end1;\n    long long int startIntersection8\
    \ = start2;\n    long long int endIntersection8 = end2;\n    long long int startIntersection9\
    \ = start1;\n    long long int endIntersection9 = end1;\n    long long int startIntersection10\
    \ = start2;\n    long long int endIntersection10 = end2;\n    long long int startIntersection11\
    \ = start1;\n    long long int endIntersection11 = end1;\n    long long int startIntersection12\
    \ = start2;\n    long long int endIntersection12 = end2;\n    long long int startIntersection13\
    \ = start1;\n    long long int endIntersection13 = end1;\n    long long int startIntersection14\
    \ = start2;\n    long long int endIntersection14 = end2;\n    long long int startIntersection15\
    \ = start1;\n    long long int endIntersection15 = end1;\n    long long int startIntersection16\
    \ = start2;\n    long long int endIntersection16 = end2;\n    long long int startIntersection17\
    \ = start1;\n    long long int endIntersection17 = end1;\n    long long int startIntersection18\
    \ = start2;\n    long long int endIntersection18 = end2;\n    long long int startIntersection19\
    \ = start1;\n    long long int endIntersection19 = end1;\n    long long int startIntersection20\
    \ = start2;\n    long long int endIntersection20 = end2;\n", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    long\
    \ long ans = length * length2;\n    if (ans == 0) {\n        return \"NO\";\n\
    \    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    if (length2\
    \ == 1) {\n        return \"YES\";\n    }\n    long long ans2 = 0;\n    long long\
    \ ans3 = 0;\n    long long ans4 = 0;\n    long long ans5 = 0;\n    long long ans6\
    \ = 0;\n    long long ans7 = 0;\n    long long ans8 = 0;\n    long long ans9 =\
    \ 0;\n    long long ans10 = 0;\n    long long ans11 = 0;\n    long long ans12\
    \ = 0;\n    long long ans13 = 0;\n    long long ans14 = 0;\n    long long ans15\
    \ = 0;\n    long long ans16 = 0;\n    long long ans17 = 0;\n    long long ans18\
    \ = 0;\n    long long ans19 = 0;\n    long long ans20 = 0;\n    long long ans21\
    \ = 0;\n    long long ans22 = 0;\n    long long ans23 = 0;\n    long long ans24\
    \ = 0;\n    long long ans25 = 0;\n    long long ans26 = 0;\n    long long ans27\
    \ = 0;\n    long long ans28 = 0;\n    long long ans29 = 0;\n    long long ans30\
    \ = 0;\n    long long ans31 = 0;\n    long long ans32 = 0;\n    long long ans33\
    \ = 0;\n    long long ans34 = 0;\n    long long ans35 = 0;\n    long long ans36\
    \ = 0;\n    long long ans37 = 0;\n    long long ans38 = 0;\n    long long ans39\
    \ = 0;\n    long long ans40 = 0;\n    long long ans = ans / 2;\n    long long\
    \ ans2 = ans2 / 2;\n    long long ans3 = ans3 / 2;\n    long long ans4 = ans4\
    \ / 2;\n    long long ans5 = ans5 / 2;\n    long long ans6 = ans6 / 2;\n    long\
    \ long ans7 = ans7 / 2;\n    long long ans8 = ans8 / 2;\n    long long ans9 =\
    \ ans9 / 2;\n    long long ans10 = ans10 / 2;\n    long long ans11 = ans11 / 2;\n\
    \    long long ans12 = ans12 / 2;", "    long long int l1 = interval1.get<0>();\n\
    \    long long int l2 = interval2.get<0>();\n    long long int r1 = interval1.get<1>();\n\
    \    long long int r2 = interval2.get<1>();\n    long long int l3 = l1;\n    long\
    \ long int r3 = r1;\n    long long int l4 = l2;\n    long long int r4 = r2;\n\
    \    long long int l5 = l3;\n    long long int r5 = r3;\n    long long int l6\
    \ = l4;\n    long long int r6 = r4;\n    long long int l7 = l5;\n    long long\
    \ int r7 = r5;\n    long long int l8 = l6;\n    long long int r8 = r6;\n    long\
    \ long int l9 = l7;\n    long long int r9 = r7;\n    long long int l10 = l8;\n\
    \    long long int r10 = r8;\n    long long int l11 = l9;\n    long long int r11\
    \ = r9;\n    long long int l12 = l10;\n    long long int r12 = r10;\n    long\
    \ long int l13 = l11;\n    long long int r13 = r11;\n    long long int l14 = l12;\n\
    \    long long int r14 = r12;\n    long long int l15 = l13;\n    long long int\
    \ r15 = r13;\n    long long int l16 = l14;\n    long long int r16 = r14;\n   \
    \ long long int l17 = l15;\n    long long int r17 = r15;\n    long long int l18\
    \ = l16;\n    long long int r18 = r16;\n    long long int l19 = l17;\n    long\
    \ long int r19 = r17;\n    long long int l20 = l18;\n    long long int r20 = r18;\n\
    \    long long int l21 = l21;\n    long long int r21 = r19;\n    long long int\
    \ l22 = l20;\n    long long int r22 = r20;\n    long long int l23 = l22;\n   \
    \ long long int r23 = r21;\n    long long int l24 = l23;\n    long long int r24\
    \ = r22;\n    long long int l25 = l24;\n    long long int r25 = r23;\n    long\
    \ long int l26 = l25;\n    long long int r26 = r24;\n    long long ", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n    long long mid = length / 2;\n    long long mid2 = length2\
    \ / 2;\n    long long mid3 = mid + mid2;\n    long long mid4 = mid3 + mid2;\n\
    \    long long mid5 = mid4 + mid2;\n    long long mid6 = mid5 + mid2;\n    long\
    \ long mid7 = mid6 + mid2;\n    long long mid8 = mid7 + mid2;\n    long long mid9\
    \ = mid8 + mid2;\n    long long mid10 = mid9 + mid2;\n    long long mid11 = mid10\
    \ + mid2;\n    long long mid12 = mid11 + mid2;\n    long long mid13 = mid12 +\
    \ mid2;\n    long long mid14 = mid13 + mid2;\n    long long mid15 = mid14 + mid2;\n\
    \    long long mid16 = mid15 + mid2;\n    long long mid17 = mid16 + mid2;\n  \
    \  long long mid18 = mid17 + mid2;\n    long long mid19 = mid18 + mid2;\n    long\
    \ long mid20 = mid19 + mid2;\n    long long mid21 = mid20 + mid2;\n    long long\
    \ mid22 = mid21 + mid2;\n    long long mid23 = mid22 + mid2;\n    long long mid24\
    \ = mid23 + mid2;\n    long long mid25 = mid24 + mid2;\n    long long mid26 =\
    \ mid25 + mid2;\n    long long mid27 = mid26 + mid2;\n    long long mid28 = mid27\
    \ + mid2;\n    long long mid29 = mid28 + mid2;\n    long long mid30 = mid29 +\
    \ mid2;\n    long long mid31 = mid30 + mid2;\n    long long mid32 = mid31 + mid2;\n\
    \    long long mid33 = mid32 + mid2;\n    long long mid34 = mid33 + mid2;\n  \
    \  long long mid35 = mid34 + mid2;\n    long long mid36 = mid35 + ", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long length\
    \ = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    long\
    \ long prime = 1;\n    for (long long i = 2; i <= length; ++i) {\n        if (length\
    \ % i == 0) {\n            prime = 0;\n            break;\n        }\n    }\n\
    \    if (prime) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ long int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    long\
    \ long int length = end - start;\n    if (length == 1) {\n        return \"NO\"\
    ;\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    long long\
    \ int mid = start + (end - start) / 2;\n    long long int mid2 = mid + 1;\n  \
    \  long long int mid3 = mid + 2;\n    long long int mid4 = mid + 3;\n    long\
    \ long int mid5 = mid + 4;\n    long long int mid6 = mid + 5;\n    long long int\
    \ mid7 = mid + 6;\n    long long int mid8 = mid + 7;\n    long long int mid9 =\
    \ mid + 8;\n    long long int mid10 = mid + 9;\n    long long int mid11 = mid\
    \ + 10;\n    long long int mid12 = mid + 11;\n    long long int mid13 = mid +\
    \ 12;\n    long long int mid14 = mid + 13;\n    long long int mid15 = mid + 14;\n\
    \    long long int mid16 = mid + 15;\n    long long int mid17 = mid + 16;\n  \
    \  long long int mid18 = mid + 17;\n    long long int mid19 = mid + 18;\n    long\
    \ long int mid20 = mid + 19;\n    long long int mid21 = mid + 20;\n    long long\
    \ int mid22 = mid + 21;\n    long long int mid23 = mid + 22;\n    long long int\
    \ mid24 = mid + 23;\n    long long int mid25 = mid + 24;\n    long long int mid26\
    \ = mid + 25;\n    long long int mid27 = mid + 26;\n    long long int mid28 =\
    \ mid + 27;\n    long long int mid29 = mid + 28;\n    long long int mid30 = mid\
    \ + 29;\n    long long int mid31 = mid + 30;\n    long long int mid32 = mid +\
    \ 31;\n    long long int mid33 = mid + 32;\n    long long int mid34 = mid + 33;\n\
    \    long long int mid35 = mid + 34;\n    long long int mid36 = mid + 35;\n  \
    \  long long int mid37 = mid + 36;\n    long long int mid38 = mid + 37;\n    long\
    \ long int mid39 = mid + 38;\n    long long int mid40 = mid + 39;\n    long long\
    \ int mid41 = mid + 40;", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    if (length ==\
    \ 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        start\
    \ = std::get<0>(interval2);\n        end = std::get<1>(interval2);\n        start2\
    \ = std::get<0>(interval1);\n        end2 = std::get<1>(interval1);\n        length\
    \ = end - start;\n        length2 = end2 - start2;\n    }\n    long long int length3\
    \ = length / length2;\n    long long int length4 = length % length2;\n    if (length3\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length4 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (length3 < length4) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    long long int length5 = length3 / length4;\n\
    \    long long int length6 = length3 % length4;\n    if (length5 == 0) {\n   \
    \     return \"NO\";\n    }\n    if (length6 == 0) {\n        return \"YES\";\n\
    \    }\n    if (length5 < length6) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    long long int length7 = length5 / length6;\n\
    \    long long int length8 = length5 % length6;\n    if (length7 == 0) {\n   \
    \     return \"NO\";\n    }\n    if (length8 == 0) {\n        return \"YES\";\n\
    \    }\n    if (length7 < length8) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    long long int length9 = length7 / length8;\n\
    \    long long int length10 = length7 % length8;\n    if (length9 == 0) {\n  \
    \      return \"NO\";\n", "    // Your code here\n    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection = end1\
    \ < end2 ? end1 : end2;\n    long long int endIntersection2 = endIntersection;\n\
    \    long long int startIntersection2 = startIntersection;\n    long long int\
    \ endIntersection3 = endIntersection;\n    long long int startIntersection3 =\
    \ startIntersection;\n    long long int endIntersection4 = endIntersection;\n\
    \    long long int startIntersection4 = startIntersection;\n    long long int\
    \ endIntersection5 = endIntersection;\n    long long int startIntersection5 =\
    \ startIntersection;\n    long long int endIntersection6 = endIntersection;\n\
    \    long long int startIntersection6 = startIntersection;\n    long long int\
    \ endIntersection7 = endIntersection;\n    long long int startIntersection7 =\
    \ startIntersection;\n    long long int endIntersection8 = endIntersection;\n\
    \    long long int startIntersection8 = startIntersection;\n    long long int\
    \ endIntersection9 = endIntersection;\n    long long int startIntersection9 =\
    \ startIntersection;\n    long long int endIntersection10 = endIntersection;\n\
    \    long long int startIntersection10 = startIntersection;\n    long long int\
    \ endIntersection11 = endIntersection;\n    long long int startIntersection11\
    \ = startIntersection;\n    long long int endIntersection12 = endIntersection;\n\
    \    long long int startIntersection12 = startIntersection;\n    long long int\
    \ endIntersection13 = endIntersection;\n    long long int startIntersection13\
    \ = startIntersection;\n    long long int endIntersection14 = endIntersection;\n\
    \    long long int startIntersection14 = startIntersection;\n    long long int\
    \ endIntersection15 = endIntersection;\n    long long int startIntersection15\
    \ = startIntersection;\n    long long int endIntersection16 = endIntersection;\n\
    \    long long int startIntersection16 = startIntersection;\n    long long int\
    \ endIntersection17 = endIntersection;\n    long long int startIntersection",
  "    long long int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    long long int ans = length * length2;\n  \
    \  long long int ans2 = length2 * length;\n    if (ans == ans2) {\n        return\
    \ \"NO\";\n    }\n    if (ans == 0) {\n        return \"YES\";\n    }\n    if\
    \ (ans % 2 == 0) {\n        return \"NO\";\n    }\n    if (ans % 3 == 0) {\n \
    \       return \"YES\";\n    }\n    if (ans % 5 == 0) {\n        return \"YES\"\
    ;\n    }\n    if (ans % 7 == 0) {\n        return \"YES\";\n    }\n    if (ans\
    \ % 11 == 0) {\n        return \"YES\";\n    }\n    if (ans % 13 == 0) {\n   \
    \     return \"YES\";\n    }\n    if (ans % 17 == 0) {\n        return \"YES\"\
    ;\n    }\n    if (ans % 19 == 0) {\n        return \"YES\";\n    }\n    if (ans\
    \ % 23 == 0) {\n        return \"YES\";\n    }\n    if (ans % 29 == 0) {\n   \
    \     return \"YES\";\n    }\n    if (ans % 31 == 0) {\n        return \"YES\"\
    ;\n    }\n    if (ans % 37 == 0) {\n        return \"YES\";\n    }\n    if (ans\
    \ % 41 == 0) {\n        return \"YES\";\n    }\n    if (ans % 43 == 0) {\n   \
    \     return \"YES\";\n    }\n    if (ans % 47 == 0) {\n        return \"YES\"\
    ;\n    }\n    if (ans % 53 == 0) {\n        return \"YES\";\n    }\n    if (ans\
    \ % 59 == 0) {\n        return \"YES\";\n    }\n    if (ans % 61 == 0) {\n   \
    \     return \"YES\";\n    }\n    if (ans % 67 == 0) {\n        return \"YES\"\
    ;\n    }\n    if (ans % 71 == 0) {\n        return \"YES\";\n    }\n    if (ans\
    \ % 73 == 0) {\n        return \"YES\";\n    }\n    if (ans % 79 == 0) {\n   \
    \     return \"YES\";\n    }\n    if (ans % 83 == 0) {\n        return \"YES\"\
    ;\n    }\n    if (ans % 89 == 0) {\n        return \"YES\";\n    }\n    if (ans\
    \ % 97 == 0) {\n        return \"YES\";\n    }\n    if (ans % 101 == 0) {\n  \
    \      return \"YES\";\n    }\n    if (ans % 103 == 0) {\n        return \"YES\"\
    ;\n    }\n    if (ans % 107 == 0) {\n        return \"YES\";\n    }\n    if (ans\
    \ % 109 == 0) {\n        return \"YES\";\n    }\n    if (ans % 113 == 0) {\n \
    \       return \"YES\";\n    }\n    if (", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 > length) {\n       \
    \ return \"NO\";\n    }\n    if (length2 == 0) {\n        return \"YES\";\n  \
    \  }\n    long long ans = length / length2;\n    if (ans == 0) {\n        return\
    \ \"NO\";\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 2) {\n        return \"YES\";\n    }\n    if (ans == 3) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 4) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 5) {\n        return \"YES\";\n    }\n    if (ans == 6) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 7) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 8) {\n        return \"YES\";\n    }\n    if (ans == 9) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 10) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 11) {\n        return \"YES\";\n    }\n    if (ans == 12) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 13) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 14) {\n        return \"YES\";\n    }\n    if (ans == 15)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 16) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 17) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 18) {\n        return \"YES\";\n    }\n    if (ans == 19) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 20) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 21) {\n        return \"YES\";\n    }\n    if (ans == 22) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 23) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 24) {\n        return \"YES\";\n    }\n    if (ans == 25)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 26) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 27) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 28) {\n        return \"YES\";\n    }\n    if (ans == 29) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 30) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 31) {\n        return \"YES\";\n    }\n    if (ans == 32) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 33) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 34) {\n        return \"YES\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = 0;\n   \
    \ if (start <= end) {\n        length = end - start;\n    } else {\n        length\
    \ = end2 - start2;\n    }\n    if (length == 1) {\n        return \"NO\";\n  \
    \  }\n    if (length == 2) {\n        return \"YES\";\n    }\n    long long mid\
    \ = (start + end) / 2;\n    if (mid == start) {\n        return \"YES\";\n   \
    \ }\n    if (mid == end) {\n        return \"NO\";\n    }\n    if (mid % 2 ==\
    \ 0) {\n        if (mid < start) {\n            return \"NO\";\n        }\n  \
    \      if (mid > end) {\n            return \"YES\";\n        }\n        return\
    \ \"YES\";\n    }\n    if (mid < start) {\n        return \"NO\";\n    }\n   \
    \ if (mid > end) {\n        return \"NO\";\n    }\n    if (mid < start2) {\n \
    \       return \"NO\";\n    }\n    if (mid > end2) {\n        return \"NO\";\n\
    \    }\n    if (mid < start) {\n        return \"YES\";\n    }\n    if (mid >\
    \ end) {\n        return \"YES\";\n    }\n    if (mid < start2) {\n        return\
    \ \"YES\";\n    }\n    if (mid > end2) {\n        return \"YES\";\n    }\n   \
    \ if (mid < start) {\n        return \"NO\";\n    }\n    if (mid > end) {\n  \
    \      return \"NO\";\n    }\n    if (mid < start2) {\n        return \"NO\";\n\
    \    }\n    if (mid > end2) {\n        return \"NO\";\n    }\n    if (mid < start)\
    \ {\n        return \"YES\";\n    }\n    if (mid > end) {\n        return \"YES\"\
    ;\n    }\n    if (mid < start2) {\n        return \"YES\";\n    }\n    if (mid\
    \ > end2) {\n        return \"YES\";\n    }\n    if (mid < start) {\n        return\
    \ \"NO\";\n    }\n    if (mid > end) {\n        return \"NO\";\n    }\n    if\
    \ (mid < start2) {\n        return \"NO\";\n    }\n    if (mid > end2) {\n   \
    \     return \"NO\";\n    }\n    if (mid < start) {\n        return \"YES\";\n\
    \    }\n    if (mid > end) {\n        return \"YES\";\n    }\n    if (mid < start2)\
    \ {\n        return \"YES\";\n    }\n    if (mid > end2) {\n        return \"\
    YES\";\n    }\n    if (mid < start) {\n        return \"NO\";\n    }\n    if (mid\
    \ > end) {\n        return \"NO\";\n    }\n    if (", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    long long mid = start + (end - start) / 2;\n    long long mid2 = start2 +\
    \ (end2 - start2) / 2;\n    long long mid3 = mid + (mid2 - mid) / 2;\n    long\
    \ long mid4 = mid2 + (mid3 - mid2) / 2;\n    if (length < mid) {\n        return\
    \ \"NO\";\n    }\n    if (length2 < mid2) {\n        return \"NO\";\n    }\n \
    \   if (length < mid3) {\n        return \"NO\";\n    }\n    if (length2 < mid4)\
    \ {\n        return \"NO\";\n    }\n    if (length == mid) {\n        return \"\
    YES\";\n    }\n    if (length == mid2) {\n        return \"YES\";\n    }\n   \
    \ if (length == mid3) {\n        return \"YES\";\n    }\n    if (length == mid4)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    long\
    \ long length = end - start;\n    if (length == 1) {\n        return \"NO\";\n\
    \    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    long long\
    \ mid = start + (end - start) / 2;\n    if (mid == 1) {\n        return \"NO\"\
    ;\n    }\n    if (mid == 2) {\n        return \"YES\";\n    }\n    long long mid2\
    \ = start + (end - start) / 2;\n    if (mid2 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid2 == 2) {\n        return \"YES\";\n    }\n    long long mid3\
    \ = start + (end - start) / 2;\n    if (mid3 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid3 == 2) {\n        return \"YES\";\n    }\n    long long mid4\
    \ = start + (end - start) / 2;\n    if (mid4 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid4 == 2) {\n        return \"YES\";\n    }\n    long long mid5\
    \ = start + (end - start) / 2;\n    if (mid5 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid5 == 2) {\n        return \"YES\";\n    }\n    long long mid6\
    \ = start + (end - start) / 2;\n    if (mid6 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid6 == 2) {\n        return \"YES\";\n    }\n    long long mid7\
    \ = start + (end - start) / 2;\n    if (mid7 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid7 == 2) {\n        return \"YES\";\n    }\n    long long mid8\
    \ = start + (end - start) / 2;\n    if (mid8 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid8 == 2) {\n        return \"YES\";\n    }\n    long long mid9\
    \ = start + (end - start) / 2;\n    if (mid9 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid9 == 2) {\n        return \"YES\";\n    }\n    long long mid10\
    \ = start + (end - start) / 2;\n    if (mid10 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid10 == 2) {\n        return \"YES\";\n    }\n    long long mid11\
    \ = start + (end - start) / 2;\n    if (mid11 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid11 == 2) {\n        return \"YES\";\n    }\n    long long mid12\
    \ = start + (end - start) / 2;\n    if (mid12 == 1) {\n        return \"NO\";\n\
    \    }\n    if (mid12 == 2) {\n        return \"YES\";\n    }\n    long long mid13\
    \ = start + (end - start) / 2;\n", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > end2) {\n\
    \        return \"NO\";\n    }\n    long long length = 0;\n    long long length2\
    \ = 0;\n    long long length3 = 0;\n    long long length4 = 0;\n    long long\
    \ length5 = 0;\n    long long length6 = 0;\n    long long length7 = 0;\n    long\
    \ long length8 = 0;\n    long long length9 = 0;\n    long long length10 = 0;\n\
    \    long long length11 = 0;\n    long long length12 = 0;\n    long long length13\
    \ = 0;\n    long long length14 = 0;\n    long long length15 = 0;\n    long long\
    \ length16 = 0;\n    long long length17 = 0;\n    long long length18 = 0;\n  \
    \  long long length19 = 0;\n    long long length20 = 0;\n    long long length21\
    \ = 0;\n    long long length22 = 0;\n    long long length23 = 0;\n    long long\
    \ length24 = 0;\n    long long length25 = 0;\n    long long length26 = 0;\n  \
    \  long long length27 = 0;\n    long long length28 = 0;\n    long long length29\
    \ = 0;\n    long long length30 = 0;\n    long long length31 = 0;\n    long long\
    \ length32 = 0;\n    long long length33 = 0;\n    long long length34 = 0;\n  \
    \  long long length35 = 0;\n    long long length36 = 0;\n    long long length37\
    \ = 0;\n    long long length38 = 0;\n    long long length39 = 0;\n    long long\
    \ length40 = 0;\n    long long length41 = 0;\n    long long length42 = 0;\n  \
    \  long long length43 = 0;\n    long long length44 = 0;\n    long long length45\
    \ = 0;\n    long long length46 = 0;\n    long long length47 = 0;\n    long long\
    \ length48 = 0;\n    long long length49 = 0;\n    long long length50 = 0;\n  \
    \  long long length51 = 0;\n    long long length52 = 0;\n    long long length53\
    \ = 0;\n    long long length54 = 0;\n    long long length55 = 0;\n    long long\
    \ length56 = 0;\n    long long length57 = 0;\n    long long length58 = 0;\n  \
    \  long long length59 = 0;\n", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    long long length = end - start;\n    if\
    \ (length == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n   \
    \     return \"YES\";\n    }\n    if (length == 3) {\n        if (start % 2 ==\
    \ 0 && end % 2 == 0) {\n            return \"YES\";\n        }\n        if (start\
    \ % 2 == 1 && end % 2 == 1) {\n            return \"YES\";\n        }\n      \
    \  return \"NO\";\n    }\n    if (length == 5) {\n        if (start % 3 == 0 &&\
    \ end % 3 == 0) {\n            return \"YES\";\n        }\n        if (start %\
    \ 3 == 1 && end % 3 == 1) {\n            return \"YES\";\n        }\n        if\
    \ (start % 3 == 2 && end % 3 == 2) {\n            return \"YES\";\n        }\n\
    \        if (start % 3 == 3 && end % 3 == 3) {\n            return \"YES\";\n\
    \        }\n        if (start % 3 == 4 && end % 3 == 4) {\n            return\
    \ \"YES\";\n        }\n        if (start % 3 == 5 && end % 3 == 5) {\n       \
    \     return \"YES\";\n        }\n        if (start % 3 == 6 && end % 3 == 6)\
    \ {\n            return \"YES\";\n        }\n        if (start % 3 == 7 && end\
    \ % 3 == 7) {\n            return \"YES\";\n        }\n        if (start % 3 ==\
    \ 8 && end % 3 == 8) {\n            return \"YES\";\n        }\n        if (start\
    \ % 3 == 9 && end % 3 == 9) {\n            return \"YES\";\n        }\n      \
    \  if (start % 3 == 10 && end % 3 == 10) {\n            return \"YES\";\n    \
    \    }\n        if (start % 3 == 11 && end % 3 == 11) {\n            return \"\
    YES\";\n        }\n        if (start % 3 == 12 && end % 3 == 12) {\n         \
    \   return \"YES\";\n        }\n        if (start % 3 == 13 && end % 3 == 13)\
    \ {\n            return \"YES\";\n        }\n        if (start % 3 == 14 && end\
    \ % 3 == 14) {\n            return \"YES\";\n        }\n        if (start % 3\
    \ == 15 && end % 3 == 15) {\n            return \"YES\";\n        }\n        if\
    \ (start % 3 == 16 && end % 3 == 16) {\n            return \"YES\";\n        }\n\
    \        if (start % 3 == 17 && end % 3 == 17) {\n            return \"YES\";\n\
    \        }\n        if (start % 3 == 18 && end % 3 == 18) {\n            return\
    \ \"YES\";\n        }\n        if (start % 3 == 19 && end % 3 == 19) {\n     \
    \       return \"YES\";\n        }\n        if (start % 3 == 20 && end % 3 ==\
    \ 20) {\n            return \"YES\";\n        }\n        if (start % 3 == 21 &&\
    \ end % 3 == 21) {\n            return \"YES\";\n        }\n        if (start\
    \ % ", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n    long long mid = (start + end) / 2;\n    long long mid2 =\
    \ start2 + end2;\n    long long mid3 = mid * mid;\n    long long mid4 = mid2 *\
    \ mid2;\n    long long mid5 = mid3 * mid3;\n    long long mid6 = mid4 * mid4;\n\
    \    long long mid7 = mid5 * mid5;\n    long long mid8 = mid6 * mid6;\n    long\
    \ long mid9 = mid7 * mid7;\n    long long mid10 = mid8 * mid8;\n    long long\
    \ mid11 = mid9 * mid9;\n    long long mid12 = mid10 * mid10;\n    long long mid13\
    \ = mid11 * mid11;\n    long long mid14 = mid12 * mid12;\n    long long mid15\
    \ = mid13 * mid13;\n    long long mid16 = mid14 * mid14;\n    long long mid17\
    \ = mid15 * mid15;\n    long long mid18 = mid16 * mid16;\n    long long mid19\
    \ = mid17 * mid17;\n    long long mid20 = mid18 * mid18;\n    long long mid21\
    \ = mid19 * mid19;\n    long long mid22 = mid20 * mid20;\n    long long mid23\
    \ = mid21 * mid21;\n    long long mid24 = mid22 * mid22;\n    long long mid25\
    \ = mid23 * mid23;\n    long long mid26 = mid24 * mid24;\n    long long mid27\
    \ = mid25 * mid25;\n    long long mid28 = mid26 * mid26;\n    long long mid29\
    \ = mid27 * mid27;\n    long long mid30 = mid28 * mid28;\n    long long mid31\
    \ = mid29 * mid29;\n    long long mid32 = mid30 * mid30;\n    long long mid33\
    \ = mid31 * mid31;\n    long long mid34 = mid32 * mid32;\n    long long mid35\
    \ = mid33", "    long long start = std::get<0>(interval1);\n    long long end\
    \ = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = 0;\n\
    \    long long length2 = 0;\n    while (start <= end) {\n        while (start2\
    \ <= end2) {\n            if (start == start2) {\n                length++;\n\
    \                start2++;\n            }\n            if (start2 == end2) {\n\
    \                length2++;\n                start2++;\n            }\n      \
    \      start2++;\n        }\n        start++;\n        start2++;\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    return \"NO\";",
  "    // Write your code here\n    long long int start1 = interval1.get<0>();\n \
    \   long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1;\n    long long int endIntersection = end1;\n    long long int startIntersection2\
    \ = start2;\n    long long int endIntersection2 = end2;\n    long long int startIntersection3\
    \ = startIntersection;\n    long long int endIntersection3 = endIntersection;\n\
    \    long long int startIntersection4 = startIntersection2;\n    long long int\
    \ endIntersection4 = endIntersection2;\n    long long int startIntersection5 =\
    \ startIntersection3;\n    long long int endIntersection5 = endIntersection3;\n\
    \    long long int startIntersection6 = startIntersection4;\n    long long int\
    \ endIntersection6 = endIntersection4;\n    long long int startIntersection7 =\
    \ startIntersection5;\n    long long int endIntersection7 = endIntersection5;\n\
    \    long long int startIntersection8 = startIntersection6;\n    long long int\
    \ endIntersection8 = endIntersection6;\n    long long int startIntersection9 =\
    \ startIntersection7;\n    long long int endIntersection9 = endIntersection7;\n\
    \    long long int startIntersection10 = startIntersection8;\n    long long int\
    \ endIntersection10 = endIntersection8;\n    long long int startIntersection11\
    \ = startIntersection9;\n    long long int endIntersection11 = endIntersection9;\n\
    \    long long int startIntersection12 = startIntersection10;\n    long long int\
    \ endIntersection12 = endIntersection10;\n    long long int startIntersection13\
    \ = startIntersection11;\n    long long int endIntersection13 = endIntersection11;\n\
    \    long long int startIntersection14 = startIntersection12;\n    long long int\
    \ endIntersection14 = endIntersection12;\n    long long int startIntersection15\
    \ = startIntersection13;\n    long long int endIntersection15 = endIntersection13;\n\
    \    long long int startIntersection16 = startIntersection14;\n    long long int\
    \ endIntersection16 = endIntersection14;\n    long long int startIntersection17\
    \ = startIntersection15;\n    long long int endIntersection17 = endIntersection15;\n\
    \    long long int startIntersection18 = startInter", "    // Your code here\n\
    \    long long int a = interval1.get<0>(), b = interval1.get<1>();\n    long long\
    \ int c = interval2.get<0>(), d = interval2.get<1>();\n    if (a > b) std::swap(a,\
    \ b);\n    if (c > d) std::swap(c, d);\n    if (a > c) std::swap(a, b);\n    if\
    \ (b > d) std::swap(b, d);\n    long long int a1 = a - 1, b1 = b - 1;\n    long\
    \ long int c1 = c - 1, d1 = d - 1;\n    long long int a2 = a - 1, b2 = b - 1;\n\
    \    long long int c2 = c - 1, d2 = d - 1;\n    long long int a3 = a - 1, b3 =\
    \ b - 1;\n    long long int c3 = c - 1, d3 = d - 1;\n    long long int a4 = a\
    \ - 1, b4 = b - 1;\n    long long int c4 = c - 1, d4 = d - 1;\n    long long int\
    \ a5 = a - 1, b5 = b - 1;\n    long long int c5 = c - 1, d5 = d - 1;\n    long\
    \ long int a6 = a - 1, b6 = b - 1;\n    long long int c6 = c - 1, d6 = d - 1;\n\
    \    long long int a7 = a - 1, b7 = b - 1;\n    long long int c7 = c - 1, d7 =\
    \ d - 1;\n    long long int a8 = a - 1, b8 = b - 1;\n    long long int c8 = c\
    \ - 1, d8 = d - 1;\n    long long int a9 = a - 1, b9 = b - 1;\n    long long int\
    \ c9 = c - 1, d9 = d - 1;\n    long long int a10 = a - 1, b10 = b - 1;\n    long\
    \ long int c10 = c - 1, d10 = d - 1;\n    long long int a11 = a - 1, b11 = b -\
    \ 1;\n    long long int c11 = c - 1, d11 = d - 1;\n    long long int a12 = a -\
    \ 1, b12 = b - 1;\n    long long int c12 = c - 1, d12 = d - 1;\n    long long\
    \ int a13 = a - 1, b13 = b - 1;\n    long long int c13 = c - 1, d13 = d - 1;\n\
    \    long long int a14 = a - 1, b14 = b - 1;\n    long long int c14 = c - 1, d14\
    \ = d - 1;\n    long long int a15 = a - 1, b15 = b - 1;\n    long long int c15\
    \ = c - 1, d15 = d - 1;\n    long long int a16 = a - 1, b16 = b - 1;\n    long ",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long inter = end - start;\n    long long inter2 = end2 - start2;\n\
    \    if (inter > inter2) {\n        return \"NO\";\n    }\n    long long ans =\
    \ 0;\n    for (long long i = start; i <= end; i++) {\n        for (long long j\
    \ = start2; j <= end2; j++) {\n            if (i == j) continue;\n           \
    \ if (i % j == 0) {\n                ans += 1;\n                break;\n     \
    \       }\n        }\n    }\n    if (ans == inter) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    long long length = end - start;\n    if\
    \ (length < 2) {\n        return \"NO\";\n    }\n    long long ans = 1;\n    for\
    \ (long long i = 3; i <= length; i += 2) {\n        if (length % i == 0) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    if (ans == 1)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    long length = end - start;\n    if (length == 1) {\n   \
    \     return \"NO\";\n    }\n    long length2 = end2 - start2;\n    if (length2\
    \ == 1) {\n        return \"NO\";\n    }\n    long length3 = length * length2;\n\
    \    long length4 = length2 * length;\n    long length5 = length3 * length;\n\
    \    long length6 = length3 * length2;\n    long length7 = length4 * length;\n\
    \    long length8 = length4 * length2;\n    long length9 = length5 * length;\n\
    \    long length10 = length5 * length2;\n    long length11 = length6 * length;\n\
    \    long length12 = length6 * length2;\n    long length13 = length7 * length;\n\
    \    long length14 = length7 * length2;\n    long length15 = length8 * length;\n\
    \    long length16 = length8 * length2;\n    long length17 = length9 * length;\n\
    \    long length18 = length9 * length2;\n    long length19 = length10 * length;\n\
    \    long length20 = length10 * length2;\n    long length21 = length11 * length;\n\
    \    long length22 = length11 * length2;\n    long length23 = length12 * length;\n\
    \    long length24 = length12 * length2;\n    long length25 = length13 * length;\n\
    \    long length26 = length13 * length2;\n    long length27 = length14 * length;\n\
    \    long length28 = length14 * length2;\n    long length29 = length15 * length;\n\
    \    long length30 = length15 * length2;\n    long length31 = length16 * length;\n\
    \    long length32 = length16 * length2;\n    long length33 = length17 * length;\n\
    \    long length34 = length17 * length2;\n    long length35 = length18 * length;\n\
    \    long length36 = length18 * length2;\n    long length37 = length19 * length;\n\
    \    long length38 = length19 * length2;\n    long length39 = length20 * length;\n\
    \    long length40 = length20 * length", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    long long prime = 1;\n    for (long long i = 2; i <= length; ++i)\
    \ {\n        if (length % i == 0) {\n            prime = 0;\n            break;\n\
    \        }\n    }\n    if (prime) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long long start = std::get<0>(interval1);\n    long long end\
    \ = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (start == start2) {\n        if (end\
    \ == end2) {\n            return \"YES\";\n        }\n        if (end > end2)\
    \ {\n            return \"NO\";\n        }\n    }\n    if (end > end2) {\n   \
    \     return \"NO\";\n    }\n    if (end == end2) {\n        if (start > start2)\
    \ {\n            return \"NO\";\n        }\n    }\n    if (end == start2) {\n\
    \        if (start > start2) {\n            return \"NO\";\n        }\n    }\n\
    \    if (end < end2) {\n        return \"NO\";\n    }\n    if (end < start2) {\n\
    \        return \"NO\";\n    }\n    return \"YES\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == length2) {\n      \
    \  return \"NO\";\n    }\n    if (length < length2) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    long long mid = start +\
    \ (end - start) / 2;\n    long long mid2 = start2 + (end2 - start2) / 2;\n   \
    \ if (mid == mid2) {\n        return \"NO\";\n    }\n    if (mid < mid2) {\n \
    \       std::swap(mid, mid2);\n    }\n    if (mid % length == 0) {\n        return\
    \ \"YES\";\n    }\n    if (mid2 % length2 == 0) {\n        return \"YES\";\n \
    \   }\n    if (mid % length2 == 0) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long long start1 = interval1.get<0>();\n    long long end1 =\
    \ interval1.get<1>();\n    long long start2 = interval2.get<0>();\n    long long\
    \ end2 = interval2.get<1>();\n    long long length = end1 - start1;\n    long\
    \ long length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n    \
    \    return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    if (length < length2) {\n        std::swap(start1, start2);\n  \
    \      std::swap(end1, end2);\n    }\n    long long mid1 = start1 + length / 2;\n\
    \    long long mid2 = start2 + length2 / 2;\n    long long mid = mid1;\n    long\
    \ long count = 0;\n    while (count < length && mid < mid2) {\n        if (start1\
    \ <= mid && mid <= end1) {\n            mid = mid1 + 1;\n            count++;\n\
    \        }\n        else if (start2 <= mid && mid <= end2) {\n            mid\
    \ = mid2 + 1;\n            count++;\n        }\n        else if (start1 <= mid\
    \ && mid <= end2) {\n            mid = mid2 + 1;\n            count++;\n     \
    \   }\n        else if (start2 <= mid && mid <= end1) {\n            mid = mid1\
    \ + 1;\n            count++;\n        }\n    }\n    if (count == length) {\n \
    \       return \"YES\";\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    long long mid = (start + end) / 2;\n\
    \    long long mid2 = (start2 + end2) / 2;\n    if (mid == mid2) {\n        return\
    \ \"NO\";\n    }\n    if (mid < mid2) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    long long mid3 = (start + end) / 3;\n\
    \    long long mid4 = (start2 + end2) / 3;\n    if (mid3 == mid4) {\n        return\
    \ \"NO\";\n    }\n    if (mid3 < mid4) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    long long mid5 = (start + end) / 5;\n\
    \    long long mid6 = (start2 + end2) / 5;\n    if (mid5 == mid6) {\n        return\
    \ \"NO\";\n    }\n    if (mid3 < mid5) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get<0>(interval1);\n\
    \        end2 = std::get<1>(interval1);\n        length = end - start;\n     \
    \   length2 = end2 - start2;\n    }\n    long long mid7 = (start + end) / 7;\n\
    \    long long mid8 = (start2 + end2) / 7;\n    if (mid7 == mid8) {\n        return\
    \ \"NO\";\n    }\n    if (mid3 < mid7) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        start2 = std::get", "    long\
    \ long start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n\
    \    long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long startIntersection = start1 < end2 ? start1 : end2;\n    long long\
    \ endIntersection = start1 < end2 ? end1 : start2;\n    long long lengthIntersection\
    \ = endIntersection - startIntersection;\n    long long length1 = end1 - start1;\n\
    \    long long length2 = end2 - start2;\n    long long lengthIntersectionPrime\
    \ = lengthIntersection / 2;\n    long long length1Prime = length1 / 2;\n    long\
    \ long length2Prime = length2 / 2;\n    long long lengthIntersectionPrime2 = lengthIntersectionPrime\
    \ * lengthIntersectionPrime;\n    long long length1Prime2 = length1Prime * length1Prime;\n\
    \    long long length2Prime2 = length2Prime * length2Prime;\n    long long lengthIntersectionPrime3\
    \ = lengthIntersectionPrime2 * lengthIntersectionPrime2;\n    long long length1Prime3\
    \ = length1Prime2 * length1Prime2;\n    long long length2Prime3 = length2Prime2\
    \ * length2Prime2;\n    long long lengthIntersectionPrime4 = lengthIntersectionPrime3\
    \ * lengthIntersectionPrime3;\n    long long length1Prime4 = length1Prime3 * length1Prime3;\n\
    \    long long length2Prime4 = length2Prime3 * length2Prime3;\n    long long lengthIntersectionPrime5\
    \ = lengthIntersectionPrime4 * lengthIntersectionPrime4;\n    long long length1Prime5\
    \ = length1Prime4 * length1Prime4;\n    long long length2Prime5 = length2Prime4\
    \ * length2Prime4;\n    long long lengthIntersectionPrime6 = lengthIntersectionPrime5\
    \ * lengthIntersectionPrime5;\n    long long length1Prime6 = length1Prime5 * length1Prime5;\n\
    \    long long length2Prime6 = length2Prime5 * length2Prime5;\n    long long lengthIntersectionPrime7\
    \ = lengthIntersectionPrime6 * lengthIntersectionPrime6;\n    long long length1Prime7\
    \ = length1Prime6 * length1Prime6;\n    long long length2Prime7 = length2Prime6\
    \ * length", "    long long start = std::get<0>(interval1);\n    long long end\
    \ = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    long long ans = length / length2;\n  \
    \  if (ans == 0) {\n        return \"NO\";\n    }\n    if (ans == 1) {\n     \
    \   return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 3) {\n        return \"YES\";\n    }\n    if (ans == 4) {\n\
    \        return \"YES\";\n    }\n    if (ans == 5) {\n        return \"YES\";\n\
    \    }\n    if (ans == 6) {\n        return \"YES\";\n    }\n    if (ans == 7)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 8) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 9) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 10) {\n        return \"YES\";\n    }\n    if (ans == 11) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 12) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 13) {\n        return \"YES\";\n    }\n    if (ans == 14) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 15) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 16) {\n        return \"YES\";\n    }\n    if (ans == 17)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 18) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 19) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 20) {\n        return \"YES\";\n    }\n    if (ans == 21) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 22) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 23) {\n        return \"YES\";\n    }\n    if (ans == 24) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 25) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 26) {\n        return \"YES\";\n    }\n    if (ans == 27)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 28) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 29) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 30) {\n        return \"YES\";\n    }\n    if (ans == 31) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 32) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 33) {\n        return \"YES\";\n    }\n    if (ans == 34) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 35) {\n", "    long long int start1\
    \ = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n    long\
    \ long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end1 : start2;\n    long long int\
    \ lengthIntersection = endIntersection - startIntersection;\n    long long int\
    \ length1 = end1 - start1;\n    long long int length2 = end2 - start2;\n    long\
    \ long int lengthIntersection1 = lengthIntersection / length1;\n    long long\
    \ int lengthIntersection2 = lengthIntersection / length2;\n    long long int lengthIntersection3\
    \ = lengthIntersection1 % length2;\n    long long int lengthIntersection4 = lengthIntersection2\
    \ % length1;\n    long long int lengthIntersection5 = lengthIntersection3 % length1;\n\
    \    long long int lengthIntersection6 = lengthIntersection4 % length2;\n    long\
    \ long int lengthIntersection7 = lengthIntersection5 % length2;\n    long long\
    \ int lengthIntersection8 = lengthIntersection6 % length1;\n    long long int\
    \ lengthIntersection9 = lengthIntersection7 % length1;\n    long long int lengthIntersection10\
    \ = lengthIntersection8 % length2;\n    long long int lengthIntersection11 = lengthIntersection9\
    \ % length2;\n    long long int lengthIntersection12 = lengthIntersection10 %\
    \ length1;\n    long long int lengthIntersection13 = lengthIntersection11 % length1;\n\
    \    long long int lengthIntersection14 = lengthIntersection12 % length2;\n  \
    \  long long int lengthIntersection15 = lengthIntersection13 % length2;\n    long\
    \ long int lengthIntersection16 = lengthIntersection14 % length1;\n    long long\
    \ int lengthIntersection17 = lengthIntersection15 % length1;\n    long long int\
    \ lengthIntersection18 = lengthIntersection16 % length2;\n    long long int lengthIntersection19\
    \ = lengthIntersection17 % length2;\n    long long int lengthIntersection20 =\
    \ lengthIntersection18 % length1;\n    long long int lengthIntersection21 = lengthIntersection19\
    \ % length1;\n    long long int lengthIntersection22 = lengthIntersection20 %\
    \ length2;\n    long long int lengthIntersection23 = lengthIntersection21 % length2;\n\
    \    long long int lengthIntersection24 = ", "    long long int a = interval1.get<0>(),\
    \ b = interval1.get<1>();\n    long long int c = interval2.get<0>(), d = interval2.get<1>();\n\
    \    long long int a_end = a + 1, b_end = b + 1;\n    long long int c_end = c\
    \ + 1, d_end = d + 1;\n    long long int a_start = a - 1, b_start = b - 1;\n \
    \   long long int c_start = c - 1, d_start = d - 1;\n    long long int a_len =\
    \ a_end - a_start + 1;\n    long long int b_len = b_end - b_start + 1;\n    long\
    \ long int c_len = c_end - c_start + 1;\n    long long int d_len = d_end - d_start\
    \ + 1;\n    long long int a_start = a_end - a_start + 1;\n    long long int b_start\
    \ = b_end - b_start + 1;\n    long long int c_start = c_end - c_start + 1;\n \
    \   long long int d_start = d_end - d_start + 1;\n    long long int a_end = a_end\
    \ - a_start + 1;\n    long long int b_end = b_end - b_start + 1;\n    long long\
    \ int c_end = c_end - c_start + 1;\n    long long int d_end = d_end - d_start\
    \ + 1;\n    long long int a_len = a_end - a_start + 1;\n    long long int b_len\
    \ = b_end - b_start + 1;\n    long long int c_len = c_end - c_start + 1;\n   \
    \ long long int d_len = d_end - d_start + 1;\n    long long int a_start = a_end\
    \ - a_start + 1;\n    long long int b_start = b_end - b_start + 1;\n    long long\
    \ int c_start = c_end - c_start + 1;\n    long long int d_start = d_end - d_start\
    \ + 1;\n    long long int a_end = a_end - a_start + 1;\n    long long int b_end\
    \ = b_end - b_start + 1;\n    long long int c_end = c_end - c_start + 1;\n   \
    \ long long int d_end = d_end - d_start + 1;\n    long long int a_len = a_end\
    \ - a_start + 1;\n    long long int b_len = b_end - b_start + 1;\n    long long\
    \ int c_len = c_end - c_start + 1;\n    long long int d_len = d_end - d_start\
    \ + 1;\n    long long int a_start = a_end - a_start + 1;\n    long long int b_start\
    \ = b_end - b_start + 1;\n    long long int c_start = c_end - c_start + 1;\n \
    \   long long int d_start = d_end - d_start + 1;\n    long long int a_end = a_end\
    \ - a_start + 1;\n    long long int b_end = b_end - b_start + 1;\n    long long\
    \ int c_end = c_end - c_start + 1;", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection = start1\
    \ < end2 ? end2 : start1;\n    long long int endIntersection2 = end1 < start2\
    \ ? end1 : start2;\n    long long int startIntersection2 = start2 < endIntersection\
    \ ? start2 : endIntersection;\n    long long int endIntersection2 = end2 < startIntersection\
    \ ? end2 : startIntersection;\n    long long int startIntersection3 = start2 <\
    \ endIntersection2 ? start2 : endIntersection2;\n    long long int endIntersection3\
    \ = end2 < startIntersection2 ? end2 : startIntersection2;\n    long long int\
    \ startIntersection4 = start3 < endIntersection3 ? start3 : endIntersection3;\n\
    \    long long int endIntersection4 = end3 < startIntersection3 ? end3 : startIntersection3;\n\
    \    long long int startIntersection5 = start3 < endIntersection4 ? start3 : endIntersection4;\n\
    \    long long int endIntersection5 = end3 < startIntersection4 ? end3 : startIntersection4;\n\
    \    long long int startIntersection6 = start4 < endIntersection5 ? start4 : endIntersection5;\n\
    \    long long int endIntersection6 = end4 < startIntersection5 ? end4 : startIntersection5;\n\
    \    long long int startIntersection7 = start4 < endIntersection6 ? start4 : endIntersection6;\n\
    \    long long int endIntersection7 = end4 < startIntersection6 ? end4 : startIntersection6;\n\
    \    long long int startIntersection8 = start5 < endIntersection7 ? start5 : endIntersection7;\n\
    \    long long int endIntersection8 = end5 < startIntersection7 ? end5 : startIntersection7;\n\
    \    long long int startIntersection9 = start5 < endIntersection8 ? start5 : endIntersection8;\n\
    \    long long int endIntersection9 = end5 < startIntersection8 ? end5 : startIntersection8;\n\
    \    long long int startIntersection10 = start6 < endIntersection9 ? start6 :\
    \ endIntersection9;\n    long long int endIntersection10 = end6 < start", "  \
    \  long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long length = end - start;\n    long length2 = end2 - start2;\n  \
    \  if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    long mid = start + (length / 2);\n    long\
    \ mid2 = start2 + (length2 / 2);\n    long mid3 = mid + 1;\n    long mid4 = mid2\
    \ + 1;\n    long mid5 = mid3 + 1;\n    long mid6 = mid4 + 1;\n    long mid7 =\
    \ mid5 + 1;\n    long mid8 = mid6 + 1;\n    long mid9 = mid7 + 1;\n    long mid10\
    \ = mid8 + 1;\n    long mid11 = mid9 + 1;\n    long mid12 = mid10 + 1;\n    long\
    \ mid13 = mid11 + 1;\n    long mid14 = mid12 + 1;\n    long mid15 = mid13 + 1;\n\
    \    long mid16 = mid14 + 1;\n    long mid17 = mid15 + 1;\n    long mid18 = mid16\
    \ + 1;\n    long mid19 = mid17 + 1;\n    long mid20 = mid18 + 1;\n    long mid21\
    \ = mid19 + 1;\n    long mid22 = mid20 + 1;\n    long mid23 = mid21 + 1;\n   \
    \ long mid24 = mid22 + 1;\n    long mid25 = mid23 + 1;\n    long mid26 = mid24\
    \ + 1;\n    long mid27 = mid25 + 1;\n    long mid28 = mid26 + 1;\n    long mid29\
    \ = mid27 + 1;\n    long mid30 = mid28 + 1;\n    long mid31 = mid29 + 1;\n   \
    \ long mid32 = mid30 + 1;\n    long mid33 = mid31 + 1;\n    long mid34 = mid32\
    \ + 1;\n    long mid35 = mid33 + 1;\n    long mid36 = mid34 + 1;\n    long mid37\
    \ = mid35 + 1;\n    long mid38 = mid36 + 1;\n    long mid39 = mid37 + 1;\n   \
    \ long mid40 = mid38 + 1;\n    long mid41 = mid39 + 1;\n    long mid42 = mid40\
    \ + 1;\n    long mid43 = mid41 + 1;\n    long mid44 = ", "    long long int l1\
    \ = std::get<0>(interval1);\n    long long int l2 = std::get<0>(interval2);\n\
    \    long long int r1 = std::get<1>(interval1);\n    long long int r2 = std::get<1>(interval2);\n\
    \    long long int l3 = l1 + l2;\n    long long int r3 = r1 + r2;\n    long long\
    \ int l4 = l3 - r3;\n    if (l4 > 1) {\n        return \"NO\";\n    }\n    if\
    \ (l4 == 1) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int start = std::min(start1, start2);\n    long long int end =\
    \ std::max(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 0) return \"NO\";\n    long long int start1End = start1 + end1;\n    long\
    \ long int start2End = start2 + end2;\n    long long int start1End2 = start1End\
    \ + start2;\n    long long int start2End2 = start2End + start2;\n    long long\
    \ int start1End2End = start1End2 + start2End2;\n    long long int start2End2End\
    \ = start2End2 + start2End2;\n    long long int start1End2EndEnd = start1End2End\
    \ + start2End2End;\n    long long int start2End2EndEnd = start2End2End + start2End2End;\n\
    \    long long int start1End2EndEndEnd = start1End2EndEnd + start2End2EndEnd;\n\
    \    long long int start2End2EndEndEnd = start2End2EndEnd + start2End2EndEnd;\n\
    \    long long int start1End2EndEndEndEnd = start1End2EndEndEnd + start2End2EndEndEnd;\n\
    \    long long int start2End2EndEndEndEnd = start2End2EndEndEnd + start2End2EndEndEnd;\n\
    \    long long int start1End2EndEndEndEndEnd = start1End2EndEndEndEndEnd + start2End2EndEndEndEnd;\n\
    \    long long int start2End2EndEndEndEndEnd = start2End2EndEndEndEndEnd + start2End2EndEndEndEndEnd;\n\
    \    long long int start1End2EndEndEndEndEndEnd = start1End2EndEndEndEndEndEnd\
    \ + start2End2EndEndEndEndEndEnd;\n    long long int start2End2EndEndEndEndEndEnd\
    \ = start2End2EndEndEndEndEndEnd + start2End2EndEndEndEndEndEnd;\n    long long\
    \ int start1End2EndEndEndEndEndEndEnd = start1End2EndEndEndEndEndEndEndEnd + start2End2",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    long long mid = (start\
    \ + end) / 2;\n    long long mid2 = (start2 + end2) / 2;\n    if (mid == mid2)\
    \ {\n        return \"YES\";\n    }\n    if (mid * mid2 == length * length2) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (start == start2) {\n        if (end\
    \ == end2) {\n            return \"YES\";\n        }\n        return \"NO\";\n\
    \    }\n    long long mid = (start + end) / 2;\n    if (mid == start2) {\n   \
    \     return \"YES\";\n    }\n    if (mid == end2) {\n        return \"YES\";\n\
    \    }\n    if (mid % 2 == 0) {\n        return \"NO\";\n    }\n    long long\
    \ mid2 = mid / 2;\n    if (mid2 == start2) {\n        return \"YES\";\n    }\n\
    \    if (mid2 == end2) {\n        return \"YES\";\n    }\n    if (mid2 % 2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    long long mid3 = mid2 / 2;\n    if\
    \ (mid3 == start2) {\n        return \"YES\";\n    }\n    if (mid3 == end2) {\n\
    \        return \"YES\";\n    }\n    if (mid3 % 2 == 0) {\n        return \"NO\"\
    ;\n    }\n    long long mid4 = mid3 / 2;\n    if (mid4 == start2) {\n        return\
    \ \"YES\";\n    }\n    if (mid4 == end2) {\n        return \"YES\";\n    }\n \
    \   if (mid4 % 2 == 0) {\n        return \"NO\";\n    }\n    long long mid5 =\
    \ mid4 / 2;\n    if (mid5 == start2) {\n        return \"YES\";\n    }\n    if\
    \ (mid5 == end2) {\n        return \"YES\";\n    }\n    if (mid5 % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    long long mid6 = mid5 / 2;\n    if (mid6 ==\
    \ start2) {\n        return \"YES\";\n    }\n    if (mid6 == end2) {\n       \
    \ return \"YES\";\n    }\n    if (mid6 % 2 == 0) {\n        return \"NO\";\n \
    \   }\n    long long mid7 = mid6 / 2;\n    if (mid7 == start2) {\n        return\
    \ \"YES\";\n    }\n    if (mid7 == end2) {\n        return \"YES\";\n    }\n \
    \   if (mid7 % 2 == 0) {\n        return \"NO\";\n    }\n    long long mid8 =\
    \ mid7 / 2;\n    if (mid8 == start2) {\n        return \"YES\";\n    }\n    if\
    \ (mid8 == end2) {\n        return \"YES\";\n    }\n    if (mid8 % 2 == 0) {\n\
    \        return \"NO\";\n    }", "    long start = std::get<0>(interval1);\n \
    \   long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n    long max\
    \ = (length < length2) ? length : length2;\n    long min = (length < length2)\
    \ ? length2 : length;\n    long mid = max / 2;\n    long mid2 = max2 / 2;\n  \
    \  long count = 0;\n    for (long i = min; i <= max; i++) {\n        for (long\
    \ j = min2; j <= max2; j++) {\n            if (i == j && i != 0) {\n         \
    \       count++;\n            }\n            if (i == j && i == 0) {\n       \
    \         count++;\n            }\n            if (i == j && i != 0) {\n     \
    \           count++;\n            }\n        }\n    }\n    if (count == 1) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == 1) {\n        if (length2 == 1) {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    long mid\
    \ = (start + end) / 2;\n    long mid2 = (start2 + end2) / 2;\n    if (mid == mid2)\
    \ {\n        return \"NO\";\n    }\n    if (mid * mid2 == length * length2) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2 &&\
    \ end > end2) {\n        return \"NO\";\n    }\n    if (start > start2 && end\
    \ < end2) {\n        return \"NO\";\n    }\n    if (start < start2 && end > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start < start2 && end < end2) {\n\
    \        return \"YES\";\n    }\n    if (start == start2 && end == end2) {\n \
    \       return \"YES\";\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    if (start == start2) {\n        if (end == end2) {\n   \
    \         return \"YES\";\n        }\n        return \"NO\";\n    }\n    if (end\
    \ == end2) {\n        return \"NO\";\n    }\n    long mid = (start + end) / 2;\n\
    \    if (mid == start2) {\n        return \"YES\";\n    }\n    if (mid == end2)\
    \ {\n        return \"YES\";\n    }\n    if (mid % 2 == 0) {\n        return \"\
    NO\";\n    }\n    long mid2 = mid / 2;\n    if (mid2 == start2) {\n        return\
    \ \"YES\";\n    }\n    if (mid2 == end2) {\n        return \"YES\";\n    }\n \
    \   if (mid2 % 2 == 0) {\n        return \"NO\";\n    }\n    long mid3 = mid2\
    \ / 2;\n    if (mid3 == start2) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == end2) {\n        return \"YES\";\n    }\n    if (mid3 % 2 == 0) {\n     \
    \   return \"NO\";\n    }\n    long mid4 = mid3 / 2;\n    if (mid4 == start2)\
    \ {\n        return \"YES\";\n    }\n    if (mid4 == end2) {\n        return \"\
    YES\";\n    }\n    if (mid4 % 2 == 0) {\n        return \"NO\";\n    }\n    long\
    \ mid5 = mid4 / 2;\n    if (mid5 == start2) {\n        return \"YES\";\n    }\n\
    \    if (mid5 == end2) {\n        return \"YES\";\n    }\n    if (mid5 % 2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    long mid6 = mid5 / 2;\n    if (mid6\
    \ == start2) {\n        return \"YES\";\n    }\n    if (mid6 == end2) {\n    \
    \    return \"YES\";\n    }\n    if (mid6 % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    long mid7 = mid6 / 2;\n    if (mid7 == start2) {\n        return \"\
    YES\";\n    }\n    if (mid7 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (mid7 % 2 == 0) {\n        return \"NO\";\n    }\n    long mid8 = mid7 / 2;\n\
    \    if (mid8 == start2) {\n        return \"YES\";\n    }\n    if (mid8 == end2)\
    \ {\n        return \"YES\";\n    }\n    if (mid8 % 2 == 0) {\n        return\
    \ \"NO\";\n    }", "    long long start1 = interval1.get<0>();\n    long long\
    \ end1 = interval1.get<1>();\n    long long start2 = interval2.get<0>();\n   \
    \ long long end2 = interval2.get<1>();\n    if (start1 < end2 && start2 < end1)\
    \ {\n        long long start = std::max(start1, start2);\n        long long end\
    \ = std::min(end1, end2);\n        if (start <= end) {\n            long long\
    \ length = end - start;\n            if (length == 1) {\n                return\
    \ \"YES\";\n            }\n            if (length == 2 && start % 2 == 0 && end\
    \ % 2 == 0) {\n                return \"YES\";\n            }\n            if\
    \ (length == 2 && start % 2 == 1 && end % 2 == 1) {\n                return \"\
    YES\";\n            }\n            if (length == 3 && start % 3 == 0 && end %\
    \ 3 == 0) {\n                return \"YES\";\n            }\n            if (length\
    \ == 3 && start % 3 == 1 && end % 3 == 1) {\n                return \"YES\";\n\
    \            }\n            if (length == 5 && start % 5 == 0 && end % 5 == 0)\
    \ {\n                return \"YES\";\n            }\n            if (length ==\
    \ 5 && start % 5 == 1 && end % 5 == 1) {\n                return \"YES\";\n  \
    \          }\n            if (length == 7 && start % 7 == 0 && end % 7 == 0) {\n\
    \                return \"YES\";\n            }\n            if (length == 7 &&\
    \ start % 7 == 1 && end % 7 == 1) {\n                return \"YES\";\n       \
    \     }\n            if (length == 9 && start % 9 == 0 && end % 9 == 0) {\n  \
    \              return \"YES\";\n            }\n            if (length == 9 &&\
    \ start % 9 == 1 && end % 9 == 1) {\n                return \"YES\";\n       \
    \     }\n            if (length == 11 && start % 11 == 0 && end % 11 == 0) {\n\
    \                return \"YES\";\n            }\n            if (length == 11\
    \ && start % 11 == 1 && end % 11 == 1) {\n                return \"YES\";\n  \
    \          }\n            if (length == 12 && start % 12 == 0 && end % 12 == 0)\
    \ {\n                return \"YES\";\n            }\n            if (length ==\
    \ 12 && start % 12 == 1 && end % 12 == 1) {\n                return \"YES\";\n\
    \            }\n            if (length == 13 && start % 13 == 0 && end % 13 ==\
    \ 0) {\n                return \"YES\";\n            }\n            if (length\
    \ == 13 && start % 13 == 1 && end % 13 == 1) {\n                return \"YES\"\
    ;\n            }\n            if (length == 14 && start % 14 == 0 && end % 14\
    \ == 0) {\n                return \"YES\";\n            }\n            if (length\
    \ == 14 && start % 14 == 1 && end % 14 == 1) {\n                return \"YES\"\
    ;\n            }\n            if (length == 15 && start % 15 == 0 && end % 15\
    \ == 0) {\n                return \"YES\";\n            }\n", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length2 == 1) {\n        return \"NO\";\n    }\n    if (length == 1) {\n  \
    \      return \"YES\";\n    }\n    long long ans = length * length2;\n    long\
    \ long ans2 = 0;\n    for (long long i = 1; i < ans; i++) {\n        ans2 = ans\
    \ * i;\n        if (ans2 % length == 0 && ans2 % length2 == 0) {\n           \
    \ return \"YES\";\n        }\n    }\n    return \"NO\";", "    long long int start\
    \ = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start, end);\n\
    \        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2,\
    \ end2);\n    }\n    long long int start3 = start;\n    long long int end3 = end;\n\
    \    long long int start4 = start2;\n    long long int end4 = end2;\n    long\
    \ long int start5 = start3;\n    long long int end5 = end3;\n    long long int\
    \ start6 = start4;\n    long long int end6 = end4;\n    long long int start7 =\
    \ start5;\n    long long int end7 = end5;\n    long long int start8 = start6;\n\
    \    long long int end8 = end6;\n    long long int start9 = start7;\n    long\
    \ long int end9 = end7;\n    long long int start10 = start8;\n    long long int\
    \ end10 = end8;\n    long long int start11 = start9;\n    long long int end11\
    \ = end9;\n    long long int start12 = start10;\n    long long int end12 = end10;\n\
    \    long long int start13 = start11;\n    long long int end13 = end11;\n    long\
    \ long int start14 = start12;\n    long long int end14 = end12;\n    long long\
    \ int start15 = start13;\n    long long int end15 = end13;\n    long long int\
    \ start16 = start14;\n    long long int end16 = end14;\n    long long int start17\
    \ = start15;\n    long long int end17 = end15;\n    long long int start18 = start16;\n\
    \    long long int end18 = end16;\n    long long int start19 = start17;\n    long\
    \ long int end19 = end17;\n    long long int start20 = start18;\n    long long\
    \ int end20 = end18;\n    long long int start21 = start19;\n    long long int\
    \ end21 = end19;\n    long long int start22 = start20;\n    long long int end22\
    \ = end20;\n    long long int start23 = start21;\n    long long int end23 = end21;\n\
    \    long long int start24 = start22;", "    if (std::get<0>(interval1) < std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    long long start = std::get<0>(interval1);\n    long long end = std::get<0>(interval2);\n\
    \    long long length = end - start;\n    if (length < 2) {\n        return \"\
    NO\";\n    }\n    long long inter = std::get<1>(interval1);\n    long long inter2\
    \ = std::get<1>(interval2);\n    long long inter3 = inter + inter2;\n    long\
    \ long inter4 = inter3 - inter;\n    long long inter5 = inter4 - inter3;\n   \
    \ long long inter6 = inter5 - inter4;\n    long long inter7 = inter6 - inter5;\n\
    \    long long inter8 = inter7 - inter6;\n    long long inter9 = inter8 - inter7;\n\
    \    long long inter10 = inter9 - inter8;\n    long long inter11 = inter10 - inter9;\n\
    \    long long inter12 = inter11 - inter10;\n    long long inter13 = inter12 -\
    \ inter11;\n    long long inter14 = inter13 - inter12;\n    long long inter15\
    \ = inter14 - inter13;\n    long long inter16 = inter15 - inter14;\n    long long\
    \ inter17 = inter16 - inter15;\n    long long inter18 = inter17 - inter16;\n \
    \   long long inter19 = inter18 - inter17;\n    long long inter20 = inter19 -\
    \ inter18;\n    long long inter21 = inter20 - inter19;\n    long long inter22\
    \ = inter21 - inter20;\n    long long inter23 = inter22 - inter21;\n    long long\
    \ inter24 = inter23 - inter22;\n    long long inter25 = inter24 - inter23;\n \
    \   long long inter26 = inter25 - inter24;\n    long long inter27 = inter26 -\
    \ inter25;\n    long long inter28 = inter27 - inter26;\n    long long inter29\
    \ = inter28 - inter27;\n    long long inter30 = inter29 - inter28;\n    long long\
    \ inter31 = inter30 - inter29;\n    long long inter32 = inter31 - inter30;\n \
    \   long long inter33 = inter32 - inter31;\n    long long inter34 = inter33 -\
    \ inter32;\n    ", "    long long start = std::get<0>(interval1);\n    long long\
    \ end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    long long ans = length / length2;\n  \
    \  if (ans == 0) {\n        return \"NO\";\n    }\n    if (ans == 1) {\n     \
    \   return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 3) {\n        return \"YES\";\n    }\n    if (ans == 4) {\n\
    \        return \"YES\";\n    }\n    if (ans == 5) {\n        return \"YES\";\n\
    \    }\n    if (ans == 6) {\n        return \"YES\";\n    }\n    if (ans == 7)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 8) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 9) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 10) {\n        return \"YES\";\n    }\n    if (ans == 11) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 12) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 13) {\n        return \"YES\";\n    }\n    if (ans == 14) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 15) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 16) {\n        return \"YES\";\n    }\n    if (ans == 17)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 18) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 19) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 20) {\n        return \"YES\";\n    }\n    if (ans == 21) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 22) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 23) {\n        return \"YES\";\n    }\n    if (ans == 24) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 25) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 26) {\n        return \"YES\";\n    }\n    if (ans == 27)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 28) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 29) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 30) {\n        return \"YES\";\n    }\n    if (ans == 31) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 32) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 33) {\n        return \"YES\";\n    }\n    if (ans == 34) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 35) {\n", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (start == start2) {\n        long long\
    \ length = 0;\n        long long length2 = 0;\n        while (start <= end) {\n\
    \            length++;\n            start += 2;\n        }\n        while (start2\
    \ <= end2) {\n            length2++;\n            start2 += 2;\n        }\n  \
    \      if (length == length2) {\n            return \"YES\";\n        }\n    }\n\
    \    return \"NO\";", "    long long int l1 = interval1.get<0>();\n    long long\
    \ int l2 = interval2.get<0>();\n    long long int r1 = interval1.get<1>();\n \
    \   long long int r2 = interval2.get<1>();\n    long long int l3 = l1;\n    long\
    \ long int r3 = r1;\n    long long int l4 = l2;\n    long long int r4 = r2;\n\
    \    long long int l5 = l3;\n    long long int r5 = r3;\n    long long int l6\
    \ = l4;\n    long long int r6 = r4;\n    long long int l7 = l5;\n    long long\
    \ int r7 = r5;\n    long long int l8 = l6;\n    long long int r8 = r6;\n    long\
    \ long int l9 = l7;\n    long long int r9 = r7;\n    long long int l10 = l8;\n\
    \    long long int r10 = r8;\n    long long int l11 = l9;\n    long long int r11\
    \ = r9;\n    long long int l12 = l10;\n    long long int r12 = r10;\n    long\
    \ long int l13 = l11;\n    long long int r13 = r11;\n    long long int l14 = l12;\n\
    \    long long int r14 = r12;\n    long long int l15 = l13;\n    long long int\
    \ r15 = r13;\n    long long int l16 = l14;\n    long long int r16 = r14;\n   \
    \ long long int l17 = l15;\n    long long int r17 = r15;\n    long long int l18\
    \ = l16;\n    long long int r18 = r16;\n    long long int l19 = l17;\n    long\
    \ long int r19 = r17;\n    long long int l20 = l18;\n    long long int r20 = r18;\n\
    \    long long int l21 = l21;\n    long long int r21 = r19;\n    long long int\
    \ l22 = l20;\n    long long int r22 = r20;\n    long long int l23 = l21;\n   \
    \ long long int r23 = r22;\n    long long int l24 = l22;\n    long long int r24\
    \ = r23;\n    long long int l25 = l24;\n    long long int r25 = r24;\n    long\
    \ long int l26 = l25;\n    long long int r26 = r25;\n    long long int ", "  \
    \  // Write your code here\n    long long start = std::get<0>(interval1);\n  \
    \  long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    long long length = end - start;\n    if\
    \ (length == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n   \
    \     return \"YES\";\n    }\n    if (length == 3) {\n        return \"YES\";\n\
    \    }\n    if (length == 5) {\n        return \"YES\";\n    }\n    if (length\
    \ == 7) {\n        return \"YES\";\n    }\n    if (length == 9) {\n        return\
    \ \"YES\";\n    }\n    if (length == 11) {\n        return \"YES\";\n    }\n \
    \   if (length == 13) {\n        return \"YES\";\n    }\n    if (length == 17)\
    \ {\n        return \"YES\";\n    }\n    if (length == 19) {\n        return \"\
    YES\";\n    }\n    if (length == 23) {\n        return \"YES\";\n    }\n    if\
    \ (length == 29) {\n        return \"YES\";\n    }\n    if (length == 31) {\n\
    \        return \"YES\";\n    }\n    if (length == 37) {\n        return \"YES\"\
    ;\n    }\n    if (length == 43) {\n        return \"YES\";\n    }\n    if (length\
    \ == 59) {\n        return \"YES\";\n    }\n    if (length == 73) {\n        return\
    \ \"YES\";\n    }\n    if (length == 97) {\n        return \"YES\";\n    }\n \
    \   if (length == 117) {\n        return \"YES\";\n    }\n    if (length == 131)\
    \ {\n        return \"YES\";\n    }\n    if (length == 159) {\n        return\
    \ \"YES\";\n    }\n    if (length == 193) {\n        return \"YES\";\n    }\n\
    \    if (length == 229) {\n        return \"YES\";\n    }\n    if (length == 297)\
    \ {\n        return \"YES\";\n    }\n    if (length == 407) {\n        return\
    \ \"YES\";\n    }\n    if (length == 493) {\n        return \"YES\";\n    }\n\
    \    if (length == 597) {\n        return \"YES\";\n    }\n    if (length == 733)\
    \ {\n        return \"YES\";\n    }\n    if (length == 919) {\n        return\
    \ \"YES\";\n    }\n    if (length == 1187) {\n        return \"YES\";\n    }\n\
    \    if (length == 1343) {\n        return \"YES\";\n    }\n    if (length ==\
    \ 1597) {\n        return \"YES\";\n    }\n    if (length == 1933) {\n       \
    \ return \"YES\";\n    }\n    if (length == 2319) {\n        return \"YES\";\n\
    \    }\n    if (length == 2927) {\n        return \"YES\";\n    }\n    if (length\
    \ == 3717) {\n        return \"YES\";\n    }\n    if (length == 4313) {\n    \
    \    return \"YES\";\n    }\n    if (length == 5967) {\n        return \"", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long intersection = end - start;\n    long long intersection2 = end2\
    \ - start2;\n    if (intersection == 0 && intersection2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (intersection == 0 && intersection2 != 0) {\n       \
    \ return \"NO\";\n    }\n    if (intersection != 0 && intersection2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (intersection == 0 && intersection2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    if (intersection != 0 && intersection2\
    \ != 0) {\n        if (intersection % intersection2 == 0) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if (intersection !=\
    \ 0 && intersection2 != 0) {\n        if (intersection % intersection2 != 0) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ (intersection != 0 && intersection2 == 0) {\n        return \"NO\";\n    }\n\
    \    if (intersection != 0 && intersection2 != 0) {\n        if (intersection\
    \ % intersection2 != 0) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (intersection != 0 && intersection2 != 0) {\n       \
    \ if (intersection % intersection2 == 0) {\n            return \"YES\";\n    \
    \    }\n        return \"NO\";\n    }\n    if (intersection != 0 && intersection2\
    \ != 0) {\n        if (intersection % intersection2 != 0) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if (intersection !=\
    \ 0 && intersection2 == 0) {\n        return \"NO\";\n    }\n    if (intersection\
    \ != 0 && intersection2 != 0) {\n        if (intersection % intersection2 != 0)\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if (intersection != 0 && intersection2 != 0) {\n        if (intersection %\
    \ intersection2 == 0) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (intersection != 0 && intersection2 != 0) {\n       \
    \ if (intersection % intersection2 != 0) {\n            return \"YES\";\n    \
    \    }\n        return \"NO\";\n    }\n    if (intersection != 0 && intersection2\
    \ == 0) {\n        return \"NO\";\n    }\n    if (intersection != 0 && intersection2\
    \ != 0) {\n        if (intersection % intersection2 != 0) {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if (intersection !=\
    \ 0 && intersection2 != 0) {\n        if (intersection % intersection2 == 0) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ (intersection != 0 && intersection2 != 0) {\n        if (intersection % intersection2\
    \ != 0) {\n            return \"YES\";\n        }\n        return \"NO\";\n  \
    \  }\n    if (intersection != 0 && intersection2 == 0) {\n        return \"NO\"\
    ;\n    }\n    if (intersection != 0 && intersection2 != 0) {\n        if (intersection\
    \ % intersection2 != 0) {", "    long long start = std::get<0>(interval1);\n \
    \   long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long inter = end - start;\n    if (inter % 2 == 0) {\n\
    \        return \"NO\";\n    }\n    long long prime = std::sqrt(inter);\n    if\
    \ (prime % 2 == 0) {\n        return \"NO\";\n    }\n    long long ans = 1;\n\
    \    for (long long i = 2; i <= prime; i++) {\n        if (inter % i == 0) {\n\
    \            ans = false;\n            break;\n        }\n    }\n    if (ans)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        length = length2;\n    }\n    long long mid = start + (end - start)\
    \ / 2;\n    long long mid2 = start2 + (end2 - start2) / 2;\n    if (mid == mid2)\
    \ {\n        return \"YES\";\n    }\n    if (mid < mid2) {\n        mid = mid2;\n\
    \    }\n    long long mid3 = mid + 1;\n    long long mid4 = mid2 + 1;\n    long\
    \ long mid5 = mid + 2;\n    long long mid6 = mid2 + 2;\n    long long mid7 = mid\
    \ + 3;\n    long long mid8 = mid2 + 3;\n    long long mid9 = mid + 4;\n    long\
    \ long mid10 = mid + 5;\n    long long mid11 = mid + 6;\n    long long mid12 =\
    \ mid + 7;\n    long long mid13 = mid + 8;\n    long long mid14 = mid + 9;\n \
    \   long long mid15 = mid + 10;\n    long long mid16 = mid + 11;\n    long long\
    \ mid17 = mid + 12;\n    long long mid18 = mid + 13;\n    long long mid19 = mid\
    \ + 14;\n    long long mid20 = mid + 15;\n    long long mid21 = mid + 16;\n  \
    \  long long mid22 = mid + 17;\n    long long mid23 = mid + 18;\n    long long\
    \ mid24 = mid + 19;\n    long long mid25 = mid + 20;\n    long long mid26 = mid\
    \ + 21;\n    long long mid27 = mid + 22;\n    long long mid28 = mid + 23;\n  \
    \  long long mid29 = mid + 24;\n    long long mid30 = mid + 25;\n    long long\
    \ mid31 = mid + 26;\n    long long mid32 = mid + 27;\n    long long mid33 = mid\
    \ + 28;\n    long long mid34 = mid + 29;\n    long long mid35 = mid + 30;\n  \
    \  long long mid36 = mid + 31;\n    long long mid37 = mid + 32;\n    long long\
    \ mid38 = mid + 33;\n    long long mid39 = mid + 34;\n    long ", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long inter\
    \ = end - start;\n    if (inter == 0) {\n        return \"NO\";\n    }\n    long\
    \ long prime = 1;\n    for (long long i = 2; i <= inter; ++i) {\n        if (i\
    \ % 2 == 0) {\n            prime = prime * i;\n        }\n    }\n    if (prime\
    \ == inter) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ long int start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::max(start1, start2);\n\
    \    long long int end = std::min(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return \"\
    YES\";\n    long long int mid = start + (end - start) / 2;\n    if (mid % 2 ==\
    \ 0) return \"NO\";\n    if (mid % 3 == 0) return \"YES\";\n    if (mid % 5 ==\
    \ 0) return \"YES\";\n    if (mid % 7 == 0) return \"YES\";\n    if (mid % 11\
    \ == 0) return \"YES\";\n    if (mid % 13 == 0) return \"YES\";\n    if (mid %\
    \ 17 == 0) return \"YES\";\n    if (mid % 19 == 0) return \"YES\";\n    if (mid\
    \ % 23 == 0) return \"YES\";\n    if (mid % 29 == 0) return \"YES\";\n    if (mid\
    \ % 31 == 0) return \"YES\";\n    if (mid % 37 == 0) return \"YES\";\n    if (mid\
    \ % 41 == 0) return \"YES\";\n    if (mid % 43 == 0) return \"YES\";\n    if (mid\
    \ % 47 == 0) return \"YES\";\n    if (mid % 53 == 0) return \"YES\";\n    if (mid\
    \ % 59 == 0) return \"YES\";\n    if (mid % 61 == 0) return \"YES\";\n    if (mid\
    \ % 67 == 0) return \"YES\";\n    if (mid % 71 == 0) return \"YES\";\n    if (mid\
    \ % 73 == 0) return \"YES\";\n    if (mid % 79 == 0) return \"YES\";\n    if (mid\
    \ % 83 == 0) return \"YES\";\n    if (mid % 89 == 0) return \"YES\";\n    if (mid\
    \ % 97 == 0) return \"YES\";\n    if (mid % 101 == 0) return \"YES\";\n    if\
    \ (mid % 107 == 0) return \"YES\";\n    if (mid % 113 == 0) return \"YES\";\n\
    \    if (mid % 119 == 0) return \"YES\";\n    if (mid % 121 == 0) return \"YES\"\
    ;\n    if (mid % 127 == 0) return \"YES\";\n    if (mid % 131 == 0) return \"\
    YES\";\n    if (mid % 137 == 0) return \"YES\";", "    long long int start1 =\
    \ interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n    long\
    \ long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int start = max(start1, start2);\n    long long int end = min(end1,\
    \ end2);\n    long long int length = end - start;\n    if (length == 0)\n    \
    \    return \"NO\";\n    if (length == 1)\n        return \"YES\";\n    long long\
    \ int mid = start + (end - start) / 2;\n    if (mid == start) {\n        if (end1\
    \ < end2)\n            return \"YES\";\n        else\n            return \"NO\"\
    ;\n    }\n    if (mid == end) {\n        if (start1 < start2)\n            return\
    \ \"YES\";\n        else\n            return \"NO\";\n    }\n    if (mid % 2 ==\
    \ 0) {\n        if (end1 < end2)\n            return \"YES\";\n        else\n\
    \            return \"NO\";\n    }\n    if (mid % 2 == 1) {\n        if (start1\
    \ < start2)\n            return \"YES\";\n        else\n            return \"\
    NO\";\n    }\n    if (mid % 3 == 0) {\n        if (end1 < end2)\n            return\
    \ \"YES\";\n        else\n            return \"NO\";\n    }\n    if (mid % 3 ==\
    \ 1) {\n        if (start1 < start2)\n            return \"YES\";\n        else\n\
    \            return \"NO\";\n    }\n    if (mid % 5 == 0) {\n        if (end1\
    \ < end2)\n            return \"YES\";\n        else\n            return \"NO\"\
    ;\n    }\n    if (mid % 5 == 1) {\n        if (start1 < start2)\n            return\
    \ \"YES\";\n        else\n            return \"NO\";\n    }\n    if (mid % 7 ==\
    \ 0) {\n        if (end1 < end2)\n            return \"YES\";\n        else\n\
    \            return \"NO\";\n    }\n    if (mid % 7 == 1) {\n        if (start1\
    \ < start2)\n            return \"YES\";\n        else\n            return \"\
    NO\";\n    }\n    if (mid % 11 == 0) {\n        if (end1 < end2)\n           \
    \ return \"YES\";\n        else\n            return \"NO\";\n    }\n    if (mid\
    \ % 11 == 1) {\n        if (start1 < start2)\n            return \"YES\";\n  \
    \      else\n            return \"NO\";\n    }\n    if (mid % 13 == 0) {\n   \
    \     if (end1 < end2)\n            return \"YES\";\n        else\n          \
    \  return \"NO\";\n    }\n    if (mid % 13 == 1) {\n        if (start1 < start2)\n\
    \            return \"YES\";\n        else\n            return \"NO\";\n    }\n\
    \    if (mid % 17 == 0) {\n        if (end1 < end2)\n            return \"YES\"\
    ;\n        else\n            return \"NO\";\n    }\n    if (mid % 17 == 1) {\n\
    \        if (start1 < start2)\n            return \"YES\";\n        else\n   \
    \         return \"NO", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int start = std::min(start1, start2);\n    long long int end =\
    \ std::max(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 0)\n        return \"NO\";\n    if (length == 1)\n        return \"YES\"\
    ;\n    long long int mid = start + (length / 2);\n    if (mid == start)\n    \
    \    return \"YES\";\n    if (mid == end)\n        return \"NO\";\n    long long\
    \ int mid2 = start + (length / 2);\n    if (mid2 == start)\n        return \"\
    NO\";\n    if (mid2 == end)\n        return \"YES\";\n    if (mid > mid2)\n  \
    \      return \"YES\";\n    return \"NO\";", "    long long start1 = interval1.get<0>();\n\
    \    long long end1 = interval1.get<1>();\n    long long start2 = interval2.get<0>();\n\
    \    long long end2 = interval2.get<1>();\n    long long length = end1 - start1\
    \ + end2 - start2;\n    if (length < 2) {\n        return \"NO\";\n    }\n   \
    \ if (length == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n\
    \        if (start1 < start2) {\n            return \"YES\";\n        }\n    \
    \    if (start1 > start2) {\n            return \"NO\";\n        }\n        if\
    \ (end1 < end2) {\n            return \"YES\";\n        }\n        if (end1 >\
    \ end2) {\n            return \"NO\";\n        }\n        return \"YES\";\n  \
    \  }\n    if (length == 5) {\n        if (start1 < start2) {\n            return\
    \ \"YES\";\n        }\n        if (start1 > start2) {\n            return \"NO\"\
    ;\n        }\n        if (end1 < end2) {\n            return \"YES\";\n      \
    \  }\n        if (end1 > end2) {\n            return \"NO\";\n        }\n    \
    \    if (start1 < end1) {\n            return \"YES\";\n        }\n        if\
    \ (start1 > end1) {\n            return \"NO\";\n        }\n        if (end1 <\
    \ start2) {\n            return \"YES\";\n        }\n        if (end1 > start2)\
    \ {\n            return \"NO\";\n        }\n        return \"YES\";\n    }\n \
    \   if (length == 7) {\n        if (start1 < start2) {\n            return \"\
    YES\";\n        }\n        if (start1 > start2) {\n            return \"NO\";\n\
    \        }\n        if (end1 < end2) {\n            return \"YES\";\n        }\n\
    \        if (end1 > end2) {\n            return \"NO\";\n        }\n        if\
    \ (start1 < end1) {\n            return \"YES\";\n        }\n        if (start1\
    \ > end1) {\n            return \"NO\";\n        }\n        if (end1 < start2)\
    \ {\n            return \"YES\";\n        }\n        if (end1 > start2) {\n  \
    \          return \"NO\";\n        }\n        if (start1 < end2) {\n         \
    \   return \"YES\";\n        }\n        if (start1 > end2) {\n            return\
    \ \"NO\";\n        }\n        if (end1 < end1) {\n            return \"YES\";\n\
    \        }\n        if (end1 > end1) {\n            return \"NO\";\n        }\n\
    \        return \"YES\";\n    }\n    if (length == 9) {\n        if (start1 <\
    \ start2) {\n            return \"YES\";\n        }\n        if (start1 > start2)\
    \ {\n            return \"NO\";\n        }\n        if (end1 < end2) {\n     \
    \       return \"YES\";\n        }\n        if (end1 > end2) {\n            return\
    \ \"NO\";\n        }\n        if (start1 < end1) {\n            return \"YES\"\
    ;\n        }\n        if (start1 > end1) {\n            return \"NO\";\n     \
    \   }\n        if (end1 < start2) {\n            return \"YES\";\n        }\n\
    \        if (end1 > start2) {\n            return \"NO\";\n        }\n       \
    \ if (start1 < end2) {\n            return \"", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length2 > length) {\n        return \"\
    NO\";\n    }\n    if (length2 == length) {\n        return \"YES\";\n    }\n \
    \   long long mid = length / 2;\n    long long mid2 = length2 / 2;\n    long long\
    \ mid3 = mid + mid2;\n    if (mid == mid2) {\n        return \"YES\";\n    }\n\
    \    if (mid > mid2) {\n        return \"NO\";\n    }\n    if (mid < mid2) {\n\
    \        return \"NO\";\n    }\n    if (mid > mid3) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    long long int prime\
    \ = 1;\n    for (long long int i = 2; i <= length; ++i) {\n        if (length\
    \ % i == 0) {\n            prime = 0;\n            break;\n        }\n    }\n\
    \    if (prime) return \"YES\";\n    return \"NO\";", "    long long start1 =\
    \ std::get<0>(interval1);\n    long long end1 = std::get<1>(interval1);\n    long\
    \ long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start1 < end2 && start2 < end1) {\n        long long start = std::max(start1,\
    \ start2);\n        long long end = std::min(end1, end2);\n        long long length\
    \ = end - start;\n        if (length == 1) {\n            return \"NO\";\n   \
    \     }\n        if (length == 2 && std::get<0>(interval1) == std::get<0>(interval2))\
    \ {\n            return \"YES\";\n        }\n        if (length == 2 && std::get<1>(interval1)\
    \ == std::get<1>(interval2)) {\n            return \"YES\";\n        }\n     \
    \   if (length == 2 && std::get<0>(interval1) < std::get<0>(interval2)) {\n  \
    \          return \"YES\";\n        }\n        if (length == 2 && std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n            return \"YES\";\n        }\n      \
    \  if (length == 2 && std::get<0>(interval1) > std::get<0>(interval2)) {\n   \
    \         return \"YES\";\n        }\n        if (length == 2 && std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n            return \"YES\";\n        }\n      \
    \  if (length == 3 && std::get<0>(interval1) == std::get<0>(interval2) && std::get<1>(interval1)\
    \ == std::get<1>(interval2)) {\n            return \"YES\";\n        }\n     \
    \   if (length == 3 && std::get<0>(interval1) < std::get<0>(interval2) && std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n            return \"YES\";\n        }\n      \
    \  if (length == 3 && std::get<0>(interval1) > std::get<0>(interval2) && std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n            return \"YES\";\n        }\n      \
    \  if (length == 3 && std::get<0>(interval1) == std::get<0>(interval2) && std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n            return \"YES\";\n        }\n      \
    \  if (length == 3 && std::get<0>(interval1) < std::get<0>(interval2) && std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n            return \"YES\";\n        }\n      \
    \  if (length == 3 && std::get<0>(interval1) > std::get<0>(interval2) && std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n            return \"", "    long long start =\
    \ std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n    long\
    \ long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    long long m = length\
    \ / length2;\n    long long n = length % length2;\n    long long m2 = length2\
    \ / length2;\n    long long n2 = length2 % length2;\n    long long m3 = m * m;\n\
    \    long long n3 = n * n;\n    long long m4 = m2 * m2;\n    long long n4 = n2\
    \ * n2;\n    long long m5 = m3 * m3;\n    long long n5 = n3 * n3;\n    long long\
    \ m6 = m4 * m4;\n    long long n6 = n4 * n4;\n    long long m7 = m5 * m5;\n  \
    \  long long n7 = n5 * n5;\n    long long m8 = m6 * m6;\n    long long n8 = n6\
    \ * n6;\n    long long m9 = m7 * m7;\n    long long n9 = n7 * n7;\n    long long\
    \ m10 = m8 * m8;\n    long long n10 = n8 * n8;\n    long long m11 = m9 * m9;\n\
    \    long long n11 = n9 * n9;\n    long long m12 = m10 * m10;\n    long long n12\
    \ = n10 * n10;\n    long long m13 = m11 * m11;\n    long long n13 = n11 * n11;\n\
    \    long long m14 = m12 * m12;\n    long long n14 = n12 * n12;\n    long long\
    \ m15 = m13 * m13;\n    long long n15 = n13 * n13;\n    long long m16 = m14 *\
    \ m14;\n    long long n16 = n14 * n14;\n    long long m17 = m15 * m15;\n    long\
    \ long n17 = n15 * n15;\n    long long m18 = m16 * m16;\n    long long n18 = n16\
    \ * n16;\n    long long m19 = m17 * m17;\n    long long n19 = n17 * n17;\n   \
    \ long long m20 = m18 * m18;\n    long long n20 = n18 * n18;", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == length2) {\n        return \"NO\";\n    }\n    if (length <\
    \ length2) {\n        length = length2;\n    }\n    if (length == 2) {\n     \
    \   return \"YES\";\n    }\n    long long mid = start + (end - start) / 2;\n \
    \   long long mid2 = start2 + (end2 - start2) / 2;\n    if (mid == mid2) {\n \
    \       return \"YES\";\n    }\n    if (mid < mid2) {\n        mid = mid2;\n \
    \   }\n    if (mid > mid2) {\n        mid = mid2;\n    }\n    long long mid3 =\
    \ mid + (mid - mid) / 2;\n    long long mid4 = mid2 + (mid2 - mid2) / 2;\n   \
    \ if (mid3 == mid4) {\n        return \"YES\";\n    }\n    if (mid3 > mid4) {\n\
    \        mid3 = mid4;\n    }\n    if (mid3 < mid4) {\n        mid3 = mid4;\n \
    \   }\n    long long mid5 = mid3 + (mid3 - mid3) / 2;\n    long long mid6 = mid4\
    \ + (mid4 - mid4) / 2;\n    if (mid5 == mid6) {\n        return \"YES\";\n   \
    \ }\n    if (mid5 > mid6) {\n        mid5 = mid6;\n    }\n    if (mid5 < mid6)\
    \ {\n        mid5 = mid6;\n    }\n    long long mid7 = mid5 + (mid5 - mid5) /\
    \ 2;\n    long long mid8 = mid6 + (mid6 - mid6) / 2;\n    if (mid7 == mid8) {\n\
    \        return \"YES\";\n    }\n    if (mid7 > mid8) {\n        mid7 = mid8;\n\
    \    }\n    if (mid7 < mid8) {\n        mid7 = mid8;\n    }\n    long long mid9\
    \ = mid7 + (mid7 - mid7) / 2;\n    long long mid10 = mid8 + (mid8 - mid8) / 2;\n\
    \    if (mid9 == mid10) {\n        return \"YES\";\n    }\n    if (mid9 > mid10)\
    \ {\n        mid9 = mid10;\n    }\n    if (mid9 < mid10) {\n        mid9 = mid10;\n\
    \    }\n    long long mid11 = mid9 + (mid9 - mid9) / 2;\n    long long mid12 =\
    \ mid10 + (mid10 - mid10) / 2;\n    if (mid11 == mid12) {\n        return \"",
  "    long long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1;\n    long long int endIntersection\
    \ = end1;\n    long long int startIntersection2 = start2;\n    long long int endIntersection2\
    \ = end2;\n    long long int startIntersection3 = start1;\n    long long int endIntersection3\
    \ = end1;\n    long long int startIntersection4 = start2;\n    long long int endIntersection4\
    \ = end2;\n    long long int startIntersection5 = start1;\n    long long int endIntersection5\
    \ = end1;\n    long long int startIntersection6 = start2;\n    long long int endIntersection6\
    \ = end2;\n    long long int startIntersection7 = start1;\n    long long int endIntersection7\
    \ = end1;\n    long long int startIntersection8 = start2;\n    long long int endIntersection8\
    \ = end2;\n    long long int startIntersection9 = start1;\n    long long int endIntersection9\
    \ = end1;\n    long long int startIntersection10 = start2;\n    long long int\
    \ endIntersection10 = end2;\n    long long int startIntersection11 = start1;\n\
    \    long long int endIntersection11 = end1;\n    long long int startIntersection12\
    \ = start2;\n    long long int endIntersection12 = end2;\n    long long int startIntersection13\
    \ = start1;\n    long long int endIntersection13 = end1;\n    long long int startIntersection14\
    \ = start2;\n    long long int endIntersection14 = end2;\n    long long int startIntersection15\
    \ = start1;\n    long long int endIntersection15 = end1;\n    long long int startIntersection16\
    \ = start2;\n    long long int endIntersection16 = end2;\n    long long int startIntersection17\
    \ = start1;\n    long long int endIntersection17 = end1;\n    long long int startIntersection18\
    \ = start2;\n    long long int endIntersection18 = end2;\n    long long int startIntersection19\
    \ = start1;\n    long long int endIntersection19 = end1;\n    long long int startIntersection20\
    \ = start2;\n    long long int endIntersection20 = end2;\n    long long int ",
  "    long long int l1 = interval1.get<0>();\n    long long int l2 = interval2.get<0>();\n\
    \    long long int r1 = interval1.get<1>();\n    long long int r2 = interval2.get<1>();\n\
    \    long long int l3 = l1;\n    long long int r3 = r1;\n    long long int l4\
    \ = l2;\n    long long int r4 = r2;\n    long long int l5 = l3;\n    long long\
    \ int r5 = r3;\n    long long int l6 = l4;\n    long long int r6 = r4;\n    long\
    \ long int l7 = l5;\n    long long int r7 = r5;\n    long long int l8 = l6;\n\
    \    long long int r8 = r6;\n    long long int l9 = l7;\n    long long int r9\
    \ = r7;\n    long long int l10 = l8;\n    long long int r10 = r8;\n    long long\
    \ int l11 = l9;\n    long long int r11 = r9;\n    long long int l12 = l10;\n \
    \   long long int r12 = r10;\n    long long int l13 = l11;\n    long long int\
    \ r13 = r11;\n    long long int l14 = l12;\n    long long int r14 = r12;\n   \
    \ long long int l15 = l13;\n    long long int r15 = r13;\n    long long int l16\
    \ = l14;\n    long long int r16 = r14;\n    long long int l17 = l15;\n    long\
    \ long int r17 = r15;\n    long long int l18 = l16;\n    long long int r18 = r16;\n\
    \    long long int l19 = l17;\n    long long int r19 = r17;\n    long long int\
    \ l20 = l18;\n    long long int r20 = r18;\n    long long int l21 = l19;\n   \
    \ long long int r21 = r19;\n    long long int l22 = l20;\n    long long int r22\
    \ = r20;\n    long long int l23 = l21;\n    long long int r23 = r21;\n    long\
    \ long int l24 = l22;\n    long long int r24 = r22;\n    long long int l25 = l23;\n\
    \    long long int r25 = r23;\n    long long int l26 = l24;\n    long long int\
    \ r26 = r24;\n    long long ", "    long start = std::get<0>(interval1);\n   \
    \ long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    if (length < length2) {\n        std::swap(length, length2);\n    }\n   \
    \ long mid = length / 2;\n    long mid2 = length2 / 2;\n    long count = 0;\n\
    \    for (long i = start; i <= end; i++) {\n        for (long j = start2; j <=\
    \ end2; j++) {\n            if (i == j && i != mid) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == mid) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    long long ans = 0;\n    for (long long i = 2; i <= length; ++i)\
    \ {\n        if (length % i == 0) {\n            ans += 1;\n        }\n    }\n\
    \    if (ans == 1) {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   long long int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    if (start >= end) {\n        return \"NO\";\n \
    \   }\n    if (start2 >= end2) {\n        return \"NO\";\n    }\n    if (start\
    \ <= start2) {\n        return \"NO\";\n    }\n    if (end <= end2) {\n      \
    \  return \"NO\";\n    }\n    long long int start3 = start;\n    long long int\
    \ end3 = end;\n    long long int start4 = start2;\n    long long int end4 = end2;\n\
    \    long long int start5 = start3;\n    long long int end5 = end3;\n    long\
    \ long int start6 = start4;\n    long long int end6 = end4;\n    long long int\
    \ start7 = start5;\n    long long int end7 = end5;\n    long long int start8 =\
    \ start6;\n    long long int end8 = end6;\n    long long int start9 = start7;\n\
    \    long long int end9 = end7;\n    long long int start10 = start8;\n    long\
    \ long int end10 = end8;\n    long long int start11 = start9;\n    long long int\
    \ end11 = end9;\n    long long int start12 = start10;\n    long long int end12\
    \ = end10;\n    long long int start13 = start11;\n    long long int end13 = end11;\n\
    \    long long int start14 = start12;\n    long long int end14 = end12;\n    long\
    \ long int start15 = start13;\n    long long int end15 = end13;\n    long long\
    \ int start16 = start14;\n    long long int end16 = end14;\n    long long int\
    \ start17 = start15;\n    long long int end17 = end15;\n    long long int start18\
    \ = start16;\n    long long int end18 = end16;\n    long long int start19 = start17;\n\
    \    long long int end19 = end17;\n    long long int start20 = start18;\n    long\
    \ long int end20 = end18;\n    long long int start21 = start19;\n    long long\
    \ int end21 = end19;\n    long long int start22 = start20;\n    long long int\
    \ end22 = end20;\n    long long int start23 = start21;\n    long long int end23\
    \ = end21;\n    long long ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (end < end2) {\n        return \"NO\"\
    ;\n    }\n    long long length = 0;\n    long long length2 = 0;\n    while (start\
    \ <= end) {\n        long long mid = (start + end) / 2;\n        if (mid < start2)\
    \ {\n            end = mid + 1;\n        } else if (mid > end2) {\n          \
    \  start = mid - 1;\n        } else {\n            length++;\n        }\n    }\n\
    \    while (start2 <= end2) {\n        long long mid = (start2 + end2) / 2;\n\
    \        if (mid < start) {\n            end2 = mid + 1;\n        } else if (mid\
    \ > end) {\n            start2 = mid - 1;\n        } else {\n            length2++;\n\
    \        }\n    }\n    if (length == length2) {\n        return \"YES\";\n   \
    \ } else {\n        return \"NO\";\n    }", "    long long start1 = interval1.get<0>();\n\
    \    long long end1 = interval1.get<1>();\n    long long start2 = interval2.get<0>();\n\
    \    long long end2 = interval2.get<1>();\n    long long length = end1 - start1;\n\
    \    if (end2 < start2) length = end2 - start2;\n    if (length == 0) return \"\
    NO\";\n    if (length == 1) return \"YES\";\n    long long mid1 = start1 + length\
    \ / 2;\n    long long mid2 = start2 + length / 2;\n    long long mid = mid1;\n\
    \    while (true) {\n        if (mid * mid > mid1 * mid2) break;\n        if (mid\
    \ * mid < mid1 * mid2) mid++;\n    }\n    if (mid * mid == mid1 * mid2) return\
    \ \"YES\";\n    return \"NO\";", "    long start = std::get<0>(interval1);\n \
    \   long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == length2) {\n        if (length\
    \ == 1) {\n            return \"NO\";\n        } else {\n            return \"\
    YES\";\n        }\n    }\n    if (length < length2) {\n        return \"NO\";\n\
    \    } else {\n        return \"YES\";\n    }", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int start = std::min(start1, start2);\n    long long int end =\
    \ std::max(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n        return\
    \ \"YES\";\n    }\n    long long int mid = start + (end - start) / 2;\n    if\
    \ (mid == start) {\n        return \"NO\";\n    }\n    if (mid == end) {\n   \
    \     return \"YES\";\n    }\n    if (mid % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (mid % 3 == 0) {\n        return \"YES\";\n    }\n    long long\
    \ int a = std::max(start1, start2);\n    long long int b = std::min(end1, end2);\n\
    \    long long int c = std::max(start1, start2);\n    long long int d = std::min(end1,\
    \ end2);\n    long long int length = b - a;\n    if (length == 1) {\n        return\
    \ \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n   \
    \ long long int mid = a + (b - a) / 2;\n    if (mid == a) {\n        return \"\
    NO\";\n    }\n    if (mid == b) {\n        return \"YES\";\n    }\n    if (mid\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    if (mid % 3 == 0) {\n      \
    \  return \"YES\";\n    }\n    long long int a = std::max(start1, start2);\n \
    \   long long int b = std::min(end1, end2);\n    long long int c = std::max(start1,\
    \ start2);\n    long long int d = std::min(end1, end2);\n    long long int length\
    \ = d - c;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    long long int mid = c + (d - c)\
    \ / 2;\n    if (mid == c) {\n        return \"NO\";\n    }\n    if (mid == d)\
    \ {\n        return \"YES\";\n    }\n    if (mid % 2 == 0) {\n        return \"\
    NO\";\n    }\n    if (mid % 3 == 0) {\n        return \"YES\";\n    }\n    long\
    \ long int a = std::max(start1, start2);\n    long long int b = std::min(end1,\
    \ end2);\n    long long int c = std::max(start1, start2);\n    long long int d\
    \ = std::min(end1, end2);\n    long long int length = b - a;\n    if (length == ",
  "    // Write your code here\n    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    long long int\
    \ result = length * length2;\n    long long int result2 = length2 * length;\n\
    \    long long int result3 = length * length2;\n    long long int result4 = length2\
    \ * length;\n    long long int result5 = length * length2;\n    long long int\
    \ result6 = length2 * length;\n    long long int result7 = length * length2;\n\
    \    long long int result8 = length2 * length;\n    long long int result9 = length\
    \ * length2;\n    long long int result10 = length2 * length;\n    long long int\
    \ result11 = length * length2;\n    long long int result12 = length2 * length;\n\
    \    long long int result13 = length * length2;\n    long long int result14 =\
    \ length2 * length;\n    long long int result15 = length * length2;\n    long\
    \ long int result16 = length2 * length;\n    long long int result17 = length *\
    \ length2;\n    long long int result18 = length2 * length;\n    long long int\
    \ result19 = length * length2;\n    long long int result20 = length2 * length;\n\
    \    long long int result21 = length * length2;\n    long long int result22 =\
    \ length2 * length;\n    long long int result23 = length * length2;\n    long\
    \ long int result24 = length2 * length;\n    long long int result25 = length *\
    \ length2;\n    long long int result26 = length2 * length;\n    long long int\
    \ result27 = length * length2;\n    long long int result28 = length2 * length;\n\
    \    long long int result29 = length * length2;\n    long long int result30 =\
    \ length2 * length;\n    long long int result31 = length * length2;\n    long\
    \ long int result32 = length2 * length;\n    long long int result33 = length *\
    \ length2;\n    long long int result34 = length2 * length;\n    long long int\
    \ result35 = length * length2;\n    long long int result36 = length2 * length;\n\
    \    long long int result37 = length * length2;\n    long long int result38 =\
    \ length2 * length;\n    long long int result39 = length * length", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1)\
    \ {\n        return \"YES\";\n    }\n    if (length2 == 1) {\n        return \"\
    YES\";\n    }\n    long long mid = start + (end - start) / 2;\n    long long mid2\
    \ = start2 + (end2 - start2) / 2;\n    if (mid == mid2) {\n        return \"YES\"\
    ;\n    }\n    if (mid > mid2) {\n        return \"NO\";\n    }\n    return \"\
    NO\";", "    long long int l1 = std::get<0>(interval1);\n    long long int l2\
    \ = std::get<0>(interval2);\n    long long int r1 = std::get<1>(interval1);\n\
    \    long long int r2 = std::get<1>(interval2);\n    long long int l3 = l1 + l2;\n\
    \    long long int r3 = r1 + r2;\n    long long int l4 = l3 - r3;\n    long long\
    \ int r4 = r3 - l3;\n    if (l4 >= r4) {\n        return \"NO\";\n    }\n    if\
    \ (l4 <= r4) {\n        return \"YES\";\n    }\n    if (l1 == l2) {\n        return\
    \ \"YES\";\n    }\n    if (l1 == r2) {\n        return \"YES\";\n    }\n    if\
    \ (l2 == r1) {\n        return \"YES\";\n    }\n    if (l3 == l4) {\n        return\
    \ \"YES\";\n    }\n    if (l3 == r4) {\n        return \"YES\";\n    }\n    if\
    \ (l3 == r1) {\n        return \"YES\";\n    }\n    if (l3 == r2) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == r1) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == r2) {\n        return \"YES\";\n    }\n    if (l4 == r3) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == l3) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == r1) {\n        return \"YES\";\n    }\n    if (l4 == r2) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == r3) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == l1) {\n        return \"YES\";\n    }\n    if (l4 == r2) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == r3) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == l2) {\n        return \"YES\";\n    }\n    if (l4 == r1) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == r2) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == r3) {\n        return \"YES\";\n    }\n    if (l4 == l1) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == r2) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == r3) {\n        return \"YES\";\n    }\n    if (l4 == l2) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == r1) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == r2) {\n        return \"YES\";\n    }\n    if (l4 == r3) {\n        return\
    \ \"YES\";\n    }\n    if (l4 == l1) {\n        return \"YES\";\n    }\n    if\
    \ (l4 == r2) {\n        return \"YES", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    if (length ==\
    \ 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        start\
    \ = std::get<0>(interval2);\n        end = std::get<1>(interval2);\n        start2\
    \ = std::get<0>(interval1);\n        end2 = std::get<1>(interval1);\n        length\
    \ = end - start;\n        length2 = end2 - start2;\n    }\n    long long int length3\
    \ = length / length2;\n    if (length3 == 1) {\n        return \"NO\";\n    }\n\
    \    if (length3 == 2) {\n        return \"YES\";\n    }\n    long long int length4\
    \ = length3 / 2;\n    if (length4 != 1) {\n        return \"NO\";\n    }\n   \
    \ long long int length5 = length3 % 2;\n    if (length5 == 0) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    if (length2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        if (start <= end) {\n\
    \            if (start <= start2) {\n                return \"YES\";\n       \
    \     }\n            return \"NO\";\n        }\n        return \"NO\";\n    }\n\
    \    if (start <= end2) {\n        return \"NO\";\n    }\n    return \"YES\";",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long inter\
    \ = end - start;\n    if (inter % 2 == 0) {\n        return \"NO\";\n    }\n \
    \   long long prime = std::sqrt(inter);\n    if (prime < 2) {\n        return\
    \ \"NO\";\n    }\n    long long ans = 1;\n    for (long long i = 3; i <= prime;\
    \ i += 2) {\n        if (inter % i == 0) {\n            ans = 0;\n           \
    \ break;\n        }\n    }\n    if (ans == 1) {\n        return \"YES\";\n   \
    \ }\n    return \"NO\";", "    long long int start1 = interval1.get<0>();\n  \
    \  long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1;\n    long long int endIntersection = end1;\n    long long int startIntersection2\
    \ = start2;\n    long long int endIntersection2 = end2;\n    long long int startIntersection3\
    \ = startIntersection;\n    long long int endIntersection3 = endIntersection;\n\
    \    long long int startIntersection4 = startIntersection2;\n    long long int\
    \ endIntersection4 = endIntersection2;\n    long long int startIntersection5 =\
    \ startIntersection3;\n    long long int endIntersection5 = endIntersection3;\n\
    \    long long int startIntersection6 = startIntersection4;\n    long long int\
    \ endIntersection6 = endIntersection4;\n    long long int startIntersection7 =\
    \ startIntersection5;\n    long long int endIntersection7 = endIntersection5;\n\
    \    long long int startIntersection8 = startIntersection6;\n    long long int\
    \ endIntersection8 = endIntersection6;\n    long long int startIntersection9 =\
    \ startIntersection7;\n    long long int endIntersection9 = endIntersection7;\n\
    \    long long int startIntersection10 = startIntersection8;\n    long long int\
    \ endIntersection10 = endIntersection8;\n    long long int startIntersection11\
    \ = startIntersection9;\n    long long int endIntersection11 = endIntersection9;\n\
    \    long long int startIntersection12 = startIntersection10;\n    long long int\
    \ endIntersection12 = endIntersection10;\n    long long int startIntersection13\
    \ = startIntersection11;\n    long long int endIntersection13 = endIntersection11;\n\
    \    long long int startIntersection14 = startIntersection12;\n    long long int\
    \ endIntersection14 = endIntersection12;\n    long long int startIntersection15\
    \ = startIntersection13;\n    long long int endIntersection15 = endIntersection13;\n\
    \    long long int startIntersection16 = startIntersection14;\n    long long int\
    \ endIntersection16 = endIntersection14;\n    long long int startIntersection17\
    \ = startIntersection15;\n    long long int endIntersection17 = endIntersection15;\n\
    \    long long int startIntersection18 = startIntersection16;\n    long ", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    long\
    \ long ans = length / length2;\n    if (ans == 0) {\n        return \"NO\";\n\
    \    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    if (ans == 2)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 3) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 4) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 5) {\n        return \"YES\";\n    }\n    if (ans == 6) {\n        return \"\
    YES\";\n    }\n    if (ans == 7) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 8) {\n        return \"YES\";\n    }\n    if (ans == 9) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 10) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 11) {\n        return \"YES\";\n    }\n    if (ans == 12) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 13) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 14) {\n        return \"YES\";\n    }\n    if (ans == 15)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 16) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 17) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 18) {\n        return \"YES\";\n    }\n    if (ans == 19) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 20) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 21) {\n        return \"YES\";\n    }\n    if (ans == 22) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 23) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 24) {\n        return \"YES\";\n    }\n    if (ans == 25)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 26) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 27) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 28) {\n        return \"YES\";\n    }\n    if (ans == 29) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 30) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 31) {\n        return \"YES\";\n    }\n    if (ans == 32) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 33) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 34) {\n        return \"YES\";\n    }\n    if (ans == 35)\
    \ {\n", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1)\
    \ {\n        return \"YES\";\n    }\n    if (length2 == 1) {\n        return \"\
    YES\";\n    }\n    long long m = length / length2;\n    long long n = length %\
    \ length2;\n    long long count = 0;\n    for (long long i = start; i <= end;\
    \ i++) {\n        for (long long j = start2; j <= end2; j++) {\n            if\
    \ (i == j) {\n                count++;\n            }\n        }\n    }\n    if\
    \ (count == m) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long length\
    \ = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    long\
    \ long mid = start + (end - start) / 2;\n    if (mid == start) {\n        return\
    \ \"NO\";\n    }\n    if (mid == end) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n  \
    \      return \"YES\";\n    }\n    if (length == 5) {\n        return \"YES\"\
    ;\n    }\n    if (length == 7) {\n        return \"YES\";\n    }\n    if (length\
    \ == 9) {\n        return \"YES\";\n    }\n    if (length == 11) {\n        return\
    \ \"YES\";\n    }\n    if (length == 13) {\n        return \"YES\";\n    }\n \
    \   if (length == 17) {\n        return \"YES\";\n    }\n    if (length == 19)\
    \ {\n        return \"YES\";\n    }\n    if (length == 23) {\n        return \"\
    YES\";\n    }\n    if (length == 29) {\n        return \"YES\";\n    }\n    if\
    \ (length == 31) {\n        return \"YES\";\n    }\n    if (length == 37) {\n\
    \        return \"YES\";\n    }\n    if (length == 43) {\n        return \"YES\"\
    ;\n    }\n    if (length == 49) {\n        return \"YES\";\n    }\n    if (length\
    \ == 53) {\n        return \"YES\";\n    }\n    if (length == 59) {\n        return\
    \ \"YES\";\n    }\n    if (length == 67) {\n        return \"YES\";\n    }\n \
    \   if (length == 73) {\n        return \"YES\";\n    }\n    if (length == 91)\
    \ {\n        return \"YES\";\n    }\n    if (length == 117) {\n        return\
    \ \"YES\";\n    }\n    if (length == 131) {\n        return \"YES\";\n    }\n\
    \    if (length == 137) {\n        return \"YES\";\n    }\n    if (length == 153)\
    \ {\n        return \"YES\";\n    }\n    if (length == 159) {\n        return\
    \ \"YES\";\n    }\n    if (length == 173) {\n        return \"YES\";\n    }\n\
    \    if (length == 179) {\n        return \"YES\";\n    }\n    if (length == 183)\
    \ {\n        return \"YES\";\n    }\n    if (length == 191) {\n        return\
    \ \"YES\";\n    }\n    if (length == 197) {\n        return \"YES\";\n    }\n\
    \    if (length == 203) {\n        return \"YES\";\n    }\n    if (length == 209)\
    \ {\n        return \"YES\";\n    }\n    if (length == 215) {\n        return\
    \ \"YES\";\n    }\n    if (length == 221) {\n", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    long long intersection = end - start;\n\
    \    if (intersection == 0) {\n        return \"NO\";\n    }\n    if (start <=\
    \ end) {\n        long long mid = start + (end - start) / 2;\n        if (mid\
    \ == start || mid == end) {\n            return \"NO\";\n        }\n        if\
    \ (mid % 2 == 0) {\n            long long a = mid - 1;\n            long long\
    \ b = mid + 1;\n            if (a < b) {\n                long long c = a + (b\
    \ - a) / 2;\n                if (c < start && c > end) {\n                   \
    \ return \"YES\";\n                }\n            }\n        }\n    }\n    return\
    \ \"NO\";", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long length = end - start;\n    long length2 = end2 - start2;\n  \
    \  if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    long mid = (start + end) / 2;\n    long mid2\
    \ = (start2 + end2) / 2;\n    long mid3 = mid * mid2;\n    long mid4 = mid3 *\
    \ mid2;\n    long mid5 = mid4 * mid2;\n    long mid6 = mid5 * mid2;\n    long\
    \ mid7 = mid6 * mid2;\n    long mid8 = mid7 * mid2;\n    long mid9 = mid8 * mid2;\n\
    \    long mid10 = mid9 * mid2;\n    long mid11 = mid10 * mid2;\n    long mid12\
    \ = mid11 * mid2;\n    long mid13 = mid12 * mid2;\n    long mid14 = mid13 * mid2;\n\
    \    long mid15 = mid14 * mid2;\n    long mid16 = mid15 * mid2;\n    long mid17\
    \ = mid16 * mid2;\n    long mid18 = mid17 * mid2;\n    long mid19 = mid18 * mid2;\n\
    \    long mid20 = mid19 * mid2;\n    long mid21 = mid20 * mid2;\n    long mid22\
    \ = mid21 * mid2;\n    long mid23 = mid22 * mid2;\n    long mid24 = mid23 * mid2;\n\
    \    long mid25 = mid24 * mid2;\n    long mid26 = mid25 * mid2;\n    long mid27\
    \ = mid26 * mid2;\n    long mid28 = mid27 * mid2;\n    long mid29 = mid28 * mid2;\n\
    \    long mid30 = mid29 * mid2;\n    long mid31 = mid30 * mid2;\n    long mid32\
    \ = mid31 * mid2;\n    long mid33 = mid32 * mid2;\n    long mid34 = mid33 * mid2;\n\
    \    long mid35 = mid34 * mid2;\n    long mid36 = mid35 * mid2;\n    long mid37\
    \ = mid36 * ", "    long long start = std::get<0>(interval1);\n    long long end\
    \ = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    long long ans = length * length2;\n\
    \    if (ans == 0) {\n        return \"NO\";\n    }\n    if (ans == 1) {\n   \
    \     return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\";\n \
    \   }\n    if (ans == 3) {\n        return \"YES\";\n    }\n    if (ans == 4)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 5) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 6) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 7) {\n        return \"YES\";\n    }\n    if (ans == 8) {\n        return \"\
    YES\";\n    }\n    if (ans == 9) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 10) {\n        return \"YES\";\n    }\n    if (ans == 11) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 12) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 13) {\n        return \"YES\";\n    }\n    if (ans == 14) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 15) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 16) {\n        return \"YES\";\n    }\n    if (ans == 17)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 18) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 19) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 20) {\n        return \"YES\";\n    }\n    if (ans == 21) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 22) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 23) {\n        return \"YES\";\n    }\n    if (ans == 24) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 25) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 26) {\n        return \"YES\";\n    }\n    if (ans == 27)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 28) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 29) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 30) {\n        return \"YES\";\n    }\n    if (ans == 31) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 32) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 33) {\n        return \"YES\";\n    }\n    if (ans == 34) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 35) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 36) {\n        return \"YES", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    if (length ==\
    \ 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        if (length == 1) {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";\n    }\n    if (length < length2) {\n        length = length2;\n\
    \    }\n    long long int length3 = length / 2;\n    long long int length4 = length\
    \ % 2;\n    long long int length5 = length3 / 2;\n    long long int length6 =\
    \ length5 % 2;\n    long long int length7 = length6 / 2;\n    long long int length8\
    \ = length7 % 2;\n    long long int length9 = length8 / 2;\n    long long int\
    \ length10 = length9 % 2;\n    long long int length11 = length10 / 2;\n    long\
    \ long int length12 = length11 % 2;\n    long long int length13 = length12 / 2;\n\
    \    long long int length14 = length13 % 2;\n    long long int length15 = length14\
    \ / 2;\n    long long int length16 = length15 % 2;\n    long long int length17\
    \ = length16 / 2;\n    long long int length18 = length17 % 2;\n    long long int\
    \ length19 = length18 / 2;\n    long long int length20 = length19 % 2;\n    long\
    \ long int length21 = length20 / 2;\n    long long int length22 = length21 % 2;\n\
    \    long long int length23 = length22 / 2;\n    long long int length24 = length23\
    \ % 2;\n    long long int length25 = length24 / 2;\n    long long int length26\
    \ = length25 % 2;\n    long long int length27 = length26 / 2;\n    long long int\
    \ length28 = length27 % 2;\n    long long int length29 = length28 / 2;\n    long\
    \ long int length30 = length29 % 2;\n    long long int length31 = length30 / 2;\n\
    \    long long int length32 = length31 % 2;\n    long long int length33 = length32\
    \ / 2;\n    long long int length34 = length33 % 2;\n    long long int length35\
    \ = length34 / 2;\n    long long int length", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (start == start2 && end == end2) {\n\
    \        return \"YES\";\n    }\n    long long mid = (start + end) / 2;\n    long\
    \ long mid2 = (start2 + end2) / 2;\n    if (mid == mid2) {\n        return \"\
    YES\";\n    }\n    if (mid > mid2) {\n        return \"NO\";\n    }\n    if (mid\
    \ < mid2) {\n        return \"YES\";\n    }\n    if (mid % 2 == 0) {\n       \
    \ return \"YES\";\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == length2) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"NO\";\n        }\n        if (length == 3) {\n         \
    \   return \"NO\";\n        }\n        if (length == 4) {\n            return\
    \ \"NO\";\n        }\n        if (length == 5) {\n            return \"NO\";\n\
    \        }\n        if (length == 6) {\n            return \"NO\";\n        }\n\
    \        if (length == 7) {\n            return \"NO\";\n        }\n        if\
    \ (length == 8) {\n            return \"NO\";\n        }\n        if (length ==\
    \ 9) {\n            return \"NO\";\n        }\n        if (length == 10) {\n \
    \           return \"NO\";\n        }\n        if (length == 11) {\n         \
    \   return \"NO\";\n        }\n        if (length == 12) {\n            return\
    \ \"NO\";\n        }\n        if (length == 13) {\n            return \"NO\";\n\
    \        }\n        if (length == 14) {\n            return \"NO\";\n        }\n\
    \        if (length == 15) {\n            return \"NO\";\n        }\n        if\
    \ (length == 16) {\n            return \"NO\";\n        }\n        if (length\
    \ == 17) {\n            return \"NO\";\n        }\n        if (length == 18) {\n\
    \            return \"NO\";\n        }\n        if (length == 19) {\n        \
    \    return \"NO\";\n        }\n        if (length == 20) {\n            return\
    \ \"NO\";\n        }\n        if (length == 21) {\n            return \"NO\";\n\
    \        }\n        if (length == 22) {\n            return \"NO\";\n        }\n\
    \        if (length == 23) {\n            return \"NO\";\n        }\n        if\
    \ (length == 24) {\n            return \"NO\";\n        }\n        if (length\
    \ == 25) {\n            return \"NO\";\n        }\n        if (length == 26) {\n\
    \            return \"NO\";\n        }\n        if (length == 27) {\n        \
    \    return \"NO\";\n        }\n        if (length == 28) {\n            return\
    \ \"NO\";\n        }\n        if (length == 29) {\n            return \"NO\";\n\
    \        }\n        if (length == 30) {\n            return \"NO\";\n        }\n\
    \        if (length == 31) {\n            return \"NO\";\n        }\n        if\
    \ (length == 32) {\n            return \"NO\";\n        }\n        if (length\
    \ == 33) {\n            return \"NO\";\n        }\n        if (length == 34) {\n\
    \            return \"NO\";\n        }\n        if (length == 35) {\n        \
    \    return \"NO\";\n        }\n        if (length == 36) {\n            return\
    \ \"NO\";\n        }\n        if (length == 37) {\n            return \"NO\";\n\
    \        }\n        if (length == 38) {\n            return \"NO\";\n        }\n\
    \        if (length == 39) {\n", "    long start = std::get<0>(interval1);\n \
    \   long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    long length = (end - start) * (end2 - start2);\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    if (length == 2 && start == end)\
    \ {\n        return \"YES\";\n    }\n    if (length == 2 && start == end2) {\n\
    \        return \"YES\";\n    }\n    if (length == 2 && start == start2) {\n \
    \       return \"YES\";\n    }\n    if (length == 2 && start < start2) {\n   \
    \     return \"NO\";\n    }\n    if (length == 2 && start > start2) {\n      \
    \  return \"NO\";\n    }\n    if (length == 3 && start == end) {\n        return\
    \ \"YES\";\n    }\n    if (length == 3 && start == end2) {\n        return \"\
    YES\";\n    }\n    if (length == 3 && start == start2) {\n        return \"YES\"\
    ;\n    }\n    if (length == 3 && start < start2) {\n        return \"NO\";\n \
    \   }\n    if (length == 3 && start > start2) {\n        return \"NO\";\n    }\n\
    \    if (length == 4 && start == end) {\n        return \"YES\";\n    }\n    if\
    \ (length == 4 && start == end2) {\n        return \"YES\";\n    }\n    if (length\
    \ == 4 && start == start2) {\n        return \"YES\";\n    }\n    if (length ==\
    \ 4 && start < start2) {\n        return \"NO\";\n    }\n    if (length == 4 &&\
    \ start > start2) {\n        return \"NO\";\n    }\n    if (length == 5 && start\
    \ == end) {\n        return \"YES\";\n    }\n    if (length == 5 && start == end2)\
    \ {\n        return \"YES\";\n    }\n    if (length == 5 && start == start2) {\n\
    \        return \"YES\";\n    }\n    if (length == 5 && start < start2) {\n  \
    \      return \"NO\";\n    }\n    if (length == 5 && start > start2) {\n     \
    \   return \"NO\";\n    }\n    if (length == 6 && start == end) {\n        return\
    \ \"YES\";\n    }\n    if (length == 6 && start == end2) {\n        return \"\
    YES\";\n    }\n    if (length == 6 && start == start2) {\n        return \"YES\"\
    ;\n    }\n    if (length == 6 && start < start2) {\n        return \"NO\";\n \
    \   }\n    if (length == 6 && start > start2) {\n        return \"NO\";\n    }\n\
    \    if (length == 7 && start == end) {\n        return \"YES\";\n    }", "  \
    \  long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > end2) {\n        return \"NO\";\n    }\n    long length\
    \ = end - start;\n    long length2 = end2 - start2;\n    if (length2 > length)\
    \ {\n        return \"NO\";\n    }\n    if (length2 == length) {\n        return\
    \ \"YES\";\n    }\n    long l1 = (length / length2);\n    long l2 = (length2 /\
    \ length);\n    if (l1 == l2) {\n        return \"YES\";\n    }\n    return \"\
    NO\";", "    // Write your code here\n    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    if (length ==\
    \ 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        length\
    \ = length2;\n    }\n    long long int mid = (start + end) / 2;\n    long long\
    \ int mid2 = (start2 + end2) / 2;\n    long long int mid3 = mid * mid;\n    long\
    \ long int mid4 = mid2 * mid2;\n    long long int mid5 = mid3 * mid3;\n    long\
    \ long int mid6 = mid4 * mid4;\n    long long int mid7 = mid5 * mid5;\n    long\
    \ long int mid8 = mid6 * mid6;\n    long long int mid9 = mid7 * mid7;\n    long\
    \ long int mid10 = mid8 * mid8;\n    long long int mid11 = mid9 * mid9;\n    long\
    \ long int mid12 = mid10 * mid10;\n    long long int mid13 = mid11 * mid11;\n\
    \    long long int mid14 = mid12 * mid12;\n    long long int mid15 = mid13 * mid13;\n\
    \    long long int mid16 = mid14 * mid14;\n    long long int mid17 = mid15 * mid15;\n\
    \    long long int mid18 = mid16 * mid16;\n    long long int mid19 = mid17 * mid17;\n\
    \    long long int mid20 = mid18 * mid18;\n    long long int mid21 = mid19 * mid19;\n\
    \    long long int mid22 = mid20 * mid20;\n    long long int mid23 = mid21 * mid21;\n\
    \    long long int mid24 = mid22 * mid22;\n    long long int mid25 = mid23 * mid23;\n\
    \    long long int mid26 = mid24 * mid24;\n    long long int mid27 = mid25 * mid25;\n\
    \    long long int mid28 = mid26 * mid26;\n    long long int mid29 = mid27 * mid27;\n\
    \    long long int mid30 = mid28 * mid28;\n    long long int mid31 = mid29 * mid29",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    long\
    \ long length = end - start;\n    long long ans = 0;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    long long i = 2;\n    while (i < length) {\n\
    \        if (start % i == 0 && end % i == 0) {\n            ans = i;\n       \
    \     break;\n        }\n        i += 2;\n    }\n    if (ans == 0) {\n       \
    \ return \"NO\";\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length2 == 1) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        return \"NO\";\n  \
    \  }\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length2 ==\
    \ 2) {\n        if (length == 2) {\n            return \"YES\";\n        }\n \
    \       return \"NO\";\n    }\n    if (length2 == 3) {\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    if (length2 == 4) {\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if (length2 == 5) {\n       \
    \ if (length == 2) {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if (length2 == 6) {\n        if (length == 2) {\n          \
    \  return \"YES\";\n        }\n        return \"NO\";\n    }\n    if (length2\
    \ == 7) {\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if (length2 == 8) {\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    if (length2 == 9) {\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if (length2 == 10) {\n      \
    \  if (length == 2) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (length2 == 11) {\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        return \"NO\";\n    }\n    if (length2\
    \ == 12) {\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if (length2 == 13) {\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    if (length2 == 14) {\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if (length2 == 15) {\n      \
    \  if (length == 2) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (length2 == 16) {\n        if (length == 2) {\n     \
    \       return \"YES\";\n        }\n        return \"NO\";\n    }\n    if (length2\
    \ == 17) {\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if (length2 == 18) {\n        if (length ==\
    \ 2) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    if (length2 == 19) {\n        if (length == 2) {", "    long long int start1\
    \ = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int startIntersection = start1 < end2\
    \ ? start1 : end2;\n    long long int endIntersection = start1 < end2 ? end1 :\
    \ start2;\n    long long int lengthIntersection = startIntersection < endIntersection\
    \ ? endIntersection - startIntersection : startIntersection - endIntersection;\n\
    \    if (lengthIntersection == 0) return \"NO\";\n    if (lengthIntersection ==\
    \ 1) return \"YES\";\n    if (lengthIntersection % 2 == 0) return \"NO\";\n  \
    \  long long int lengthIntersectionPrime = lengthIntersection;\n    for (long\
    \ long int i = 2; i <= lengthIntersectionPrime; i++) {\n        if (lengthIntersectionPrime\
    \ % i == 0) return \"NO\";\n    }\n    return \"YES\";", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    long long ans = length * length2;\n    if (ans == 0) {\n        return \"\
    NO\";\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 2) {\n        return \"YES\";\n    }\n    if (ans % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (ans % 3 == 0) {\n        return \"YES\";\n    }\n  \
    \  if (ans % 5 == 0) {\n        return \"YES\";\n    }\n    if (ans % 7 == 0)\
    \ {\n        return \"YES\";\n    }\n    if (ans % 11 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 13 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 17 == 0) {\n        return \"YES\";\n    }\n    if (ans % 19 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 23 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 29 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 31 == 0) {\n        return \"YES\";\n    }\n    if (ans % 37 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 41 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 43 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 47 == 0) {\n        return \"YES\";\n    }\n    if (ans % 53 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 59 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 61 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 67 == 0) {\n        return \"YES\";\n    }\n    if (ans % 71 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 73 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 79 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 83 == 0) {\n        return \"YES\";\n    }\n    if (ans % 89 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (ans % 97 == 0) {\n        return\
    \ \"YES\";\n    }\n    if (ans % 101 == 0) {\n        return \"YES\";\n    }\n\
    \    if (ans % 103 == 0) {\n        return \"YES\";\n    }\n    if (ans % 107\
    \ == 0) {\n        return \"YES\";\n    }\n    if (ans % 109 == 0) {\n       \
    \ return \"YES\";\n    }\n    if (ans % 113 == 0) {\n        return \"YES\";\n\
    \    }\n    if (ans % 117 == 0) {\n        return \"YES", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > end2) {\n        return \"NO\";\n    }\n    if (start2\
    \ == end2) {\n        return \"NO\";\n    }\n    long long length = 0;\n    long\
    \ long length2 = 0;\n    for (long long i = start; i <= end; i++) {\n        for\
    \ (long long j = start2; j <= end2; j++) {\n            if (i == j) {\n      \
    \          length++;\n            }\n        }\n    }\n    for (long long i =\
    \ start; i <= end; i++) {\n        for (long long j = start2; j <= end2; j++)\
    \ {\n            if (i != j) {\n                length2++;\n            }\n  \
    \      }\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    if (length < length2) {\n        length = length2;\n    }\n    if (length\
    \ < 2) {\n        return \"NO\";\n    }\n    long long mid = length / 2;\n   \
    \ long long mid2 = length2 / 2;\n    long long mid3 = mid + mid2;\n    long long\
    \ mid4 = mid3 + mid2;\n    long long mid5 = mid4 + mid2;\n    long long mid6 =\
    \ mid5 + mid2;\n    long long mid7 = mid6 + mid2;\n    long long mid8 = mid7 +\
    \ mid2;\n    long long mid9 = mid8 + mid2;\n    long long mid10 = mid9 + mid2;\n\
    \    long long mid11 = mid10 + mid2;\n    long long mid12 = mid11 + mid2;\n  \
    \  long long mid13 = mid12 + mid2;\n    long long mid14 = mid13 + mid2;\n    long\
    \ long mid15 = mid14 + mid2;\n    long long mid16 = mid15 + mid2;\n    long long\
    \ mid17 = mid16 + mid2;\n    long long mid18 = mid17 + mid2;\n    long long mid19\
    \ = mid18 + mid2;\n    long long mid20 = mid19 + mid2;\n    long long mid21 =\
    \ mid20 + mid2;\n    long long mid22 = mid21 + mid2;\n    long long mid23 = mid22\
    \ + mid2;\n    long long mid24 = mid23 + mid2;\n    long long mid25 = mid24 +\
    \ mid2;\n    long long mid26 = mid25 + mid2;\n    long long mid27 = mid26 + mid2;\n\
    \    long long mid28 = mid27 + mid2;\n    long long mid29 = mid28 + mid2;\n  \
    \  long long mid30 = mid29 + mid2;\n    long long mid31 = mid30 + mid2;\n    long\
    \ long mid32 = mid31 + mid2;\n    long long mid33 = mid32 + mid2;\n    long long\
    \ mid34 = mid33 + mid2;\n    long long mid35 = mid34 + ", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    if (length2\
    \ == 1) {\n        return \"NO\";\n    }\n    long mid = (start + end) / 2;\n\
    \    long mid2 = start2 + end2;\n    long mid3 = mid * mid;\n    long mid4 = mid2\
    \ * mid2;\n    long mid5 = mid3 * mid3;\n    long mid6 = mid4 * mid4;\n    long\
    \ mid7 = mid5 * mid5;\n    long mid8 = mid6 * mid6;\n    long mid9 = mid7 * mid7;\n\
    \    long mid10 = mid8 * mid8;\n    long mid11 = mid9 * mid9;\n    long mid12\
    \ = mid10 * mid10;\n    long mid13 = mid11 * mid11;\n    long mid14 = mid12 *\
    \ mid12;\n    long mid15 = mid13 * mid13;\n    long mid16 = mid14 * mid14;\n \
    \   long mid17 = mid15 * mid15;\n    long mid18 = mid16 * mid16;\n    long mid19\
    \ = mid17 * mid17;\n    long mid20 = mid18 * mid18;\n    long mid21 = mid19 *\
    \ mid19;\n    long mid22 = mid20 * mid20;\n    long mid23 = mid21 * mid21;\n \
    \   long mid24 = mid22 * mid22;\n    long mid25 = mid23 * mid23;\n    long mid26\
    \ = mid24 * mid24;\n    long mid27 = mid25 * mid25;\n    long mid28 = mid26 *\
    \ mid26;\n    long mid29 = mid27 * mid27;\n    long mid30 = mid28 * mid28;\n \
    \   long mid31 = mid29 * mid29;\n    long mid32 = mid30 * mid30;\n    long mid33\
    \ = mid31 * mid31;\n    long mid34 = mid32 * mid32;\n    long mid35 = mid33 * ",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length2 == 1) {\n        return \"NO\";\n    }\n    if (length == 1) {\n  \
    \      return \"YES\";\n    }\n    long long mid = start + (end - start) / 2;\n\
    \    long long mid2 = start2 + (end2 - start2) / 2;\n    if (mid == mid2) {\n\
    \        return \"YES\";\n    }\n    if (mid > mid2) {\n        return \"NO\"\
    ;\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n  \
    \  if (length2 == 2) {\n        if (length == 1) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            if (start <= end2) {\n \
    \               return \"YES\";\n            }\n        }\n    }\n    if (length2\
    \ > 2) {\n        return \"NO\";\n    }\n    if (length2 > 3) {\n        return\
    \ \"NO\";\n    }\n    if (length2 > 4) {\n        return \"NO\";\n    }\n    if\
    \ (length2 > 5) {\n        return \"NO\";\n    }\n    if (length2 > 6) {\n   \
    \     return \"NO\";\n    }\n    if (length2 > 7) {\n        return \"NO\";\n\
    \    }\n    if (length2 > 8) {\n        return \"NO\";\n    }\n    if (length2\
    \ > 9) {\n        return \"NO\";\n    }\n    if (length2 > 10) {\n        return\
    \ \"NO\";\n    }\n    if (length2 > 11) {\n        return \"NO\";\n    }\n   \
    \ if (length2 > 12) {\n        return \"NO\";\n    }\n    if (length2 > 13) {\n\
    \        return \"NO\";\n    }\n    if (length2 > 14) {\n        return \"NO\"\
    ;\n    }\n    if (length2 > 15) {\n        return \"NO\";\n    }\n    if (length2\
    \ > 16) {\n        return \"NO\";\n    }\n    if (length2 > 17) {\n        return\
    \ \"NO\";\n    }\n    if (length2 > 18) {\n        return \"NO\";\n    }\n   \
    \ if (length2 > 19) {\n        return \"NO\";\n    }\n    if (length2 > 20) {\n\
    \        return \"NO\";\n    }\n    if (length2 > 21) {\n        return \"NO\"\
    ;\n    }\n    if (length2 > 22) {\n        return \"NO\";\n    }\n    if (length2\
    \ > 23) {\n        return \"NO\";\n    }\n    if (length2 > 24) {\n        return\
    \ \"NO\";\n    }\n    if (length2 > 25) {\n        return \"NO\";\n    }\n   \
    \ if (length2 > 26) {\n        return \"NO\";\n    }\n    if (length2 > 27) {\n\
    \        return \"NO\";\n    }\n    if (length2 > 28) {\n        return \"NO\"\
    ;\n    }\n    if (length2 > 29) {\n        return \"NO\";\n    }\n    if (length2\
    \ > 30) {\n        return \"NO\";\n    }\n    if (length2 > 31) {\n        return\
    \ \"NO\";\n", "    long long int a = interval1.get<0>(), b = interval1.get<1>();\n\
    \    long long int c = interval2.get<0>(), d = interval2.get<1>();\n    long long\
    \ int a1 = a - 1, b1 = b - 1;\n    long long int c1 = c - 1, d1 = d - 1;\n   \
    \ long long int a2 = a + 1, b2 = b + 1;\n    long long int c2 = c + 1, d2 = d\
    \ + 1;\n    long long int a3 = a2 - 1, b3 = b2 + 1;\n    long long int c3 = c2\
    \ - 1, d3 = d2 + 1;\n    long long int a4 = a3 - 1, b4 = b3 + 1;\n    long long\
    \ int c4 = c3 - 1, d4 = d3 + 1;\n    long long int a5 = a4 - 1, b5 = b5 + 1;\n\
    \    long long int c5 = c4 - 1, d5 = d5 + 1;\n    long long int a6 = a5 - 1, b6\
    \ = b6 + 1;\n    long long int c6 = c6 - 1, d6 = d6 + 1;\n    long long int a7\
    \ = a6 - 1, b7 = b7 + 1;\n    long long int c7 = c7 - 1, d7 = d7 + 1;\n    long\
    \ long int a8 = a7 - 1, b8 = b7 + 1;\n    long long int c8 = c8 - 1, d8 = d7 +\
    \ 1;\n    long long int a9 = a8 - 1, b9 = b8 + 1;\n    long long int c9 = c8 -\
    \ 1, d9 = d8 + 1;\n    long long int a10 = a9 - 1, b10 = b9 + 1;\n    long long\
    \ int c10 = c9 - 1, d10 = d9 + 1;\n    long long int a11 = a10 - 1, b11 = b10\
    \ + 1;\n    long long int c11 = c10 - 1, d11 = d10 + 1;\n    long long int a12\
    \ = a11 - 1, b12 = b11 + 1;\n    long long int c12 = c11 - 1, d12 = d11 + 1;\n\
    \    long long int a13 = a12 - 1, b13 = b12 + 1;\n    long long int c13 = c12\
    \ - 1, d13 = d12 + 1;\n    long long int a14 = a13 - 1, b14 = b13 + 1;\n    long\
    \ long int c14 = c13 - 1, d14 = d13 + 1;\n    long long int a15 = a14 - 1, b15\
    \ = b14 + 1;\n    long long int c15 = c14 - 1, d15 = d14 + 1;\n    long long int\
    \ a16 = a15 - 1, b16 = b15 + 1;\n    long long int c16 = c15 - 1, d16 = d15",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long inter\
    \ = end - start;\n    if (inter % 2 == 0) {\n        return \"NO\";\n    }\n \
    \   long long a = inter / 2;\n    long long b = inter / 2;\n    long long c =\
    \ inter / 2;\n    long long d = inter / 2;\n    long long e = inter / 2;\n   \
    \ long long f = inter / 2;\n    long long g = inter / 2;\n    long long h = inter\
    \ / 2;\n    long long i = inter / 2;\n    long long j = inter / 2;\n    long long\
    \ k = inter / 2;\n    long long l = inter / 2;\n    long long m = inter / 2;\n\
    \    long long n = inter / 2;\n    long long o = inter / 2;\n    long long p =\
    \ inter / 2;\n    long long q = inter / 2;\n    long long r = inter / 2;\n   \
    \ long long s = inter / 2;\n    long long t = inter / 2;\n    long long u = inter\
    \ / 2;\n    long long v = inter / 2;\n    long long w = inter / 2;\n    long long\
    \ x = inter / 2;\n    long long y = inter / 2;\n    long long z = inter / 2;\n\
    \    long long A = inter / 2;\n    long long B = inter / 2;\n    long long C =\
    \ inter / 2;\n    long long D = inter / 2;\n    long long E = inter / 2;\n   \
    \ long long F = inter / 2;\n    long long G = inter / 2;\n    long long H = inter\
    \ / 2;\n    long long I = inter / 2;\n    long long J = inter / 2;\n    long long\
    \ K = inter / 2;\n    long long L = inter / 2;\n    long long M = inter / 2;\n\
    \    long long N = inter / 2;\n    long long O = inter / 2;\n    long long P =\
    \ inter / 2;\n    long long Q = inter / 2;\n    long long R = inter / 2;\n   \
    \ long long S = inter / 2;\n    long long T = inter / 2;\n    long long U = inter\
    \ / 2;\n    long long V = inter / 2;\n    long long W = inter / 2;\n    long long\
    \ X = inter / 2;\n    long long Y = inter / 2;\n    long long Z = inter / 2;\n\
    \    long long A = inter / 2;", "    if (std::get<0>(interval1) < std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<1>(interval1) > std::get<1>(interval2)) {\n        return \"\
    NO\";\n    }\n    long long intersect = std::get<0>(interval1) & std::get<1>(interval2);\n\
    \    if (intersect == 0) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<", "    long long start = std::get<0>(interval1);\n    long long\
    \ end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n    end\
    \ = std::get<1>(interval2);\n    long long length = end - start;\n    if (length\
    \ == 0)\n        return \"NO\";\n    long long mid = start + (end - start) / 2;\n\
    \    if (mid % 2 == 0)\n        return \"NO\";\n    long long count = 0;\n   \
    \ for (long long i = start; i <= end; i++) {\n        if (i == mid)\n        \
    \    count++;\n        else if (i == mid + 1)\n            count++;\n        else\
    \ if (i == mid + 2)\n            count++;\n        else if (i == mid + 3)\n  \
    \          count++;\n        else if (i == mid + 4)\n            count++;\n  \
    \      else if (i == mid + 5)\n            count++;\n        else if (i == mid\
    \ + 6)\n            count++;\n        else if (i == mid + 7)\n            count++;\n\
    \        else if (i == mid + 8)\n            count++;\n        else if (i == mid\
    \ + 9)\n            count++;\n        else if (i == mid + 10)\n            count++;\n\
    \        else if (i == mid + 11)\n            count++;\n        else if (i ==\
    \ mid + 12)\n            count++;\n        else if (i == mid + 13)\n         \
    \   count++;\n        else if (i == mid + 14)\n            count++;\n        else\
    \ if (i == mid + 15)\n            count++;\n        else if (i == mid + 16)\n\
    \            count++;\n        else if (i == mid + 17)\n            count++;\n\
    \        else if (i == mid + 18)\n            count++;\n        else if (i ==\
    \ mid + 19)\n            count++;\n        else if (i == mid + 20)\n         \
    \   count++;\n        else if (i == mid + 21)\n            count++;\n        else\
    \ if (i == mid + 22)\n            count++;\n        else if (i == mid + 23)\n\
    \            count++;\n        else if (i == mid + 24)\n            count++;\n\
    \        else if (i == mid + 25)\n            count++;\n        else if (i ==\
    \ mid + 26)\n            count++;\n        else if (i == mid + 27)\n         \
    \   count++;\n        else if (i == mid + 28)\n            count++;\n        else\
    \ if (i == mid + 29)\n            count++;\n        else if (i == mid + 30)\n\
    \            count++;\n        else if (i == mid + 31)\n            count++;\n\
    \        else if (i == mid + 32)\n            count++;\n        else if (i ==\
    \ mid + 33)\n            count++;\n        else if (i == mid + 34)\n         \
    \   count++;\n        else if (i == mid + 35)\n            count++;\n        else\
    \ if (i == mid + 36)\n            count++;\n        else if (i == mid + 37)\n\
    \            count++;\n        else if (i == mid + 38)\n            count++;\n\
    \        else if (i == mid + 39)\n            count++;\n        else if (i == ",
  "    long long int start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::min(start1, start2);\n\
    \    long long int end = std::max(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return \"\
    YES\";\n    long long int mid = start + (end - start) / 2;\n    if (std::get<0>(intersection(std::make_tuple(start,\
    \ mid), std::make_tuple(mid, end))) == mid) return \"YES\";\n    return \"NO\"\
    ;", "    long long start1 = std::get<0>(interval1);\n    long long end1 = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end1 - start1 + end2 - start2;\n    if (length < 2) {\n\
    \        return \"NO\";\n    }\n    long long mid1 = start1 + end1 / 2;\n    long\
    \ long mid2 = start2 + end2 / 2;\n    long long mid = mid1 + mid2;\n    if (mid\
    \ == 1) {\n        return \"YES\";\n    }\n    if (mid == 2) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 3) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 4) {\n        return \"YES\";\n    }\n    if (mid == 5) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 6) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 7) {\n        return \"YES\";\n    }\n    if (mid == 8) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 9) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 10) {\n        return \"YES\";\n    }\n    if (mid == 11) {\n      \
    \  return \"YES\";\n    }\n    if (mid == 12) {\n        return \"YES\";\n   \
    \ }\n    if (mid == 13) {\n        return \"YES\";\n    }\n    if (mid == 14)\
    \ {\n        return \"YES\";\n    }\n    if (mid == 15) {\n        return \"YES\"\
    ;\n    }\n    if (mid == 16) {\n        return \"YES\";\n    }\n    if (mid ==\
    \ 17) {\n        return \"YES\";\n    }\n    if (mid == 18) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 19) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 20) {\n        return \"YES\";\n    }\n    if (mid == 21) {\n      \
    \  return \"YES\";\n    }\n    if (mid == 22) {\n        return \"YES\";\n   \
    \ }\n    if (mid == 23) {\n        return \"YES\";\n    }\n    if (mid == 24)\
    \ {\n        return \"YES\";\n    }\n    if (mid == 25) {\n        return \"YES\"\
    ;\n    }\n    if (mid == 26) {\n        return \"YES\";\n    }\n    if (mid ==\
    \ 27) {\n        return \"YES\";\n    }\n    if (mid == 28) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 29) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 30) {\n        return \"YES\";\n    }\n    if (mid == 31) {\n      \
    \  return \"YES\";\n    }\n    if (mid == 32) {\n        return \"YES\";\n   \
    \ }\n    if (mid == 33) {\n        return \"YES\";\n    }\n    if (mid == 34)\
    \ {\n        return \"YES\";\n    }\n", "    long long start1 = std::get<0>(interval1);\n\
    \    long long end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end1 - start1\
    \ + end2 - start2;\n    if (length == 0) return \"NO\";\n    if (length == 1)\
    \ return \"YES\";\n    long long mid1 = start1 + end1 / 2;\n    long long mid2\
    \ = start2 + end2 / 2;\n    long long mid = mid1 + mid2;\n    if (mid == 0) return\
    \ \"NO\";\n    if (mid == 1) return \"YES\";\n    if (mid == 2) return \"YES\"\
    ;\n    if (mid == 3) return \"YES\";\n    if (mid == 4) return \"YES\";\n    if\
    \ (mid == 5) return \"YES\";\n    if (mid == 6) return \"YES\";\n    if (mid ==\
    \ 7) return \"YES\";\n    if (mid == 8) return \"YES\";\n    if (mid == 9) return\
    \ \"YES\";\n    if (mid == 10) return \"YES\";\n    if (mid == 11) return \"YES\"\
    ;\n    if (mid == 12) return \"YES\";\n    if (mid == 13) return \"YES\";\n  \
    \  if (mid == 14) return \"YES\";\n    if (mid == 15) return \"YES\";\n    if\
    \ (mid == 16) return \"YES\";\n    if (mid == 17) return \"YES\";\n    if (mid\
    \ == 18) return \"YES\";\n    if (mid == 19) return \"YES\";\n    if (mid == 20)\
    \ return \"YES\";\n    if (mid == 21) return \"YES\";\n    if (mid == 22) return\
    \ \"YES\";\n    if (mid == 23) return \"YES\";\n    if (mid == 24) return \"YES\"\
    ;\n    if (mid == 25) return \"YES\";\n    if (mid == 26) return \"YES\";\n  \
    \  if (mid == 27) return \"YES\";\n    if (mid == 28) return \"YES\";\n    if\
    \ (mid == 29) return \"YES\";\n    if (mid == 30) return \"YES\";\n    if (mid\
    \ == 31) return \"YES\";\n    if (mid == 32) return \"YES\";\n    if (mid == 33)\
    \ return \"YES\";\n    if (mid == 34) return \"YES\";\n    if (mid == 35) return\
    \ \"YES\";\n    if (mid == 36) return \"YES\";\n    if (mid == 37) return \"YES\"\
    ;\n    if (mid == 38) return \"YES\";\n    if (mid == 39) return \"YES\";\n  \
    \  if (mid == 40) return \"YES\";\n    if (mid == 41) return \"YES\";\n    if\
    \ (mid == 42) return \"YES\";\n    if (mid == 43) return \"YES\";", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long length\
    \ = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n  \
    \      return \"YES\";\n    }\n    if (length == 5) {\n        return \"YES\"\
    ;\n    }\n    if (length == 7) {\n        return \"YES\";\n    }\n    if (length\
    \ == 9) {\n        return \"YES\";\n    }\n    if (length == 11) {\n        return\
    \ \"YES\";\n    }\n    if (length == 13) {\n        return \"YES\";\n    }\n \
    \   if (length == 17) {\n        return \"YES\";\n    }\n    if (length == 19)\
    \ {\n        return \"YES\";\n    }\n    if (length == 23) {\n        return \"\
    YES\";\n    }\n    if (length == 29) {\n        return \"YES\";\n    }\n    if\
    \ (length == 31) {\n        return \"YES\";\n    }\n    if (length == 37) {\n\
    \        return \"YES\";\n    }\n    if (length == 43) {\n        return \"YES\"\
    ;\n    }\n    if (length == 49) {\n        return \"YES\";\n    }\n    if (length\
    \ == 53) {\n        return \"YES\";\n    }\n    if (length == 59) {\n        return\
    \ \"YES\";\n    }\n    if (length == 67) {\n        return \"YES\";\n    }\n \
    \   if (length == 73) {\n        return \"YES\";\n    }\n    if (length == 79)\
    \ {\n        return \"YES\";\n    }\n    if (length == 91) {\n        return \"\
    YES\";\n    }\n    if (length == 111) {\n        return \"YES\";\n    }\n    if\
    \ (length == 127) {\n        return \"YES\";\n    }\n    if (length == 131) {\n\
    \        return \"YES\";\n    }\n    if (length == 137) {\n        return \"YES\"\
    ;\n    }\n    if (length == 141) {\n        return \"YES\";\n    }\n    if (length\
    \ == 147) {\n        return \"YES\";\n    }\n    if (length == 151) {\n      \
    \  return \"YES\";\n    }\n    if (length == 157) {\n        return \"YES\";\n\
    \    }\n    if (length == 161) {\n        return \"YES\";\n    }\n    if (length\
    \ == 167) {\n        return \"YES\";\n    }\n    if (length == 173) {\n      \
    \  return \"YES\";\n    }\n    if (length == 179) {\n        return \"YES\";\n\
    \    }\n    if (length == 183) {\n        return \"YES\";\n    }\n    if (length\
    \ == 191) {\n        return \"YES\";\n    }\n    if (length == 197) {\n      \
    \  return \"YES\";\n    }\n    if (length == 203) {\n        return \"YES", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (end\
    \ < end2) {\n        return \"NO\";\n    }\n    long long len1 = end - start;\n\
    \    long long len2 = end2 - start2;\n    if (len1 < len2) {\n        return \"\
    NO\";\n    }\n    if (len1 == len2) {\n        long long mid = len1 / 2;\n   \
    \     if (mid == len1) {\n            return \"YES\";\n        }\n        if (mid\
    \ % 2 == 0) {\n            long long mid2 = len2 / 2;\n            if (mid2 ==\
    \ len2) {\n                return \"YES\";\n            }\n            if (mid2\
    \ % 2 == 0) {\n                long long mid3 = len3 / 2;\n                if\
    \ (mid3 == len3) {\n                    return \"YES\";\n                }\n \
    \               if (mid3 % 2 == 0) {\n                    long long mid4 = len4\
    \ / 2;\n                    if (mid4 == len4) {\n                        return\
    \ \"YES\";\n                    }\n                    if (mid4 % 2 == 0) {\n\
    \                        long long mid5 = len5 / 2;\n                        if\
    \ (mid5 == len5) {\n                            return \"YES\";\n            \
    \            }\n                        if (mid5 % 2 == 0) {\n               \
    \             long long mid6 = len6 / 2;\n                            if (mid6\
    \ == len6) {\n                                return \"YES\";\n              \
    \              }\n                            if (mid6 % 2 == 0) {\n         \
    \                       long long mid7 = len7 / 2;\n                         \
    \       if (mid7 == len7) {\n                                    return \"YES\"\
    ;\n                                }\n                                if (mid7\
    \ % 2 == 0) {\n                                    long long mid8 = len8 / 2;\n\
    \                                    if (mid8 == len8) {\n                   \
    \                     return \"YES\";\n                                    }\n\
    \                                    if (mid8 % 2 == 0) {\n                  \
    \                      long long mid9 = len9 / 2;\n                          \
    \              if (mid9 == len9) {\n                                         \
    \   return \"YES\";\n                                        }\n             \
    \                           if (mid9 % 2 == 0) {\n                           \
    \                 long long mid10 = len10 / 2;\n                             \
    \               if (mid10 == len10) {\n                                      \
    \          return \"YES\";\n                                            }\n  \
    \                                          if (mid10 % 2 == 0) {\n           \
    \                                     long long mid11 = len11 / 2;\n         \
    \                                       if (mid11 == len11) {\n              \
    \                                      return \"YES\";\n                     \
    \                           }\n                                              \
    \  if (mid11", "    long long int start1 = std::get<0>(interval1);\n    long long\
    \ int end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end1 - start1;\n    long long int length2 = end2 - start2;\n    if (length ==\
    \ 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        if (start1 <= start2) {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    }\n    if (length < length2) {\n\
    \        return \"NO\";\n    }\n    if (start1 <= start2) {\n        return \"\
    NO\";\n    }\n    if (start2 < start1) {\n        return \"NO\";\n    }\n    if\
    \ (end1 <= end2) {\n        return \"NO\";\n    }\n    if (end2 < end1) {\n  \
    \      return \"NO\";\n    }\n    long long int m = length / length2;\n    if\
    \ (m == 0) {\n        return \"NO\";\n    }\n    if (m == 1) {\n        return\
    \ \"YES\";\n    }\n    if (m == 2) {\n        if (start1 <= start2) {\n      \
    \      return \"YES\";\n        } else {\n            return \"NO\";\n       \
    \ }\n    }\n    if (m == 3) {\n        if (start1 < start2) {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n \
    \   if (m == 4) {\n        if (start1 < start2) {\n            return \"NO\";\n\
    \        } else {\n            return \"YES\";\n        }\n    }\n    if (m ==\
    \ 5) {\n        if (start1 < start2) {\n            return \"NO\";\n        }\
    \ else {\n            return \"NO\";\n        }\n    }\n    if (m == 6) {\n  \
    \      if (start1 < start2) {\n            return \"NO\";\n        } else {\n\
    \            return \"YES\";\n        }\n    }\n    if (m == 7) {\n        if\
    \ (start1 < start2) {\n            return \"NO\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    if (m == 8) {\n        if (start1 <\
    \ start2) {\n            return \"NO\";\n        } else {\n            return\
    \ \"YES\";\n        }\n    }\n    if (m == 9) {\n        if (start1 < start2)\
    \ {\n            return \"NO\";\n        } else {\n            return \"NO\";\n\
    \        }\n    }\n    if (m == 10) {\n        if (start1 < start2) {\n      \
    \      return \"NO\";\n        } else {\n            return \"YES\";\n       \
    \ }\n    }\n    if (m == 11) {\n        if (start1 < start2) {\n            return\
    \ \"NO\";\n        } else {\n            return \"NO\";\n        }\n    }\n  \
    \  if (m == 12) {\n        if (start1 < start2) {\n            return \"NO\";\n\
    \        } else {\n            return \"YES\";\n        }\n    }\n    if (m ==\
    \ 13) {\n        if (start1 < start2) {\n            return \"NO\";\n        }\
    \ else {\n            return \"NO", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    long long mid = start + (end - start) / 2;\n    long long count\
    \ = 0;\n    for (long long i = start; i <= mid; ++i) {\n        if (std::find(std::begin(interval1),\
    \ std::end(interval1), i) != std::end(interval1)) {\n            count++;\n  \
    \      }\n    }\n    if (count == 1) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long long int start1 = std::get<0>(interval1);\n    long long\
    \ int end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end1 - start1 + end2 - start2;\n    if (length < 2) {\n        return \"NO\"\
    ;\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n    long long\
    \ int mid1 = start1 + end1 / 2;\n    long long int mid2 = start2 + end2 / 2;\n\
    \    long long int mid = mid1 + mid2;\n    long long int isPrime = 0;\n    long\
    \ long int isNotPrime = 0;\n    for (long long int i = mid1; i <= mid2; i++) {\n\
    \        if (i % 2 == 0) {\n            isPrime++;\n        } else {\n       \
    \     isNotPrime++;\n        }\n    }\n    if (isPrime == isNotPrime) {\n    \
    \    return \"NO\";\n    }\n    return \"YES\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    long long mid = start + (end - start) / 2;\n    long long count\
    \ = 0;\n    for (long long i = start; i <= mid; ++i) {\n        if (std::find(std::make_tuple(start,\
    \ mid), std::make_tuple(i, mid), std::make_tuple(i, mid)) != std::make_tuple(mid,\
    \ mid)) {\n            ++count;\n        }\n    }\n    if (count == 2) {\n   \
    \     return \"YES\";\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2 && end > end2)\
    \ {\n        return \"NO\";\n    }\n    if (start == start2 && end == end2) {\n\
    \        return \"YES\";\n    }\n    if (start > start2 && end > end2) {\n   \
    \     return \"YES\";\n    }\n    if (start < start2 && end < end2) {\n      \
    \  return \"NO\";\n    }\n    if (start == start2 && end == end2) {\n        return\
    \ \"YES\";\n    }\n    if (start < start2 && end < end2) {\n        return \"\
    NO\";\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    if (end < end2) {\n        return \"NO\";\n    }\n    long\
    \ length = end - start;\n    long length2 = end2 - start2;\n    if (length2 >\
    \ length) {\n        return \"NO\";\n    }\n    if (length2 == length) {\n   \
    \     return \"YES\";\n    }\n    long mid = length / 2;\n    long mid2 = length2\
    \ / 2;\n    if (mid == mid2) {\n        return \"YES\";\n    }\n    long a = std::min(mid,\
    \ mid2);\n    long b = std::max(mid, mid2);\n    if (a > b) {\n        return\
    \ \"NO\";\n    }\n    long c = std::min(start, start2);\n    long d = std::max(end,\
    \ end2);\n    if (c < d) {\n        return \"NO\";\n    }\n    long ans = std::max(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(std::min(",
  "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long length = end - start;\n    long length2 = end2 - start2;\n  \
    \  if (length2 > length) {\n        std::swap(length, length2);\n    }\n    long\
    \ ans = 0;\n    for (long i = start; i <= end; i++) {\n        for (long j = start2;\
    \ j <= end2; j++) {\n            if (i == j) continue;\n            if (i % j\
    \ == 0) {\n                ans += 1;\n                break;\n            }\n\
    \        }\n    }\n    if (ans == length) return \"YES\";\n    return \"NO\";",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length < length2) {\n        length = length2;\n    }\n    if (length\
    \ == 0) {\n        return \"NO\";\n    }\n    long long ans = 0;\n    long long\
    \ i = 1;\n    while (i <= length) {\n        long long temp = i;\n        while\
    \ (temp < length && start2 <= end2) {\n            temp += i;\n        }\n   \
    \     if (temp == length) {\n            ans += i;\n        }\n        i += 1;\n\
    \    }\n    if (ans == 0) {\n        return \"NO\";\n    }\n    if (ans == 1)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 3) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 4) {\n        return \"YES\";\n    }\n    if (ans == 5) {\n        return \"\
    YES\";\n    }\n    if (ans == 6) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 7) {\n        return \"YES\";\n    }\n    if (ans == 8) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 9) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 10) {\n        return \"YES\";\n    }\n    if (ans == 11) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 12) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 13) {\n        return \"YES\";\n    }\n    if (ans == 14)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 15) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 16) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 17) {\n        return \"YES\";\n    }\n    if (ans == 18) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 19) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 20) {\n        return \"YES\";\n    }\n    if (ans == 21) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 22) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 23) {\n        return \"YES\";\n    }\n    if (ans == 24)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 25) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 26) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 27) {\n        return \"YES\";\n    }\n    if (ans == 28) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 29) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 30) {\n        return \"YES\";\n", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int start = std::max(start1, start2);\n    long long int end =\
    \ std::min(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 0) return \"NO\";\n    long long int prime = 1;\n    for (long long int i\
    \ = 2; i <= length; ++i) {\n        if (length % i == 0) {\n            prime\
    \ = 0;\n            break;\n        }\n    }\n    if (prime) return \"YES\";\n\
    \    return \"NO\";", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n    long long\
    \ length3 = length * length2;\n    long long length4 = length2 * length2;\n  \
    \  long long length5 = length2 * length;\n    long long length6 = length * length;\n\
    \    long long length7 = length * length3;\n    long long length8 = length3 *\
    \ length3;\n    long long length9 = length3 * length4;\n    long long length10\
    \ = length4 * length4;\n    long long length11 = length4 * length;\n    long long\
    \ length12 = length2 * length3;\n    long long length13 = length3 * length2;\n\
    \    long long length14 = length2 * length;\n    long long length15 = length *\
    \ length2;\n    long long length16 = length2 * length3;\n    long long length17\
    \ = length3 * length2;\n    long long length18 = length2 * length;\n    long long\
    \ length19 = length * length3;\n    long long length20 = length3 * length;\n \
    \   long long length21 = length2 * length4;\n    long long length22 = length4\
    \ * length2;\n    long long length23 = length2 * length;\n    long long length24\
    \ = length2 * length3;\n    long long length25 = length3 * length2;\n    long\
    \ long length26 = length2 * length;\n    long long length27 = length * length2;\n\
    \    long long length28 = length2 * length3;\n    long long length29 = length3\
    \ * length2;\n    long long length30 = length2 * length;\n    long long length31\
    \ = length2 * length3;\n    long long length32 = length2 * length;\n    long long\
    \ length33 = length * length2;\n    long long length34 = length2 * length3;\n\
    \    long long length35 = length2 * length;\n    long long length36 = length2\
    \ * length3;\n    long long length37 = length3 * length2;\n    long long length38\
    \ = ", "    long long start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n\
    \    long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long startIntersection = start1;\n    long long endIntersection = end1;\n\
    \    long long lengthIntersection = end1 - start1;\n    long long length1 = end1\
    \ - start1;\n    long long length2 = end2 - start2;\n    long long length3 = endIntersection\
    \ - startIntersection;\n    long long length4 = endIntersection - startIntersection;\n\
    \    long long length5 = end2 - start2;\n    long long length6 = end1 - start1;\n\
    \    long long length7 = end1 - start1;\n    long long length8 = end2 - start2;\n\
    \    long long length9 = end1 - start1;\n    long long length10 = end2 - start2;\n\
    \    long long length11 = end1 - start1;\n    long long length12 = end2 - start2;\n\
    \    long long length13 = end1 - start1;\n    long long length14 = end2 - start2;\n\
    \    long long length15 = end1 - start1;\n    long long length16 = end2 - start2;\n\
    \    long long length17 = end1 - start1;\n    long long length18 = end2 - start2;\n\
    \    long long length19 = end1 - start1;\n    long long length20 = end2 - start2;\n\
    \    long long length21 = end1 - start1;\n    long long length22 = end2 - start2;\n\
    \    long long length23 = end1 - start1;\n    long long length24 = end2 - start2;\n\
    \    long long length25 = end1 - start1;\n    long long length26 = end2 - start2;\n\
    \    long long length27 = end1 - start1;\n    long long length28 = end2 - start2;\n\
    \    long long length29 = end1 - start1;\n    long long length30 = end2 - start2;\n\
    \    long long length31 = end1 - start1;\n    long long length32 = end2 - start2;\n\
    \    long long length33 = end1 - start1;\n    long long length34 = end2 - start2;\n\
    \    long long length35 = end1 - start1;\n    long long length36 = end2 - start2;\n\
    \    long long length37 = end1 - start1;\n    long long length38 = end2 - start2;\n\
    \    long long length39 = end1 - start1;\n    long long length40 = end", "   \
    \ long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (end\
    \ < end2) {\n        return \"NO\";\n    }\n    long length = (end - start) *\
    \ (end2 - start2);\n    if (length == 1) {\n        return \"YES\";\n    }\n \
    \   if (length == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n\
    \        return \"YES\";\n    }\n    if (length == 5) {\n        return \"YES\"\
    ;\n    }\n    if (length == 7) {\n        return \"YES\";\n    }\n    if (length\
    \ == 9) {\n        return \"YES\";\n    }\n    if (length == 11) {\n        return\
    \ \"YES\";\n    }\n    if (length == 13) {\n        return \"YES\";\n    }\n \
    \   if (length == 17) {\n        return \"YES\";\n    }\n    if (length == 19)\
    \ {\n        return \"YES\";\n    }\n    if (length == 23) {\n        return \"\
    YES\";\n    }\n    if (length == 29) {\n        return \"YES\";\n    }\n    if\
    \ (length == 31) {\n        return \"YES\";\n    }\n    if (length == 37) {\n\
    \        return \"YES\";\n    }\n    if (length == 43) {\n        return \"YES\"\
    ;\n    }\n    if (length == 49) {\n        return \"YES\";\n    }\n    if (length\
    \ == 53) {\n        return \"YES\";\n    }\n    if (length == 59) {\n        return\
    \ \"YES\";\n    }\n    if (length == 67) {\n        return \"YES\";\n    }\n \
    \   if (length == 73) {\n        return \"YES\";\n    }\n    if (length == 79)\
    \ {\n        return \"YES\";\n    }\n    if (length == 91) {\n        return \"\
    YES\";\n    }\n    if (length == 111) {\n        return \"YES\";\n    }\n    if\
    \ (length == 127) {\n        return \"YES\";\n    }\n    if (length == 131) {\n\
    \        return \"YES\";\n    }\n    if (length == 137) {\n        return \"YES\"\
    ;\n    }\n    if (length == 141) {\n        return \"YES\";\n    }\n    if (length\
    \ == 147) {\n        return \"YES\";\n    }\n    if (length == 151) {\n      \
    \  return \"YES\";\n    }\n    if (length == 157) {\n        return \"YES\";\n\
    \    }\n    if (length == 161) {\n        return \"YES\";\n    }\n    if (length\
    \ == 167) {\n        return \"YES\";\n    }\n    if (length == 173) {\n      \
    \  return \"YES\";\n    }\n", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection = start1\
    \ < end2 ? end1 : start2;\n    long long int startIntersectionEnd = start1 < end2\
    \ ? start2 : end1;\n    long long int endIntersectionEnd = start1 < end2 ? end2\
    \ : start1;\n    long long int startIntersectionEnd2 = start1 < end2 ? start1\
    \ : end2;\n    long long int endIntersectionEnd2 = start1 < end2 ? end1 : start2;\n\
    \    long long int startIntersectionEnd3 = start1 < end2 ? start2 : end1;\n  \
    \  long long int endIntersectionEnd3 = start1 < end2 ? end2 : start1;\n    long\
    \ long int startIntersectionEnd4 = start1 < end2 ? start1 : end2;\n    long long\
    \ int endIntersectionEnd4 = start1 < end2 ? end1 : start2;\n    long long int\
    \ startIntersectionEnd5 = start1 < end2 ? start2 : end1;\n    long long int endIntersectionEnd5\
    \ = start1 < end2 ? end2 : start1;\n    long long int startIntersectionEnd6 =\
    \ start1 < end2 ? start1 : end2;\n    long long int endIntersectionEnd6 = start1\
    \ < end2 ? end1 : start2;\n    long long int startIntersectionEnd7 = start1 <\
    \ end2 ? start2 : end1;\n    long long int endIntersectionEnd7 = start1 < end2\
    \ ? end2 : start1;\n    long long int startIntersectionEnd8 = start1 < end2 ?\
    \ start1 : end2;\n    long long int endIntersectionEnd8 = start1 < end2 ? end1\
    \ : start2;\n    long long int startIntersectionEnd9 = start1 < end2 ? start2\
    \ : end1;\n    long long int endIntersectionEnd9 = start1 < end2 ? end2 : start1;\n\
    \    long long int startIntersectionEnd10 = start1 < end2 ? start1 : end2;\n \
    \   long long int endIntersectionEnd10 = start1 < end2 ? end1 : start2;\n    long\
    \ long int startIntersectionEnd11 = start1 < end2 ? start2 : end1;\n    long long\
    \ int endIntersectionEnd11 = start1 < end2 ? end2 : start1;\n    long long int\
    \ startIntersectionEnd", "    // Your code here\n    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long len1 = end - start;\n\
    \    long long len2 = end2 - start2;\n    long long ans = len1 * len2;\n    if\
    \ (len1 == len2 && len1 != len2) {\n        return \"NO\";\n    }\n    if (len1\
    \ == len2 && len1 == len2) {\n        return \"YES\";\n    }\n    if (len1 !=\
    \ len2 && len1 != len2) {\n        return \"NO\";\n    }\n    if (len1 == len2\
    \ && len1 == len2) {\n        return \"YES\";\n    }\n    if (len1 == len2 &&\
    \ len1 != len2) {\n        return \"NO\";\n    }\n    if (len1 != len2 && len1\
    \ != len2) {\n        return \"NO\";\n    }\n    if (len1 == len2 && len1 == len2)\
    \ {\n        return \"YES\";\n    }\n    if (len1 != len2 && len1 != len2) {\n\
    \        return \"NO\";\n    }\n    if (len1 == len2 && len1 != len2) {\n    \
    \    return \"NO\";\n    }\n    if (len1 != len2 && len1 != len2) {\n        return\
    \ \"NO\";\n    }\n    if (len1 == len2 && len1 == len2) {\n        return \"YES\"\
    ;\n    }\n    if (len1 != len2 && len1 != len2) {\n        return \"NO\";\n  \
    \  }\n    if (len1 == len2 && len1 == len2) {\n        return \"YES\";\n    }\n\
    \    if (len1 != len2 && len1 != len2) {\n        return \"NO\";\n    }\n    if\
    \ (len1 == len2 && len1 == len2) {\n        return \"YES\";\n    }\n    if (len1\
    \ != len2 && len1 != len2) {\n        return \"NO\";\n    }\n    if (len1 == len2\
    \ && len1 == len2) {\n        return \"YES\";\n    }\n    if (len1 != len2 &&\
    \ len1 != len2) {\n        return \"NO\";\n    }\n    if (len1 == len2 && len1\
    \ == len2) {\n        return \"YES\";\n    }\n    if (len1 != len2 && len1 !=\
    \ len2) {\n        return \"NO\";\n    }\n    if (len1 == len2 && len1 == len2)\
    \ {\n        return \"YES\";\n    }\n    if (len1 != len2 && len1 != len2) {\n\
    \        return \"NO\";\n    }\n    if (len1 == len2 && len1 == len2) {\n    \
    \    return \"YES\";\n    }\n    if (len1 != len2 && len1 != len2) {\n       \
    \ return \"NO\";\n    }\n    if (len1 == len2 && len1 == len2) {\n        return\
    \ \"YES\";\n    }\n    if (len1 != len2 && len1 != len2) {\n        return \"\
    NO\";\n    }\n    if (len1 == len2 && len1 == len2) {\n        return \"YES\";",
  "    long long int a = interval1.get<0>(), b = interval1.get<1>();\n    long long\
    \ int c = interval2.get<0>(), d = interval2.get<1>();\n    long long int x = 0,\
    \ y = 0;\n    long long int length = 0, length2 = 0;\n    long long int length3\
    \ = 0, length4 = 0;\n    long long int length5 = 0, length6 = 0;\n    long long\
    \ int length7 = 0, length8 = 0;\n    long long int length9 = 0, length10 = 0;\n\
    \    long long int length11 = 0, length12 = 0;\n    long long int length13 = 0,\
    \ length14 = 0;\n    long long int length15 = 0, length16 = 0;\n    long long\
    \ int length17 = 0, length18 = 0;\n    long long int length19 = 0, length20 =\
    \ 0;\n    long long int length21 = 0, length22 = 0;\n    long long int length23\
    \ = 0, length24 = 0;\n    long long int length25 = 0, length26 = 0;\n    long\
    \ long int length27 = 0, length28 = 0;\n    long long int length29 = 0, length30\
    \ = 0;\n    long long int length31 = 0, length32 = 0;\n    long long int length33\
    \ = 0, length34 = 0;\n    long long int length35 = 0, length36 = 0;\n    long\
    \ long int length37 = 0, length38 = 0;\n    long long int length39 = 0, length40\
    \ = 0;\n    long long int length41 = 0, length42 = 0;\n    long long int length43\
    \ = 0, length44 = 0;\n    long long int length45 = 0, length46 = 0;\n    long\
    \ long int length47 = 0, length48 = 0;\n    long long int length49 = 0, length50\
    \ = 0;\n    long long int length51 = 0, length52 = 0;\n    long long int length53\
    \ = 0, length54 = 0;\n    long long int length55 = 0, length56 = 0;\n    long\
    \ long int length57 = 0, length58 = 0;\n    long long int length59 = 0, length60\
    \ = 0;\n    long long int length61 = 0, length62 = 0;\n    long long int length63\
    \ = 0, length64 = 0;\n    long long int length65 = 0, length66 = 0;\n    long\
    \ long int length67 = 0, length68 = 0;\n    long long int length69 = 0, length70\
    \ = 0;\n    long long int length71 = 0, length72 = 0;\n    long long int length73\
    \ = 0, length74 = 0;\n    long long int length75 = 0, length76 = 0;\n    long\
    \ long int length77 = 0, length78 = 0;\n    long long int length79 = 0, length80\
    \ = 0;\n    long long int length81 = 0, length82 = 0;\n    long long int ", " \
    \   long long start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n\
    \    long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long length = end1 - start1;\n    if (start2 < start1) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    if (end2 < end1) {\n  \
    \      std::swap(start1, start2);\n        std::swap(end1, end2);\n    }\n   \
    \ long long startIntersection = start1 + start2;\n    long long endIntersection\
    \ = end1 + end2;\n    if (startIntersection > endIntersection) {\n        return\
    \ \"NO\";\n    }\n    if (startIntersection == endIntersection) {\n        return\
    \ \"YES\";\n    }\n    long long startIntersection2 = startIntersection - endIntersection;\n\
    \    if (startIntersection2 == 0) {\n        return \"YES\";\n    }\n    if (startIntersection2\
    \ == 1) {\n        return \"NO\";\n    }\n    long long startIntersection3 = startIntersection2\
    \ - 1;\n    if (startIntersection3 == 0) {\n        return \"YES\";\n    }\n \
    \   if (startIntersection3 == 1) {\n        return \"NO\";\n    }\n    long long\
    \ startIntersection4 = startIntersection3 - 1;\n    if (startIntersection4 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (startIntersection4 == 1) {\n \
    \       return \"NO\";\n    }\n    long long startIntersection5 = startIntersection4\
    \ - 1;\n    if (startIntersection5 == 0) {\n        return \"YES\";\n    }\n \
    \   if (startIntersection5 == 1) {\n        return \"NO\";\n    }\n    long long\
    \ startIntersection6 = startIntersection5 - 1;\n    if (startIntersection6 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (startIntersection6 == 1) {\n \
    \       return \"NO\";\n    }\n    long long startIntersection7 = startIntersection6\
    \ - 1;\n    if (startIntersection7 == 0) {\n        return \"YES\";\n    }\n \
    \   if (startIntersection7 == 1) {\n        return \"NO\";\n    }\n    long long\
    \ startIntersection8 = startIntersection7 - 1;\n    if (startIntersection8 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (startIntersection8 == 1) {\n \
    \       return \"NO\";\n    }\n    long long startIntersection9 = startIntersection8\
    \ - 1;\n    if (startIntersection9 == 0) {\n        return \"YES\";\n    }\n \
    \   if (startIntersection9 == 1) {\n        return \"NO\";\n    }\n    long long\
    \ startIntersection10 = startIntersection9 - 1;\n    if (startIntersection10 ==\
    \ 0) {\n        return \"", "    long start = std::get<0>(interval1);\n    long\
    \ end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n \
    \   long end2 = std::get<1>(interval2);\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length == length2) {\n        return \"YES\";\n    }\n    long\
    \ mid = (start + end) / 2;\n    long mid2 = start2 + end2;\n    long mid3 = mid\
    \ + mid2;\n    long mid4 = mid3 - mid;\n    if (mid3 == mid4) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid2 + mid) {\n        return \"YES\";\n  \
    \  }\n    if (mid3 == mid2 - mid) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == mid2 + mid2) {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid2)\
    \ {\n        return \"YES\";\n    }\n    if (mid3 == mid2 + mid) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid2 - mid) {\n        return \"YES\";\n  \
    \  }\n    if (mid3 == mid2 - mid2) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == mid2 - mid) {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid2)\
    \ {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid2 - mid2) {\n        return \"YES\";\n \
    \   }\n    if (mid3 == mid2 - mid) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == mid2 - mid2) {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid)\
    \ {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid2) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid2 - mid) {\n        return \"YES\";\n  \
    \  }\n    if (mid3 == mid2 - mid2) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == mid2 - mid) {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid2)\
    \ {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid2 - mid2) {\n        return \"YES\";\n \
    \   }\n    if (mid3 == mid2 - mid) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == mid2 - mid2) {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid)\
    \ {\n        return \"YES\";\n    }\n    if (mid3 == mid2 - mid2) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid2 - mid) {\n        return \"YES\";\n  \
    \  }\n    if (mid3 == mid2 - mid2) {\n        return \"YES\";\n    }\n    if (mid",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    long long a = length / length2;\n   \
    \ long long b = length2 / length;\n    long long c = a * b;\n    long long d =\
    \ b * b;\n    long long e = a * b;\n    long long f = b * b;\n    long long g\
    \ = a * b;\n    long long h = (b * b) * (b * b);\n    long long i = a * b;\n \
    \   long long j = (b * b) * (b * b);\n    long long k = a * b;\n    long long\
    \ l = b * b;\n    long long m = a * b;\n    long long n = b * b;\n    long long\
    \ o = a * b;\n    long long p = b * b;\n    long long q = a * b;\n    long long\
    \ r = b * b;\n    long long s = a * b;\n    long long t = b * b;\n    long long\
    \ u = a * b;\n    long long v = b * b;\n    long long w = a * b;\n    long long\
    \ x = b * b;\n    long long y = a * b;\n    long long z = b * b;\n    long long\
    \ A = a * b;\n    long long B = b * b;\n    long long C = a * b;\n    long long\
    \ D = b * b;\n    long long E = a * b;\n    long long F = b * b;\n    long long\
    \ G = a * b;\n    long long H = b * b;\n    long long I = a * b;\n    long long\
    \ J = b * b;\n    long long K = a * b;\n    long long L = b * b;\n    long long\
    \ M = a * b;\n    long long N = b * b;\n    long long O = a * b;\n    long long\
    \ P = b * b;\n    long long Q = a * b;\n    long long R = b * b;\n    long long\
    \ S = a * b;\n    long long T = b * b;\n    long long U = a * b;\n    long long\
    \ V = b * b;\n    long long W = a * b;\n    long long X = b * b;\n    long long\
    \ Y = a * b;\n    long ", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    long long int\
    \ ans = length * length2;\n    long long int ans2 = length2 * length;\n    if\
    \ (ans == ans2) {\n        return \"YES\";\n    }\n    else {\n        return\
    \ \"NO\";\n    }", "    long long start = std::get<0>(interval1);\n    long long\
    \ end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (end < end2) {\n        return \"NO\"\
    ;\n    }\n    if (start == start2 && end == end2) {\n        return \"YES\";\n\
    \    }\n    long long mid = (start + end) / 2;\n    long long mid2 = (start2 +\
    \ end2) / 2;\n    if (mid == mid2) {\n        return \"YES\";\n    }\n    if (mid\
    \ > mid2) {\n        return \"NO\";\n    }\n    return \"NO\";", "    long long\
    \ start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n   \
    \ long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long startIntersection = start1 < end2 ? start1 : end2;\n    long long\
    \ endIntersection = start1 < end2 ? end1 : start2;\n    long long lengthIntersection\
    \ = startIntersection < endIntersection ? endIntersection - startIntersection\
    \ : startIntersection - endIntersection;\n    long long length1 = end1 - start1;\n\
    \    long long length2 = end2 - start2;\n    if (lengthIntersection == length1\
    \ && lengthIntersection == length2) {\n        return \"YES\";\n    }\n    if\
    \ (lengthIntersection == length1) {\n        return \"NO\";\n    }\n    if (lengthIntersection\
    \ == length2) {\n        return \"NO\";\n    }\n    return \"NO\";", "    long\
    \ long int start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::min(start1, start2);\n\
    \    long long int end = std::max(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return \"\
    YES\";\n    long long int mid = start + (length / 2);\n    long long int mid2\
    \ = end - (length / 2);\n    long long int mid3 = mid + (length / 2);\n    long\
    \ long int mid4 = mid2 - (length / 2);\n    long long int mid5 = mid3 + (length\
    \ / 2);\n    long long int mid6 = mid4 - (length / 2);\n    long long int mid7\
    \ = mid5 + (length / 2);\n    long long int mid8 = mid6 - (length / 2);\n    long\
    \ long int mid9 = mid7 + (length / 2);\n    long long int mid10 = mid8 - (length\
    \ / 2);\n    long long int mid11 = mid9 + (length / 2);\n    long long int mid12\
    \ = mid10 - (length / 2);\n    long long int mid13 = mid11 + (length / 2);\n \
    \   long long int mid14 = mid12 - (length / 2);\n    long long int mid15 = mid13\
    \ + (length / 2);\n    long long int mid16 = mid14 - (length / 2);\n    long long\
    \ int mid17 = mid15 + (length / 2);\n    long long int mid18 = mid16 - (length\
    \ / 2);\n    long long int mid19 = mid17 + (length / 2);\n    long long int mid20\
    \ = mid18 - (length / 2);\n    long long int mid21 = mid19 + (length / 2);\n \
    \   long long int mid22 = mid20 - (length / 2);\n    long long int mid23 = mid21\
    \ + (length / 2);\n    long long int mid24 = mid22 - (length / 2);\n    long long\
    \ int mid25 = mid23 + (length / 2);\n    long long int mid26 = mid24 - (length\
    \ / 2);\n    long long int mid27 = mid25 + (length / 2);\n    long long int mid28\
    \ = mid26 - (length / 2);\n    long long int mid29 = mid27 + (length / 2);\n \
    \   long long int mid30 = mid28 - (length / 2);\n", "    long long int start1\
    \ = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::max(start1, start2);\n\
    \    long long int end = std::min(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n        long\
    \ long int start3 = std::get<0>(interval1);\n        long long int end3 = std::get<1>(interval1);\n\
    \        long long int start4 = std::get<0>(interval2);\n        long long int\
    \ end4 = std::get<1>(interval2);\n        long long int start5 = std::max(start3,\
    \ start4);\n        long long int end5 = std::min(end3, end4);\n        long long\
    \ int start6 = std::max(start5, start2);\n        long long int end6 = std::min(end5,\
    \ end2);\n        long long int start7 = std::max(start6, start1);\n        long\
    \ long int end7 = std::min(end6, end1);\n        long long int start8 = std::max(start7,\
    \ start);\n        long long int end8 = std::min(end7, end);\n        long long\
    \ int start9 = std::max(start8, start1);\n        long long int end9 = std::min(end8,\
    \ end1);\n        long long int start10 = std::max(start9, start);\n        long\
    \ long int end10 = std::min(end9, end);\n        long long int start11 = std::max(start10,\
    \ start2);\n        long long int end11 = std::min(end10, end2);\n        long\
    \ long int start12 = std::max(start11, start2);\n        long long int end12 =\
    \ std::min(end11, end2);\n        long long int start13 = std::max(start12, start3);\n\
    \        long long int end13 = std::min(end12, end3);\n        long long int start14\
    \ = std::max(start13, start3);\n        long long int end14 = std::min(end13,\
    \ end3);\n        long long int start15 = std::max(start14, start4);\n       \
    \ long long int end15 = std::min(end14, end4);\n        long long int start16\
    \ = std::max(start15, start4);\n        long long int end16 = std::min(end15,\
    \ end4);\n        long long int start17 = std::max(start16, start5);\n       \
    \ long long int end17 = ", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    if (start > end) {\n  \
    \      std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if\
    \ (start2 > end2) {\n        std::swap(start2, end2);\n    }\n    long long int\
    \ start3 = start;\n    long long int end3 = end;\n    long long int start4 = start2;\n\
    \    long long int end4 = end2;\n    if (start3 > end3) {\n        std::swap(start3,\
    \ end3);\n        std::swap(start4, end4);\n    }\n    if (start4 > end4) {\n\
    \        std::swap(start4, end4);\n    }\n    long long int start5 = start3;\n\
    \    long long int end5 = end3;\n    long long int start6 = start4;\n    long\
    \ long int end6 = end4;\n    if (start5 > end5) {\n        std::swap(start5, end5);\n\
    \        std::swap(start6, end6);\n    }\n    if (start6 > end6) {\n        std::swap(start6,\
    \ end6);\n    }\n    long long int start7 = start5;\n    long long int end7 =\
    \ end5;\n    long long int start8 = start6;\n    long long int end8 = end6;\n\
    \    if (start7 > end7) {\n        std::swap(start7, end7);\n        std::swap(start8,\
    \ end8);\n    }\n    if (start8 > end8) {\n        std::swap(start8, end8);\n\
    \    }\n    long long int start9 = start7;\n    long long int end9 = end7;\n \
    \   long long int start10 = start8;\n    long long int end10 = end8;\n    if (start9\
    \ > end9) {\n        std::swap(start9, end9);\n        std::swap(start10, end10);\n\
    \    }\n    if (start10 > end10) {\n        std::swap(start10, end10);\n    }\n\
    \    long long int start11 = start9;\n    long long int end11 = end9;\n    long\
    \ long int start12 = start10;\n    long long int end12 = end10;\n    if (start11\
    \ > end11) {\n        std::swap(start11, end11);\n        std::swap(start12, end12);\n\
    \    }\n    if (start12 > end12) {\n        std::swap(start12, end12);\n    }\n\
    \    long long int start", "    long long start1 = std::get<0>(interval1);\n \
    \   long long end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end1 - start1\
    \ + end2 - start2;\n    if (length < 2) {\n        return \"NO\";\n    }\n   \
    \ long long mid1 = start1 + end1 / 2;\n    long long mid2 = start2 + end2 / 2;\n\
    \    long long mid = mid1 + mid2;\n    long long a = mid1 - mid2;\n    long long\
    \ b = mid2 - mid1;\n    long long c = mid;\n    long long d = mid1 + mid2;\n \
    \   long long e = mid2 - mid1;\n    long long f = mid;\n    long long g = mid1\
    \ + mid2;\n    long long h = mid2 - mid1;\n    long long i = mid;\n    long long\
    \ j = mid1 + mid2;\n    long long k = mid2 - mid1;\n    long long l = mid;\n \
    \   long long m = mid1 + mid2;\n    long long n = mid2 - mid1;\n    long long\
    \ o = mid;\n    long long p = mid1 + mid2;\n    long long q = mid2 - mid1;\n \
    \   long long r = mid;\n    long long s = mid1 + mid2;\n    long long t = mid2\
    \ - mid1;\n    long long u = mid;\n    long long v = mid1 + mid2;\n    long long\
    \ w = mid2 - mid1;\n    long long x = mid;\n    long long y = mid1 + mid2;\n \
    \   long long z = mid2 - mid1;\n    long long A = mid;\n    long long B = mid1\
    \ + mid2;\n    long long C = mid2 - mid1;\n    long long D = mid;\n    long long\
    \ E = mid1 + mid2;\n    long long F = mid2 - mid1;\n    long long G = mid;\n \
    \   long long H = mid1 + mid2;\n    long long I = mid2 - mid1;\n    long long\
    \ J = mid;\n    long long K = mid1 + mid2;\n    long long L = mid2 - mid1;\n \
    \   long long M = mid;\n    long long N = mid1 + mid2;\n    long long O = mid2\
    \ - mid1;\n    long long P = mid;\n    long long Q = mid1 + mid2;\n    long long\
    \ R = mid2 - mid1;\n    long long S = mid;\n    long long T = mid1 + mid2;\n \
    \   long long U = mid2 - mid1;\n    long long ", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int startIntersection = std::min(start1, start2);\n    long long\
    \ int endIntersection = std::max(end1, end2);\n    long long int lengthIntersection\
    \ = endIntersection - startIntersection;\n    if (lengthIntersection == 0)\n \
    \       return \"NO\";\n    if (lengthIntersection == 1)\n        return \"YES\"\
    ;\n    long long int lengthPrime = 1;\n    for (long long int i = 2; i <= lengthIntersection;\
    \ i++) {\n        if (lengthIntersection % i == 0)\n            lengthPrime =\
    \ i;\n    }\n    if (lengthPrime == lengthIntersection)\n        return \"YES\"\
    ;\n    return \"NO\";", "    // Write your code here\n    long long start1 = interval1.get<0>();\n\
    \    long long end1 = interval1.get<1>();\n    long long start2 = interval2.get<0>();\n\
    \    long long end2 = interval2.get<1>();\n    long long length = end1 - start1;\n\
    \    if (end2 < start1) {\n        length = end2 - start2;\n    }\n    if (length\
    \ == 0) {\n        return \"NO\";\n    }\n    long long inter = start1 + end2;\n\
    \    long long prime = inter / length;\n    if (prime == 0) {\n        return\
    \ \"NO\";\n    }\n    if (prime == 1) {\n        return \"YES\";\n    }\n    if\
    \ (prime == 2) {\n        return \"YES\";\n    }\n    if (prime == 3) {\n    \
    \    return \"YES\";\n    }\n    if (prime == 4) {\n        return \"YES\";\n\
    \    }\n    if (prime == 5) {\n        return \"YES\";\n    }\n    if (prime ==\
    \ 6) {\n        return \"YES\";\n    }\n    if (prime == 7) {\n        return\
    \ \"YES\";\n    }\n    if (prime == 8) {\n        return \"YES\";\n    }\n   \
    \ if (prime == 9) {\n        return \"YES\";\n    }\n    if (prime == 10) {\n\
    \        return \"YES\";\n    }\n    if (prime == 11) {\n        return \"YES\"\
    ;\n    }\n    if (prime == 12) {\n        return \"YES\";\n    }\n    if (prime\
    \ == 13) {\n        return \"YES\";\n    }\n    if (prime == 14) {\n        return\
    \ \"YES\";\n    }\n    if (prime == 15) {\n        return \"YES\";\n    }\n  \
    \  if (prime == 16) {\n        return \"YES\";\n    }\n    if (prime == 17) {\n\
    \        return \"YES\";\n    }\n    if (prime == 18) {\n        return \"YES\"\
    ;\n    }\n    if (prime == 19) {\n        return \"YES\";\n    }\n    if (prime\
    \ == 20) {\n        return \"YES\";\n    }\n    if (prime == 21) {\n        return\
    \ \"YES\";\n    }\n    if (prime == 22) {\n        return \"YES\";\n    }\n  \
    \  if (prime == 23) {\n        return \"YES\";\n    }\n    if (prime == 24) {\n\
    \        return \"YES\";\n    }\n    if (prime == 25) {\n        return \"YES\"\
    ;\n    }\n    if (prime == 26) {\n        return \"YES\";\n    }\n    if (prime\
    \ == 27) {\n        return \"YES\";\n    }\n    if (prime == 28) {\n        return\
    \ \"YES\";\n    }\n    if (prime == 29) {\n        return \"YES\";\n    }\n  \
    \  if (prime == 30) {\n        return \"YES\";\n    }\n    if (prime == 31) {\n\
    \        return \"YES\";\n    }\n    if (prime == 32) {\n        return \"YES\"\
    ;\n    }\n    if (prime == 33) {\n        return \"YES\";\n    }\n    if (prime\
    \ == ", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long length = end - start;\n    long length2 = end2 - start2;\n  \
    \  if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1) {\n\
    \        return \"YES\";\n    }\n    if (length2 == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n    if\
    \ (length < length2) {\n        return \"NO\";\n    }\n    return \"NO\";", " \
    \   if (std::get<0>(interval1) < std::get<0>(interval2)) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    if (std::get<0>(interval1) > std::get<0>(interval2))\
    \ {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1) < std::get<1>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long length = end - start;\n    if (length == 1) {\n        return \"NO\"\
    ;\n    }\n    long long mid = (start + end) / 2;\n    if (std::get<0>(interval2)\
    \ > mid) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval2) > mid)\
    \ {\n        return \"NO\";\n    }\n    long long mid2 = mid + 1;\n    if (std::get<0>(interval1)\
    \ < mid2) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1) < mid2)\
    \ {\n        return \"NO\";\n    }\n    long long mid3 = mid + 2;\n    if (std::get<0>(interval2)\
    \ < mid3) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval2) < mid3)\
    \ {\n        return \"NO\";\n    }\n    long long mid4 = mid + 3;\n    if (std::get<0>(interval1)\
    \ < mid4) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1) < mid4)\
    \ {\n        return \"NO\";\n    }\n    long long mid5 = mid + 4;\n    if (std::get<0>(interval2)\
    \ < mid5) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval2) < mid5)\
    \ {\n        return \"NO\";\n    }\n    long long mid6 = mid + 5;\n    if (std::get<0>(interval1)\
    \ < mid6) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1) < mid6)\
    \ {\n        return \"NO\";\n    }\n    long long mid7 = mid + 6;\n    if (std::get<0>(interval2)\
    \ < mid7) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval2) < mid7)\
    \ {\n        return \"NO\";\n    }\n    long long mid8 = mid + 7;\n    if (std::get<0>(interval1)\
    \ < mid8) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1) < mid8)\
    \ {", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    long\
    \ long intersection = end - start;\n    if (intersection == 0) return \"NO\";\n\
    \    if (intersection == 1) return \"YES\";\n    long long prime = 1;\n    for\
    \ (long long i = 2; i <= intersection; i++) {\n        if (i % 2 == 0) {\n   \
    \         prime *= i;\n        }\n        else {\n            prime /= i;\n  \
    \      }\n    }\n    if (prime == 1) return \"YES\";\n    return \"NO\";", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        length = length2;\n    }\n    long long mid = length / 2;\n    long\
    \ long mid2 = length2 / 2;\n    long long mid3 = mid + mid2;\n    long long mid4\
    \ = mid3 + mid2;\n    long long mid5 = mid4 + mid2;\n    long long mid6 = mid5\
    \ + mid2;\n    long long mid7 = mid6 + mid2;\n    long long mid8 = mid7 + mid2;\n\
    \    long long mid9 = mid8 + mid2;\n    long long mid10 = mid9 + mid2;\n    long\
    \ long mid11 = mid10 + mid2;\n    long long mid12 = mid11 + mid2;\n    long long\
    \ mid13 = mid12 + mid2;\n    long long mid14 = mid13 + mid2;\n    long long mid15\
    \ = mid14 + mid2;\n    long long mid16 = mid15 + mid2;\n    long long mid17 =\
    \ mid16 + mid2;\n    long long mid18 = mid17 + mid2;\n    long long mid19 = mid18\
    \ + mid2;\n    long long mid20 = mid19 + mid2;\n    long long mid21 = mid20 +\
    \ mid2;\n    long long mid22 = mid21 + mid2;\n    long long mid23 = mid22 + mid2;\n\
    \    long long mid24 = mid23 + mid2;\n    long long mid25 = mid24 + mid2;\n  \
    \  long long mid26 = mid25 + mid2;\n    long long mid27 = mid26 + mid2;\n    long\
    \ long mid28 = mid27 + mid2;\n    long long mid29 = mid28 + mid2;\n    long long\
    \ mid30 = mid29 + mid2;\n    long long mid31 = mid30 + mid2;\n    long long mid32\
    \ = mid31 + mid2;\n    long long mid33 = mid32 + mid2;\n    long long mid34 =\
    \ mid33 + mid2;\n    long long mid35 = mid34 + mid2;\n    long long mid36", " \
    \   long long int a = interval1[0];\n    long long int b = interval1[1];\n   \
    \ long long int c = interval2[0];\n    long long int d = interval2[1];\n    long\
    \ long int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n    long\
    \ long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int m = 0;\n    long long int n = 0;\n    long\
    \ long int o = 0;\n    long long int p = 0;\n    long long int q = 0;\n    long\
    \ long int r = 0;\n    long long int s = 0;\n    long long int t = 0;\n    long\
    \ long int u = 0;\n    long long int v = 0;\n    long long int w = 0;\n    long\
    \ long int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n    long\
    \ long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int m = 0;\n    long long int n = 0;\n    long\
    \ long int o = 0;\n    long long int p = 0;\n    long long int q = 0;\n    long\
    \ long int r = 0;\n    long long int s = 0;\n    long long int t = 0;\n    long\
    \ long int u = 0;\n    long long int v = 0;\n    long long int w = 0;\n    long\
    \ long int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n    long\
    \ long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int m = 0;\n    long long int n = 0;\n    long\
    \ long int o = 0;\n    long long int p = 0;\n    long long int q = 0;\n    long\
    \ long int r = 0;\n    long long int s = 0;\n    long long int t = 0;\n    long\
    \ long int u = 0;\n    long long int v = 0;\n    long long int w = 0;\n    long\
    \ long int x = 0;\n    long long int y = 0;\n    long long int z = 0;\n    long\
    \ long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n    long\
    \ long int l = 0;\n    long long int m = 0;\n    long long int n = 0;\n    long\
    \ long int o = 0;\n    long long int p = 0;\n    long long int q = 0;\n    long\
    \ long int r = 0;\n    long long int s = 0;\n    long long int t = 0;\n    long\
    \ long int u", "    long long start = std::get<0>(interval1);\n    long long end\
    \ = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 > length)\
    \ {\n        std::swap(length, length2);\n    }\n    if (length == 1) {\n    \
    \    return \"NO\";\n    }\n    if (length2 == 1) {\n        return \"NO\";\n\
    \    }\n    long long mid = (start + end) / 2;\n    long long mid2 = (start2 +\
    \ end2) / 2;\n    if (mid * mid == length * length2) {\n        return \"YES\"\
    ;\n    }\n    if (mid * mid < length * length2) {\n        return \"NO\";\n  \
    \  }\n    if (mid * mid > length * length2) {\n        return \"NO\";\n    }\n\
    \    return \"YES\";", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length1 = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length1 == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length1 == length2) {\n        if\
    \ (start <= end2 && start2 <= end) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if (length1 > length2) {\n        std::swap(length1,\
    \ length2);\n    }\n    long long length3 = length1 - length2;\n    if (length3\
    \ == 1) {\n        return \"YES\";\n    }\n    if (length3 == 2) {\n        if\
    \ (start <= end2 && start2 <= end) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if (length3 > 2) {\n        std::swap(length3,\
    \ length2);\n    }\n    long long length4 = length3 - 1;\n    if (length4 == 1)\
    \ {\n        return \"YES\";\n    }\n    if (length4 == 2) {\n        if (start\
    \ <= end2 && start2 <= end) {\n            return \"YES\";\n        }\n      \
    \  return \"NO\";\n    }\n    if (length4 > 2) {\n        std::swap(length4, length2);\n\
    \    }\n    long long length5 = length4 - 1;\n    if (length5 == 1) {\n      \
    \  return \"YES\";\n    }\n    if (length5 == 2) {\n        if (start <= end2\
    \ && start2 <= end) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (length5 > 2) {\n        std::swap(length5, length2);\n\
    \    }\n    long long length6 = length5 - 1;\n    if (length6 == 1) {\n      \
    \  return \"YES\";\n    }\n    if (length6 == 2) {\n        if (start <= end2\
    \ && start2 <= end) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (length6 > 2) {\n        std::swap(length6, length2);\n\
    \    }\n    long long length7 = length6 - 1;\n    if (length7 == 1) {\n      \
    \  return \"YES\";\n    }\n    if (length7 == 2) {\n        if (start <= end2\
    \ && start2 <= end) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (length7 > 2) {\n        std::swap(length7, length2);\n\
    \    }\n    long long length8 = length7 - 1;\n    if (length8 == 1) {\n      \
    \  return \"YES\";\n    }\n    if (length8 == 2) {\n        if (start <= end2\
    \ && start2 <= end) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (start\
    \ == start2) {\n        if (end == end2) {\n            return \"YES\";\n    \
    \    }\n        return \"NO\";\n    }\n    long mid = (start + end) / 2;\n   \
    \ if (mid == start2) {\n        return \"YES\";\n    }\n    if (mid == end2) {\n\
    \        return \"NO\";\n    }\n    if (mid % 2 == 0) {\n        return intersection(std::make_tuple(start,\
    \ mid), std::make_tuple(mid, end));\n    }\n    return intersection(std::make_tuple(start,\
    \ mid), std::make_tuple(mid, end2));", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == length2) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"NO\";\n        }\n        if (length == 3) {\n         \
    \   return \"YES\";\n        }\n        if (length == 4) {\n            return\
    \ \"YES\";\n        }\n        if (length == 5) {\n            return \"YES\"\
    ;\n        }\n        if (length == 6) {\n            return \"YES\";\n      \
    \  }\n        if (length == 7) {\n            return \"YES\";\n        }\n   \
    \     if (length == 8) {\n            return \"YES\";\n        }\n        if (length\
    \ == 9) {\n            return \"YES\";\n        }\n        if (length == 10) {\n\
    \            return \"YES\";\n        }\n        if (length == 11) {\n       \
    \     return \"YES\";\n        }\n        if (length == 12) {\n            return\
    \ \"YES\";\n        }\n        if (length == 13) {\n            return \"YES\"\
    ;\n        }\n        if (length == 14) {\n            return \"YES\";\n     \
    \   }\n        if (length == 15) {\n            return \"YES\";\n        }\n \
    \       if (length == 16) {\n            return \"YES\";\n        }\n        if\
    \ (length == 17) {\n            return \"YES\";\n        }\n        if (length\
    \ == 18) {\n            return \"YES\";\n        }\n        if (length == 19)\
    \ {\n            return \"YES\";\n        }\n        if (length == 20) {\n   \
    \         return \"YES\";\n        }\n        if (length == 21) {\n          \
    \  return \"YES\";\n        }\n        if (length == 22) {\n            return\
    \ \"YES\";\n        }\n        if (length == 23) {\n            return \"YES\"\
    ;\n        }\n        if (length == 24) {\n            return \"YES\";\n     \
    \   }\n        if (length == 25) {\n            return \"YES\";\n        }\n \
    \       if (length == 26) {\n            return \"YES\";\n        }\n        if\
    \ (length == 27) {\n            return \"YES\";\n        }\n        if (length\
    \ == 28) {\n            return \"YES\";\n        }\n        if (length == 29)\
    \ {\n            return \"YES\";\n        }\n        if (length == 30) {\n   \
    \         return \"YES\";\n        }\n        if (length == 31) {\n          \
    \  return \"YES\";\n        }\n        if (length == 32) {\n            return\
    \ \"YES\";\n        }\n        if (length == 33) {\n            return \"YES\"\
    ;\n        }\n        if (length == 34) {\n            return \"YES\";\n     \
    \   }\n        if (length == 35) {\n            return \"YES\";\n        }\n \
    \       if (length == 36) {\n            return \"YES\";\n        }\n        if\
    \ (length == 37) {\n            return \"YES\";\n        }\n        if (length\
    \ == 38) {\n            return \"YES\";\n        }\n        if (length == 39)\
    \ {\n", "    long long int start1 = std::get<0>(interval1);\n    long long int\
    \ end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return\
    \ \"YES\";\n    long long int mid = start + (length / 2);\n    if (mid == start)\
    \ return \"YES\";\n    if (mid == end) return \"YES\";\n    if (mid % 2 == 0)\
    \ return intersection(std::make_tuple(start, mid), std::make_tuple(mid, end));\n\
    \    return intersection(std::make_tuple(start, mid), std::make_tuple(mid, end));",
  "    long long start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n\
    \    long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long length = end1 - start1;\n    long long length2 = end2 - start2;\n\
    \    if (length < 0 || length2 < 0 || length == length2) {\n        return \"\
    NO\";\n    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    if (length2\
    \ == 1) {\n        return \"YES\";\n    }\n    long long start3 = start1 + start2;\n\
    \    long long end3 = end1 + end2;\n    long long length3 = end3 - start3;\n \
    \   if (length3 == 1) {\n        return \"YES\";\n    }\n    if (length3 == 2)\
    \ {\n        return \"NO\";\n    }\n    if (length3 == 3) {\n        return \"\
    YES\";\n    }\n    if (length3 == length) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n  \
    \  end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    long long mid = start + (end - start) / 2;\n    long long count\
    \ = 0;\n    for (long long i = start; i <= mid; ++i) {\n        if (i == mid)\
    \ {\n            ++count;\n        }\n        else {\n            if (std::find(std::begin(interval1),\
    \ std::end(interval1), i) != std::end(interval1)) {\n                ++count;\n\
    \            }\n        }\n    }\n    if (count == 1) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1;\n    long long int endIntersection = end1;\n    if (start1 < end2\
    \ && start2 < end1) {\n        startIntersection = start2;\n        endIntersection\
    \ = end2;\n    }\n    if (start1 < end2 && start2 < end2) {\n        startIntersection\
    \ = start1;\n        endIntersection = end1;\n    }\n    if (start1 < end1 &&\
    \ start2 < end1) {\n        startIntersection = start1;\n        endIntersection\
    \ = end2;\n    }\n    if (start1 < end1 && start2 < end2) {\n        startIntersection\
    \ = start2;\n        endIntersection = end1;\n    }\n    if (start1 < end2 &&\
    \ start1 < end2) {\n        startIntersection = start1;\n        endIntersection\
    \ = end1;\n    }\n    if (start2 < end1 && start2 < end2) {\n        startIntersection\
    \ = start2;\n        endIntersection = end1;\n    }\n    if (start2 < end1 &&\
    \ start2 < end2) {\n        startIntersection = start1;\n        endIntersection\
    \ = end2;\n    }\n    if (start2 < end2 && start1 < end1) {\n        startIntersection\
    \ = start2;\n        endIntersection = end1;\n    }\n    if (start2 < end2 &&\
    \ start2 < end1) {\n        startIntersection = start2;\n        endIntersection\
    \ = end2;\n    }\n    if (start1 < end1 && start2 < end1) {\n        startIntersection\
    \ = start1;\n        endIntersection = end2;\n    }\n    if (start1 < end1 &&\
    \ start2 < end2) {\n        startIntersection = start2;\n        endIntersection\
    \ = end1;\n    }\n    if (start1 < end2 && start1 < end2) {\n        startIntersection\
    \ = start1;\n        endIntersection = end1;\n    }\n    if (start2 < end1 &&\
    \ start2 < end1) {\n        startIntersection = start2;\n        endIntersection\
    \ = end2;\n    }\n    if (start2 < end1 && start2 < end2) {\n        startIntersection\
    \ = start1;\n        endIntersection = end2;\n    }\n    if (start2 < end2 &&\
    \ start1 < end1) {\n        startIntersection = start2;\n        endIntersection\
    \ = end1;\n    }\n    if (start2 < end2 && start2 < end1) {\n        startIntersection\
    \ = start2;\n        endIntersection = end2;\n    }\n    if (start1 < end1 &&\
    \ start2 < end1) {\n        startIntersection = start2;\n        endIntersection\
    \ = end", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long length = end - start;\n    long length2 = end2 - start2;\n    if (length\
    \ == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        length\
    \ = length2;\n    }\n    long mid = length / 2;\n    long mid2 = length2 / 2;\n\
    \    long count = 0;\n    long count2 = 0;\n    while (count < mid && count2 <\
    \ mid2) {\n        if (std::get<0>(interval1) < std::get<0>(interval2)) {\n  \
    \          if (std::get<1>(interval1) < std::get<1>(interval2)) {\n          \
    \      count++;\n            } else {\n                count2++;\n           \
    \ }\n        } else {\n            if (std::get<1>(interval1) < std::get<1>(interval2))\
    \ {\n                count++;\n            } else {\n                count2++;\n\
    \            }\n        }\n    }\n    if (count == mid) {\n        return \"YES\"\
    ;\n    }\n    if (count2 == mid2) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long long int start1 = interval1.get<0>();\n    long long int\
    \ end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    long long int prime = 1;\n    long long int prime_length\
    \ = length;\n    while (prime_length < 2) {\n        prime = prime * prime;\n\
    \        prime_length = prime_length * prime;\n    }\n    if (prime_length ==\
    \ length) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    long long m = length\
    \ / length2;\n    long long n = length % length2;\n    long long m2 = m * m;\n\
    \    long long n2 = n * n;\n    long long m3 = m2 * m;\n    long long n3 = n2\
    \ * n;\n    long long m4 = m3 * m;\n    long long n4 = n3 * n;\n    long long\
    \ m5 = m4 * m;\n    long long n5 = n4 * n;\n    long long m6 = m5 * m;\n    long\
    \ long n6 = n5 * n;\n    long long m7 = m6 * m;\n    long long n7 = n6 * n;\n\
    \    long long m8 = m7 * m;\n    long long n8 = n7 * n;\n    long long m9 = m8\
    \ * m;\n    long long n9 = n8 * n;\n    long long m10 = m9 * m;\n    long long\
    \ n10 = n9 * n;\n    long long m11 = m10 * m;\n    long long n11 = n10 * n;\n\
    \    long long m12 = m11 * m;\n    long long n12 = n11 * n;\n    long long m13\
    \ = m12 * m;\n    long long n13 = n12 * n;\n    long long m14 = m13 * m;\n   \
    \ long long n14 = n13 * n;\n    long long m15 = m14 * m;\n    long long n15 =\
    \ n14 * n;\n    long long m16 = m15 * m;\n    long long n16 = n15 * n;\n    long\
    \ long m17 = m16 * m;\n    long long n17 = n16 * n;\n    long long m18 = m17 *\
    \ m;\n    long long n18 = n17 * n;\n    long long m19 = m18 * m;\n    long long\
    \ n19 = n18 * n;\n    long long m20 = m19 * m;\n    long long n20 = n19 * n;\n\
    \    long long m21 = m20 * m;\n    long long n21 = n20 * n;\n    long long m22\
    \ = m21 * m;\n    long long n22 = n", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return\
    \ \"YES\";\n    long long int mid = start + (end - start) / 2;\n    if (mid ==\
    \ start) return \"YES\";\n    if (mid == end) return \"NO\";\n    if (length ==\
    \ 2 && mid == start1 && mid == end1) return \"YES\";\n    if (length == 2 && mid\
    \ == start2 && mid == end2) return \"YES\";\n    if (length == 2 && mid == start1\
    \ && mid == end2) return \"NO\";\n    if (length == 2 && mid == start2 && mid\
    \ == end1) return \"NO\";\n    if (length == 3 && mid == start1 && mid == end1\
    \ && mid == end2) return \"YES\";\n    if (length == 3 && mid == start2 && mid\
    \ == end1 && mid == end2) return \"YES\";\n    if (length == 3 && mid == start1\
    \ && mid == end1 && mid == end2) return \"NO\";\n    if (length == 3 && mid ==\
    \ start2 && mid == end1 && mid == end2) return \"NO\";\n    if (length == 4 &&\
    \ mid == start1 && mid == end1 && mid == end2 && mid == end1) return \"YES\";\n\
    \    if (length == 4 && mid == start2 && mid == end1 && mid == end2 && mid ==\
    \ end1) return \"YES\";\n    if (length == 4 && mid == start1 && mid == end1 &&\
    \ mid == end2 && mid == end2) return \"NO\";\n    if (length == 4 && mid == start2\
    \ && mid == end1 && mid == end2 && mid == end2) return \"NO\";\n    if (length\
    \ == 5 && mid == start1 && mid == end1 && mid == end2 && mid == end2 && mid ==\
    \ end1) return \"YES\";\n    if (length == 5 && mid == start2 && mid == end1 &&\
    \ mid == end2 && mid == end2 && mid == end1) return \"YES\";\n    if (length ==\
    \ 5 && mid == start1 && mid == end1 && mid == end2 && mid == end2 && mid == end2)\
    \ return \"NO\";\n    if (length == 5 && mid == start2 && mid == end1 && mid ==\
    \ end2 && mid == end2 && mid == end2) return \"NO\";\n    if (length == 6 && mid\
    \ == start1 && mid == end", "    // Your code here\n    long long int start1 =\
    \ interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n    long\
    \ long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int start3 = start1;\n    long long int end3 = end1;\n    long\
    \ long int start4 = start2;\n    long long int end4 = end2;\n    long long int\
    \ start5 = start3;\n    long long int end5 = end3;\n    long long int start6 =\
    \ start4;\n    long long int end6 = end4;\n    long long int start7 = start5;\n\
    \    long long int end7 = end5;\n    long long int start8 = start6;\n    long\
    \ long int end8 = end6;\n    long long int start9 = start7;\n    long long int\
    \ end9 = end7;\n    long long int start10 = start8;\n    long long int end10 =\
    \ end8;\n    long long int start11 = start9;\n    long long int end11 = end9;\n\
    \    long long int start12 = start10;\n    long long int end12 = end10;\n    long\
    \ long int start13 = start11;\n    long long int end13 = end11;\n    long long\
    \ int start14 = start12;\n    long long int end14 = end12;\n    long long int\
    \ start15 = start13;\n    long long int end15 = end13;\n    long long int start16\
    \ = start14;\n    long long int end16 = end14;\n    long long int start17 = start15;\n\
    \    long long int end17 = end15;\n    long long int start18 = start16;\n    long\
    \ long int end18 = end16;\n    long long int start19 = start17;\n    long long\
    \ int end19 = end17;\n    long long int start20 = start18;\n    long long int\
    \ end20 = end18;\n    long long int start21 = start19;\n    long long int end21\
    \ = end19;\n    long long int start22 = start20;\n    long long int end22 = end20;\n\
    \    long long int start23 = start21;\n    long long int end23 = end21;\n    long\
    \ long int start24 = start22;\n    long long int end24 = end22;\n    long long\
    \ int start25 = start23;\n    long long int end25 = end23;\n    long long ", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    long\
    \ long length = end - start;\n    long long ans = 0;\n    long long flag = 0;\n\
    \    long long flag2 = 0;\n    long long flag3 = 0;\n    long long flag4 = 0;\n\
    \    long long flag5 = 0;\n    long long flag6 = 0;\n    long long flag7 = 0;\n\
    \    long long flag8 = 0;\n    long long flag9 = 0;\n    long long flag10 = 0;\n\
    \    long long flag11 = 0;\n    long long flag12 = 0;\n    long long flag13 =\
    \ 0;\n    long long flag14 = 0;\n    long long flag15 = 0;\n    long long flag16\
    \ = 0;\n    long long flag17 = 0;\n    long long flag18 = 0;\n    long long flag19\
    \ = 0;\n    long long flag20 = 0;\n    long long flag21 = 0;\n    long long flag22\
    \ = 0;\n    long long flag23 = 0;\n    long long flag24 = 0;\n    long long flag25\
    \ = 0;\n    long long flag26 = 0;\n    long long flag27 = 0;\n    long long flag28\
    \ = 0;\n    long long flag29 = 0;\n    long long flag30 = 0;\n    long long flag31\
    \ = 0;\n    long long flag32 = 0;\n    long long flag33 = 0;\n    long long flag34\
    \ = 0;\n    long long flag35 = 0;\n    long long flag36 = 0;\n    long long flag37\
    \ = 0;\n    long long flag38 = 0;\n    long long flag39 = 0;\n    long long flag40\
    \ = 0;\n    long long flag41 = 0;\n    long long flag42 = 0;\n    long long flag43\
    \ = 0;\n    long long flag44 = 0;\n    long long flag45 = 0;\n    long long flag46\
    \ = 0;\n    long long flag47 = 0;\n    long long flag48 = 0;\n    long long flag49\
    \ = 0;\n    long long flag50 = 0;\n    long long flag51 = 0;\n    long long flag52\
    \ = 0;\n    long long flag53 = 0;\n    long long flag54 = 0;\n    long long flag55\
    \ = 0;\n    long long flag56 = 0;\n    long long flag57 = 0;\n    long long flag58\
    \ = 0;\n    long long flag59 = 0;\n    long long flag60 = 0;\n    long long flag61\
    \ = 0;\n    long long flag62 = 0;\n    long long flag63 = 0;\n    long long flag64\
    \ = 0;\n    long long flag65 = 0;\n    long long flag66", "    // Write your code\
    \ here\n    long long start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n\
    \    long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long startIntersection = start1 < end2 ? start1 : end2;\n    long long\
    \ endIntersection = start1 < end2 ? end2 : start1;\n    long long lengthIntersection\
    \ = start1 < end2 ? end1 - start1 : end2 - start2;\n    long long lengthIntersectionPrime\
    \ = lengthIntersection;\n    bool isPrime = true;\n    for (long long i = startIntersection;\
    \ i <= endIntersection; i++) {\n        if (i % 2 == 0) {\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    if (isPrime) {\n       \
    \ return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    long start\
    \ = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n    long\
    \ start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long length = end - start;\n    long length2 = end2 - start2;\n    if (length\
    \ == length2) {\n        if (length == 1) {\n            return \"NO\";\n    \
    \    } else {\n            return \"YES\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }", "    long long start = std::get<0>(interval1);\n    long long\
    \ end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n    end\
    \ = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    long long mid = start + (end - start) / 2;\n    long long count\
    \ = 0;\n    for (long long i = start; i <= mid; ++i) {\n        count += std::count(std::begin(interval1),\
    \ std::end(interval1), i);\n    }\n    if (count % 2 == 0) {\n        return \"\
    NO\";\n    }\n    return \"YES\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length1 =\
    \ end - start;\n    long long length2 = end2 - start2;\n    if (length1 < length2)\
    \ {\n        std::swap(length1, length2);\n    }\n    if (length1 == length2)\
    \ {\n        return \"NO\";\n    }\n    long long length_intersection = length1\
    \ - length2;\n    if (length_intersection == 1) {\n        return \"NO\";\n  \
    \  }\n    long long length_prime = length_intersection / 2;\n    long long length_prime_2\
    \ = length_intersection / 3;\n    long long length_prime_3 = length_intersection\
    \ / 5;\n    long long length_prime_5 = length_intersection / 7;\n    long long\
    \ length_prime_7 = length_intersection / 11;\n    long long length_prime_11 =\
    \ length_intersection / 13;\n    long long length_prime_13 = length_intersection\
    \ / 17;\n    long long length_prime_17 = length_intersection / 19;\n    long long\
    \ length_prime_19 = length_intersection / 23;\n    long long length_prime_23 =\
    \ length_intersection / 29;\n    long long length_prime_29 = length_intersection\
    \ / 31;\n    long long length_prime_31 = length_intersection / 37;\n    long long\
    \ length_prime_37 = length_intersection / 41;\n    long long length_prime_41 =\
    \ length_intersection / 43;\n    long long length_prime_45 = length_intersection\
    \ / 49;\n    long long length_prime_49 = length_intersection / 53;\n    long long\
    \ length_prime_53 = length_intersection / 59;\n    long long length_prime_59 =\
    \ length_intersection / 61;\n    long long length_prime_61 = length_intersection\
    \ / 67;\n    long long length_prime_67 = length_intersection / 71;\n    long long\
    \ length_prime_71 = length_intersection / 71;\n    long long length_prime_73 =\
    \ length_intersection / 79;\n    long long length_prime_79 = length_intersection\
    \ / 83;\n    long long length_prime_83 = length_intersection / 89;\n    long long\
    \ length_", "    long long int start1 = interval1.get<0>();\n    long long int\
    \ end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = max(start1,\
    \ start2);\n    long long int end = min(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    long long int mid =\
    \ start + (end - start) / 2;\n    if (mid == start) return \"YES\";\n    if (mid\
    \ == end) return \"YES\";\n    if (length == 1) return \"NO\";\n    if (length\
    \ == 2) return \"YES\";\n    if (length == 3) return \"YES\";\n    if (length\
    \ == 5) return \"YES\";\n    if (length == 7) return \"YES\";\n    if (length\
    \ == 11) return \"YES\";\n    if (length == 13) return \"YES\";\n    if (length\
    \ == 17) return \"YES\";\n    if (length == 19) return \"YES\";\n    if (length\
    \ == 23) return \"YES\";\n    if (length == 29) return \"YES\";\n    if (length\
    \ == 31) return \"YES\";\n    if (length == 37) return \"YES\";\n    if (length\
    \ == 43) return \"YES\";\n    if (length == 59) return \"YES\";\n    if (length\
    \ == 73) return \"YES\";\n    if (length == 99) return \"YES\";\n    if (length\
    \ == 109) return \"YES\";\n    if (length == 127) return \"YES\";\n    if (length\
    \ == 145) return \"YES\";\n    if (length == 179) return \"YES\";\n    if (length\
    \ == 197) return \"YES\";\n    if (length == 231) return \"YES\";\n    if (length\
    \ == 297) return \"YES\";\n    if (length == 381) return \"YES\";\n    if (length\
    \ == 431) return \"YES\";\n    if (length == 591) return \"YES\";\n    if (length\
    \ == 731) return \"YES\";\n    if (length == 991) return \"YES\";\n    if (length\
    \ == 1099) return \"YES\";\n    if (length == 1279) return \"YES\";\n    if (length\
    \ == 1459) return \"YES\";\n    if (length == 1799) return \"YES\";\n    if (length\
    \ == 1979) return \"YES\";\n    if (length == 2319) return \"YES\";\n    if (length\
    \ == 2979) return \"YES\";\n    if (length == 3839) return \"YES\";\n    if (length\
    \ == 4399) return \"YES\";\n    if (length == 5939) return \"YES\";\n    if (length\
    \ == 7399) return \"YES\";\n    if (length == 9997) return \"YES\";\n    if (length\
    \ == 10979) return \"YES", "    long start = std::get<0>(interval1);\n    long\
    \ end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n \
    \   long end2 = std::get<1>(interval2);\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    long mid = length / 2;\n    long mid2 = length2 / 2;\n    if (mid == mid2)\
    \ {\n        if (start < end2 && end > start2) {\n            return \"YES\";\n\
    \        }\n        if (start > end2 && end < start2) {\n            return \"\
    YES\";\n        }\n        if (start < end2 && end > start2) {\n            return\
    \ \"YES\";\n        }\n        if (start > end2 && end < start2) {\n         \
    \   return \"YES\";\n        }\n        return \"NO\";\n    }\n    if (mid > mid2)\
    \ {\n        return \"NO\";\n    }\n    return \"NO\";", "    long long int start1\
    \ = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::min(start1, start2);\n\
    \    long long int end = std::max(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return \"\
    YES\";\n    if (length == 2) return \"YES\";\n    long long int mid = start +\
    \ (end - start) / 2;\n    if (mid == start) return \"YES\";\n    if (mid == end)\
    \ return \"YES\";\n    if (mid == start1 || mid == end1) return \"YES\";\n   \
    \ if (mid == start2 || mid == end2) return \"YES\";\n    if (mid % 2 == 0) return\
    \ \"YES\";\n    if (mid % 3 == 0) return \"YES\";\n    if (mid % 5 == 0) return\
    \ \"YES\";\n    if (mid % 7 == 0) return \"YES\";\n    if (mid % 11 == 0) return\
    \ \"YES\";\n    if (mid % 13 == 0) return \"YES\";\n    if (mid % 17 == 0) return\
    \ \"YES\";\n    if (mid % 19 == 0) return \"YES\";\n    if (mid % 23 == 0) return\
    \ \"YES\";\n    if (mid % 29 == 0) return \"YES\";\n    if (mid % 31 == 0) return\
    \ \"YES\";\n    if (mid % 37 == 0) return \"YES\";\n    if (mid % 41 == 0) return\
    \ \"YES\";\n    if (mid % 43 == 0) return \"YES\";\n    if (mid % 47 == 0) return\
    \ \"YES\";\n    if (mid % 53 == 0) return \"YES\";\n    if (mid % 59 == 0) return\
    \ \"YES\";\n    if (mid % 61 == 0) return \"YES\";\n    if (mid % 67 == 0) return\
    \ \"YES\";\n    if (mid % 71 == 0) return \"YES\";\n    if (mid % 73 == 0) return\
    \ \"YES\";\n    if (mid % 79 == 0) return \"YES\";\n    if (mid % 83 == 0) return\
    \ \"YES\";\n    if (mid % 89 == 0) return \"YES\";\n    if (mid % 97 == 0) return\
    \ \"YES\";\n    if (mid % 101 == 0) return \"YES\";\n    if (mid % 103 == 0) return\
    \ \"YES\";\n    if (mid % 107 == 0) return \"YES\";\n    if (mid ", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    long long mid = (start\
    \ + end) / 2;\n    long long mid2 = (start2 + end2) / 2;\n    if (mid * mid ==\
    \ length * length2) {\n        return \"YES\";\n    }\n    if (mid * mid > length\
    \ * length2) {\n        return \"NO\";\n    }\n    if (mid * mid < length * length2)\
    \ {\n        return \"NO\";\n    }\n    if (mid * mid > length * length2) {\n\
    \        return \"NO\";\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length3 = length / length2;\n    if (length3 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length3 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length4 = length3 / length2;\n    if (length4 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length4 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length5 = length4 / length2;\n    if (length5 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length5 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length6 = length5 / length2;\n    if (length6 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length6 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length7 = length6 / length2;\n    if (length7 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length7 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length8 = length7 / length2;\n    if (length8 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length8 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length9 = length8 / length2;\n    if (length9 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length9 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length10 = length9 / length2;\n    if (length10 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length10 == 1) {\n        return \"\
    YES\";\n    }\n    long long length11 = length10 / length2;\n    if (length11\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length11 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long length12 = length11 / length2;\n    if (length12\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length12 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long length13 = length12 / length2;\n    if (length13\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length13 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long length14 = length13", "    long long int start1\
    \ = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::min(start1, start2);\n\
    \    long long int end = std::max(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 0)\n        return \"NO\";\n    if (length == 1)\n\
    \        return \"YES\";\n    if (length == 2)\n        return \"YES\";\n    if\
    \ (length == 3)\n        return \"YES\";\n    if (length == 4)\n        return\
    \ \"YES\";\n    if (length == 5)\n        return \"YES\";\n    if (length == 6)\n\
    \        return \"YES\";\n    if (length == 7)\n        return \"YES\";\n    if\
    \ (length == 8)\n        return \"YES\";\n    if (length == 9)\n        return\
    \ \"YES\";\n    if (length == 10)\n        return \"YES\";\n    if (length ==\
    \ 11)\n        return \"YES\";\n    if (length == 12)\n        return \"YES\"\
    ;\n    if (length == 13)\n        return \"YES\";\n    if (length == 14)\n   \
    \     return \"YES\";\n    if (length == 15)\n        return \"YES\";\n    if\
    \ (length == 16)\n        return \"YES\";\n    if (length == 17)\n        return\
    \ \"YES\";\n    if (length == 18)\n        return \"YES\";\n    if (length ==\
    \ 19)\n        return \"YES\";\n    if (length == 20)\n        return \"YES\"\
    ;\n    if (length == 21)\n        return \"YES\";\n    if (length == 22)\n   \
    \     return \"YES\";\n    if (length == 23)\n        return \"YES\";\n    if\
    \ (length == 24)\n        return \"YES\";\n    if (length == 25)\n        return\
    \ \"YES\";\n    if (length == 26)\n        return \"YES\";\n    if (length ==\
    \ 27)\n        return \"YES\";\n    if (length == 28)\n        return \"YES\"\
    ;\n    if (length == 29)\n        return \"YES\";\n    if (length == 30)\n   \
    \     return \"YES\";\n    if (length == 31)\n        return \"YES\";\n    if\
    \ (length == 32)\n        return \"YES\";\n    if (length == 33)\n        return\
    \ \"YES\";\n    if (length == 34)\n        return \"YES\";\n    if (length ==\
    \ 35)\n        return \"YES\";\n    if (length == 36)\n        return \"YES\"\
    ;\n    if (length == 37)\n        return \"YES\";\n    if (length == 38)\n   \
    \     return \"YES\";\n    if (length == 39)\n        return \"YES\";\n    if\
    \ (length == 40)\n        return \"YES\";\n    if (length == 41)\n        return\
    \ \"YES\";\n    if (length == 42)\n        return \"YES\";\n    if (length ==\
    \ 45)\n        return \"YES\";\n    if (length == 46)\n        return \"YES\"\
    ;\n    if (length == 47)\n        return \"YES", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n\
    \    long long m = length / length2;\n    long long n = length % length2;\n  \
    \  long long k = m / length2;\n    long long l = m % length2;\n    long long p\
    \ = k * length2;\n    long long q = l * length2;\n    long long r = p * length2;\n\
    \    long long s = q * length2;\n    long long t = r * length2;\n    long long\
    \ u = s * length2;\n    long long v = t * length2;\n    long long w = u * length2;\n\
    \    long long x = v * length2;\n    long long y = w * length2;\n    long long\
    \ z = x * length2;\n    long long a = y * length2;\n    long long b = z * length2;\n\
    \    long long c = a * length2;\n    long long d = b * length2;\n    long long\
    \ e = c * length2;\n    long long f = d * length2;\n    long long g = e * length2;\n\
    \    long long h = f * length2;\n    long long i = g * length2;\n    long long\
    \ j = h * length2;\n    long long k = i * length2;\n    long long l = j * length2;\n\
    \    long long m = k * length2;\n    long long n = l * length2;\n    long long\
    \ o = m * length2;\n    long long p = n * length2;\n    long long q = p * length2;\n\
    \    long long r = q * length2;\n    long long s = r * length2;\n    long long\
    \ t = s * length2;\n    long long u = t * length2;\n    long long v = u * length2;\n\
    \    long long w = v * length2;\n    long long x = w * length2;\n    long long\
    \ y = x * length2;\n    long long z = y * length2;\n    long long a = z * length2;\n\
    \    long long b = a * length2;\n    long long c = b * length2;\n    long long\
    \ d = c * length2;\n    long long e = d * length2;\n    long long f = e * length2;\n\
    \    long long g = f * length2;\n    long long h = g * length2;\n    ", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == length2) {\n        if (length == 1) {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n \
    \   if (length < length2) {\n        std::swap(length, length2);\n    }\n    long\
    \ long mid = length / 2;\n    long long mid2 = length2 / 2;\n    long long mid3\
    \ = mid + mid2;\n    long long mid4 = mid3 + mid2;\n    long long mid5 = mid4\
    \ + mid2;\n    long long mid6 = mid5 + mid2;\n    long long mid7 = mid6 + mid2;\n\
    \    long long mid8 = mid7 + mid2;\n    long long mid9 = mid8 + mid2;\n    long\
    \ long mid10 = mid9 + mid2;\n    long long mid11 = mid10 + mid2;\n    long long\
    \ mid12 = mid11 + mid2;\n    long long mid13 = mid12 + mid2;\n    long long mid14\
    \ = mid13 + mid2;\n    long long mid15 = mid14 + mid2;\n    long long mid16 =\
    \ mid15 + mid2;\n    long long mid17 = mid16 + mid2;\n    long long mid18 = mid17\
    \ + mid2;\n    long long mid19 = mid18 + mid2;\n    long long mid20 = mid19 +\
    \ mid2;\n    long long mid21 = mid20 + mid2;\n    long long mid22 = mid21 + mid2;\n\
    \    long long mid23 = mid22 + mid2;\n    long long mid24 = mid23 + mid2;\n  \
    \  long long mid25 = mid24 + mid2;\n    long long mid26 = mid25 + mid2;\n    long\
    \ long mid27 = mid26 + mid2;\n    long long mid28 = mid27 + mid2;\n    long long\
    \ mid29 = mid28 + mid2;\n    long long mid30 = mid29 + mid2;\n    long long mid31\
    \ = mid30 + mid2;\n    long long mid32 = mid31 + mid2;\n    long long mid33 =\
    \ mid32 + mid2;\n    long long mid34 = mid33 + mid2;\n    long long mid35 = mid34\
    \ + mid2;\n    long long ", "    long start = std::get<0>(interval1);\n    long\
    \ end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n \
    \   long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = 0;\n    long length2\
    \ = 0;\n    long length3 = 0;\n    long length4 = 0;\n    if (start <= end2) {\n\
    \        length = end - start2;\n        length2 = end2 - start2;\n        length3\
    \ = length * length;\n        length4 = length2 * length2;\n    } else {\n   \
    \     length = end2 - start;\n        length2 = end - start2;\n        length3\
    \ = length * length;\n        length4 = length2 * length2;\n    }\n    if (length3\
    \ % 2 == 0) {\n        if (length4 % 2 == 0) {\n            if (length2 == 0)\
    \ {\n                return \"NO\";\n            }\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    return \"YES\";"]
stop_tokens:
- "\n}"
