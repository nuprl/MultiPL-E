language: cpp
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    long counter = 1;\n    while (counter <= n) {\n        factorial *=\
    \ counter;\n        counter++;\n    }\n    return factorial;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpur_gg7ky.cpp: In function 'int main()':\n/tmp/tmpur_gg7ky.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpur_gg7ky.cpp:2:\n/tmp/tmpur_gg7ky.cpp:22:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp = 1;\n    while (n > 1) {\n        fact *= n;\n        temp\
    \ *= n;\n        n--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_4nvsxv.cpp: In function 'int main()':\n/tmp/tmpz_4nvsxv.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz_4nvsxv.cpp:2:\n/tmp/tmpz_4nvsxv.cpp:23:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long res = special_factorial(n - 1);\n    return res *\
    \ n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44ndggne.cpp: In function 'int main()':\n/tmp/tmp44ndggne.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp44ndggne.cpp:2:\n/tmp/tmp44ndggne.cpp:19:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n        temp\
    \ = fact * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwg3ue783: /tmp/tmpwg3ue783.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n\
    \        factorial *= i;\n    return factorial;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmppcmyfk4f: /tmp/tmppcmyfk4f.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n\
    \        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpyttwwgwi: /tmp/tmpyttwwgwi.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp = n;\n    while (temp > 1) {\n        fact *= temp;\n  \
    \      temp--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_b1cpu_g: /tmp/tmp_b1cpu_g.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    while (n > 1) {\n        result\
    \ *= n;\n        n--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpbdz30ba_: /tmp/tmpbdz30ba_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    for (long i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpoy56i0ue: /tmp/tmpoy56i0ue.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    long i;\n    for(i = 1; i <= n; i++) {\n        temp\
    \ = fact * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpipz3r_0r: /tmp/tmpipz3r_0r.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    long i;\n    for(i = 1; i <= n; i++) {\n        temp\
    \ = fact * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpipz3r_0r: /tmp/tmpipz3r_0r.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long fact = 1;\n    for (long i = 1; i <= n; i++)\n  \
    \      fact *= i;\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpri8w4zyw: /tmp/tmpri8w4zyw.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjtp5n9a.cpp: In function 'int main()':\n/tmp/tmpvjtp5n9a.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjtp5n9a.cpp:2:\n/tmp/tmpvjtp5n9a.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 1)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n\
    \        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp31jsbnpr: /tmp/tmp31jsbnpr.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    while (n > 1) {\n        result\
    \ *= n;\n        n--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpbdz30ba_: /tmp/tmpbdz30ba_.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n\
    \    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpofjye1a3: /tmp/tmpofjye1a3.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_0ujzrha: /tmp/tmp_0ujzrha.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long res = special_factorial(n - 1);\n    return res *\
    \ n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44ndggne.cpp: In function 'int main()':\n/tmp/tmp44ndggne.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp44ndggne.cpp:2:\n/tmp/tmp44ndggne.cpp:19:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long fact = 1;\n    for (long i = 1; i <= n; i++)\n  \
    \      fact *= i;\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpri8w4zyw: /tmp/tmpri8w4zyw.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1)\n        return 1;\n    long result = 1;\n    for (long i = 2; i\
    \ <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp8jjuz548: /tmp/tmp8jjuz548.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n -\
    \ 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqjio5a47: /tmp/tmpqjio5a47.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n        temp\
    \ = fact * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwg3ue783: /tmp/tmpwg3ue783.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n\
    \        result *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpyttwwgwi: /tmp/tmpyttwwgwi.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    for (long i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpoy56i0ue: /tmp/tmpoy56i0ue.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long res = special_factorial(n - 1);\n    return res *\
    \ n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44ndggne.cpp: In function 'int main()':\n/tmp/tmp44ndggne.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp44ndggne.cpp:2:\n/tmp/tmp44ndggne.cpp:19:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpczaq9ch1.cpp: In function 'int main()':\n/tmp/tmpczaq9ch1.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczaq9ch1.cpp:2:\n/tmp/tmpczaq9ch1.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n -\
    \ 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqjio5a47: /tmp/tmpqjio5a47.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    for (long i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpoy56i0ue: /tmp/tmpoy56i0ue.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1)\n        return 1;\n    return n * special_factorial(n - 1);\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmp5gw4vpej: /tmp/tmp5gw4vpej.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long res = 1;\n    for (long i = 1; i <= n; i++) {\n \
    \       res *= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp1mu_vp1p: /tmp/tmp1mu_vp1p.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvjtp5n9a.cpp: In function 'int main()':\n/tmp/tmpvjtp5n9a.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvjtp5n9a.cpp:2:\n/tmp/tmpvjtp5n9a.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n        temp\
    \ = fact * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpwg3ue783: /tmp/tmpwg3ue783.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1) {\n        return 1;\n    }\n    long result = 1;\n    for (long\
    \ i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpafv0a8z1: /tmp/tmpafv0a8z1.cpp:23: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpczaq9ch1.cpp: In function 'int main()':\n/tmp/tmpczaq9ch1.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpczaq9ch1.cpp:2:\n/tmp/tmpczaq9ch1.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjqu77z0s: /tmp/tmpjqu77z0s.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747576
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long fact2 = 1;\n    long fact3 = 1;\n    long fact4 = 0;\n    long\
    \ fact5 = 0;\n    long fact6 = 0;\n    long fact7 = 0;\n    long fact8 = 0;\n\
    \    long fact9 = 0;\n    long fact10 = 0;\n    long fact11 = 0;\n    long fact12\
    \ = 0;\n    long fact13 = 0;\n    long fact14 = 0;\n    long fact15 = 0;\n   \
    \ long fact16 = 0;\n    long fact17 = 0;\n    long fact18 = 0;\n    long fact19\
    \ = 0;\n    long fact20 = 0;\n    long fact21 = 0;\n    long fact22 = 0;\n   \
    \ long fact23 = 0;\n    long fact24 = 0;\n    long fact25 = 0;\n    long fact26\
    \ = 0;\n    long fact27 = 0;\n    long fact28 = 0;\n    long fact29 = 0;\n   \
    \ long fact30 = 0;\n    long fact31 = 0;\n    long fact32 = 0;\n    long fact33\
    \ = 0;\n    long fact34 = 0;\n    long fact35 = 0;\n    long fact36 = 0;\n   \
    \ long fact37 = 0;\n    long fact38 = 0;\n    long fact39 = 0;\n    long fact40\
    \ = 0;\n    long fact41 = 0;\n    long fact42 = 0;\n    long fact43 = 0;\n   \
    \ long fact44 = 0;\n    long fact45 = 0;\n    long fact46 = 0;\n    long fact47\
    \ = 0;\n    long fact48 = 0;\n    long fact49 = 0;\n    long fact50 = 0;\n   \
    \ long fact51 = 0;\n    long fact52 = 0;\n    long fact53 = 0;\n    long fact54\
    \ = 0;\n    long fact55 = 0;\n    long fact56 = 0;\n    long fact57 = 0;\n   \
    \ long fact58 = 0;\n    long fact59 = 0;\n    long fact60 = 0;\n    long fact61\
    \ = 0;\n    long fact62 = 0;\n    long fact63 = 0;\n    long fact64 = 0;\n   \
    \ long fact65 = 0;\n    long fact66 = 0;\n    long fact67 = 0;\n    long fact68\
    \ = 0;\n    long fact69 = 0;\n    long fact70 = 0;\n    long fact71 = 0;\n   \
    \ long fact72 = 0;\n    long fact73 = 0;\n    long fact74 = 0;\n    long fact75\
    \ = 0;\n    long fact76 = 0;\n    long fact77 = 0;\n    long fact78 = 0;\n   \
    \ long fact79 = 0;\n    long fact80 = 0;\n    long fact81 = 0;\n    long fact82\
    \ = 0;\n    long fact83 = 0;\n    long fact84 = 0;\n    long fact85 = 0;\n   \
    \ long fact86 = 0;\n\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpu5j01cxu: /tmp/tmpu5j01cxu.cpp:102: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp = 1;\n    long i = 1;\n    while (i <= n) {\n        fact\
    \ *= i;\n        temp *= i;\n        i++;\n    }\n    return fact;\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpl7jy_qr9: /tmp/tmpl7jy_qr9.cpp:24: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_0ujzrha: /tmp/tmp_0ujzrha.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long res = special_factorial(n - 1);\n    return res *\
    \ n;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44ndggne.cpp: In function 'int main()':\n/tmp/tmp44ndggne.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp44ndggne.cpp:2:\n/tmp/tmp44ndggne.cpp:19:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpjqu77z0s: /tmp/tmpjqu77z0s.cpp:18: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long res = 1;\n    for (long i = 1; i <= n; i++)\n   \
    \     res *= i;\n    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzpkgbx5s: /tmp/tmpzpkgbx5s.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp;\n    for(long i = 2; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpkvw8yqkp: /tmp/tmpkvw8yqkp.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm7dugx5.cpp: In function 'int main()':\n/tmp/tmpwm7dugx5.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwm7dugx5.cpp:2:\n/tmp/tmpwm7dugx5.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long fact2 = 1;\n    long fact3 = 1;\n    long fact4 = 1;\n    long\
    \ fact5 = 1;\n    long fact6 = 1;\n    long fact7 = 1;\n    long fact8 = 1;\n\
    \    long fact9 = 1;\n    long fact10 = 1;\n    long fact11 = 1;\n    long fact12\
    \ = 1;\n    long fact13 = 1;\n    long fact14 = 1;\n    long fact15 = 1;\n   \
    \ long fact16 = 1;\n    long fact17 = 1;\n    long fact18 = 1;\n    long fact19\
    \ = 1;\n    long fact20 = 1;\n    long fact21 = 1;\n    long fact22 = 1;\n   \
    \ long fact23 = 1;\n    long fact24 = 1;\n    long fact25 = 1;\n    long fact26\
    \ = 1;\n    long fact27 = 1;\n    long fact28 = 1;\n    long fact29 = 1;\n   \
    \ long fact30 = 1;\n    long fact31 = 1;\n    long fact32 = 1;\n    long fact33\
    \ = 1;\n    long fact34 = 1;\n    long fact35 = 1;\n    long fact36 = 1;\n   \
    \ long fact37 = 1;\n    long fact38 = 1;\n    long fact39 = 1;\n    long fact40\
    \ = 1;\n    long fact41 = 1;\n    long fact42 = 1;\n    long fact43 = 1;\n   \
    \ long fact44 = 1;\n    long fact45 = 1;\n    long fact46 = 1;\n    long fact47\
    \ = 1;\n    long fact48 = 1;\n    long fact49 = 1;\n    long fact50 = 1;\n   \
    \ long fact51 = 1;\n    long fact52 = 1;\n    long fact53 = 1;\n    long fact54\
    \ = 1;\n    long fact55 = 1;\n    long fact56 = 1;\n    long fact57 = 1;\n   \
    \ long fact58 = 1;\n    long fact59 = 1;\n    long fact60 = 1;\n    long fact61\
    \ = 1;\n    long fact62 = 1;\n    long fact63 = 1;\n    long fact64 = 1;\n   \
    \ long fact65 = 1;\n    long fact66 = 1;\n    long fact67 = 1;\n    long fact68\
    \ = 1;\n    long fact69 = 1;\n    long fact70 = 1;\n    long fact71 = 1;\n   \
    \ long fact72 = 1;\n    long fact73 = 1;\n    long fact74 = 1;\n    long fact75\
    \ = 1;\n    long fact76 = 1;\n    long fact77 = 1;\n    long fact78 = 1;\n   \
    \ long fact79 = 1;\n    long fact80 = 1;\n    long fact81 = 1;\n    long fact82\
    \ = 1;\n    long fact83 = 1;\n    long fact84 = 1;\n    long \n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz15u9bor.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpz15u9bor.cpp:97:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   97 | }\n      | ^\n/tmp/tmpz15u9bor.cpp:97:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0\
    \ || n == 1) {\n        return 1;\n    }\n    return n * special_factorial(n -\
    \ 1);\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: Exception
  stderr: 'tmpqjio5a47: /tmp/tmpqjio5a47.cpp:19: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long temp = n;\n    while (temp > 1) {\n        fact *= temp;\n  \
    \      temp--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_b1cpu_g: /tmp/tmp_b1cpu_g.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmp_0ujzrha: /tmp/tmp_0ujzrha.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long factorial = 1;\n    for (long i = 1; i <= n; i++)\n\
    \        factorial *= i;\n    return factorial;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmppcmyfk4f: /tmp/tmppcmyfk4f.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4s1rfauo: /tmp/tmp4s1rfauo.cpp:22: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long factorial\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n\
    \    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpofjye1a3: /tmp/tmpofjye1a3.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 2; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  status: Exception
  stderr: 'tmpmfywrh8x: /tmp/tmpmfywrh8x.cpp:21: int main(): Assertion `candidate((4))
    == (288)'' failed.

    '
  stdout: ''
  timestamp: 1659747603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20o2u103.cpp: In function 'int main()':\n/tmp/tmp20o2u103.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp20o2u103.cpp:2:\n/tmp/tmp20o2u103.cpp:20:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9aucx4.cpp: In function 'int main()':\n/tmp/tmpil9aucx4.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = special_factorial;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpil9aucx4.cpp:2:\n/tmp/tmpil9aucx4.cpp:21:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((4)) == (288));\n\
    \                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The\
    \ function will receive an integer as input and should return the special\n//\
    \ factorial of this integer.\nlong special_factorial(long n) {\n    long fact\
    \ = 1;\n    long fact1 = 1;\n    long fact2 = 1;\n    long fact3 = 1;\n    long\
    \ fact4 = 1;\n    long fact5 = 1;\n    long fact6 = 1;\n    long fact7 = 1;\n\
    \    long fact8 = 1;\n    long fact9 = 1;\n    long fact10 = 1;\n    long fact11\
    \ = 1;\n    long fact12 = 1;\n    long fact13 = 1;\n    long fact14 = 1;\n   \
    \ long fact15 = 1;\n    long fact16 = 1;\n    long fact17 = 1;\n    long fact18\
    \ = 1;\n    long fact19 = 1;\n    long fact20 = 1;\n    long fact21 = 1;\n   \
    \ long fact22 = 1;\n    long fact23 = 1;\n    long fact24 = 1;\n    long fact25\
    \ = 1;\n    long fact26 = 1;\n    long fact27 = 1;\n    long fact28 = 1;\n   \
    \ long fact29 = 1;\n    long fact30 = 1;\n    long fact31 = 1;\n    long fact32\
    \ = 1;\n    long fact33 = 1;\n    long fact34 = 1;\n    long fact35 = 1;\n   \
    \ long fact36 = 1;\n    long fact37 = 1;\n    long fact38 = 1;\n    long fact39\
    \ = 1;\n    long fact40 = 1;\n    long fact41 = 1;\n    long fact42 = 1;\n   \
    \ long fact43 = 1;\n    long fact44 = 1;\n    long fact45 = 1;\n    long fact46\
    \ = 1;\n    long fact47 = 1;\n    long fact48 = 1;\n    long fact49 = 1;\n   \
    \ long fact50 = 1;\n    long fact51 = 1;\n    long fact52 = 1;\n    long fact53\
    \ = 1;\n    long fact54 = 1;\n    long fact55 = 1;\n    long fact56 = 1;\n   \
    \ long fact57 = 1;\n    long fact58 = 1;\n    long fact59 = 1;\n    long fact60\
    \ = 1;\n    long fact61 = 1;\n    long fact62 = 1;\n    long fact63 = 1;\n   \
    \ long fact64 = 1;\n    long fact65 = 1;\n    long fact66 = 1;\n    long fact67\
    \ = 1;\n    long fact68 = 1;\n    long fact69 = 1;\n    long fact70 = 1;\n   \
    \ long fact71 = 1;\n    long fact72 = 1;\n    long fact73 = 1;\n    long fact74\
    \ = 1;\n    long fact75 = 1;\n    long fact76 = 1;\n    long fact77 = 1;\n   \
    \ long fact78 = 1;\n    long fact79 = 1;\n    long fact80 = 1;\n    long fact81\
    \ = 1;\n    long fact82 = 1;\n    long fact83 = 1;\n    long fact\n}\nint main()\
    \ {\n    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw66qw3id.cpp: In function \u2018long int special_factorial(long\
    \ int)\u2019:\n/tmp/tmpw66qw3id.cpp:97:1: error: expected initializer before \u2018\
    }\u2019 token\n   97 | }\n      | ^\n/tmp/tmpw66qw3id.cpp:97:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659747604
