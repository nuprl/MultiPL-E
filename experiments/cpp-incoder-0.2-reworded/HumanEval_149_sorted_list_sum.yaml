name: HumanEval_149_sorted_list_sum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a vector of strings as a parameter,\n// deletes the strings that have odd lengths\
  \ from it,\n// and returns the resulted vector with a sorted order,\n// The vector\
  \ is always a vector of strings and never a vector of numbers,\n// and it may contain\
  \ duplicates.\n// The order of the vector should be ascending by length of each\
  \ word, and you\n// should return the vector sorted by that rule.\n// If two words\
  \ have the same length, sort the vector alphabetically.\n// The function should\
  \ return a vector of strings in sorted order.\n// You may assume that all words\
  \ will have the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
  aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
  aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
  a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
  ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
  aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
  , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
  dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
  abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
  c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"\
  cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n"
completions: ["    std::vector<std::string> res;\n    for (auto &i : lst) {\n    \
    \    auto it = std::find(res.begin(), res.end(), i);\n        if (it == res.end())\
    \ {\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::string &a, const std::string &b) { return a.size()\
    \ < b.size(); });\n    return res;", "    std::vector<std::string> res;\n    std::string\
    \ temp;\n    for (auto &x : lst) {\n        if (x.length() % 2 == 1) {\n     \
    \       temp = x;\n            while (temp.length() % 2 != 0) {\n            \
    \    temp += temp;\n            }\n            res.push_back(temp);\n        }\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<std::string>\
    \ res;\n    for(auto &i : lst) {\n        if(i.length() % 2 == 1) {\n        \
    \    res.push_back(i);\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::string &a, const std::string &b) -> bool {\n        return a.length()\
    \ < b.length();\n    });\n    return res;", "    // Write your code here\n   \
    \ \n    \n    return lst;", "    std::vector<std::string> res;\n    for (auto\
    \ &i : lst) {\n        if (i.size() % 2 == 1) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](std::string &a, std::string\
    \ &b) {\n        return a.size() < b.size();\n    });\n    return res;", "   \
    \ std::vector<std::string> res;\n    for(auto &i : lst){\n        if(i.size()\
    \ % 2 != 0){\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> res;\n    for (auto\
    \ &i : lst) {\n        if (i.size() % 2 == 1) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::string\
    \ &a, const std::string &b) -> bool {\n        return a.size() > b.size();\n \
    \   });\n    return res;", "    std::vector<std::string> res;\n    for (auto &i\
    \ : lst) {\n        if (i.size() % 2 != 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", " \
    \   std::vector<std::string> res;\n    for(auto &x: lst) {\n        if(res.size()\
    \ == 0) {\n            res.push_back(x);\n        } else {\n            auto it\
    \ = std::find(res.begin(), res.end(), x);\n            if(it == res.end()) {\n\
    \                res.push_back(x);\n            } else {\n                res.insert(it,\
    \ x);\n            }\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    std::string temp;\n    for (auto &i : lst) {\n        temp = i;\n\
    \        res.push_back(temp);\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::string &a, const std::string &b) -> bool {\n        return a.size() > b.size();\n\
    \    });\n    return res;", "    std::vector<std::string> res;\n    for(auto &x\
    \ : lst) {\n        auto y = x.size();\n        if(y % 2 == 1) {\n           \
    \ res.push_back(x);\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::string\
    \ a, std::string b) { return a.size() < b.size(); });\n    return res;", "   \
    \ // Write your code here\n    \n    \n    return lst;", '    // code here', " \
    \   std::vector<std::string> res;\n    for(auto &i : lst) {\n        if(i.size()\
    \ % 2 != 0) {\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::string &a, const std::string &b){\n        return a.size()\
    \ < b.size();\n    });\n    return res;", "    std::vector<std::string> res;\n\
    \    std::string temp;\n    for (auto &it : lst) {\n        if (it.size() % 2\
    \ == 1) {\n            temp = it;\n            it = it.substr(0, it.size() - 1);\n\
    \            res.push_back(temp);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> res;\n    std::string\
    \ temp;\n    for (auto &i : lst) {\n        if (i.size() % 2 != 0) {\n       \
    \     temp = i;\n            while (temp.size() % 2 != 0) {\n                temp.push_back('0');\n\
    \            }\n            res.push_back(temp);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> res;\n    for(auto\
    \ &i : lst) {\n        if(i.size() % 2 == 1) {\n            for(auto &j : lst)\
    \ {\n                if(j == i) {\n                    continue;\n           \
    \     }\n                if(j.size() % 2 == 1) {\n                    res.push_back(i);\n\
    \                    res.push_back(j);\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return res;", "    // Your code\
    \ here\n    std::vector<std::string> result;\n    for(auto &str : lst)\n    {\n\
    \        if(str.size() % 2 != 0)\n        {\n            result.push_back(str);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end(), [](std::string\
    \ &a, std::string &b){return a.size() < b.size();});\n    return result;", " \
    \   // Write your code here\n    std::vector<std::string> res;\n    for (auto\
    \ &i : lst) {\n        if (i.size() % 2 != 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::string\
    \ &a, const std::string &b) -> bool {\n        return a.size() < b.size();\n \
    \   });\n    return res;", "    std::vector<std::string> res;\n    for(auto &i\
    \ : lst){\n        if(i.length()%2==1){\n            res.push_back(i);\n     \
    \   }\n    }\n    std::sort(res.begin(), res.end());\n    return res;"]
stop_tokens:
- "\n}"
