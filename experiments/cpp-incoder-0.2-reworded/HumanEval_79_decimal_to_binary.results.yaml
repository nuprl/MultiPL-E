language: cpp
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdbmywgz.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmphdbmywgz.cpp:16:18: error: 'to_string' is not a member of 'std'\n    \
    \     binary = std::to_string(decimal%2) + binary;\n                  ^\n/tmp/tmphdbmywgz.cpp:19:14:\
    \ error: 'to_string' is not a member of 'std'\n     binary = std::to_string(decimal)\
    \ + binary;\n              ^\n/tmp/tmphdbmywgz.cpp: In function 'int main()':\n\
    /tmp/tmphdbmywgz.cpp:25:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = decimal_to_binary;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphdbmywgz.cpp:2:\n/tmp/tmphdbmywgz.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    int count = 0;\n    while\
    \ (remainder > 0) {\n        remainder *= 2;\n        count++;\n    }\n    std::string\
    \ db = \"db\";\n    for (int i = 0; i < count; i++) {\n        binary += db;\n\
    \    }\n    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiyteov4.cpp: In function 'int main()':\n/tmp/tmpqiyteov4.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqiyteov4.cpp:2:\n/tmp/tmpqiyteov4.cpp:34:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.size() < 8) {\n        binary += \"\
    1\";\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5sxe_gp.cpp: In function 'int main()':\n/tmp/tmp_5sxe_gp.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5sxe_gp.cpp:2:\n/tmp/tmp_5sxe_gp.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += \"0\";\n      \
    \  decimal /= 2;\n    }\n    while(binary.length() < 32) {\n        binary +=\
    \ \"0\";\n    }\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5i2iszkp.cpp: In function 'int main()':\n/tmp/tmp5i2iszkp.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5i2iszkp.cpp:2:\n/tmp/tmp5i2iszkp.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    binary.push_back('0');\n    long remainder = decimal;\n    long\
    \ counter = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary.push_back(remainder);\n        counter++;\n        remainder =\
    \ remainder / 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53_56fgu.cpp: In function 'int main()':\n/tmp/tmp53_56fgu.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp53_56fgu.cpp:2:\n/tmp/tmp53_56fgu.cpp:31:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary += \"0\";\n     \
    \   decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5n19xps4.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmp5n19xps4.cpp:19:39: error: invalid conversion from 'const char*' to 'char'\
    \ [-fpermissive]\n     binary.insert(binary.begin(), \"db\");\n              \
    \                         ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5n19xps4.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1337:7:\
    \ error:   initializing argument 2 of 'std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; typename _Alloc::rebind<_CharT>::other::pointer\
    \ = char*]' [-fpermissive]\n       insert(iterator __p, _CharT __c)\n       ^\n\
    /tmp/tmp5n19xps4.cpp: In function 'int main()':\n/tmp/tmp5n19xps4.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5n19xps4.cpp:2:\n/tmp/tmp5n19xps4.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder *= 2;\n        binary += \"0\";\n    }\n    binary += \"1\"\
    ;\n    binary.insert(binary.begin(), \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfr1wc6oi.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmpfr1wc6oi.cpp:21:39: error: invalid conversion from 'const char*' to 'char'\
    \ [-fpermissive]\n     binary.insert(binary.begin(), \"db\");\n              \
    \                         ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpfr1wc6oi.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1337:7:\
    \ error:   initializing argument 2 of 'std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; typename _Alloc::rebind<_CharT>::other::pointer\
    \ = char*]' [-fpermissive]\n       insert(iterator __p, _CharT __c)\n       ^\n\
    /tmp/tmpfr1wc6oi.cpp: In function 'int main()':\n/tmp/tmpfr1wc6oi.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfr1wc6oi.cpp:2:\n/tmp/tmpfr1wc6oi.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    int count = 0;\n    while\
    \ (decimal != 0) {\n        remainder *= 2;\n        decimal -= remainder;\n \
    \       binary.push_back(remainder % 2);\n        remainder /= 2;\n        count++;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ std::to_string(count).begin(), std::to_string(count).end());\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2qa5xto.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmpl2qa5xto.cpp:24:39: error: invalid conversion from 'const char*' to 'char'\
    \ [-fpermissive]\n     binary.insert(binary.begin(), \"db\");\n              \
    \                         ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpl2qa5xto.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1337:7:\
    \ error:   initializing argument 2 of 'std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; typename _Alloc::rebind<_CharT>::other::pointer\
    \ = char*]' [-fpermissive]\n       insert(iterator __p, _CharT __c)\n       ^\n\
    /tmp/tmpl2qa5xto.cpp:25:33: error: 'to_string' is not a member of 'std'\n    \
    \ binary.insert(binary.end(), std::to_string(count).begin(), std::to_string(count).end());\n\
    \                                 ^\n/tmp/tmpl2qa5xto.cpp:25:64: error: 'to_string'\
    \ is not a member of 'std'\n     binary.insert(binary.end(), std::to_string(count).begin(),\
    \ std::to_string(count).end());\n                                            \
    \                    ^\n/tmp/tmpl2qa5xto.cpp: In function 'int main()':\n/tmp/tmpl2qa5xto.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl2qa5xto.cpp:2:\n/tmp/tmpl2qa5xto.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4jbo1di.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmpg4jbo1di.cpp:19:39: error: invalid conversion from 'const char*' to 'char'\
    \ [-fpermissive]\n     binary.insert(binary.begin(), \"db\");\n              \
    \                         ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpg4jbo1di.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1337:7:\
    \ error:   initializing argument 2 of 'std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; typename _Alloc::rebind<_CharT>::other::pointer\
    \ = char*]' [-fpermissive]\n       insert(iterator __p, _CharT __c)\n       ^\n\
    /tmp/tmpg4jbo1di.cpp: In function 'int main()':\n/tmp/tmpg4jbo1di.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg4jbo1di.cpp:2:\n/tmp/tmpg4jbo1di.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4jbo1di.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmpg4jbo1di.cpp:19:39: error: invalid conversion from 'const char*' to 'char'\
    \ [-fpermissive]\n     binary.insert(binary.begin(), \"db\");\n              \
    \                         ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpg4jbo1di.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1337:7:\
    \ error:   initializing argument 2 of 'std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; typename _Alloc::rebind<_CharT>::other::pointer\
    \ = char*]' [-fpermissive]\n       insert(iterator __p, _CharT __c)\n       ^\n\
    /tmp/tmpg4jbo1di.cpp: In function 'int main()':\n/tmp/tmpg4jbo1di.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg4jbo1di.cpp:2:\n/tmp/tmpg4jbo1di.cpp:24:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder *= 2;\n        binary += std::to_string(counter);\n\
    \        counter += 1;\n    }\n    std::string extra = \"db\";\n    binary = extra\
    \ + binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprh0za44g.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmprh0za44g.cpp:19:19: error: 'to_string' is not a member of 'std'\n    \
    \     binary += std::to_string(counter);\n                   ^\n/tmp/tmprh0za44g.cpp:\
    \ In function 'int main()':\n/tmp/tmprh0za44g.cpp:27:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = decimal_to_binary;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprh0za44g.cpp:2:\n/tmp/tmprh0za44g.cpp:28:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp668dzw33.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmp668dzw33.cpp:18:18: error: 'to_string' is not a member of 'std'\n    \
    \     binary = std::to_string(remainder) + binary;\n                  ^\n/tmp/tmp668dzw33.cpp:21:14:\
    \ error: 'to_string' is not a member of 'std'\n     binary = std::to_string(remainder)\
    \ + binary;\n              ^\n/tmp/tmp668dzw33.cpp: In function 'int main()':\n\
    /tmp/tmp668dzw33.cpp:26:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = decimal_to_binary;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp668dzw33.cpp:2:\n/tmp/tmp668dzw33.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder *= 2;\n        binary += \"1\";\n    }\n    binary += \"0\"\
    ;\n    while (remainder > 0) {\n        remainder--;\n        binary += \"0\"\
    ;\n    }\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main() {\n\
    \    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"\
    ));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5mxfgriz.cpp: In function 'int main()':\n/tmp/tmp5mxfgriz.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5mxfgriz.cpp:2:\n/tmp/tmp5mxfgriz.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    int remainder = decimal;\n    int power = 0;\n    while\
    \ (decimal != 0) {\n        remainder *= 2;\n        decimal -= 1;\n        power++;\n\
    \    }\n    while (power != 0) {\n        binary += \"1\";\n        power--;\n\
    \    }\n    binary += \"0\";\n    while (binary.size() < remainder) {\n      \
    \  binary += \"0\";\n    }\n    return binary;\n}\nint main() {\n    auto candidate\
    \ = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32))\
    \ == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n\
    \    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr50z4ojz.cpp: In function 'int main()':\n/tmp/tmpr50z4ojz.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr50z4ojz.cpp:2:\n/tmp/tmpr50z4ojz.cpp:34:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"1\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.size() < 32) {\n        binary += \"\
    0\";\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2rzmt0e.cpp: In function 'int main()':\n/tmp/tmpy2rzmt0e.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy2rzmt0e.cpp:2:\n/tmp/tmpy2rzmt0e.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n  \
    \  return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9j0404v.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmpj9j0404v.cpp:18:37: error: 'to_string' was not declared in this scope\n\
    \         binary = to_string(remainder) + binary;\n                          \
    \           ^\n/tmp/tmpj9j0404v.cpp: In function 'int main()':\n/tmp/tmpj9j0404v.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj9j0404v.cpp:2:\n/tmp/tmpj9j0404v.cpp:26:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (counter > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter = counter + 1;\n\
    \    }\n    return binary + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n\
    \    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"\
    db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15))\
    \ == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpob9mx4lr.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmpob9mx4lr.cpp:19:37: error: 'to_string' was not declared in this scope\n\
    \         binary = to_string(remainder) + binary;\n                          \
    \           ^\n/tmp/tmpob9mx4lr.cpp: In function 'int main()':\n/tmp/tmpob9mx4lr.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpob9mx4lr.cpp:2:\n/tmp/tmpob9mx4lr.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder *= 2;\n        binary += counter % 2;\n\
    \        counter /= 2;\n    }\n    binary += \"db\";\n    return binary;\n}\n\
    int main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5_hs61_.cpp: In function 'int main()':\n/tmp/tmpx5_hs61_.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx5_hs61_.cpp:2:\n/tmp/tmpx5_hs61_.cpp:27:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    int count = 0;\n    while\
    \ (remainder > 0) {\n        remainder *= 2;\n        count++;\n    }\n    while\
    \ (count > 0) {\n        binary += \"0\";\n        count--;\n    }\n    while\
    \ (decimal > 0) {\n        binary += \"1\";\n        decimal--;\n    }\n    binary\
    \ = binary;\n    binary.insert(0, \"db\");\n    return binary;\n}\nint main()\
    \ {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"\
    db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo4w3qacw.cpp: In function 'int main()':\n/tmp/tmpo4w3qacw.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo4w3qacw.cpp:2:\n/tmp/tmpo4w3qacw.cpp:35:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
    \ in decimal form and your task is to convert it to\n// binary format. The function\
    \ should return a string, with each character representing a binary\n// number.\
    \ Each character in the string will be '0' or '1'.\n// There will be an extra\
    \ couple of characters 'db' at the beginning and at the end of the string.\n//\
    \ The extra characters are there to help with the format.\n// Examples:\n// >>>\
    \ decimal_to_binary((15))\n// (\"db1111db\")\n// >>> decimal_to_binary((32))\n\
    // (\"db100000db\")\nstd::string decimal_to_binary(long decimal) {\n    std::string\
    \ binary;\n    long remainder;\n    long counter = 0;\n    long temp = decimal;\n\
    \    while(temp != 0) {\n        remainder = temp % 2;\n        temp = temp /\
    \ 2;\n        counter++;\n        binary.push_back(remainder);\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), counter, '0');\n    return binary;\n\
    }\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
    \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
    \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjx6lfu3.cpp: In function 'std::string decimal_to_binary(long int)':\n\
    /tmp/tmpkjx6lfu3.cpp:24:39: error: invalid conversion from 'const char*' to 'char'\
    \ [-fpermissive]\n     binary.insert(binary.begin(), \"db\");\n              \
    \                         ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpkjx6lfu3.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1337:7:\
    \ error:   initializing argument 2 of 'std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::basic_string<char> >; typename _Alloc::rebind<_CharT>::other::pointer\
    \ = char*]' [-fpermissive]\n       insert(iterator __p, _CharT __c)\n       ^\n\
    /tmp/tmpkjx6lfu3.cpp: In function 'int main()':\n/tmp/tmpkjx6lfu3.cpp:29:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = decimal_to_binary;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkjx6lfu3.cpp:2:\n/tmp/tmpkjx6lfu3.cpp:30:25: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((0)) == (\"\
    db0db\"));\n                         ^\n"
  stdout: ''
