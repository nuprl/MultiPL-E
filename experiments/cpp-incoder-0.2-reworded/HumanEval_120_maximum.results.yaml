language: cpp
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n      \
    \      max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max && arr[i] % k == 0) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpviccx9gy.cpp: In function 'int main()':\n/tmp/tmpviccx9gy.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpviccx9gy.cpp:2:\n/tmp/tmpviccx9gy.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpviccx9gy.cpp:36:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpviccx9gy.cpp:36:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpviccx9gy.cpp:36:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpviccx9gy.cpp:36:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpviccx9gy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if(arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    long mid = max - (max - min)\
    \ / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid - mid2;\n    for(long i\
    \ = 0; i < arr.size(); i++) {\n        if(arr[i] > mid) {\n            ans.push_back(arr[i]);\n\
    \        }\n        if(arr[i] < mid2) {\n            ans.push_back(arr[i]);\n\
    \        }\n        if(arr[i] < mid3) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdeibjevb.cpp: In function 'int main()':\n/tmp/tmpdeibjevb.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdeibjevb.cpp:2:\n/tmp/tmpdeibjevb.cpp:49:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpdeibjevb.cpp:49:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpdeibjevb.cpp:49:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpdeibjevb.cpp:49:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpdeibjevb.cpp:49:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdeibjevb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max_val =\
    \ arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    long count = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n\
    \            result.push_back(arr[i]);\n            count++;\n        }\n    }\n\
    \    if (count > k) {\n        return result;\n    }\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbq8mt82j.cpp: In function 'int main()':\n/tmp/tmpbq8mt82j.cpp:45:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbq8mt82j.cpp:2:\n/tmp/tmpbq8mt82j.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpbq8mt82j.cpp:46:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpbq8mt82j.cpp:46:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbq8mt82j.cpp:46:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbq8mt82j.cpp:46:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbq8mt82j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long index = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ > max){\n            max = arr[i];\n            index = i;\n        }\n    }\n\
    \    ans.push_back(max);\n    for(long i = index; i < arr.size(); i++){\n    \
    \    if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    for(long\
    \ i = index; i < k; i++){\n        ans.push_back(arr[i]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpea8udpyi.cpp: In function 'int main()':\n/tmp/tmpea8udpyi.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpea8udpyi.cpp:2:\n/tmp/tmpea8udpyi.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpea8udpyi.cpp:42:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpea8udpyi.cpp:42:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpea8udpyi.cpp:42:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpea8udpyi.cpp:42:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpea8udpyi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max_val =\
    \ arr[0];\n    long max_index = 0;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_index = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n  \
    \      result.push_back(arr[max_index]);\n        max_index++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk427to12.cpp: In function 'int main()':\n/tmp/tmpk427to12.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk427to12.cpp:2:\n/tmp/tmpk427to12.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpk427to12.cpp:37:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpk427to12.cpp:37:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpk427to12.cpp:37:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpk427to12.cpp:37:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk427to12.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans = 0;\n    long max_val = arr[0];\n  \
    \  long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    for(long i = 0; i < k; i++) {\n        ans = max(ans, max_idx);\n\
    \    }\n    std::vector<long> ans_vec;\n    for(long i = 0; i < k; i++) {\n  \
    \      ans_vec.push_back(arr[ans]);\n    }\n    return ans_vec;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzft_06c3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpzft_06c3.cpp:30:31: error: 'max' was not declared\
    \ in this scope\n         ans = max(ans, max_idx);\n                         \
    \      ^\n/tmp/tmpzft_06c3.cpp:30:31: note: suggested alternative:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:61:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpzft_06c3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algobase.h:260:5:\
    \ note:   'std::max'\n     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n\
    \     ^\n/tmp/tmpzft_06c3.cpp: In function 'int main()':\n/tmp/tmpzft_06c3.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzft_06c3.cpp:2:\n/tmp/tmpzft_06c3.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpzft_06c3.cpp:40:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpzft_06c3.cpp:40:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzft_06c3.cpp:40:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpzft_06c3.cpp:40:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n    \
    \        max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max && arr[i] != max) {\n            ans.push_back(max);\n\
    \            max = arr[i];\n        }\n    }\n    ans.push_back(max);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7om9cgpx.cpp: In function 'int main()':\n/tmp/tmp7om9cgpx.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7om9cgpx.cpp:2:\n/tmp/tmp7om9cgpx.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp7om9cgpx.cpp:38:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp7om9cgpx.cpp:38:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7om9cgpx.cpp:38:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp7om9cgpx.cpp:38:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7om9cgpx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long ans = 0;\n    long temp = 0;\n    long count = 0;\n    long sum = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ohe2kr3.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ohe2kr3.cpp:107:1: error: expected initializer before\
    \ '}' token\n }\n ^\n/tmp/tmp8ohe2kr3.cpp: In function 'int main()':\n/tmp/tmp8ohe2kr3.cpp:109:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ohe2kr3.cpp:2:\n/tmp/tmp8ohe2kr3.cpp:110:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp8ohe2kr3.cpp:110:70: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                                                         ^\n/tmp/tmp8ohe2kr3.cpp:110:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ohe2kr3.cpp:110:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ohe2kr3.cpp:110:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8ohe2kr3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   templa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    long max_val = arr[0];\n    std::vector<long>\
    \ max_arr;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ k; i++) {\n        max_arr.push_back(max_val);\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2126e8md.cpp: In function 'int main()':\n/tmp/tmp2126e8md.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2126e8md.cpp:2:\n/tmp/tmp2126e8md.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp2126e8md.cpp:34:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp2126e8md.cpp:34:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2126e8md.cpp:34:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2126e8md.cpp:34:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2126e8md.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    std::vector<long> ans;\n\
    \    long max_val = arr[0];\n    long max_idx = 1;\n    long max_idx2 = 1;\n \
    \   long max_idx3 = 1;\n    long max_idx4 = 1;\n    long max_idx5 = 1;\n    long\
    \ max_idx6 = 1;\n    long max_idx7 = 1;\n    long max_idx8 = 1;\n    long max_idx9\
    \ = 1;\n    long max_idx10 = 1;\n    long max_idx11 = 1;\n    long max_idx12 =\
    \ 1;\n    long max_idx13 = 1;\n    long max_idx14 = 1;\n    long max_idx15 = 1;\n\
    \    long max_idx16 = 1;\n    long max_idx17 = 1;\n    long max_idx18 = 1;\n \
    \   long max_idx19 = 1;\n    long max_idx20 = 1;\n    long max_idx21 = 1;\n  \
    \  long max_idx22 = 1;\n    long max_idx23 = 1;\n    long max_idx24 = 1;\n   \
    \ long max_idx25 = 1;\n    long max_idx26 = 1;\n    long max_idx27 = 1;\n    long\
    \ max_idx28 = 1;\n    long max_idx29 = 1;\n    long max_idx30 = 1;\n    long max_idx31\
    \ = 1;\n    long max_idx32 = 1;\n    long max_idx33 = 1;\n    long max_idx34 =\
    \ 1;\n    long max_idx35 = 1;\n    long max_idx36 = 1;\n    long max_idx37 = 1;\n\
    \    long max_idx38 = 1;\n    long max_idx39 = 1;\n    long max_idx40 = 1;\n \
    \   long max_idx41 = 1;\n    long max_idx42 = 1;\n    long max_idx43 = 1;\n  \
    \  long max_idx44 = 1;\n    long max_idx45 = 1;\n    long max_idx46 = 1;\n   \
    \ long max_idx47 = 1;\n    long max_idx48 = 1;\n    long max_idx49 = 1;\n    long\
    \ max_idx50 = 1;\n    long max_idx51 = 1;\n    long max_idx52 = 1;\n    long max_idx53\
    \ = 1;\n    long max_idx54 = 1;\n    long max_idx55 = 1;\n    long max_idx56 =\
    \ 1;\n    long max_idx57 = 1;\n    long max_idx58 = 1;\n    long max_idx59 = 1;\n\
    \    long max_idx60 = 1;\n    long max_idx61 = 1;\n    long max_idx62 = 1;\n \
    \   long max_idx63 = 1;\n    long max_idx64 = 1;\n    long max_idx65 = 1;\n  \
    \  long max_idx66 = 1;\n    long max_idx67 = 1;\n    long max_idx68 = 1;\n   \
    \ long max_idx69 = 1;\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4il3or9y.cpp: In function 'int main()':\n/tmp/tmp4il3or9y.cpp:95:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4il3or9y.cpp:2:\n/tmp/tmp4il3or9y.cpp:96:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp4il3or9y.cpp:96:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp4il3or9y.cpp:96:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4il3or9y.cpp:96:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp4il3or9y.cpp:96:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4il3or9y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans = 0;\n    long max_val = arr[0];\n  \
    \  long max_pos = 0;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_pos = i;\n    \
    \    }\n    }\n    for(long i = 0; i < k; i++) {\n        ans = max(ans, arr[i]);\n\
    \    }\n    ans = max(ans, max_val);\n    ans = max(ans, max_pos);\n    return\
    \ std::vector<long>{ans};\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8m0ii3l6.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8m0ii3l6.cpp:30:30: error: 'max' was not declared\
    \ in this scope\n         ans = max(ans, arr[i]);\n                          \
    \    ^\n/tmp/tmp8m0ii3l6.cpp:30:30: note: suggested alternative:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:61:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp8m0ii3l6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algobase.h:260:5:\
    \ note:   'std::max'\n     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n\
    \     ^\n/tmp/tmp8m0ii3l6.cpp:32:27: error: 'max' was not declared in this scope\n\
    \     ans = max(ans, max_val);\n                           ^\n/tmp/tmp8m0ii3l6.cpp:32:27:\
    \ note: suggested alternative:\nIn file included from /usr/include/c++/4.8.2/algorithm:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp8m0ii3l6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algobase.h:260:5:\
    \ note:   'std::max'\n     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n\
    \     ^\n/tmp/tmp8m0ii3l6.cpp:34:17: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     return\
    \ std::vector<long>{ans};\n                 ^\n/tmp/tmp8m0ii3l6.cpp: In function\
    \ 'int main()':\n/tmp/tmp8m0ii3l6.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = maximum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8m0ii3l6.cpp:2:\n/tmp/tmp8m0ii3l6.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp8m0ii3l6.cpp:38:70: warning: extended initializer\
    \ lists only availa"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n      \
    \      max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] == max) {\n            ans.push_back(max);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2z6vout.cpp: In function 'int main()':\n/tmp/tmpt2z6vout.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt2z6vout.cpp:2:\n/tmp/tmpt2z6vout.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpt2z6vout.cpp:36:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpt2z6vout.cpp:36:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt2z6vout.cpp:36:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt2z6vout.cpp:36:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt2z6vout.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    std::vector<long> ans;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_num) {\n            max_num = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        ans.push_back(max_num);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyfnotkt.cpp: In function 'int main()':\n/tmp/tmpbyfnotkt.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbyfnotkt.cpp:2:\n/tmp/tmpbyfnotkt.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpbyfnotkt.cpp:35:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpbyfnotkt.cpp:35:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbyfnotkt.cpp:35:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbyfnotkt.cpp:35:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbyfnotkt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0;\n    long long max = 0;\n \
    \   long long i = 0;\n    long long j = 0;\n    long long k1 = k;\n    long long\
    \ k2 = k1;\n    long long k3 = k2;\n    long long k4 = k3;\n    long long k5 =\
    \ k4;\n    long long k6 = k5;\n    long long k7 = k6;\n    long long k8 = k7;\n\
    \    long long k9 = k8;\n    long long k10 = k9;\n    long long k11 = k10;\n \
    \   long long k12 = k11;\n    long long k13 = k12;\n    long long k14 = k13;\n\
    \    long long k15 = k14;\n    long long k16 = k15;\n    long long k17 = k16;\n\
    \    long long k18 = k17;\n    long long k19 = k18;\n    long long k20 = k19;\n\
    \    long long k21 = k20;\n    long long k22 = k21;\n    long long k23 = k22;\n\
    \    long long k24 = k23;\n    long long k25 = k24;\n    long long k26 = k25;\n\
    \    long long k27 = k26;\n    long long k28 = k27;\n    long long k29 = k28;\n\
    \    long long k30 = k29;\n    long long k31 = k30;\n    long long k32 = k31;\n\
    \    long long k33 = k32;\n    long long k34 = k33;\n    long long k35 = k34;\n\
    \    long long k36 = k35;\n    long long k37 = k36;\n    long long k38 = k37;\n\
    \    long long k39 = k38;\n    long long k40 = k39;\n    long long k41 = k40;\n\
    \    long long k42 = k41;\n    long long k43 = k42;\n    long long k44 = k43;\n\
    \    long long k45 = k44;\n    long long k46 = k45;\n    long long k47 = k46;\n\
    \    long long k48 = k47;\n    long long k49 = k48;\n    long long k50 = k49;\n\
    \    long long k51 = k50;\n    long long k52 = k51;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dymz8u2.cpp: In function 'int main()':\n/tmp/tmp1dymz8u2.cpp:78:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1dymz8u2.cpp:2:\n/tmp/tmp1dymz8u2.cpp:79:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmp1dymz8u2.cpp:79:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmp1dymz8u2.cpp:79:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1dymz8u2.cpp:79:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1dymz8u2.cpp:79:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1dymz8u2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long min_val = arr[0];\n    for (long i = 0; i < n; i++) {\n  \
    \      if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n   \
    \     if (arr[i] < min_val) {\n            min_val = arr[i];\n        }\n    }\n\
    \    long mid = max_val - min_val;\n    long diff = k - mid;\n    if (diff > 0)\
    \ {\n        ans.push_back(max_val);\n        ans.push_back(max_val + diff);\n\
    \        ans.push_back(max_val + diff * 2);\n        ans.push_back(max_val + diff\
    \ * 3);\n        ans.push_back(max_val + diff * 4);\n        ans.push_back(max_val\
    \ + diff * 5);\n        ans.push_back(max_val + diff * 6);\n        ans.push_back(max_val\
    \ + diff * 7);\n        ans.push_back(max_val + diff * 8);\n        ans.push_back(max_val\
    \ + diff * 9);\n        ans.push_back(max_val + diff * 10);\n        ans.push_back(max_val\
    \ + diff * 11);\n        ans.push_back(max_val + diff * 12);\n        ans.push_back(max_val\
    \ + diff * 13);\n        ans.push_back(max_val + diff * 14);\n        ans.push_back(max_val\
    \ + diff * 15);\n        ans.push_back(max_val + diff * 16);\n        ans.push_back(max_val\
    \ + diff * 17);\n        ans.push_back(max_val + diff * 18);\n        ans.push_back(max_val\
    \ + diff * 19);\n        ans.push_back(max_val + diff * 20);\n        ans.push_back(max_val\
    \ + diff * 21);\n        ans.push_back(max_val + diff * 22);\n        ans.push_back(max_val\
    \ + diff * 23);\n        ans.push_back(max_val + diff * 24);\n        ans.push_back(max_val\
    \ + diff * 25);\n        ans.push_back(max_val + diff * 26);\n        ans.push_back(max_val\
    \ + diff * 27);\n        ans.push_back(max_val + diff * 28);\n        ans.push_back(max_val\
    \ + diff * 29);\n        ans.push_back(max_val + diff * 30);\n        ans.push_back(max_val\
    \ + diff * 31);\n        ans.push_back(max_val + diff * 32);\n        ans.push_back(max_val\
    \ + diff * 33);\n        ans.push_back(max_val + diff * 34);\n        ans.push_back(max_val\
    \ + diff * 35);\n        ans.push_back(max_val + diff * 36);\n        ans.push_back(max_val\
    \ + \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnquy6o2p.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpnquy6o2p.cpp:72:1: error: expected primary-expression\
    \ before '}' token\n }\n ^\n/tmp/tmpnquy6o2p.cpp:72:1: error: expected ';' before\
    \ '}' token\n/tmp/tmpnquy6o2p.cpp:73:12: error: a function-definition is not allowed\
    \ here before '{' token\n int main() {\n            ^\n/tmp/tmpnquy6o2p.cpp:86:1:\
    \ error: expected '}' at end of input\n }\n ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> result(n);\n    long max_val\
    \ = arr[0];\n    long max_idx = 1;\n    long min_val = arr[0];\n    long min_idx\
    \ = 1;\n    long mid = 0;\n    long mid_idx = 0;\n    long mid_idx2 = 0;\n   \
    \ long mid_idx3 = 0;\n    long mid_idx4 = 0;\n    long mid_idx5 = 0;\n    long\
    \ mid_idx6 = 0;\n    long mid_idx7 = 0;\n    long mid_idx8 = 0;\n    long mid_idx9\
    \ = 0;\n    long mid_idx10 = 0;\n    long mid_idx11 = 0;\n    long mid_idx12 =\
    \ 0;\n    long mid_idx13 = 0;\n    long mid_idx14 = 0;\n    long mid_idx15 = 0;\n\
    \    long mid_idx16 = 0;\n    long mid_idx17 = 0;\n    long mid_idx18 = 0;\n \
    \   long mid_idx19 = 0;\n    long mid_idx20 = 0;\n    long mid_idx21 = 0;\n  \
    \  long mid_idx22 = 0;\n    long mid_idx23 = 0;\n    long mid_idx24 = 0;\n   \
    \ long mid_idx25 = 0;\n    long mid_idx26 = 0;\n    long mid_idx27 = 0;\n    long\
    \ mid_idx28 = 0;\n    long mid_idx29 = 0;\n    long mid_idx30 = 0;\n    long mid_idx31\
    \ = 0;\n    long mid_idx32 = 0;\n    long mid_idx33 = 0;\n    long mid_idx34 =\
    \ 0;\n    long mid_idx35 = 0;\n    long mid_idx36 = 0;\n    long mid_idx37 = 0;\n\
    \    long mid_idx38 = 0;\n    long mid_idx39 = 0;\n    long mid_idx40 = 0;\n \
    \   long mid_idx41 = 0;\n    long mid_idx42 = 0;\n    long mid_idx43 = 0;\n  \
    \  long mid_idx44 = 0;\n    long mid_idx45 = 0;\n    long mid_idx46 = 0;\n   \
    \ long mid_idx47 = 0;\n    long mid_idx48 = 0;\n    long mid_idx49 = 0;\n    long\
    \ mid_idx50 = 0;\n    long mid_idx51 = 0;\n    long mid_idx52 = 0;\n    long mid_idx53\
    \ = 0;\n    long mid_idx54 = 0;\n    long mid_idx55 = 0;\n    long mid_idx56 =\
    \ 0;\n    long mid_idx57 = 0;\n    long mid_idx58 = 0;\n    long mid_idx59 = 0;\n\
    \    long mid_idx60 = 0;\n    long mid_idx61 = 0;\n    long mid_idx62 = 0;\n \
    \   long mid_idx63 = 0;\n    long mid_idx64 = 0;\n    long mid_idx65 = 0;\n  \
    \  long mid_idx66 = 0;\n    long mid_idx67 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpein3mymc.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpein3mymc.cpp:94:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpein3mymc.cpp: In function 'int main()':\n\
    /tmp/tmpein3mymc.cpp:96:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = maximum;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpein3mymc.cpp:2:\n/tmp/tmpein3mymc.cpp:97:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpein3mymc.cpp:97:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpein3mymc.cpp:97:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpein3mymc.cpp:97:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpein3mymc.cpp:97:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpein3mymc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    long long maxCount = 0;\n    long long count = 0;\n    long long index =\
    \ 0;\n    long long sum = 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n\
    \    long long sum4 = 0;\n    long long sum5 = 0;\n    long long sum6 = 0;\n \
    \   long long sum7 = 0;\n    long long sum8 = 0;\n    long long sum9 = 0;\n  \
    \  long long sum10 = 0;\n    long long sum11 = 0;\n    long long sum12 = 0;\n\
    \    long long sum13 = 0;\n    long long sum14 = 0;\n    long long sum15 = 0;\n\
    \    long long sum16 = 0;\n    long long sum17 = 0;\n    long long sum18 = 0;\n\
    \    long long sum19 = 0;\n    long long sum20 = 0;\n    long long sum21 = 0;\n\
    \    long long sum22 = 0;\n    long long sum23 = 0;\n    long long sum24 = 0;\n\
    \    long long sum25 = 0;\n    long long sum26 = 0;\n    long long sum27 = 0;\n\
    \    long long sum28 = 0;\n    long long sum29 = 0;\n    long long sum30 = 0;\n\
    \    long long sum31 = 0;\n    long long sum32 = 0;\n    long long sum33 = 0;\n\
    \    long long sum34 = 0;\n    long long sum35 = 0;\n    long long sum36 = 0;\n\
    \    long long sum37 = 0;\n    long long sum38 = 0;\n    long long sum39 = 0;\n\
    \    long long sum40 = 0;\n    long long sum41 = 0;\n    long long sum42 = 0;\n\
    \    long long sum43 = 0;\n    long long sum44 = 0;\n    long long sum45 = 0;\n\
    \    long long sum46 = 0;\n    long long sum47 = 0;\n    long long sum48 = 0;\n\
    \    long long sum49 = 0;\n    long long sum50 = 0;\n    long long sum51 = 0;\n\
    \    long long sum52 = 0;\n    long long sum53 = 0;\n    long long sum54 = 0;\n\
    \    long long sum55 = 0;\n    long long sum56 = 0;\n    long long sum57 = 0;\n\
    \    long long sum58 = 0;\n    long long sum59 = 0;\n    long long sum60 = 0;\n\
    \    long long sum61 = 0;\n    long long sum62 = 0;\n    long long sum63 = 0;\n\
    \    long long sum64 = 0;\n    long long sum65 = 0;\n    long long sum66 = 0;\n\
    \    long long sum67 = 0;\n    long long sum68 = 0;\n    long long sum69\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy91alo5i.cpp: In function 'std::vector<long int> maximum(std::vector<long\
    \ int>, long int)':\n/tmp/tmpy91alo5i.cpp:94:1: error: expected initializer before\
    \ '}' token\n }\n ^\n/tmp/tmpy91alo5i.cpp: In function 'int main()':\n/tmp/tmpy91alo5i.cpp:96:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy91alo5i.cpp:2:\n/tmp/tmpy91alo5i.cpp:97:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpy91alo5i.cpp:97:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpy91alo5i.cpp:97:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy91alo5i.cpp:97:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpy91alo5i.cpp:97:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy91alo5i.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    long index = 0;\n    long temp\
    \ = 0;\n    long count = 0;\n    long sum = 0;\n    long temp2 = 0;\n    long\
    \ temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n\
    \    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10\
    \ = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n   \
    \ long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17\
    \ = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n   \
    \ long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24\
    \ = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n   \
    \ long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31\
    \ = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n   \
    \ long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38\
    \ = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n   \
    \ long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45\
    \ = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n   \
    \ long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52\
    \ = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n   \
    \ long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59\
    \ = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n   \
    \ long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66\
    \ = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n   \
    \ long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73\
    \ = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n   \
    \ long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n    long temp80\
    \ = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    \n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9dwbg5g.cpp: In function 'int main()':\n/tmp/tmpq9dwbg5g.cpp:109:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq9dwbg5g.cpp:2:\n/tmp/tmpq9dwbg5g.cpp:110:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpq9dwbg5g.cpp:110:70: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                                                         ^\n/tmp/tmpq9dwbg5g.cpp:110:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpq9dwbg5g.cpp:110:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpq9dwbg5g.cpp:110:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq9dwbg5g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num) {\n           \
    \ max_num = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n  \
    \      max_arr.push_back(max_num);\n    }\n    return max_arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmput2q5csc.cpp: In function 'int main()':\n/tmp/tmput2q5csc.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmput2q5csc.cpp:2:\n/tmp/tmput2q5csc.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmput2q5csc.cpp:33:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmput2q5csc.cpp:33:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmput2q5csc.cpp:33:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmput2q5csc.cpp:33:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmput2q5csc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_pos\
    \ = 0;\n    for (long i = 1; i < m; i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_pos = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_pos + 1; i < n; i++) {\n  \
    \      if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_pos\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvf8lo5zs.cpp: In function 'int main()':\n/tmp/tmpvf8lo5zs.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvf8lo5zs.cpp:2:\n/tmp/tmpvf8lo5zs.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmpvf8lo5zs.cpp:43:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmpvf8lo5zs.cpp:43:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpvf8lo5zs.cpp:43:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpvf8lo5zs.cpp:43:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvf8lo5zs.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> arr2;\n    long max = 0;\n \
    \   long min = 0;\n    long sum = 0;\n    long count = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n        if (sum > max) {\n \
    \           max = sum;\n            arr2.clear();\n            arr2.push_back(i);\n\
    \        }\n        if (sum < min) {\n            min = sum;\n            arr2.clear();\n\
    \            arr2.push_back(i);\n        }\n        if (sum == max) {\n      \
    \      arr2.push_back(i);\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        arr2.push_back(arr[arr2[i]]);\n    }\n    return arr2;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwd3jicgd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> ans;\n    long max = 0;\n\
    \    long min = 0;\n    long mid = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n     \
    \       mid = i;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] > max && arr[i] < min) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(arr[mid]);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1qgarhjd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    long max_index = 0;\n    long max_count = 0;\n    long max_count = 0;\n \
    \   long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n  \
    \  long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n   \
    \ long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long\
    \ max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count\
    \ = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count =\
    \ 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n\
    \    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n \
    \   long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n  \
    \  long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n   \
    \ long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long\
    \ max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count\
    \ = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count =\
    \ 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n\
    \    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n \
    \   long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n  \
    \  long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n   \
    \ long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long\
    \ max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count\
    \ = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count =\
    \ 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n\
    \    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n \
    \   long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n  \
    \  long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n   \
    \ long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long\
    \ max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count\
    \ = 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count =\
    \ 0;\n    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n\
    \    long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n \
    \   long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n  \
    \  long max_count = 0;\n    long max_count = 0;\n    long max_count = 0;\n   \
    \ long max_count = 0;\n    long \n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsqd95d0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max_val = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n    }\n    long mid = max_val / 2;\n    long mid_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > mid)\
    \ {\n            result.push_back(arr[mid_index]);\n            mid_index++;\n\
    \            if (mid_index == k) {\n                break;\n            }\n  \
    \          mid = arr[mid_index];\n        }\n    }\n    if (mid_index != k) {\n\
    \        result.push_back(arr[mid_index]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzpngbb1u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max_val = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n            result.push_back(arr[i]);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        result.push_back(max_val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplbzrntpj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max = 0;\n    long min = 0;\n    long\
    \ mid = 0;\n    long cnt = 0;\n    long pos = 0;\n    long cnt2 = 0;\n    long\
    \ pos2 = 0;\n    long cnt3 = 0;\n    long pos3 = 0;\n    long cnt4 = 0;\n    long\
    \ pos4 = 0;\n    long cnt5 = 0;\n    long pos5 = 0;\n    long cnt6 = 0;\n    long\
    \ pos6 = 0;\n    long cnt7 = 0;\n    long pos7 = 0;\n    long cnt8 = 0;\n    long\
    \ pos8 = 0;\n    long cnt9 = 0;\n    long pos9 = 0;\n    long cnt10 = 0;\n   \
    \ long pos10 = 0;\n    long cnt11 = 0;\n    long pos11 = 0;\n    long cnt12 =\
    \ 0;\n    long pos12 = 0;\n    long cnt13 = 0;\n    long pos13 = 0;\n    long\
    \ cnt14 = 0;\n    long pos14 = 0;\n    long cnt15 = 0;\n    long pos15 = 0;\n\
    \    long cnt16 = 0;\n    long pos16 = 0;\n    long cnt17 = 0;\n    long pos17\
    \ = 0;\n    long cnt18 = 0;\n    long pos18 = 0;\n    long cnt19 = 0;\n    long\
    \ pos19 = 0;\n    long cnt20 = 0;\n    long pos20 = 0;\n    long cnt21 = 0;\n\
    \    long pos21 = 0;\n    long cnt22 = 0;\n    long pos22 = 0;\n    long cnt23\
    \ = 0;\n    long pos23 = 0;\n    long cnt24 = 0;\n    long pos24 = 0;\n    long\
    \ cnt25 = 0;\n    long pos25 = 0;\n    long cnt26 = 0;\n    long pos26 = 0;\n\
    \    long cnt27 = 0;\n    long pos27 = 0;\n    long cnt28 = 0;\n    long pos28\
    \ = 0;\n    long cnt29 = 0;\n    long pos29 = 0;\n    long cnt30 = 0;\n    long\
    \ pos30 = 0;\n    long cnt31 = 0;\n    long pos31 = 0;\n    long cnt32 = 0;\n\
    \    long pos32 = 0;\n    long cnt33 = 0;\n    long pos33 = 0;\n    long cnt34\
    \ = 0;\n    long pos34 = 0;\n    long cnt35 = 0;\n    long pos35 = 0;\n    long\
    \ cnt36 = 0;\n    long pos36 = 0;\n    long cnt37 = 0;\n    long pos37 = 0;\n\
    \    long cnt38 = 0;\n    long pos38 = 0;\n    long cnt39 = 0;\n    long pos39\
    \ = 0;\n    long cnt40 = 0;\n    long pos40 = 0;\n    long cnt41 = 0;\n    long\
    \ pos41 = 0;\n    long cnt42 = 0;\n    long pos\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6lr0yd57.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    long long ans = 0;\n    long long max = 0;\n\
    \    long long i = 0;\n    long long j = 0;\n    long long k1 = k;\n    long long\
    \ k2 = k1;\n    long long k3 = k2;\n    long long k4 = k3;\n    long long k5 =\
    \ k4;\n    long long k6 = k5;\n    long long k7 = k6;\n    long long k8 = k7;\n\
    \    long long k9 = k8;\n    long long k10 = k9;\n    long long k11 = k10;\n \
    \   long long k12 = k11;\n    long long k13 = k12;\n    long long k14 = k13;\n\
    \    long long k15 = k14;\n    long long k16 = k15;\n    long long k17 = k16;\n\
    \    long long k18 = k17;\n    long long k19 = k18;\n    long long k20 = k19;\n\
    \    long long k21 = k20;\n    long long k22 = k21;\n    long long k23 = k22;\n\
    \    long long k24 = k23;\n    long long k25 = k24;\n    long long k26 = k25;\n\
    \    long long k27 = k26;\n    long long k28 = k27;\n    long long k29 = k28;\n\
    \    long long k30 = k29;\n    long long k31 = k30;\n    long long k32 = k31;\n\
    \    long long k33 = k32;\n    long long k34 = k33;\n    long long k35 = k34;\n\
    \    long long k36 = k35;\n    long long k37 = k36;\n    long long k38 = k37;\n\
    \    long long k39 = k38;\n    long long k40 = k39;\n    long long k41 = k40;\n\
    \    long long k42 = k41;\n    long long k43 = k42;\n    long long k44 = k43;\n\
    \    long long k45 = k44;\n    long long k46 = k45;\n    long long k47 = k46;\n\
    \    long long k48 = k47;\n    long long k49 = k48;\n    long long k50 = k49;\n\
    \    long long k51 = k50;\n    long long k52 = k5\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp_e3vlkc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ res(m);\n    long cur = 0;\n    for (long i = 0; i < n; i++) {\n        if (cur\
    \ < m) {\n            if (arr[i] > arr[cur]) {\n                res[cur] = arr[i];\n\
    \                cur++;\n            }\n        } else {\n            if (arr[i]\
    \ > res[cur]) {\n                res[cur] = arr[i];\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyc6t5bg9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> arr1;\n    arr1.reserve(arr.size());\n\
    \    long max = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ index = i;\n        }\n    }\n    arr1.push_back(max);\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max && arr[i] != max) {\n     \
    \       arr1.push_back(arr[i]);\n        }\n    }\n    arr1.push_back(arr[index]);\n\
    \    return arr1;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpft944lwd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpticm8150.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0;\n    long long max = 0;\n \
    \   long long min = 0;\n    long long cnt = 0;\n    long long sum = 0;\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum >\
    \ max) {\n            max = sum;\n        }\n        if(sum < min) {\n       \
    \     min = sum;\n        }\n        cnt += 1;\n    }\n    for(long long i = 0;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n  \
    \          max = sum;\n        }\n        if(sum < min) {\n            min = sum;\n\
    \        }\n        cnt += 1;\n    }\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n     \
    \   cnt += 1;\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n      \
    \  sum += arr[i];\n        if(sum > max) {\n            max = sum;\n        }\n\
    \        if(sum < min) {\n            min = sum;\n        }\n        cnt += 1;\n\
    \    }\n    for(long long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n        }\n        if(sum <\
    \ min) {\n            min = sum;\n        }\n        cnt += 1;\n    }\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum >\
    \ max) {\n            max = sum;\n        }\n        if(sum < min) {\n       \
    \     min = sum;\n        }\n        cnt += 1;\n    }\n    for(long long i = 0;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n  \
    \          max = sum;\n        }\n        if(sum < min) {\n            min = sum;\n\
    \        }\n        cnt += 1;\n    }\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n     \
    \   cnt += 1;\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n      \
    \  sum += arr[i];\n        if(sum > max) {\n            max = sum;\n        }\n\
    \        if(sum < min) {\n            min = sum;\n        }\n        cnt += 1;\n\
    \    }\n    for(long long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n        }\n        if(sum <\
    \ min) {\n            min = sum;\n        }\n        cnt += 1;\n    }\n    for(long\
    \ long i = 0; i < arr.size()\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph941hagr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           max_val = arr[i];\n            max_idx = i;\n        }\n    }\n  \
    \  ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2fyt8ydw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max_arr;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    max_arr.push_back(max_val);\n    for (long i = max_idx;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_arr.push_back(arr[i]);\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmejvl9w5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max_val = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n            result.push_back(max_val);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        result.push_back(max_val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp36my1e25.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max_val = arr[0];\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    if (k == 1) {\n        res.push_back(max_val);\n\
    \        return res;\n    }\n    long mid = max_val;\n    long left_max = max_val;\n\
    \    long right_max = max_val;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] > mid) {\n            right_max = mid;\n            mid =\
    \ arr[i];\n        } else if (arr[i] < mid) {\n            left_max = mid;\n \
    \           mid = arr[i];\n        } else {\n            mid = arr[i];\n     \
    \   }\n    }\n    if (left_max < right_max) {\n        res.push_back(left_max);\n\
    \        res.push_back(right_max);\n    } else {\n        res.push_back(right_max);\n\
    \        res.push_back(left_max);\n    }\n    return res;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdqsfvdp6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    for (long i = 0; i < k; i++) {\n        std::pop_heap(result.begin(),\
    \ result.end());\n        result.erase(result.begin());\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptai298xo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    std::vector<long> max_nums(k);\n    long i = 0;\n    long j = 0;\n    while\
    \ (i < n && j < k) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n\
    \            max_nums[j] = max_num;\n            i++;\n        } else {\n    \
    \        j++;\n        }\n    }\n    while (i < n) {\n        max_num = arr[i];\n\
    \        max_nums[j] = max_num;\n        i++;\n        j++;\n    }\n    return\
    \ max_nums;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp156bgr5k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    long index = 0;\n    long sum\
    \ = 0;\n    long temp = 0;\n    long count = 0;\n    long sum2 = 0;\n    long\
    \ temp2 = 0;\n    long count2 = 0;\n    long sum3 = 0;\n    long temp3 = 0;\n\
    \    long count3 = 0;\n    long sum4 = 0;\n    long temp4 = 0;\n    long count4\
    \ = 0;\n    long sum5 = 0;\n    long temp5 = 0;\n    long count5 = 0;\n    long\
    \ sum6 = 0;\n    long temp6 = 0;\n    long count6 = 0;\n    long sum7 = 0;\n \
    \   long temp7 = 0;\n    long count7 = 0;\n    long sum8 = 0;\n    long temp8\
    \ = 0;\n    long count8 = 0;\n    long sum9 = 0;\n    long temp9 = 0;\n    long\
    \ count9 = 0;\n    long sum10 = 0;\n    long temp10 = 0;\n    long count10 = 0;\n\
    \    long sum11 = 0;\n    long temp11 = 0;\n    long count11 = 0;\n    long sum12\
    \ = 0;\n    long temp12 = 0;\n    long count12 = 0;\n    long sum13 = 0;\n   \
    \ long temp13 = 0;\n    long count13 = 0;\n    long sum14 = 0;\n    long temp14\
    \ = 0;\n    long count14 = 0;\n    long sum15 = 0;\n    long temp15 = 0;\n   \
    \ long count15 = 0;\n    long sum16 = 0;\n    long temp16 = 0;\n    long count16\
    \ = 0;\n    long sum17 = 0;\n    long temp17 = 0;\n    long count17 = 0;\n   \
    \ long sum18 = 0;\n    long temp18 = 0;\n    long count18 = 0;\n    long sum19\
    \ = 0;\n    long temp19 = 0;\n    long count19 = 0;\n    long sum20 = 0;\n   \
    \ long temp20 = 0;\n    long count20 = 0;\n    long sum21 = 0;\n    long temp21\
    \ = 0;\n    long count21 = 0;\n    long sum22 = 0;\n    long temp22 = 0;\n   \
    \ long count22 = 0;\n    long sum23 = 0;\n    long temp23 = 0;\n    long count23\
    \ = 0;\n    long sum24 = 0;\n    long temp24 = 0;\n    long count24 = 0;\n   \
    \ long sum25 = 0;\n    long temp25 = 0;\n    long count25 = 0;\n    long sum26\
    \ = 0;\n    long temp26 = 0;\n    long count26 = 0;\n    long sum27 = 0;\n   \
    \ long temp27 = 0;\n    long count27 = 0;\n    long sum28 = 0;\n    long temp28\
    \ = 0;\n    long count28 = 0;\n    long sum29 = 0;\n    long temp\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsvfs7o41.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    ans.reserve(m);\n    for (long i = 0; i\
    \ < m; i++) {\n        long max = 0;\n        for (long j = 0; j < n; j++) {\n\
    \            if (arr[j] > max) {\n                max = arr[j];\n            }\n\
    \        }\n        ans.push_back(max);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi6y0_2eu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max;\n    long maxNum = arr[0];\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(maxNum < arr[i]) {\n \
    \           maxNum = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max.push_back(maxNum);\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpscnsxxvm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> ans;\n    long max = 0;\n\
    \    long min = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if(arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    long mid = max;\n    long mid2\
    \ = min;\n    long mid3 = max;\n    long mid4 = min;\n    long mid5 = max;\n \
    \   long mid6 = min;\n    long mid7 = max;\n    long mid8 = min;\n    long mid9\
    \ = max;\n    long mid10 = min;\n    long mid11 = max;\n    long mid12 = min;\n\
    \    long mid13 = max;\n    long mid14 = min;\n    long mid15 = max;\n    long\
    \ mid16 = min;\n    long mid17 = max;\n    long mid18 = min;\n    long mid19 =\
    \ max;\n    long mid20 = min;\n    long mid21 = max;\n    long mid22 = min;\n\
    \    long mid23 = max;\n    long mid24 = min;\n    long mid25 = max;\n    long\
    \ mid26 = min;\n    long mid27 = max;\n    long mid28 = min;\n    long mid29 =\
    \ max;\n    long mid30 = min;\n    long mid31 = max;\n    long mid32 = min;\n\
    \    long mid33 = max;\n    long mid34 = min;\n    long mid35 = max;\n    long\
    \ mid36 = min;\n    long mid37 = max;\n    long mid38 = min;\n    long mid39 =\
    \ max;\n    long mid40 = min;\n    long mid41 = max;\n    long mid42 = min;\n\
    \    long mid43 = max;\n    long mid44 = min;\n    long mid45 = max;\n    long\
    \ mid46 = min;\n    long mid47 = max;\n    long mid48 = min;\n    long mid49 =\
    \ max;\n    long mid50 = min;\n    long mid51 = max;\n    long mid52 = min;\n\
    \    long mid53 = max;\n    long mid54 = min;\n    long mid55 = max;\n    long\
    \ mid56 = min;\n    long mid57 = max;\n    long mid58 = min;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6f5m6bnp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max = 0;\n    long min = 0;\n    long\
    \ mid = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max) {\n            max = arr[i];\n            mid = i;\n        }\n       \
    \ if (arr[i] < min) {\n            min = arr[i];\n            mid = i;\n     \
    \   }\n    }\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3\
    \ = mid * 2;\n    long mid4 = mid * 3;\n    long mid5 = mid * 4;\n    long mid6\
    \ = mid * 5;\n    long mid7 = mid * 6;\n    long mid8 = mid * 7;\n    long mid9\
    \ = mid * 8;\n    long mid10 = mid * 9;\n    long mid11 = mid * 10;\n    long\
    \ mid12 = mid * 11;\n    long mid13 = mid * 12;\n    long mid14 = mid * 13;\n\
    \    long mid15 = mid * 14;\n    long mid16 = mid * 15;\n    long mid17 = mid\
    \ * 16;\n    long mid18 = mid * 17;\n    long mid19 = mid * 18;\n    long mid20\
    \ = mid * 19;\n    long mid21 = mid * 20;\n    long mid22 = mid * 21;\n    long\
    \ mid23 = mid * 22;\n    long mid24 = mid * 23;\n    long mid25 = mid * 24;\n\
    \    long mid26 = mid * 25;\n    long mid27 = mid * 26;\n    long mid28 = mid\
    \ * 27;\n    long mid29 = mid * 28;\n    long mid30 = mid * 29;\n    long mid31\
    \ = mid * 30;\n    long mid32 = mid * 31;\n    long mid33 = mid * 32;\n    long\
    \ mid34 = mid * 33;\n    long mid35 = mid * 34;\n    long mid36 = mid * 35;\n\
    \    long mid37 = mid * 36;\n    long mid38 = mid * 37;\n    long mid39 = mid\
    \ * 38;\n    long mid40 = mid * 39;\n    long mid41 = mid * 40;\n    long mid42\
    \ = mid * 41;\n    long mid43 = mid * 42;\n    long mid44 = mid * 43;\n    long\
    \ mid45 = mid * 44;\n    long mid46 = mid * 45\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqxj9y7cc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_size = n;\n\
    \    long max_num = arr[0];\n    long max_pos = 0;\n    long max_pos = 0;\n  \
    \  std::vector<long> max_arr;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_num) {\n            max_num = arr[i];\n            max_pos = i;\n    \
    \    }\n    }\n    max_arr.push_back(max_num);\n    for(long i = 1; i < n; i++)\
    \ {\n        if(arr[i] > max_num) {\n            max_num = arr[i];\n         \
    \   max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n    for(long\
    \ i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n            max_num =\
    \ arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n            max_\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqg4b91rg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = 1;\n    for (long i = 1; i < m; ++i) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long i = max_idx;\n    for (; i < n; ++i) {\n\
    \        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp90d3hkrn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max_val =\
    \ arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i <\
    \ k; i++) {\n        result.push_back(max_val);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfrjglkni.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long cur_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx]) {\n        \
    \    ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9a6ny9i9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_val = arr[0];\n    std::vector<long>\
    \ max_nums;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ k; i++) {\n        max_nums.push_back(max_val);\n    }\n    return max_nums;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw7q1mndr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n    \
    \        max = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n            count++;\n\
    \        }\n    }\n    if (count > k) {\n        ans.resize(count);\n    }\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n  \
    \          ans[count] = arr[i];\n            count++;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmwv1z7ii.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < m; i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    for (long i = max_idx + 1; i < n; i++) {\n  \
    \      if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd7hil4h9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx % arr.size();\n  \
    \  }\n    ans.push_back(arr[0]);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4d__t49r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long min_val\
    \ = arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n        }\n        if (arr[i] < min_val)\
    \ {\n            min_val = arr[i];\n        }\n    }\n    long mid = (max_val\
    \ + min_val) / 2;\n    long mid1 = (max_val + min_val) / 2;\n    long mid2 = (max_val\
    \ + min_val) / 2;\n    long mid3 = (max_val + min_val) / 2;\n    long mid4 = (max_val\
    \ + min_val) / 2;\n    long mid5 = (max_val + min_val) / 2;\n    long mid6 = (max_val\
    \ + min_val) / 2;\n    long mid7 = (max_val + min_val) / 2;\n    long mid8 = (max_val\
    \ + min_val) / 2;\n    long mid9 = (max_val + min_val) / 2;\n    long mid10 =\
    \ (max_val + min_val) / 2;\n    long mid11 = (max_val + min_val) / 2;\n    long\
    \ mid12 = (max_val + min_val) / 2;\n    long mid13 = (max_val + min_val) / 2;\n\
    \    long mid14 = (max_val + min_val) / 2;\n    long mid15 = (max_val + min_val)\
    \ / 2;\n    long mid16 = (max_val + min_val) / 2;\n    long mid17 = (max_val +\
    \ min_val) / 2;\n    long mid18 = (max_val + min_val) / 2;\n    long mid19 = (max_val\
    \ + min_val) / 2;\n    long mid20 = (max_val + min_val) / 2;\n    long mid21 =\
    \ (max_val + min_val) / 2;\n    long mid22 = (max_val + min_val) / 2;\n    long\
    \ mid23 = (max_val + min_val) / 2;\n    long mid24 = (max_val + min_val) / 2;\n\
    \    long mid25 = (max_val + min_val) / 2;\n    long mid26 = (max_val + min_val)\
    \ / 2;\n    long mid27 = (max_val + min_val) / 2;\n    long mid28 = (max_val +\
    \ min_val) / 2;\n    long mid29 = (max_val + min_val) / 2;\n    long mid30 = (max_val\
    \ + min_val) / 2;\n    long mid31 = (max_val + min_val) / 2;\n    long mid32 =\
    \ (max_val + min_val) / 2;\n    long mid33 = (max_val + min_val) / 2;\n    long\
    \ mid34 = (max_val + min_val) / 2;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0m1q4512.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    long mid = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n     \
    \       mid = i;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] > max && arr[i] < min) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max && arr[i] > min) {\n            ans.push_back(arr[i]);\n        }\n  \
    \  }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] < max && arr[i]\
    \ > min) {\n            ans.push_back(arr[i]);\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max && arr[i] < min) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] < max && arr[i] > min) {\n           \
    \ ans.push_back(arr[i]);\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max && arr[i] < min) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ < max && arr[i] > min) {\n            ans.push_back(arr[i]);\n        }\n  \
    \  }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max && arr[i]\
    \ < min) {\n            ans.push_back(arr[i]);\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] < max && arr[i] > min) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max && arr[i] < min) {\n           \
    \ ans.push_back(arr[i]);\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] < max && arr[i] > min) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max && arr[i] < min) {\n            ans.push_back(arr[i]);\n        }\n  \
    \  }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] < max && arr[i]\
    \ > min) {\n            ans.push_back(arr[i]);\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max && arr[i] < min) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    for(long \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpulivrkh1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    long mid = 0;\n    long temp = 0;\n    long count = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long temp2 = 0;\n    long temp3\
    \ = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long\
    \ temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n\
    \    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14\
    \ = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n   \
    \ long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21\
    \ = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n   \
    \ long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28\
    \ = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n   \
    \ long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35\
    \ = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n   \
    \ long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42\
    \ = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n   \
    \ long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49\
    \ = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n   \
    \ long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56\
    \ = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n   \
    \ long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63\
    \ = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n   \
    \ long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70\
    \ = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n   \
    \ long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77\
    \ = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8f0idk6v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    long i = 0;\n    long j = 0;\n    while (i < m && j < n) {\n      \
    \  if (arr[i] > arr[j]) {\n            res.push_back(arr[i]);\n            i++;\n\
    \        } else {\n            res.push_back(arr[j]);\n            j++;\n    \
    \    }\n    }\n    while (i < m) {\n        res.push_back(arr[i]);\n        i++;\n\
    \    }\n    while (j < n) {\n        res.push_back(arr[j]);\n        j++;\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprwzc8tgf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> max_arr;\n    max_arr.reserve(m);\n    long max_val\
    \ = arr[0];\n    for (long i = 0; i < m; i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    max_arr.resize(m);\n\
    \    for (long i = 0; i < m; i++) {\n        if (arr[i] == max_val) {\n      \
    \      max_arr[i] = arr[i];\n        }\n    }\n    return max_arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo4o8z2q2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0;\n    long long max = 0;\n \
    \   long long i = 0;\n    long long j = 0;\n    long long k1 = 0;\n    long long\
    \ k2 = 0;\n    long long k3 = 0;\n    long long k4 = 0;\n    long long k5 = 0;\n\
    \    long long k6 = 0;\n    long long k7 = 0;\n    long long k8 = 0;\n    long\
    \ long k9 = 0;\n    long long k10 = 0;\n    long long k11 = 0;\n    long long\
    \ k12 = 0;\n    long long k13 = 0;\n    long long k14 = 0;\n    long long k15\
    \ = 0;\n    long long k16 = 0;\n    long long k17 = 0;\n    long long k18 = 0;\n\
    \    long long k19 = 0;\n    long long k20 = 0;\n    long long k21 = 0;\n    long\
    \ long k22 = 0;\n    long long k23 = 0;\n    long long k24 = 0;\n    long long\
    \ k25 = 0;\n    long long k26 = 0;\n    long long k27 = 0;\n    long long k28\
    \ = 0;\n    long long k29 = 0;\n    long long k30 = 0;\n    long long k31 = 0;\n\
    \    long long k32 = 0;\n    long long k33 = 0;\n    long long k34 = 0;\n    long\
    \ long k35 = 0;\n    long long k36 = 0;\n    long long k37 = 0;\n    long long\
    \ k38 = 0;\n    long long k39 = 0;\n    long long k40 = 0;\n    long long k41\
    \ = 0;\n    long long k42 = 0;\n    long long k43 = 0;\n    long long k44 = 0;\n\
    \    long long k45 = 0;\n    long long k46 = 0;\n    long long k47 = 0;\n    long\
    \ long k48 = 0;\n    long long k49 = 0;\n    long long k50 = 0;\n    long long\
    \ k51 = 0;\n    long long k52 = 0;\n    long long k53 = 0;\n    long long k54\
    \ = 0;\n    long long k55 = 0;\n    long long k56 = 0;\n    long long k57 = 0;\n\
    \    long long k58 = 0;\n    long long k59 = 0;\n    long long k60 = 0;\n    long\
    \ long k61 = 0;\n    long long k62 = 0;\n    long long k63 = 0;\n    long long\
    \ k64 = 0;\n    long long k65 = 0;\n    long long k66 = 0;\n    long long k67\
    \ = 0;\n    long long k68 = 0;\n    long long k69 = 0;\n    long long k70 = 0;\n\
    \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps4j4kmy4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n      \
    \  if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < k; i++) {\n        long max_val = arr[i];\n        long max_idx = i;\n\
    \        for (long j = i; j < n; j++) {\n            if (arr[j] > max_val) {\n\
    \                max_val = arr[j];\n                max_idx = j;\n           \
    \ }\n        }\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj5wtvrai.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    long min = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if(arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    long mid = max;\n    long mid2\
    \ = min;\n    long mid3 = max;\n    long mid4 = min;\n    long mid5 = max;\n \
    \   long mid6 = min;\n    long mid7 = max;\n    long mid8 = min;\n    long mid9\
    \ = max;\n    long mid10 = min;\n    long mid11 = max;\n    long mid12 = min;\n\
    \    long mid13 = max;\n    long mid14 = min;\n    long mid15 = max;\n    long\
    \ mid16 = min;\n    long mid17 = max;\n    long mid18 = min;\n    long mid19 =\
    \ max;\n    long mid20 = min;\n    long mid21 = max;\n    long mid22 = min;\n\
    \    long mid23 = max;\n    long mid24 = min;\n    long mid25 = max;\n    long\
    \ mid26 = min;\n    long mid27 = max;\n    long mid28 = min;\n    long mid29 =\
    \ max;\n    long mid30 = min;\n    long mid31 = max;\n    long mid32 = min;\n\
    \    long mid33 = max;\n    long mid34 = min;\n    long mid35 = max;\n    long\
    \ mid36 = min;\n    long mid37 = max;\n    long mid38 = min;\n    long mid39 =\
    \ max;\n    long mid40 = min;\n    long mid41 = max;\n    long mid42 = min;\n\
    \    long mid43 = max;\n    long mid44 = min;\n    long mid45 = max;\n    long\
    \ mid46 = min;\n    long mid47 = max;\n    long mid48 = min;\n    long mid49 =\
    \ max;\n    long mid50 = min;\n    long mid51 = max;\n    long mid52 = min;\n\
    \    long mid53 = max;\n    long mid54 = min;\n    long mid55 = max;\n    long\
    \ mid56 = min;\n    long mid57 = max;\n    long mid58 = min;\n    \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9_vbvnry.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long cur = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n            cur = i;\n        }\n    }\n\
    \    ans.push_back(max);\n    for(long i = 0; i < arr.size(); i++) {\n       \
    \ if(arr[i] == max) {\n            ans.push_back(arr[i]);\n        }\n    }\n\
    \    for(long i = 0; i < k; i++) {\n        ans.push_back(arr[cur]);\n       \
    \ cur++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2m4u2phm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1li0f8fo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsf25zmjw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0, max = 0;\n    for(long i =\
    \ 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max) {\n            ans += (arr[i] - max);\n        }\n    }\n    ans /= k;\n\
    \    ans *= k;\n    ans -= k;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n \
    \   ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n  \
    \  ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n   \
    \ ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans\
    \ /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -=\
    \ 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n\
    \    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n \
    \   ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n  \
    \  ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n   \
    \ ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans\
    \ *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /=\
    \ 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n\
    \    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n    ans *= 2;\n \
    \   ans -= 2;\n    ans /= 2;\n    ans *= 2;\n    ans -= 2;\n    ans /= 2;\n  \
    \  ans *= 2;\n    \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyfgn57le.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0;\n    long long max = 0;\n \
    \   long long min = 0;\n    long long cnt = 0;\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \       if(arr[i] < min) {\n            min = arr[i];\n        }\n        if(arr[i]\
    \ == max) {\n            cnt++;\n        }\n    }\n    for(long long i = 0; i\
    \ < arr.size(); i++) {\n        if(arr[i] == max) {\n            ans += (cnt -\
    \ 1) * k;\n        }\n    }\n    ans += (cnt - 1) * k;\n    ans += (arr.size()\
    \ - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n\
    \    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans +=\
    \ (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size()\
    \ - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n\
    \    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans +=\
    \ (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size()\
    \ - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n\
    \    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans +=\
    \ (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size()\
    \ - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n\
    \    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans +=\
    \ (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size()\
    \ - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n\
    \    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans +=\
    \ (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size()\
    \ - 1) * k;\n    ans += (arr.size() - 1) * k;\n    ans += (arr.size() - 1) * k;\n\
    \    ans += (arr.size() - 1) * k;\n    ans += (arr.\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp91lnjm0i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    for(long i = 0; i < m; i++) {\n       \
    \ long max = 0;\n        for(long j = 0; j < n; j++) {\n            if(arr[j]\
    \ > max) {\n                max = arr[j];\n            }\n        }\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw0e9d3ta.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == maxVal) {\n\
    \            max.push_back(arr[i]);\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj6cg4uxr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans = 0;\n    long max = 0;\n    long cur\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            cur = i;\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            ans++;\n\
    \        }\n    }\n    ans = ans - (k - 1);\n    ans = ans * (k - 1);\n    ans\
    \ = ans + cur;\n    return std::vector<long>({max});\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpei_xrumg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    std::vector<long> ans;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n    \
    \        max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] == max) {\n            ans.push_back(max);\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd515_s0n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() > k) {\n        return result;\n    }\n\
    \    long mid = result.size() / 2;\n    std::vector<long> left = maximum(result,\
    \ mid);\n    std::vector<long> right = maximum(result, mid + 1);\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < left.size(); i++) {\n        if (left[i] >\
    \ right[i]) {\n            result.push_back(left[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp95kr7nx1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > maxVal) {\n            max.push_back(maxVal);\n            maxVal\
    \ = arr[i];\n        }\n    }\n    max.push_back(maxVal);\n    return max;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbvn1wuwe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_val = arr[0];\n    long max_idx = 1;\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   std::vector<long> ans;\n    for(long i = 0; i < k; i++) {\n        ans.push_back(arr[max_idx]);\n\
    \        max_idx++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp1nyyi62.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n      \
    \  if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < k; i++) {\n        long max_val = arr[i];\n        long max_idx = i;\n\
    \        for (long j = i; j < n; j++) {\n            if (arr[j] > max_val) {\n\
    \                max_val = arr[j];\n                max_idx = j;\n           \
    \ }\n        }\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj5wtvrai.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    long mid = 0;\n    long count = 0;\n    long sum = 0;\n\
    \    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n\
    \    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n\
    \    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13\
    \ = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long\
    \ sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n\
    \    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24\
    \ = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long\
    \ sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n\
    \    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35\
    \ = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long\
    \ sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n\
    \    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46\
    \ = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long\
    \ sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n\
    \    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57\
    \ = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long\
    \ sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n\
    \    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68\
    \ = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long\
    \ sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n\
    \    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79\
    \ = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6y4_vgqw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long cur = 0;\n    long i = 0;\n    while(i < arr.size()) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n            cur = i;\n        }\n     \
    \   i++;\n    }\n    while(cur < arr.size()) {\n        if(arr[cur] > max) {\n\
    \            max = arr[cur];\n            cur = cur + 1;\n        }\n        ans.push_back(max);\n\
    \        max = max - 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppka30nbb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    long mid = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n     \
    \       mid = i;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] == max) {\n            ans.push_back(arr[mid]);\n         \
    \   mid++;\n        }\n        if(arr[i] == min) {\n            ans.push_back(arr[mid]);\n\
    \            mid++;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1ygfbf0y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < m; i++) {\n        long max_val = arr[i];\n \
    \       for (long j = i + 1; j < n; j++) {\n            if (arr[j] > max_val)\
    \ {\n                max_val = arr[j];\n            }\n        }\n        ans.push_back(max_val);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzqxnkph2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans = 0;\n    long max_val = arr[0];\n  \
    \  for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n  \
    \          max_val = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            ans = ans + 1;\n       \
    \ }\n    }\n    ans = ans + k;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = ans + 1;\n    ans = ans % arr.size();\n    ans = ans - arr.size();\n\
    \    ans = \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppx6y6w9c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    ans.push_back(max);\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] > max) {\n            ans.push_back(arr[i]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptoh90q62.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n    \
    \        max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            ans.push_back(arr[i]);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnvmko841.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max = 0;\n    long index = 0;\n    for\
    \ (auto i : arr) {\n        if (max < i) {\n            max = i;\n           \
    \ index = i;\n        }\n    }\n    for (auto i : arr) {\n        if (i == index)\
    \ {\n            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphuj42tfu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    std::vector<long> max_arr(n);\n\
    \    long max_num = arr[0];\n    long max_pos = 0;\n    for(long i = 1; i < n;\
    \ i++) {\n        if(arr[i] > max_num) {\n            max_num = arr[i];\n    \
    \        max_pos = i;\n        }\n    }\n    max_arr[max_pos] = max_num;\n   \
    \ for(long i = max_pos + 1; i < k; i++) {\n        max_arr[i - 1] = arr[i];\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp18qwcnxe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(arr[max_idx]);\n    for (long i =\
    \ max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n     \
    \       ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsciwi439.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ res(m);\n    long cur = 0;\n    for (long i = 0; i < n; i++) {\n        if (cur\
    \ < m) {\n            if (arr[i] > arr[cur]) {\n                res[cur] = arr[i];\n\
    \                cur++;\n            }\n        } else {\n            res[cur]\
    \ = arr[i];\n            cur++;\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp006mxl3j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max_val) {\n            ans.push_back(arr[i]);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        ans.resize(count);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9rk4rv07.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    long min = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    long mid = (max + min) / 2;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > mid) {\n  \
    \          result.push_back(arr[i]);\n        }\n    }\n    result.push_back(mid);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_sdev8xw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    result.push_back(k);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgaz1uqcn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = n;\n    std::vector<long>\
    \ ans;\n    long max = 0;\n    long temp;\n    long i;\n    long j;\n    long\
    \ k;\n    long temp1;\n    long temp2;\n    long temp3;\n    long temp4;\n   \
    \ long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n\
    \    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long\
    \ temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n\
    \    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long\
    \ temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n\
    \    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long\
    \ temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n\
    \    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long\
    \ temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n\
    \    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long\
    \ temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n\
    \    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long\
    \ temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n\
    \    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long\
    \ temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n\
    \    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long\
    \ temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjkg79n8p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n            index = i;\n      \
    \  }\n    }\n    result.push_back(max);\n    for (long i = index; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    result.push_back(max);\n    result.insert(result.end(), arr.begin()\
    \ + index, arr.end());\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsyksnzst.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = 1;\n    long max_idx2 = 1;\n    long max_idx3 = 1;\n    long max_idx4 = 1;\n\
    \    long max_idx5 = 1;\n    long max_idx6 = 1;\n    long max_idx7 = 1;\n    long\
    \ max_idx8 = 1;\n    long max_idx9 = 1;\n    long max_idx10 = 1;\n    long max_idx11\
    \ = 1;\n    long max_idx12 = 1;\n    long max_idx13 = 1;\n    long max_idx14 =\
    \ 1;\n    long max_idx15 = 1;\n    long max_idx16 = 1;\n    long max_idx17 = 1;\n\
    \    long max_idx18 = 1;\n    long max_idx19 = 1;\n    long max_idx20 = 1;\n \
    \   long max_idx21 = 1;\n    long max_idx22 = 1;\n    long max_idx23 = 1;\n  \
    \  long max_idx24 = 1;\n    long max_idx25 = 1;\n    long max_idx26 = 1;\n   \
    \ long max_idx27 = 1;\n    long max_idx28 = 1;\n    long max_idx29 = 1;\n    long\
    \ max_idx30 = 1;\n    long max_idx31 = 1;\n    long max_idx32 = 1;\n    long max_idx33\
    \ = 1;\n    long max_idx34 = 1;\n    long max_idx35 = 1;\n    long max_idx36 =\
    \ 1;\n    long max_idx37 = 1;\n    long max_idx38 = 1;\n    long max_idx39 = 1;\n\
    \    long max_idx40 = 1;\n    long max_idx41 = 1;\n    long max_idx42 = 1;\n \
    \   long max_idx43 = 1;\n    long max_idx44 = 1;\n    long max_idx45 = 1;\n  \
    \  long max_idx46 = 1;\n    long max_idx47 = 1;\n    long max_idx48 = 1;\n   \
    \ long max_idx49 = 1;\n    long max_idx50 = 1;\n    long max_idx51 = 1;\n    long\
    \ max_idx52 = 1;\n    long max_idx53 = 1;\n    long max_idx54 = 1;\n    long max_idx55\
    \ = 1;\n    long max_idx56 = 1;\n    long max_idx57 = 1;\n    long max_idx58 =\
    \ 1;\n    long max_idx59 = 1;\n    long max_idx60 = 1;\n    long max_idx61 = 1;\n\
    \    long max_idx62 = 1;\n    long max_idx63 = 1;\n    long max_idx64 = 1;\n \
    \   long max_idx65 = 1;\n    long max_idx66 = 1;\n    long max_idx67 = 1;\n  \
    \  long max_idx68\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp852i2wpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(max.size() == k) {\n \
    \           break;\n        }\n        if(arr[i] > max[k-1]) {\n            max.resize(k);\n\
    \        }\n        max[k] = arr[i];\n        k++;\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdpe1_7y3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    long min_val = arr[0];\n    long min_idx\
    \ = -1;\n    long mid = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n     \
    \       min_idx = i;\n        }\n    }\n    mid = max_idx;\n    while (k != 0)\
    \ {\n        if (max_val == min_val) {\n            ans.push_back(max_val);\n\
    \            k--;\n        } else {\n            if (max_val > min_val) {\n  \
    \              ans.push_back(max_val);\n                k--;\n               \
    \ mid++;\n            } else {\n                ans.push_back(min_val);\n    \
    \            k--;\n                mid--;\n            }\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9hr4xuu0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    long min_val = arr[0];\n    long min_idx\
    \ = -1;\n    long mid = 0;\n    long mid_idx = 0;\n    long mid_size = 0;\n  \
    \  long mid_size_idx = 0;\n    long mid_size_size = 0;\n    long mid_size_size_idx\
    \ = 0;\n    long mid_size_size_size = 0;\n    long mid_size_size_size_idx = 0;\n\
    \    long mid_size_size_size_size = 0;\n    long mid_size_size_size_size_idx =\
    \ 0;\n    long mid_size_size_size_size_size = 0;\n    long mid_size_size_size_size_size_idx\
    \ = 0;\n    long mid_size_size_size_size_size_size = 0;\n    long mid_size_size_size_size_size_size_idx\
    \ = 0;\n    long mid_size_size_size_size_size_size_size = 0;\n    long mid_size_size_size_size_size_size_idx\
    \ = 0;\n    long mid_size_size_size_size_size_size_size = 0;\n    long mid_size_size_size_size_size_size_size_idx\
    \ = 0;\n    long mid_size_size_size_size_size_size_size_size = 0;\n    long mid_size_size_size_size_size_size_size_idx\
    \ = 0;\n    long mid_size_size_size_size_size_size_size_size = 0;\n    long mid_size_size_size_size_size_size_size_idx\
    \ = 0;\n    long mid_size_size_size_size_size_size_size_size_size = 0;\n    long\
    \ mid_size_size_size_size_size_size_size_size_idx = 0;\n    long mid_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    long mid_size_size_size_size_size_size_size_size_size_idx = 0;\n \
    \   long mid_size_size_size_size_size_size_size_size_size_size = 0;\n    long\
    \ mid_size_size_size_size_size_size_size_size_size_idx = 0;\n    long mid_size_size_size_size_size_size_size_size_size_size_size\
    \ = 0;\n    long mid_size_size_size_size_size_size_size_size_size_size_idx = 0;\n\
    \    long mid_size_size_size_size_size_size_size_size_size_size_size = 0;\n  \
    \  long mid_size_size_size_size_size_size_size_size_size_size_idx = 0;\n    long\
    \ mid_size_size_size_size_size_size_size_size_size_size_size = 0;\n    long mid_size_size_size_size_size_size_size_size_size_size_idx\
    \ = 0;\n    long mid_size_size_size_size_size_size_size_size_size_size_size =\
    \ 0;\n    long mid_size_size_size_size_size_size_size_size_size_size_idx = 0;\n\
    \    long mid_size_size_size_size_size_size_size_size_size_size_size_size = 0;\n\
    \    long mid_size_size_size_size_size_size_size_size_size_size_size_idx = 0;\n\
    \    long \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt51hznv5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpticm8150.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    long mid = 0;\n    long count = 0;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \            mid = i;\n        }\n        if(arr[i] < min) {\n            min\
    \ = arr[i];\n            mid = i;\n        }\n        if(arr[i] == max) {\n  \
    \          count++;\n        }\n    }\n    ans.resize(count);\n    for(long i\
    \ = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            ans[count]\
    \ = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = arr[i];\n            count++;\n        }\n    }\n    ans.resize(count);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans[count] = \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq560nak4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max_num =\
    \ arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    for (long i = 0; i <\
    \ k; i++) {\n        result.push_back(max_num);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbz998ifx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> arr2;\n    long max = 0;\n \
    \   long min = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    long mid = (max + min) / 2;\n\
    \    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > mid) {\n            arr2.push_back(arr[i]);\n            count++;\n\
    \        }\n    }\n    arr2.resize(count);\n    return arr2;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpullznl96.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max;\n    long maxNum = arr[0];\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(maxNum < arr[i]) {\n \
    \           maxNum = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max.push_back(maxNum);\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpscnsxxvm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    long index = 0;\n    long temp\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            temp\
    \ = arr[i];\n        }\n    }\n    std::vector<long> ans;\n    for(long i = 0;\
    \ i < k; i++) {\n        ans.push_back(temp);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcnzhi677.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    std::vector<long> ans;\n  \
    \  for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n      \
    \      max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] == max) {\n            ans.push_back(arr[i]);\n       \
    \ }\n    }\n    for(long i = 0; i < k; i++) {\n        ans.push_back(max);\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkbtmktve.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n            index = i;\n      \
    \  }\n    }\n    result.push_back(max);\n    if (k <= result.size()) {\n     \
    \   for (long i = index; i < k; i++) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5_zfdg7g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> ans;\n    long max = 0;\n\
    \    long min = 0;\n    long mid = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n     \
    \       mid = i;\n        }\n    }\n    ans.push_back(max);\n    ans.push_back(min);\n\
    \    ans.push_back(arr[mid]);\n    for(long i = mid+1; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n            ans.push_back(max);\n\
    \        }\n        if(arr[i] < min) {\n            min = arr[i];\n          \
    \  ans.push_back(min);\n        }\n        ans.push_back(arr[i]);\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpltcgigs9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ == max) {\n            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ > k) {\n        return result;\n    }\n    long mid = result.size() / 2;\n \
    \   std::vector<long> left = maximum(result, mid);\n    std::vector<long> right\
    \ = maximum(result, mid + 1);\n    std::vector<long> result;\n    for (long i\
    \ = 0; i < left.size(); i++) {\n        if (left[i] > right[i]) {\n          \
    \  result.push_back(left[i]);\n        } else {\n            result.push_back(right[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf85ug02_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_num = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num) {\n\
    \            max_num = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   std::vector<long> ans;\n    for (long i = 0; i < k; i++) {\n        ans.push_back(arr[i]);\n\
    \    }\n    ans.push_back(max_num);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoh_qe6lh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long min_val\
    \ = arr[0];\n    long max_idx = -1;\n    long min_idx = -1;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n        if (arr[i] < min_val)\
    \ {\n            min_val = arr[i];\n            min_idx = i;\n        }\n    }\n\
    \    long mid = max_idx + min_idx;\n    long mid1 = mid / 2;\n    long mid2 =\
    \ mid - mid1;\n    long mid3 = mid2 / 2;\n    long mid4 = mid2 - mid3;\n    long\
    \ mid5 = mid4 / 2;\n    long mid6 = mid4 - mid5;\n    long mid7 = mid6 / 2;\n\
    \    long mid8 = mid6 - mid7;\n    long mid9 = mid8 / 2;\n    long mid10 = mid8\
    \ - mid9;\n    long mid11 = mid10 / 2;\n    long mid12 = mid10 - mid11;\n    long\
    \ mid13 = mid12 / 2;\n    long mid14 = mid12 - mid13;\n    long mid15 = mid14\
    \ / 2;\n    long mid16 = mid14 - mid15;\n    long mid17 = mid16 / 2;\n    long\
    \ mid18 = mid16 - mid17;\n    long mid19 = mid18 / 2;\n    long mid20 = mid18\
    \ - mid19;\n    long mid21 = mid20 / 2;\n    long mid22 = mid20 - mid21;\n   \
    \ long mid23 = mid22 / 2;\n    long mid24 = mid22 - mid23;\n    long mid25 = mid24\
    \ / 2;\n    long mid26 = mid24 - mid25;\n    long mid27 = mid26 / 2;\n    long\
    \ mid28 = mid26 - mid27;\n    long mid29 = mid28 / 2;\n    long mid30 = mid28\
    \ - mid29;\n    long mid31 = mid30 / 2;\n    long mid32 = mid30 - mid31;\n   \
    \ long mid33 = mid32 / 2;\n    long mid34 = mid32 - mid33;\n    long mid35 = mid34\
    \ / 2;\n    long mid36 = mid34 - mid35;\n    long mid37 = mid36 / 2;\n    long\
    \ mid38 = mid36 - mid37;\n    long mid39 = mid38 / 2;\n    long mid40 = mid38\
    \ - mid39;\n    long mid41 = mid40 / 2;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqnb3l8pd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0;\n    long long max = 0;\n \
    \   long long min = 0;\n    long long count = 0;\n    for (long long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n\
    \        if (arr[i] == max) {\n            count++;\n        }\n    }\n    ans\
    \ = count;\n    if (k == 1) {\n        return std::vector<long>({max});\n    }\n\
    \    if (k == 2) {\n        return std::vector<long>({min, max});\n    }\n   \
    \ std::vector<long> ans;\n    long long mid = max / 2;\n    long long mid2 = min\
    \ / 2;\n    long long mid3 = mid;\n    long long mid4 = mid2;\n    long long mid5\
    \ = mid3;\n    long long mid6 = mid4;\n    long long mid7 = mid5;\n    long long\
    \ mid8 = mid6;\n    long long mid9 = mid7;\n    long long mid10 = mid8;\n    long\
    \ long mid11 = mid9;\n    long long mid12 = mid10;\n    long long mid13 = mid11;\n\
    \    long long mid14 = mid12;\n    long long mid15 = mid13;\n    long long mid16\
    \ = mid14;\n    long long mid17 = mid15;\n    long long mid18 = mid16;\n    long\
    \ long mid19 = mid17;\n    long long mid20 = mid18;\n    long long mid21 = mid19;\n\
    \    long long mid22 = mid20;\n    long long mid23 = mid21;\n    long long mid24\
    \ = mid22;\n    long long mid25 = mid23;\n    long long mid26 = mid24;\n    long\
    \ long mid27 = mid25;\n    long long mid28 = mid26;\n    long long mid29 = mid27;\n\
    \    long long mid30 = mid28;\n    long long mid31 = mid29;\n    long long mid32\
    \ = mid30;\n    long long mid33 = mid31;\n    long long mid34 = mid32;\n    long\
    \ long mid35 = mid33;\n    long long mid36 = mid34;\n    long long mid37 = mid35;\n\
    \    long long mid38 = mid36;\n    long long mid39 = mid37;\n    long long mid40\
    \ = mid38;\n    long long mid41 = mid39;\n    long long mid42 = mid40;\n    long\
    \ \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm5kq0w2e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0;\n    long long max = 0;\n \
    \   long long min = 0;\n    long long mid = 0;\n    long long count = 0;\n   \
    \ for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n  \
    \          max = arr[i];\n            ans = i;\n        }\n        if(arr[i] <\
    \ min) {\n            min = arr[i];\n        }\n        if(arr[i] == max) {\n\
    \            count++;\n        }\n    }\n    mid = max - (max - min) / 2;\n  \
    \  for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] == mid) {\n\
    \            count++;\n        }\n    }\n    ans = count * k + ans;\n    ans /=\
    \ k;\n    ans %= 1000;\n    return std::vector<long>(arr.begin() + ans, arr.end());\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2wzjmyi9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> ans;\n    long max = 0;\n\
    \    long index = 0;\n    long count = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n       \
    \ if(arr[i] == max) {\n            count++;\n        }\n    }\n    ans.push_back(max);\n\
    \    ans.push_back(arr[index]);\n    ans.push_back(count);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp90oisint.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> arr1;\n    long max = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n        }\n    }\n    arr1.push_back(max);\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n         \
    \   arr1.push_back(arr[i]);\n        }\n    }\n    arr1.sort([](long a, long b){return\
    \ a>b;});\n    arr1.resize(arr1.size() - k);\n    return arr1;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpga7wfm84.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num) {\n           \
    \ max_num = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n  \
    \      max_arr.push_back(max_num);\n    }\n    return max_arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmput2q5csc.cpp: In function 'int main()':\n/tmp/tmput2q5csc.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = maximum;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmput2q5csc.cpp:2:\n/tmp/tmput2q5csc.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n             \
    \                           ^\n/tmp/tmput2q5csc.cpp:33:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n                  \
    \                                                    ^\n/tmp/tmput2q5csc.cpp:33:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmput2q5csc.cpp:33:70: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmput2q5csc.cpp:33:70: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmput2q5csc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (max_val < arr[i]) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    long mid = max_val / 2;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > mid) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(max_val);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb9ap9cz5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max_val) {\n            ans.push_back(arr[i]);\n\
    \            count++;\n        }\n    }\n    if (count < k) {\n        ans.resize(count);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwmzkb_j9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_val = 0;\n    long max_index = 0;\n \
    \   for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n \
    \           max_val = arr[i];\n            max_index = i;\n        }\n    }\n\
    \    std::vector<long> ans;\n    for(long i = 0; i < k; i++) {\n        ans.push_back(arr[max_index]);\n\
    \        max_index++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1puddm9_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = n;\n    long ans = arr[0];\n    long\
    \ max_val = arr[0];\n    long max_idx = 1;\n    long max_idx2 = 1;\n    long max_idx3\
    \ = 1;\n    long max_idx4 = 1;\n    long max_idx5 = 1;\n    long max_idx6 = 1;\n\
    \    long max_idx7 = 1;\n    long max_idx8 = 1;\n    long max_idx9 = 1;\n    long\
    \ max_idx10 = 1;\n    long max_idx11 = 1;\n    long max_idx12 = 1;\n    long max_idx13\
    \ = 1;\n    long max_idx14 = 1;\n    long max_idx15 = 1;\n    long max_idx16 =\
    \ 1;\n    long max_idx17 = 1;\n    long max_idx18 = 1;\n    long max_idx19 = 1;\n\
    \    long max_idx20 = 1;\n    long max_idx21 = 1;\n    long max_idx22 = 1;\n \
    \   long max_idx23 = 1;\n    long max_idx24 = 1;\n    long max_idx25 = 1;\n  \
    \  long max_idx26 = 1;\n    long max_idx27 = 1;\n    long max_idx28 = 1;\n   \
    \ long max_idx29 = 1;\n    long max_idx30 = 1;\n    long max_idx31 = 1;\n    long\
    \ max_idx32 = 1;\n    long max_idx33 = 1;\n    long max_idx34 = 1;\n    long max_idx35\
    \ = 1;\n    long max_idx36 = 1;\n    long max_idx37 = 1;\n    long max_idx38 =\
    \ 1;\n    long max_idx39 = 1;\n    long max_idx40 = 1;\n    long max_idx41 = 1;\n\
    \    long max_idx42 = 1;\n    long max_idx43 = 1;\n    long max_idx44 = 1;\n \
    \   long max_idx45 = 1;\n    long max_idx46 = 1;\n    long max_idx47 = 1;\n  \
    \  long max_idx48 = 1;\n    long max_idx49 = 1;\n    long max_idx50 = 1;\n   \
    \ long max_idx51 = 1;\n    long max_idx52 = 1;\n    long max_idx53 = 1;\n    long\
    \ max_idx54 = 1;\n    long max_idx55 = 1;\n    long max_idx56 = 1;\n    long max_idx57\
    \ = 1;\n    long max_idx58 = 1;\n    long max_idx59 = 1;\n    long max_idx60 =\
    \ 1;\n    long max_idx61 = 1;\n    long max_idx62 = 1;\n    long max_idx63 = 1;\n\
    \    long max_idx64 = 1;\n    long max_idx65 = 1;\n    long max_idx66 = 1;\n \
    \   long max_idx67 = 1;\n    long max_idx68 = 1;\n    long max_idx69 = 1;\n\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3z33uve1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_val = arr[0];\n    std::vector<long>\
    \ max_arr;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ k; i++) {\n        max_arr.push_back(max_val);\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgqveci72.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_val = 0;\n    long max_index = 0;\n \
    \   long index = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_index = i;\n  \
    \      }\n    }\n    std::vector<long> ans;\n    for(long i = 0; i < k; i++) {\n\
    \        ans.push_back(arr[max_index]);\n        max_index++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpze55sy1x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpticm8150.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1li0f8fo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747383
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max = 0;\n    long cur = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        cur = arr[i];\n        if (cur\
    \ > max) {\n            max = cur;\n        }\n    }\n    long count = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        cur = arr[i];\n        if\
    \ (cur == max) {\n            count++;\n        }\n    }\n    if (count > k) {\n\
    \        ans.resize(count);\n        for (long i = 0; i < arr.size(); i++) {\n\
    \            cur = arr[i];\n            if (cur == max) {\n                ans[count]\
    \ = cur;\n                count++;\n            }\n        }\n    } else {\n \
    \       ans.resize(count);\n        for (long i = 0; i < arr.size(); i++) {\n\
    \            cur = arr[i];\n            if (cur == max) {\n                ans[count]\
    \ = cur;\n                count++;\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8y2gc33p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for(long long i = 0; i < k; i++) {\n        ans.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp06sx14x9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvnyehykr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> arr1;\n    arr1.reserve(arr.size());\n\
    \    long max = 0;\n    long min = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n     \
    \   if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    long\
    \ mid = max;\n    long mid2 = min;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n     \
    \   if (arr[i] < min) {\n            min = arr[i];\n        }\n        if (arr[i]\
    \ == max) {\n            arr1.push_back(max);\n        }\n        if (arr[i] ==\
    \ min) {\n            arr1.push_back(min);\n        }\n        if (arr[i] == mid)\
    \ {\n            arr1.push_back(mid);\n        }\n        if (arr[i] == mid2)\
    \ {\n            arr1.push_back(mid2);\n        }\n    }\n    return arr1;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpduu4v1vl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdc5aznw4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long index = 0;\n    long temp = 0;\n    long count = 0;\n    for(long i =\
    \ 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \            index = i;\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] == max) {\n            count++;\n            temp\
    \ = arr[i];\n        }\n    }\n    while(count < k) {\n        ans.push_back(temp);\n\
    \        count++;\n        temp = 0;\n        for(long i = 0; i < arr.size();\
    \ i++) {\n            if(arr[i] == temp) {\n                count++;\n       \
    \         temp = arr[i];\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcyww1ep1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long cur = 0;\n    long max = 0;\n    for (long i = 0; i < m; i++)\
    \ {\n        long curr = arr[i];\n        if (curr > max) {\n            max =\
    \ curr;\n        }\n    }\n    long curr = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long curr = arr[i];\n        if (curr > max) {\n            ans.push_back(curr);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_pvsgwgs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max_arr;\n    long max_num =\
    \ arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_num) {\n\
    \            max_num = arr[i];\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpst72ijpc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    long long temp = 0;\n\
    \    long long count = 0;\n    for(long long i = 0; i < arr.size(); i++) {\n \
    \       if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n           \
    \ temp = arr[i];\n            count = 0;\n            for(long long j = 0; j <\
    \ arr.size(); j++) {\n                if(arr[j] > temp) {\n                  \
    \  temp = arr[j];\n                    count++;\n                }\n         \
    \   }\n            if(count > k) {\n                max = temp;\n            }\n\
    \        }\n    }\n    std::vector<long> ans;\n    ans.push_back(max);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpykewvba_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max;\n    long maxVal = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > maxVal) {\n \
    \           maxVal = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        if(maxVal < arr[i]) {\n            max.push_back(maxVal);\n     \
    \       maxVal = arr[i];\n        } else {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    max.push_back(maxVal);\n    return max;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxr20to2p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max_num = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num) {\n           \
    \ max_num = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] == max_num) {\n            result.push_back(max_num);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        return\
    \ result;\n    }\n    long max_num = arr[0];\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n   \
    \     }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_num) {\n            result.push_back(max_num);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        return\
    \ result;\n    }\n    long max_num = arr[0];\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n   \
    \     }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_num) {\n            result.push_back(max_num);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        return\
    \ result;\n    }\n    long max_num = arr[0];\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n   \
    \     }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_num) {\n            result.push_back(max_num);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        return\
    \ result;\n    }\n    long max_num = arr[0];\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n   \
    \     }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_num) {\n            result.push_back(max_num);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        return\
    \ result;\n    }\n    long max_num = arr[0];\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n   \
    \     }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_num) {\n            result.push_back(max_num);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        return\
    \ result;\n    }\n    long max_num = arr[0];\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n   \
    \     }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_num) {\n            result.push_back(max_num);\n\
    \            count++;\n        }\n    }\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmld0vgf_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    std::vector<long> max(n);\n\
    \    long max_val = arr[0];\n    long max_idx = 1;\n    for(long i = 1; i < n;\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    for(long i = max_idx; i < k; i++)\
    \ {\n        max[i] = arr[i];\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp0nh_5t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    max_arr.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_arr.push_back(arr[i]);\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc2bjhojf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans = 0;\n    long max = 0;\n    long min\
    \ = 0;\n    long mid = 0;\n    long i = 0;\n    long j = 0;\n    long len = 0;\n\
    \    long temp = 0;\n    long count = 0;\n    long maxCount = 0;\n    long minCount\
    \ = 0;\n    long maxCount2 = 0;\n    long minCount2 = 0;\n    long maxCount3 =\
    \ 0;\n    long minCount3 = 0;\n    long maxCount4 = 0;\n    long minCount4 = 0;\n\
    \    long maxCount5 = 0;\n    long minCount5 = 0;\n    long maxCount6 = 0;\n \
    \   long minCount6 = 0;\n    long maxCount7 = 0;\n    long minCount7 = 0;\n  \
    \  long maxCount8 = 0;\n    long minCount8 = 0;\n    long maxCount9 = 0;\n   \
    \ long minCount9 = 0;\n    long maxCount10 = 0;\n    long minCount10 = 0;\n  \
    \  long maxCount11 = 0;\n    long minCount11 = 0;\n    long maxCount12 = 0;\n\
    \    long minCount12 = 0;\n    long maxCount13 = 0;\n    long minCount13 = 0;\n\
    \    long maxCount14 = 0;\n    long minCount14 = 0;\n    long maxCount15 = 0;\n\
    \    long minCount15 = 0;\n    long maxCount16 = 0;\n    long minCount16 = 0;\n\
    \    long maxCount17 = 0;\n    long minCount17 = 0;\n    long maxCount18 = 0;\n\
    \    long minCount18 = 0;\n    long maxCount19 = 0;\n    long minCount19 = 0;\n\
    \    long maxCount20 = 0;\n    long minCount20 = 0;\n    long maxCount21 = 0;\n\
    \    long minCount21 = 0;\n    long maxCount22 = 0;\n    long minCount22 = 0;\n\
    \    long maxCount23 = 0;\n    long minCount23 = 0;\n    long maxCount24 = 0;\n\
    \    long minCount24 = 0;\n    long maxCount25 = 0;\n    long minCount25 = 0;\n\
    \    long maxCount26 = 0;\n    long minCount26 = 0;\n    long maxCount27 = 0;\n\
    \    long minCount27 = 0;\n    long maxCount28 = 0;\n    long minCount28 = 0;\n\
    \    long maxCount29 = 0;\n    long minCount29 = 0;\n    long maxCount30 = 0;\n\
    \    long minCount30 = 0;\n    long maxCount31 = 0;\n    long minCount31 = 0;\n\
    \    long maxCount32 = 0;\n    long minCount32 = 0;\n    long maxCount33 = 0;\n\
    \    long minCount33 = 0;\n    long maxCount34 = 0;\n    long minCount34\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpav3qjr7x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> arr2;\n    long max = 0;\n \
    \   long min = 0;\n    long mid = 0;\n    long count = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr0u3gn2c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe34km004.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max = 0;\n\
    \    long index = 0;\n    for (auto i : arr) {\n        if (max < i) {\n     \
    \       max = i;\n            index = i;\n        }\n    }\n    for (auto i :\
    \ arr) {\n        if (i == index) {\n            result.push_back(i);\n      \
    \  }\n    }\n    if (result.size() < k) {\n        for (auto i : arr) {\n    \
    \        if (i == index) {\n                result.push_back(i);\n           \
    \ }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqbbxki04.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> res(n);\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for(long i = 0; i < n; i++) {\n     \
    \   if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        if(max_idx\
    \ != i) {\n            res[max_idx] = arr[i];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwt5vhlqd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    long mid = max_val / 2;\n    long max_pos =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > mid) {\n\
    \            ans.push_back(arr[i]);\n            if (k == ans.size()) {\n    \
    \            break;\n            }\n            if (k == ans.size() - 1) {\n \
    \               ans.push_back(arr[i]);\n                break;\n            }\n\
    \            if (arr[i] > max_pos) {\n                max_pos = arr[i];\n    \
    \        }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxtseszt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi5_ivge7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    long max_index = 0;\n    long max_count = 0;\n    long min_num = arr[0];\n\
    \    long min_index = 0;\n    long min_count = 0;\n    long mid = 0;\n    long\
    \ mid_index = 0;\n    long mid_count = 0;\n    long mid_index2 = 0;\n    long\
    \ mid_count2 = 0;\n    long mid_index3 = 0;\n    long mid_count3 = 0;\n    long\
    \ mid_index4 = 0;\n    long mid_count4 = 0;\n    long mid_index5 = 0;\n    long\
    \ mid_count5 = 0;\n    long mid_index6 = 0;\n    long mid_count6 = 0;\n    long\
    \ mid_index7 = 0;\n    long mid_count7 = 0;\n    long mid_index8 = 0;\n    long\
    \ mid_count8 = 0;\n    long mid_index9 = 0;\n    long mid_count9 = 0;\n    long\
    \ mid_index10 = 0;\n    long mid_count10 = 0;\n    long mid_index11 = 0;\n   \
    \ long mid_count11 = 0;\n    long mid_index12 = 0;\n    long mid_count12 = 0;\n\
    \    long mid_index13 = 0;\n    long mid_count13 = 0;\n    long mid_index14 =\
    \ 0;\n    long mid_count14 = 0;\n    long mid_index15 = 0;\n    long mid_count15\
    \ = 0;\n    long mid_index16 = 0;\n    long mid_count16 = 0;\n    long mid_index17\
    \ = 0;\n    long mid_count17 = 0;\n    long mid_index18 = 0;\n    long mid_count18\
    \ = 0;\n    long mid_index19 = 0;\n    long mid_count19 = 0;\n    long mid_index20\
    \ = 0;\n    long mid_count20 = 0;\n    long mid_index21 = 0;\n    long mid_count21\
    \ = 0;\n    long mid_index22 = 0;\n    long mid_count22 = 0;\n    long mid_index23\
    \ = 0;\n    long mid_count23 = 0;\n    long mid_index24 = 0;\n    long mid_count24\
    \ = 0;\n    long mid_index25 = 0;\n    long mid_count25 = 0;\n    long mid_index26\
    \ = 0;\n    long mid_count26 = 0;\n    long mid_index27 = 0;\n    long mid_count27\
    \ = 0;\n    long mid_index28 = 0;\n    long mid_count28 = 0;\n    long mid_index29\
    \ = 0;\n    long mid_count29 = 0;\n    long mid_index30 = 0;\n    long mid_count30\
    \ = 0;\n    long mid_index31 = 0;\n    long mid_count31 = 0;\n    long mid_index32\
    \ = 0;\n    long mid_count32 = 0;\n    long mid_index33 = 0;\n    long mid_count33\
    \ = 0;\n    long mid_index34 = 0;\n\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv6i2k7mg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    long long maxIndex2 = 0;\n    long long maxIndex3 = 0;\n    long long maxIndex4\
    \ = 0;\n    long long maxIndex5 = 0;\n    long long maxIndex6 = 0;\n    long long\
    \ maxIndex7 = 0;\n    long long maxIndex8 = 0;\n    long long maxIndex9 = 0;\n\
    \    long long maxIndex10 = 0;\n    long long maxIndex11 = 0;\n    long long maxIndex12\
    \ = 0;\n    long long maxIndex13 = 0;\n    long long maxIndex14 = 0;\n    long\
    \ long maxIndex15 = 0;\n    long long maxIndex16 = 0;\n    long long maxIndex17\
    \ = 0;\n    long long maxIndex18 = 0;\n    long long maxIndex19 = 0;\n    long\
    \ long maxIndex20 = 0;\n    long long maxIndex21 = 0;\n    long long maxIndex22\
    \ = 0;\n    long long maxIndex23 = 0;\n    long long maxIndex24 = 0;\n    long\
    \ long maxIndex25 = 0;\n    long long maxIndex26 = 0;\n    long long maxIndex27\
    \ = 0;\n    long long maxIndex28 = 0;\n    long long maxIndex29 = 0;\n    long\
    \ long maxIndex30 = 0;\n    long long maxIndex31 = 0;\n    long long maxIndex32\
    \ = 0;\n    long long maxIndex33 = 0;\n    long long maxIndex34 = 0;\n    long\
    \ long maxIndex35 = 0;\n    long long maxIndex36 = 0;\n    long long maxIndex37\
    \ = 0;\n    long long maxIndex38 = 0;\n    long long maxIndex39 = 0;\n    long\
    \ long maxIndex40 = 0;\n    long long maxIndex41 = 0;\n    long long maxIndex42\
    \ = 0;\n    long long maxIndex43 = 0;\n    long long maxIndex44 = 0;\n    long\
    \ long maxIndex45 = 0;\n    long long maxIndex46 = 0;\n    long long maxIndex47\
    \ = 0;\n    long long maxIndex48 = 0;\n    long long maxIndex49 = 0;\n    long\
    \ long maxIndex50 = 0;\n    long long maxIndex51 = 0;\n    long long maxIndex52\
    \ = 0;\n    long long maxIndex53 = 0;\n    long long maxIndex54 = 0;\n    long\
    \ long maxIndex55 = 0;\n    long long maxIndex56 = 0;\n    long long maxIndex57\
    \ = 0;\n    long long maxIndex58 = 0;\n    long long maxIndex59 = 0;\n    long\
    \ long maxIndex60 = 0;\n    long long maxIndex61 = 0;\n    long long maxIndex62\
    \ = 0;\n    long long maxIndex63 = 0;\n    long \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp46rg5cfp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_size = n;\n\
    \    long max_num = arr[0];\n    long max_pos = 0;\n    long max_val = max_num;\n\
    \    std::vector<long> result;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_num) {\n            max_num = arr[i];\n            max_pos = i;\n    \
    \    }\n    }\n    for(long i = 0; i < k; i++) {\n        if(max_pos == max_size)\
    \ {\n            result.push_back(max_num);\n            break;\n        }\n \
    \       result.push_back(arr[max_pos]);\n        max_pos++;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiudxk0z8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long temp = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n   \
    \ while(i < arr.size() && j < k) {\n        if(arr[i] > max) {\n            max\
    \ = arr[i];\n            temp = i;\n        }\n        i++;\n        j++;\n  \
    \  }\n    while(j < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n\
    \            temp = j;\n        }\n        j++;\n    }\n    while(i < arr.size())\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            temp =\
    \ i;\n        }\n        i++;\n    }\n    while(j < k) {\n        if(arr[j] >\
    \ max) {\n            max = arr[j];\n            temp = j;\n        }\n      \
    \  j++;\n    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            temp = i;\n        }\n        i++;\n\
    \        j++;\n    }\n    while(j < k) {\n        if(arr[j] > max) {\n       \
    \     max = arr[j];\n            temp = j;\n        }\n        j++;\n    }\n \
    \   while(i < arr.size()) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \            temp = i;\n        }\n        i++;\n    }\n    while(j < k) {\n \
    \       if(arr[j] > max) {\n            max = arr[j];\n            temp = j;\n\
    \        }\n        j++;\n    }\n    while(i < arr.size() && j < k) {\n      \
    \  if(arr[i] > max) {\n            max = arr[i];\n            temp = i;\n    \
    \    }\n        i++;\n        j++;\n    }\n    while(j < k) {\n        if(arr[j]\
    \ > max) {\n            max = arr[j];\n            temp = j;\n        }\n    \
    \    j++;\n    }\n    while(i < arr.size()) {\n        if(arr[i] > max) {\n  \
    \          max = arr[i];\n            temp = i;\n        }\n        i++;\n   \
    \ }\n    while(j < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n\
    \            temp = j;\n        }\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     temp = i;\n        }\n        i++;\n        j++;\n    }\n    while(j < k)\
    \ {\n        if(arr[j] > max) {\n            max = arr[j];\n            temp =\
    \ j;\n        }\n        j++;\n    }\n    while(i < arr.size()) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk8yna3b3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    long sum = 0;\n    long count = 0;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        if(arr[i] < min) {\n            min = arr[i];\n        }\n\
    \        sum += arr[i];\n        count++;\n    }\n    long mid = sum / count;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > mid) {\n    \
    \        ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max);\n \
    \   ans.push_back(min);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplazu9e5f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbxlllo88.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    std::vector<long> ans;\n  \
    \  for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n      \
    \      max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] == max) {\n            ans.push_back(arr[i]);\n       \
    \ }\n    }\n    ans.resize(ans.size() + k);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfk7d2wl5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for(long i = 0; i < n; i++) {\n       \
    \ if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx =\
    \ i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = max_idx; i >= 0; i--) {\n        if(arr[i]\
    \ > max_val) {\n            ans.insert(ans.begin() + i, arr[i]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpirp2jsrb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    long max_val = INT_MIN;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_val) {\n            max_arr.push_back(arr[i]);\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppg78sy1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   std::vector<long> ans;\n    for (long i = 0; i < k; i++) {\n        ans.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr0c87ixp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max_val = arr[0];\n    std::vector<long>\
    \ max_arr;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] == max_val) {\n            max_arr.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        max_arr.push_back(max_val);\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd3e4h15i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max_val = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n            result.push_back(max_val);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        result.push_back(result[0]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbasnvyi_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < k;\
    \ i++) {\n        ans.push_back(max_val);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp790zecd3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max_arr;\n    long max_num =\
    \ arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ k; i++) {\n        max_arr.push_back(max_num);\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl6970qoo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = 1;\n    for(long i = 1; i < m; i++) {\n        if(arr[i] > max_val) {\n  \
    \          max_val = arr[i];\n            max_idx = i;\n        }\n    }\n   \
    \ ans.push_back(max_val);\n    for(long i = max_idx; i < n; i++) {\n        if(arr[i]\
    \ > max_val) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xilbdki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    long max_val = arr[0];\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n  \
    \      if(arr[i] > max_val) {\n            max_arr.push_back(arr[i]);\n      \
    \  }\n    }\n    for(long i = 0; i < k; i++) {\n        max_arr.push_back(max_val);\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphi8xdbpv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    std::vector<long> ans;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n\
    \        ans.push_back(max);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp85jmxz_1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long ans = 0;\n    long long max = 0;\n \
    \   long long min = 0;\n    long long sum = 0;\n    long long count = 0;\n   \
    \ for(long long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n      \
    \  if(sum > max) {\n            max = sum;\n            ans = i;\n        }\n\
    \        if(sum < min) {\n            min = sum;\n        }\n    }\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n           \
    \ max = arr[i];\n            ans = i;\n        }\n    }\n    for(long long i =\
    \ 0; i < arr.size(); i++) {\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ == max) {\n            count++;\n        }\n    }\n    std::vector<long> ans;\n\
    \    for(long long i = 0; i < k; i++) {\n        ans.push_back(arr[ans]);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9z0mwy1j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoi2wyjzt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < m; i++) {\n        long max_val = arr[i];\n \
    \       for (long j = i + 1; j < n; j++) {\n            if (arr[j] > max_val)\
    \ {\n                max_val = arr[j];\n            }\n        }\n        ans.push_back(max_val);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzqxnkph2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747384
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = n;\n    std::vector<long>\
    \ max;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++)\
    \ {\n            if(arr[j] > arr[j+1]) {\n                long temp = arr[j];\n\
    \                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n      \
    \      }\n        }\n    }\n    for(long i = 0; i < k; i++) {\n        max.push_back(arr[i]);\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_2bny_8n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = 1;\n    for(long i = 1; i < m; i++) {\n        if(arr[i] > max_val) {\n  \
    \          max_val = arr[i];\n            max_idx = i;\n        }\n    }\n   \
    \ ans.push_back(max_val);\n    for(long i = max_idx; i < n; i++) {\n        if(arr[i]\
    \ > max_val) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5xilbdki.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> max_arr;\n    long max_num\
    \ = arr[0];\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    for (long i = 0; i <\
    \ k; i++) {\n        max_arr.push_back(max_num);\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo5gslmw6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgoyufwzt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for (long i = 0; i < k; i++) {\n        if (arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        if (arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkwp7a13f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> arr1;\n    long max = 0;\n \
    \   long min = 0;\n    long temp = 0;\n    long count = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            temp = max;\n            max = arr[i];\n        }\n        if\
    \ (arr[i] < min) {\n            temp = min;\n            min = arr[i];\n     \
    \   }\n        if (arr[i] == temp) {\n            count++;\n        }\n    }\n\
    \    arr1.resize(count);\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] > max) {\n            arr1[count] = max;\n            max = arr[i];\n\
    \        }\n        if (arr[i] < min) {\n            arr1[count] = min;\n    \
    \        min = arr[i];\n        }\n        if (arr[i] == temp) {\n           \
    \ count++;\n        }\n    }\n    return arr1;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph6kp7qz5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for(long long i = 0; i < k; i++) {\n        ans.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp06sx14x9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747385
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    long mid = (max + min) / 2;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > mid) {\n  \
    \          ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp47nzzy0r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    long long temp = 0;\n\
    \    long long count = 0;\n    long long i = 0;\n    long long j = 0;\n    long\
    \ long size = arr.size();\n    long long temp1 = arr[0];\n    long long temp2\
    \ = arr[0];\n    long long temp3 = arr[0];\n    long long temp4 = arr[0];\n  \
    \  long long temp5 = arr[0];\n    long long temp6 = arr[0];\n    long long temp7\
    \ = arr[0];\n    long long temp8 = arr[0];\n    long long temp9 = arr[0];\n  \
    \  long long temp10 = arr[0];\n    long long temp11 = arr[0];\n    long long temp12\
    \ = arr[0];\n    long long temp13 = arr[0];\n    long long temp14 = arr[0];\n\
    \    long long temp15 = arr[0];\n    long long temp16 = arr[0];\n    long long\
    \ temp17 = arr[0];\n    long long temp18 = arr[0];\n    long long temp19 = arr[0];\n\
    \    long long temp20 = arr[0];\n    long long temp21 = arr[0];\n    long long\
    \ temp22 = arr[0];\n    long long temp23 = arr[0];\n    long long temp24 = arr[0];\n\
    \    long long temp25 = arr[0];\n    long long temp26 = arr[0];\n    long long\
    \ temp27 = arr[0];\n    long long temp28 = arr[0];\n    long long temp29 = arr[0];\n\
    \    long long temp30 = arr[0];\n    long long temp31 = arr[0];\n    long long\
    \ temp32 = arr[0];\n    long long temp33 = arr[0];\n    long long temp34 = arr[0];\n\
    \    long long temp35 = arr[0];\n    long long temp36 = arr[0];\n    long long\
    \ temp37 = arr[0];\n    long long temp38 = arr[0];\n    long long temp39 = arr[0];\n\
    \    long long temp40 = arr[0];\n    long long temp41 = arr[0];\n    long long\
    \ temp42 = arr[0];\n    long long temp43 = arr[0];\n    long long temp44 = arr[0];\n\
    \    long long temp45 = arr[0];\n    long long temp46 = arr[0];\n    long long\
    \ temp47 = arr[0];\n    long long temp48 = arr[0];\n    long long temp49 = arr[0];\n\
    \    long long temp50 = arr[0];\n    long long temp51 = arr[0];\n    long long\
    \ temp52 = arr[0];\n    long long temp53 = arr[0];\n    long long temp54 = \n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcw592pb7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    for (long i = 1; i < m; i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_val) {\n       \
    \     ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_umx0sp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max_val = arr[0];\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    if (k == 1) {\n        res.push_back(max_val);\n\
    \        return res;\n    }\n    long mid = max_val / 2;\n    std::vector<long>\
    \ left_res = maximum(arr, k - 1);\n    std::vector<long> right_res = maximum(arr,\
    \ k);\n    for (long i = 0; i < left_res.size(); i++) {\n        if (left_res[i]\
    \ > mid) {\n            left_res[i] = mid;\n        }\n    }\n    for (long i\
    \ = 0; i < right_res.size(); i++) {\n        if (right_res[i] > mid) {\n     \
    \       right_res[i] = mid;\n        }\n    }\n    for (long i = 0; i < left_res.size();\
    \ i++) {\n        if (left_res[i] > right_res[i]) {\n            left_res[i] =\
    \ right_res[i];\n        }\n    }\n    for (long i = 0; i < right_res.size();\
    \ i++) {\n        if (right_res[i] > left_res[i]) {\n            right_res[i]\
    \ = left_res[i];\n        }\n    }\n    for (long i = 0; i < left_res.size();\
    \ i++) {\n        if (left_res[i] > max_val) {\n            left_res[i] = max_val;\n\
    \        }\n    }\n    for (long i = 0; i < right_res.size(); i++) {\n       \
    \ if (right_res[i] > max_val) {\n            right_res[i] = max_val;\n       \
    \ }\n    }\n    for (long i = 0; i < left_res.size(); i++) {\n        if (left_res[i]\
    \ > max_val) {\n            left_res[i] = max_val;\n        }\n    }\n    for\
    \ (long i = 0; i < right_res.size(); i++) {\n        if (right_res[i] > max_val)\
    \ {\n            right_res[i] = max_val;\n        }\n    }\n    for (long i =\
    \ 0; i < left_res.size(); i++) {\n        if (left_res[i] > max_val) {\n     \
    \       left_res[i] = max_val;\n        }\n    }\n    for (long i = 0; i < right_res.size();\
    \ i++) {\n        if (right_res[i] > max_val) {\n            right_res[i] = max_val;\n\
    \        }\n    }\n    for (long i = 0; i < left_res.size(); i++) {\n        if\
    \ (left_res[i] > max_val) {\n            left_res[i] = max_val;\n        }\n \
    \   }\n    for (long i = 0; i < right_res.size(); i++) {\n        if (right_res[i]\
    \ > max_val) {\n            right_res[i] = max_val;\n        }\n    }\n    for\
    \ (long i = 0; i < left_res.size(); i++) {\n        if (left_res[i] > max_val)\
    \ {\n            left_res[i] = max_val;\n        }\n    }\n    for (long i = 0;\
    \ i < right_res.size(); i++) {\n        if (right_res[i] > max_val) {\n      \
    \      right_res[i] = max_val;\n        }\n    }\n    for (long i = 0; i < left_res.size();\
    \ i++) {\n        if (left_res[i] > max_val) {\n            left_res[i] = max_val;\n\
    \        }\n    }\n    for (long i = 0; i < right_res.size(); i++) {\n       \
    \ if (right_res[i] > max_val) {\n            right_res\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxvh1sgh_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = n;\n    long\
    \ max_val = arr[0];\n    long max_idx = 1;\n    long max_idx2 = 1;\n    long max_idx3\
    \ = 1;\n    long max_idx4 = 1;\n    long max_idx5 = 1;\n    long max_idx6 = 1;\n\
    \    long max_idx7 = 1;\n    long max_idx8 = 1;\n    long max_idx9 = 1;\n    long\
    \ max_idx10 = 1;\n    long max_idx11 = 1;\n    long max_idx12 = 1;\n    long max_idx13\
    \ = 1;\n    long max_idx14 = 1;\n    long max_idx15 = 1;\n    long max_idx16 =\
    \ 1;\n    long max_idx17 = 1;\n    long max_idx18 = 1;\n    long max_idx19 = 1;\n\
    \    long max_idx20 = 1;\n    long max_idx21 = 1;\n    long max_idx22 = 1;\n \
    \   long max_idx23 = 1;\n    long max_idx24 = 1;\n    long max_idx25 = 1;\n  \
    \  long max_idx26 = 1;\n    long max_idx27 = 1;\n    long max_idx28 = 1;\n   \
    \ long max_idx29 = 1;\n    long max_idx30 = 1;\n    long max_idx31 = 1;\n    long\
    \ max_idx32 = 1;\n    long max_idx33 = 1;\n    long max_idx34 = 1;\n    long max_idx35\
    \ = 1;\n    long max_idx36 = 1;\n    long max_idx37 = 1;\n    long max_idx38 =\
    \ 1;\n    long max_idx39 = 1;\n    long max_idx40 = 1;\n    long max_idx41 = 1;\n\
    \    long max_idx42 = 1;\n    long max_idx43 = 1;\n    long max_idx44 = 1;\n \
    \   long max_idx45 = 1;\n    long max_idx46 = 1;\n    long max_idx47 = 1;\n  \
    \  long max_idx48 = 1;\n    long max_idx49 = 1;\n    long max_idx50 = 1;\n   \
    \ long max_idx51 = 1;\n    long max_idx52 = 1;\n    long max_idx53 = 1;\n    long\
    \ max_idx54 = 1;\n    long max_idx55 = 1;\n    long max_idx56 = 1;\n    long max_idx57\
    \ = 1;\n    long max_idx58 = 1;\n    long max_idx59 = 1;\n    long max_idx60 =\
    \ 1;\n    long max_idx61 = 1;\n    long max_idx62 = 1;\n    long max_idx63 = 1;\n\
    \    long max_idx64 = 1;\n    long max_idx65 = 1;\n    long max_idx66 = 1;\n \
    \   long max_idx67 = 1;\n    long max_idx68 = 1;\n    long max_idx69 = 1;\n  \
    \  long \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5iv083dh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> result;\n    long temp;\n    for(long i = 0; i <\
    \ m; i++) {\n        temp = arr[i];\n        for(long j = i; j < n; j++) {\n \
    \           if(arr[j] > temp) {\n                temp = arr[j];\n            }\n\
    \        }\n        result.push_back(temp);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppr4x5i72.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_num = arr[0];\n\
    \    long max_index = 0;\n    long max_count = 0;\n    long max_count2 = 0;\n\
    \    long max_count3 = 0;\n    long max_count4 = 0;\n    long max_count5 = 0;\n\
    \    long max_count6 = 0;\n    long max_count7 = 0;\n    long max_count8 = 0;\n\
    \    long max_count9 = 0;\n    long max_count10 = 0;\n    long max_count11 = 0;\n\
    \    long max_count12 = 0;\n    long max_count13 = 0;\n    long max_count14 =\
    \ 0;\n    long max_count15 = 0;\n    long max_count16 = 0;\n    long max_count17\
    \ = 0;\n    long max_count18 = 0;\n    long max_count19 = 0;\n    long max_count20\
    \ = 0;\n    long max_count21 = 0;\n    long max_count22 = 0;\n    long max_count23\
    \ = 0;\n    long max_count24 = 0;\n    long max_count25 = 0;\n    long max_count26\
    \ = 0;\n    long max_count27 = 0;\n    long max_count28 = 0;\n    long max_count29\
    \ = 0;\n    long max_count30 = 0;\n    long max_count31 = 0;\n    long max_count32\
    \ = 0;\n    long max_count33 = 0;\n    long max_count34 = 0;\n    long max_count35\
    \ = 0;\n    long max_count36 = 0;\n    long max_count37 = 0;\n    long max_count38\
    \ = 0;\n    long max_count39 = 0;\n    long max_count40 = 0;\n    long max_count41\
    \ = 0;\n    long max_count42 = 0;\n    long max_count43 = 0;\n    long max_count44\
    \ = 0;\n    long max_count45 = 0;\n    long max_count46 = 0;\n    long max_count47\
    \ = 0;\n    long max_count48 = 0;\n    long max_count49 = 0;\n    long max_count50\
    \ = 0;\n    long max_count51 = 0;\n    long max_count52 = 0;\n    long max_count53\
    \ = 0;\n    long max_count54 = 0;\n    long max_count55 = 0;\n    long max_count56\
    \ = 0;\n    long max_count57 = 0;\n    long max_count58 = 0;\n    long max_count59\
    \ = 0;\n    long max_count60 = 0;\n    long max_count61 = 0;\n    long max_count62\
    \ = 0;\n    long max_count63 = 0;\n    long max_count64 = 0;\n    long max_count65\
    \ = 0;\n    long max_count66 = 0;\n    long max_count67 = 0;\n    long max_count68\
    \ = 0;\n    long max_count69 = 0;\n    long max_count70 = 0;\n    long max_\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd11qbx0j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long cur = 0;\n    long max = 0;\n    for (long i = 0; i < m; i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            cur =\
    \ i;\n        }\n    }\n    ans.push_back(max);\n    for (long i = cur; i < n;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        ans.push_back(max);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_vm6sn0_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max)\
    \ {\n            res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptuwnrq59.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           max_val = arr[i];\n            max_idx = i;\n        }\n    }\n  \
    \  res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_4d9n872.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> max_arr(n);\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 0; i < n; i++) {\n    \
    \    if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    max_arr[max_idx] = max_val;\n    for (long i = max_idx\
    \ + 1; i < k; i++) {\n        max_arr[i - 1] = arr[i];\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfrrb4ap3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long i = 0;\n    long j = 0;\n    long size = arr.size();\n    long mid = size\
    \ / 2;\n    long mid2 = mid + 1;\n    long mid3 = mid2 + 1;\n    long mid4 = mid3\
    \ + 1;\n    long mid5 = mid4 + 1;\n    long mid6 = mid5 + 1;\n    long mid7 =\
    \ mid6 + 1;\n    long mid8 = mid7 + 1;\n    long mid9 = mid8 + 1;\n    long mid10\
    \ = mid9 + 1;\n    long mid11 = mid10 + 1;\n    long mid12 = mid11 + 1;\n    long\
    \ mid13 = mid12 + 1;\n    long mid14 = mid13 + 1;\n    long mid15 = mid14 + 1;\n\
    \    long mid16 = mid15 + 1;\n    long mid17 = mid16 + 1;\n    long mid18 = mid17\
    \ + 1;\n    long mid19 = mid18 + 1;\n    long mid20 = mid19 + 1;\n    long mid21\
    \ = mid20 + 1;\n    long mid22 = mid21 + 1;\n    long mid23 = mid22 + 1;\n   \
    \ long mid24 = mid23 + 1;\n    long mid25 = mid24 + 1;\n    long mid26 = mid25\
    \ + 1;\n    long mid27 = mid26 + 1;\n    long mid28 = mid27 + 1;\n    long mid29\
    \ = mid28 + 1;\n    long mid30 = mid29 + 1;\n    long mid31 = mid30 + 1;\n   \
    \ long mid32 = mid31 + 1;\n    long mid33 = mid32 + 1;\n    long mid34 = mid33\
    \ + 1;\n    long mid35 = mid34 + 1;\n    long mid36 = mid35 + 1;\n    long mid37\
    \ = mid36 + 1;\n    long mid38 = mid37 + 1;\n    long mid39 = mid38 + 1;\n   \
    \ long mid40 = mid39 + 1;\n    long mid41 = mid40 + 1;\n    long mid42 = mid41\
    \ + 1;\n    long mid43 = mid42 + 1;\n    long mid44 = mid43 + 1;\n    long mid45\
    \ = mid44 + 1;\n    long mid46 = mid45 + 1;\n    long mid47 = mid46 + 1;\n   \
    \ long mid48 = mid47 + 1;\n    long mid49 = mid48 + 1;\n    long mid50 = mid49\
    \ + 1;\n    long mid51 = mid50 + 1;\n    long mid52 = mid51 + 1;\n    long mid53\
    \ = mid52 + 1;\n    long mid54 = mid53 + 1;\n    long \n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk8w_21l0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n       \
    \ if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx =\
    \ i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx;\
    \ i < k; i++) {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiw3cy_xy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    long n = arr.size();\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for(long i = 1;\
    \ i < n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for(long i = max_idx + 1; i < k; i++) {\n        long max_val = arr[i];\n  \
    \      long max_idx = i;\n        for(long j = max_idx + 1; j < n; j++) {\n  \
    \          if(arr[j] > max_val) {\n                max_val = arr[j];\n       \
    \         max_idx = j;\n            }\n        }\n        ans.push_back(max_val);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf3y4n_3n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    long long temp = 0;\n\
    \    long long count = 0;\n    long long i = 0;\n    long long j = 0;\n    long\
    \ long n = arr.size();\n    long long m = n;\n    long long k1 = k;\n    long\
    \ long k2 = k1;\n    long long k3 = k2;\n    long long k4 = k3;\n    long long\
    \ k5 = k4;\n    long long k6 = k5;\n    long long k7 = k6;\n    long long k8 =\
    \ k7;\n    long long k9 = k8;\n    long long k10 = k9;\n    long long k11 = k10;\n\
    \    long long k12 = k11;\n    long long k13 = k12;\n    long long k14 = k13;\n\
    \    long long k15 = k14;\n    long long k16 = k15;\n    long long k17 = k16;\n\
    \    long long k18 = k17;\n    long long k19 = k18;\n    long long k20 = k19;\n\
    \    long long k21 = k20;\n    long long k22 = k21;\n    long long k23 = k22;\n\
    \    long long k24 = k23;\n    long long k25 = k24;\n    long long k26 = k25;\n\
    \    long long k27 = k26;\n    long long k28 = k27;\n    long long k29 = k28;\n\
    \    long long k30 = k29;\n    long long k31 = k30;\n    long long k32 = k31;\n\
    \    long long k33 = k32;\n    long long k34 = k33;\n    long long k35 = k34;\n\
    \    long long k36 = k35;\n    long long k37 = k36;\n    long long k38 = k37;\n\
    \    long long k39 = k38;\n    long long k40 = k39;\n    long long k41 = k40;\n\
    \    long long k42 = k41;\n    long long k43 = k42;\n    long long k44 = k43;\n\
    \    long long k45 = k44;\n    long long k46 = k45;\n    long long k47 = k46;\n\
    \    long long k48 = k47;\n    long long k49 = k48;\n    long long k50 = k49;\n\
    \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnrzdheo_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> result;\n    long max =\
    \ 0;\n    long min = 0;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n    }\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max && arr[i] < min) {\n      \
    \      result.push_back(arr[i]);\n        }\n    }\n    for (long i = 0; i < result.size()\
    \ - k + 1; i++) {\n        result.push_back(max);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv0pasxwa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    for (long i = max_idx; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkierfffb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 0; i < arr.size(); i++) {\n     \
    \   if(maxVal < arr[i]) {\n            maxVal = arr[i];\n        }\n        if(maxVal\
    \ >= arr[i]) {\n            max.push_back(arr[i]);\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3ivm99ly.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx\
    \ = 1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbrp2lgs5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long cur = 0;\n    long max = 0;\n    for (long i = 0; i < m; i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            cur =\
    \ i;\n        }\n    }\n    ans.push_back(arr[cur]);\n    for (long i = cur +\
    \ 1; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n \
    \       }\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps_p1h7e5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvci5jde7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    long index = 0;\n    long temp\
    \ = 0;\n    long count = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long n = arr.size();\n    long m = n;\n    long temp2 = 0;\n    long temp3\
    \ = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long\
    \ temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n\
    \    long temp11 = 0;\n    long temp12 = 0;\n    long temp13 = 0;\n    long temp14\
    \ = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n   \
    \ long temp18 = 0;\n    long temp19 = 0;\n    long temp20 = 0;\n    long temp21\
    \ = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n   \
    \ long temp25 = 0;\n    long temp26 = 0;\n    long temp27 = 0;\n    long temp28\
    \ = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n   \
    \ long temp32 = 0;\n    long temp33 = 0;\n    long temp34 = 0;\n    long temp35\
    \ = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n   \
    \ long temp39 = 0;\n    long temp40 = 0;\n    long temp41 = 0;\n    long temp42\
    \ = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n   \
    \ long temp46 = 0;\n    long temp47 = 0;\n    long temp48 = 0;\n    long temp49\
    \ = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n   \
    \ long temp53 = 0;\n    long temp54 = 0;\n    long temp55 = 0;\n    long temp56\
    \ = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n   \
    \ long temp60 = 0;\n    long temp61 = 0;\n    long temp62 = 0;\n    long temp63\
    \ = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n   \
    \ long temp67 = 0;\n    long temp68 = 0;\n    long temp69 = 0;\n    long temp70\
    \ = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n   \
    \ long temp74 = 0;\n    long temp75 = 0;\n    long temp76 = 0;\n    long temp77\
    \ = 0;\n    long temp78 = 0;\n    long temp79\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq8d62d06.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++) {\n      \
    \  if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < k; i++) {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_zzdyhum.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n     \
    \   if(arr[i] > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n  \
    \  for(long i = 0; i < k; i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjqdm8__k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n  \
    \  long min = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \            ans.clear();\n            ans.push_back(i);\n        }\n        if(sum\
    \ < min) {\n            min = sum;\n            ans.clear();\n            ans.push_back(i);\n\
    \        }\n    }\n    long count = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            ans.clear();\n            ans.push_back(i);\n\
    \            count++;\n        }\n    }\n    while(count < k) {\n        ans.clear();\n\
    \        ans.push_back(0);\n        count++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0u7nhqqh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ res(m);\n    long cur = 0;\n    for (long i = 0; i < n; i++) {\n        if (cur\
    \ < m) {\n            res[cur++] = arr[i];\n        } else if (cur == m) {\n \
    \           res[cur++] = arr[i];\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo4nlorlk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_val = arr[0];\n\
    \    long max_idx = 1;\n    long max_idx2 = 1;\n    long max_idx3 = 1;\n    long\
    \ max_idx4 = 1;\n    long max_idx5 = 1;\n    long max_idx6 = 1;\n    long max_idx7\
    \ = 1;\n    long max_idx8 = 1;\n    long max_idx9 = 1;\n    long max_idx10 = 1;\n\
    \    long max_idx11 = 1;\n    long max_idx12 = 1;\n    long max_idx13 = 1;\n \
    \   long max_idx14 = 1;\n    long max_idx15 = 1;\n    long max_idx16 = 1;\n  \
    \  long max_idx17 = 1;\n    long max_idx18 = 1;\n    long max_idx19 = 1;\n   \
    \ long max_idx20 = 1;\n    long max_idx21 = 1;\n    long max_idx22 = 1;\n    long\
    \ max_idx23 = 1;\n    long max_idx24 = 1;\n    long max_idx25 = 1;\n    long max_idx26\
    \ = 1;\n    long max_idx27 = 1;\n    long max_idx28 = 1;\n    long max_idx29 =\
    \ 1;\n    long max_idx30 = 1;\n    long max_idx31 = 1;\n    long max_idx32 = 1;\n\
    \    long max_idx33 = 1;\n    long max_idx34 = 1;\n    long max_idx35 = 1;\n \
    \   long max_idx36 = 1;\n    long max_idx37 = 1;\n    long max_idx38 = 1;\n  \
    \  long max_idx39 = 1;\n    long max_idx40 = 1;\n    long max_idx41 = 1;\n   \
    \ long max_idx42 = 1;\n    long max_idx43 = 1;\n    long max_idx44 = 1;\n    long\
    \ max_idx45 = 1;\n    long max_idx46 = 1;\n    long max_idx47 = 1;\n    long max_idx48\
    \ = 1;\n    long max_idx49 = 1;\n    long max_idx50 = 1;\n    long max_idx51 =\
    \ 1;\n    long max_idx52 = 1;\n    long max_idx53 = 1;\n    long max_idx54 = 1;\n\
    \    long max_idx55 = 1;\n    long max_idx56 = 1;\n    long max_idx57 = 1;\n \
    \   long max_idx58 = 1;\n    long max_idx59 = 1;\n    long max_idx60 = 1;\n  \
    \  long max_idx61 = 1;\n    long max_idx62 = 1;\n    long max_idx63 = 1;\n   \
    \ long max_idx64 = 1;\n    long max_idx65 = 1;\n    long max_idx66 = 1;\n    long\
    \ max_idx67 = 1;\n    long max_idx68 = 1;\n    long max_idx69 = 1;\n    long max_idx70\
    \ = 1;\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe_d2ep9s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max_val = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() > k) {\n        return result;\n    }\n\
    \    result.clear();\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            result.push_back(arr[i]);\n        }\n   \
    \ }\n    if (result.size() > k) {\n        return result;\n    }\n    result.clear();\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ > k) {\n        return result;\n    }\n    result.clear();\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() > k) {\n        return result;\n    }\n\
    \    result.clear();\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            result.push_back(arr[i]);\n        }\n   \
    \ }\n    if (result.size() > k) {\n        return result;\n    }\n    result.clear();\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ > k) {\n        return result;\n    }\n    result.clear();\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() > k) {\n        return result;\n    }\n\
    \    result.clear();\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            result.push_back(arr[i]);\n        }\n   \
    \ }\n    if (result.size() > k) {\n        return result;\n    }\n    result.clear();\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ > k) {\n        return result;\n    }\n    result.clear();\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() > k) {\n        return result;\n    }\n\
    \    result.clear();\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            result.push_back(arr[i]);\n        }\n   \
    \ }\n    if (result.size() > k) {\n        return result;\n    }\n    result.clear();\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ > k) {\n        return result;\n    }\n    result.clear();\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr3_z65s_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for (long i = 1; i < k; i++) {\n        if (arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        if (arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpybetu7ya.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           max_val = arr[i];\n            max_idx = i;\n        }\n    }\n  \
    \  res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2243h5lt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    res.push_back(max_val);\n    for (size_t i = max_idx; i < arr.size(); i++)\
    \ {\n        res.push_back(arr[i]);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvi1rml_k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n    long max_pos\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n            max_pos = i;\n        }\n    }\n\
    \    max_arr.push_back(max_num);\n    for (long i = max_pos + 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_num) {\n            max_arr.push_back(arr[i]);\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsg1mq55o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long max = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    long curr = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i]\
    \ == max) {\n            curr++;\n        }\n    }\n    if (curr == k) {\n   \
    \     return res;\n    }\n    long curr2 = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        if (arr[i] == max) {\n            curr2++;\n        }\n    }\n    if\
    \ (curr2 == k) {\n        res.push_back(max);\n        return res;\n    }\n  \
    \  long curr3 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] == max) {\n\
    \            curr3++;\n        }\n    }\n    if (curr3 == k) {\n        res.push_back(max);\n\
    \        res.push_back(arr[arr.size() - 1]);\n        return res;\n    }\n   \
    \ long curr4 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] == max) {\n\
    \            curr4++;\n        }\n    }\n    if (curr4 == k) {\n        res.push_back(max);\n\
    \        res.push_back(arr[arr.size() - 1]);\n        res.push_back(arr[arr.size()\
    \ - 2]);\n        return res;\n    }\n    long curr5 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        if (arr[i] == max) {\n            curr5++;\n        }\n  \
    \  }\n    if (curr5 == k) {\n        res.push_back(max);\n        res.push_back(arr[arr.size()\
    \ - 1]);\n        res.push_back(arr[arr.size() - 2]);\n        res.push_back(arr[arr.size()\
    \ - 3]);\n        return res;\n    }\n    long curr6 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        if (arr[i] == max) {\n            curr6++;\n        }\n  \
    \  }\n    if (curr6 == k) {\n        res.push_back(max);\n        res.push_back(arr[arr.size()\
    \ - 1]);\n        res.push_back(arr[arr.size() - 2]);\n        res.push_back(arr[arr.size()\
    \ - 3]);\n        res.push_back(arr[arr.size() - 4]);\n        return res;\n \
    \   }\n    long curr7 = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i]\
    \ == max) {\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnqcuj8sp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long max = 0;\n    long index = 0;\n    long temp\
    \ = 0;\n    long count = 0;\n    long sum = 0;\n    long maxIndex = 0;\n    long\
    \ maxSum = 0;\n    long maxCount = 0;\n    long maxCountIndex = 0;\n    long maxCountSum\
    \ = 0;\n    long maxCountCount = 0;\n    long maxCountSumIndex = 0;\n    long\
    \ maxCountSumSum = 0;\n    long maxCountSumCount = 0;\n    long maxCountSumSumIndex\
    \ = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum = 0;\n \
    \   long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum\
    \ = 0;\n    long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n \
    \   long maxCountSumCountSum = 0;\n    long maxCountSumSumIndex = 0;\n    long\
    \ maxCountSumSumSum = 0;\n    long maxCountSumCountSum = 0;\n    long maxCountSumSumIndex\
    \ = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum = 0;\n \
    \   long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum\
    \ = 0;\n    long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n \
    \   long maxCountSumCountSum = 0;\n    long maxCountSumSumIndex = 0;\n    long\
    \ maxCountSumSumSum = 0;\n    long maxCountSumCountSum = 0;\n    long maxCountSumSumIndex\
    \ = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum = 0;\n \
    \   long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum\
    \ = 0;\n    long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n \
    \   long maxCountSumCountSum = 0;\n    long maxCountSumSumIndex = 0;\n    long\
    \ maxCountSumSumSum = 0;\n    long maxCountSumCountSum = 0;\n    long maxCountSumSumIndex\
    \ = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum = 0;\n \
    \   long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n    long maxCountSumCountSum\
    \ = 0;\n    long maxCountSumSumIndex = 0;\n    long maxCountSumSumSum = 0;\n \
    \   long maxCountSumCountSum = 0;\n    long maxCountSumSumIndex = 0;\n    long\
    \ maxCountSumSum\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpln4uzkd6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    std::vector<long> res;\n    long max_val =\
    \ arr[0];\n    long max_idx = 1;\n    for (long i = 1; i < n; i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (long i = max_idx; i < k; i++) {\n        res.push_back(arr[i]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpamjxqm2z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long long max = 0;\n    std::vector<long> res;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n    \
    \        max = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n\
    \        if(max < arr[i]) {\n            max = arr[i];\n        }\n    }\n   \
    \ for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n       \
    \     res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnarl5dcu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size();\n    long max_size = n;\n\
    \    long max_num = arr[0];\n    long max_pos = 0;\n    long max_val = 0;\n  \
    \  long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long\
    \ max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long\
    \ max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long\
    \ max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long\
    \ max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long\
    \ max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long\
    \ max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long\
    \ max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n    long max_val\
    \ = 0;\n    long max_pos = 0;\n    long max_val = 0;\n    long max_pos = 0;\n\
    \    long max_val = 0;\n    long max_pos = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpswx5tnpq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659747386
