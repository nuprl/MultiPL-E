name: HumanEval_48_is_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Checks if given string is\
  \ a palindrome\n// >>> is_palindrome((\"\"))\n// (true)\n// >>> is_palindrome((\"\
  aba\"))\n// (true)\n// >>> is_palindrome((\"aaaaa\"))\n// (true)\n// >>> is_palindrome((\"\
  zbcd\"))\n// (false)\nbool is_palindrome(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = is_palindrome;\n    assert(candidate((\"\
  \")) == (true));\n    assert(candidate((\"aba\")) == (true));\n    assert(candidate((\"\
  aaaaa\")) == (true));\n    assert(candidate((\"zbcd\")) == (false));\n    assert(candidate((\"\
  xywyx\")) == (true));\n    assert(candidate((\"xywyz\")) == (false));\n    assert(candidate((\"\
  xywzx\")) == (false));\n}\n"
completions: ["    int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n \
    \       if (text[i] != text[n - i - 1]) {\n            return false;\n       \
    \ }\n    }\n    return true;", "    int n = text.size();\n    int i = 0;\n   \
    \ int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n   \
    \         return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    if (text.size() <= 1)\n        return true;\n    int i = 0;\n \
    \   int j = text.size() - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n\
    \            return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int n = text.size();\n    if (n < 2) return true;\n    int mid = n / 2;\n \
    \   for (int i = 0; i < mid; i++) {\n        if (text[i] != text[n - i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;", "    int n =\
    \ text.size();\n    bool flag = true;\n    for (int i = 0; i < n / 2; i++) {\n\
    \        if (text[i] != text[n - i - 1]) {\n            flag = false;\n      \
    \      break;\n        }\n    }\n    return flag;", "    bool flag = true;\n \
    \   int len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n      \
    \  if (text[i] != text[len - i - 1]) {\n            flag = false;\n          \
    \  break;\n        }\n    }\n    return flag;", "    int n = text.size();\n  \
    \  int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    bool flag = true;\n    for (int i = 0;\
    \ i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    return flag;", "    // Your\
    \ code goes here\n    int len = text.length();\n    int mid = len / 2;\n    bool\
    \ flag = true;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len\
    \ - i - 1]) {\n            flag = false;\n            break;\n        }\n    }\n\
    \    return flag;", "    int n = text.size();\n    for (int i = 0; i < n / 2;\
    \ i++) {\n        if (text[i] != text[n-i-1]) {\n            return false;\n \
    \       }\n    }\n    return true;", "    int n = text.size();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int n =\
    \ text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i] !=\
    \ text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.length();\n    for (int i = 0; i < n / 2; i++) {\n\
    \        if (text[i] != text[n - i - 1]) {\n            return false;\n      \
    \  }\n    }\n    return true;", "    int n = text.size();\n    int i = 0;\n  \
    \  int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n  \
    \          return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    bool flag = true;\n    for (int i = 0;\
    \ i < n / 2; i++) {\n        if (text[i] != text[n-i-1]) {\n            flag =\
    \ false;\n            break;\n        }\n    }\n    return flag;", "    int n\
    \ = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n  \
    \      if (text[i] != text[j]) {\n            return false;\n        }\n     \
    \   i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.length();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n\
    \    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return i == mid;", "    std::string reverse = \"\";\n    for (int\
    \ i = text.size() - 1; i >= 0; i--) {\n        reverse += text[i];\n    }\n  \
    \  return reverse == text;", "    if (text.length() <= 1) return true;\n    int\
    \ i = 0;\n    int j = text.length() - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.length();\n    int i = 0;\n    int j = n - 1;\n  \
    \  while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    if (text.size()\
    \ < 2)\n        return true;\n    int i = 0;\n    int j = text.size() - 1;\n \
    \   while (i < j) {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;", "    if (text.size() <=\
    \ 1) return true;\n    int n = text.size() / 2;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (text[i] != text[text.size() - i - 1]) return false;\n    }\n\
    \    return true;", "    int n = text.size();\n    for (int i = 0; i < n / 2;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int n = text.length();\n    int i =\
    \ 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;", "    if (text.length() <= 1) return true;\n    std::string\
    \ rev = text.rbegin(), mid = text.begin();\n    while (true) {\n        if (mid\
    \ != text.rend()) mid += 1;\n        if (mid == rev) return false;\n        rev\
    \ = text.rbegin();\n    }", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    std::string reverse = text;\n    reverse.resize(text.size());\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    return text == reverse;",
  "    int n = text.length();\n    if (n < 2)\n        return true;\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n  \
    \          return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if (text.size() <= 1) return\
    \ true;\n    std::string rev = text.rbegin();\n    return rev == text.rend() &&\
    \ text == rev;", "    int len = text.length();\n    for (int i = 0; i < len /\
    \ 2; i++) {\n        if (text[i] != text[len - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    if (text.size() < 2) return true;\n\
    \    char first = text[0];\n    char last = text[0];\n    for (size_t i = 1; i\
    \ < text.size(); i++) {\n        if (text[i] != text[text.size() - i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;", "    int n =\
    \ text.length();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n  \
    \      if (text[i] != text[j]) {\n            return false;\n        }\n     \
    \   i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    std::string reverse = text;\n    reverse.resize(text.size());\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    return text == reverse;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    if (n < 2) return true;\n\
    \    if (n == 2) return text[0] == text[1];\n    if (n % 2 == 0) return false;\n\
    \    int mid = n / 2;\n    std::string left = text.substr(0, mid);\n    std::string\
    \ right = text.substr(mid);\n    return is_palindrome(left) && is_palindrome(right);",
  "    int len = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int j\
    \ = len - 1;\n    while (i < mid) {\n        if (text[i] != text[j]) {\n     \
    \       return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int len =\
    \ text.length();\n    for (int i = 0; i < len / 2; i++) {\n        if (text[i]\
    \ != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;", "    int\
    \ n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n\
    \        if (text[i] != text[j]) {\n            return false;\n        }\n   \
    \     i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    if (text.size() <= 1)\n        return true;\n\
    \    int i = 0;\n    int j = text.size() - 1;\n    while (i < j) {\n        if\
    \ (text[i] != text[j])\n            return false;\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Your code goes here\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;", "    if (text.size()\
    \ < 2)\n        return true;\n    std::string rev = text;\n    rev.resize(rev.size()\
    \ - 1);\n    return text == rev;", "    int n = text.size();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    if (text.size() < 2) return true;\n    char first = text[0];\n\
    \    char last = text[0];\n    for (int i = 1; i < text.size(); i++) {\n     \
    \   char c = text[i];\n        if (c != first && c != last) return false;\n  \
    \      first = c;\n        last = c;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    bool flag = true;\n    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            flag = false;\n            break;\n        }\n    }\n \
    \   return flag;", "    int n = text.size();\n    bool flag = true;\n    for (int\
    \ i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n      \
    \      flag = false;\n            break;\n        }\n    }\n    return flag;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    if (text.size() <=\
    \ 1) return true;\n    std::string revtext = text;\n    revtext.resize(text.size()\
    \ / 2);\n    std::reverse(text.begin(), text.end());\n    if (text == revtext)\
    \ return true;\n    return false;", "    int len = text.length();\n    int mid\
    \ = len / 2;\n    bool flag = true;\n    for (int i = 0; i < mid; i++) {\n   \
    \     if (text[i] != text[len - i - 1]) {\n            flag = false;\n       \
    \     break;\n        }\n    }\n    return flag;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    bool flag = true;\n    int len = text.length();\n\
    \    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i]\
    \ != text[len - i - 1]) {\n            flag = false;\n            break;\n   \
    \     }\n    }\n    return flag;", "    if (text.size() <= 1) return true;\n \
    \   std::string reverse = text;\n    std::reverse(reverse.begin(), reverse.end());\n\
    \    return text == reverse;", "    int n = text.size();\n    int i = 0;\n   \
    \ int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n   \
    \         return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    if (n < 2) return true;\n    if (n ==\
    \ 2) return text[0] == text[1];\n    if (text[0] != text[n/2]) return false;\n\
    \    for (int i = 1; i < n; i += 2) {\n        if (text[i] != text[n - i - 1])\
    \ return false;\n    }\n    return true;", "    int n = text.size();\n    for\
    \ (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n \
    \           return false;\n        }\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.length();\n    for (int i = 0; i\
    \ < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n-i-1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int n = text.length();\n    int i =\
    \ 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;", "    int n = text.size();\n    int i = 0;\n    int j = n -\
    \ 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;", " \
    \   int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n \
    \       if (text[i] != text[n - i - 1]) {\n            return false;\n       \
    \ }\n    }\n    return true;", "    int n = text.size();\n    bool flag = true;\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1])\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int len =\
    \ text.length();\n    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n\
    \    while (i < mid && j >= 0) {\n        if (text[i] != text[j]) {\n        \
    \    return false;\n        }\n        i++;\n        j--;\n    }\n    return i\
    \ == mid;", "    if (text.size() <= 1) return true;\n    std::string reverse =\
    \ text;\n    reverse.resize(text.size() - 1);\n    std::reverse(reverse.begin(),\
    \ reverse.end());\n    return text == reverse;", "    if (text.size() <= 1)\n\
    \        return true;\n    std::string reverse = text;\n    reverse.resize(text.size()\
    \ / 2);\n    std::reverse(text.begin(), text.end());\n    return text == reverse;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    if (i == mid && j >= 0) {\n\
    \        return true;\n    }\n    return false;", "    // Your code goes here\n\
    \    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i <\
    \ j) {\n        if (text[i] != text[j]) {\n            return false;\n       \
    \ }\n        i++;\n        j--;\n    }\n    return true;", "    bool flag = true;\n\
    \    int len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n     \
    \   if (text[i] != text[len - i - 1]) {\n            flag = false;\n         \
    \   break;\n        }\n    }\n    return flag;", "    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid && j >= 0) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return i == mid;", "    bool\
    \ flag = true;\n    int len = text.length();\n    for (int i = 0; i < len / 2;\
    \ i++) {\n        if (text[i] != text[len - i - 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;", "    int len = text.length();\n\
    \    if (len <= 1)\n        return true;\n    int mid = len / 2;\n    for (int\
    \ i = 0; i < mid; i++)\n        if (text[i] != text[len - 1 - i])\n          \
    \  return false;\n    return true;", "    int n = text.size();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    if (text.size()\
    \ < 2)\n        return true;\n    int i = 0;\n    int j = text.size() - 1;\n \
    \   while (i < j) {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;", "    if (text.size() <\
    \ 2)\n        return true;\n    int i = 0;\n    int j = text.size() - 1;\n   \
    \ while (i < j) {\n        if (text[i] != text[j])\n            return false;\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int len = text.length();\n    if (len <= 1)\n\
    \        return true;\n    int mid = len / 2;\n    for (int i = 0; i < mid; i++)\
    \ {\n        if (text[i] != text[len - 1 - i])\n            return false;\n  \
    \  }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int j\
    \ = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n         \
    \   return false;\n        }\n        i++;\n        j--;\n    }\n    return true;",
  "    // Your code goes here\n    int n = text.size();\n    for(int i = 0; i < n/2;\
    \ i++){\n        if(text[i] != text[n-i-1]){\n            return false;\n    \
    \    }\n    }\n    return true;", "    int n = text.size();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    bool isPalindrome\
    \ = true;\n    int len = text.length();\n    for (int i = 0; i < len / 2; i++)\
    \ {\n        if (text[i] != text[len - i - 1]) {\n            isPalindrome = false;\n\
    \            break;\n        }\n    }\n    return isPalindrome;", "    int len\
    \ = text.length();\n    if (len <= 1) return true;\n    int mid = len / 2;\n \
    \   std::string left = text.substr(0, mid);\n    std::string right = text.substr(mid,\
    \ len);\n    return left == right;", "    int n = text.size();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int n =\
    \ text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n    \
    \    if (text[i] != text[j]) {\n            return false;\n        }\n       \
    \ i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n  \
    \  int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    bool flag = true;\n    for (int i = 0;\
    \ i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    return flag;", "    int\
    \ n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    // Your code goes here\n    int len = text.length();\n    int mid\
    \ = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i < mid && j >=\
    \ 0) {\n        if (text[i] != text[j]) {\n            return false;\n       \
    \ }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    if (text.size()\
    \ < 2) return true;\n    char first = text[0];\n    char last = text[0];\n   \
    \ for (size_t i = 1; i < text.size(); i++) {\n        if (text[i] != text[text.size()\
    \ - i - 1]) {\n            return false;\n        }\n        last = text[i];\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    std::string reverse = \"\";\n    for (auto c : text) {\n      \
    \  reverse = reverse + c;\n    }\n    return text == reverse;", "    if (text.size()\
    \ < 2) return true;\n    int i = 0;\n    int j = text.size() - 1;\n    while (i\
    \ < j) {\n        if (text[i] != text[j]) return false;\n        i++;\n      \
    \  j--;\n    }\n    return true;", "    int n = text.length();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    // Your\
    \ code here\n    int len = text.length();\n    int mid = len / 2;\n    int i =\
    \ 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int len = text.length();\n    int mid = len /\
    \ 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i] != text[len - i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;", " \
    \   int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n \
    \       if (text[i] != text[n-i-1]) {\n            return false;\n        }\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.length();\n\
    \    if (n < 2) return true;\n    int mid = n / 2;\n    for (int i = 0; i < mid;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int len = text.length();\n    if (len\
    \ <= 1)\n        return true;\n    int mid = len / 2;\n    for (int i = 0; i <\
    \ mid; i++) {\n        if (text[i] != text[len - 1 - i])\n            return false;\n\
    \    }\n    return true;", "    if (text.length() <= 1) return true;\n    std::string\
    \ rev;\n    rev.reserve(text.length());\n    for (auto &c : text) {\n        rev.push_back(c);\n\
    \    }\n    rev.resize(text.length() / 2);\n    for (auto &c : rev) {\n      \
    \  if (c != text[rev.length() - 1 - c]) {\n            return false;\n       \
    \ }\n    }\n    return true;", "    if (text.size() < 2) return true;\n    char\
    \ first = text[0];\n    char last = text[0];\n    for (int i = 1; i < text.size();\
    \ i++) {\n        if (text[i] != text[(text.size() - 1) - i]) {\n            return\
    \ false;\n        }\n        last = text[i];\n    }\n    return true;", "    int\
    \ n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n - i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int len = text.length();\n\
    \    int mid = len / 2;\n    for (int i = 0; i < mid; i++) {\n        if (text[i]\
    \ != text[len - 1 - i]) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    int n = text.size();\n    if (n < 2) return true;\n    if (n ==\
    \ 2) return text[0] == text[1];\n    if (text[0] != text[n/2]) return false;\n\
    \    for (int i = 1; i < n; i += 2) {\n        if (text[i] != text[n - i - 1])\
    \ return false;\n    }\n    return true;", "    int n = text.size();\n    int\
    \ i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\
    \ {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\
    \    return true;", "    int n = text.length();\n    int i = 0;\n    int j = n\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;", " \
    \   int n = text.size();\n    for (int i = 0; i < n / 2; i++) {\n        if (text[i]\
    \ != text[n-i-1]) {\n            return false;\n        }\n    }\n    return true;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    if (n < 2)\n       \
    \ return true;\n    int mid = n / 2;\n    for (int i = 0; i < mid; i++) {\n  \
    \      if (text[i] != text[n - 1 - i])\n            return false;\n    }\n   \
    \ return true;", "    bool flag = true;\n    int n = text.size();\n    for (int\
    \ i = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n      \
    \      flag = false;\n            break;\n        }\n    }\n    return flag;",
  "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j)\
    \ {\n        if (text[i] != text[j]) {\n            return false;\n        }\n\
    \        i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        if (text[i] != text[len - 1\
    \ - i]) {\n            return false;\n        }\n    }\n    return true;", " \
    \   int n = text.size();\n    if (n < 2)\n        return true;\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j])\n  \
    \          return false;\n        i++;\n        j--;\n    }\n    return true;",
  "    int len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n       \
    \ if (text[i] != text[len - i - 1]) {\n            return false;\n        }\n\
    \    }\n    return true;", "    int n = text.length();\n    if (n < 2) return\
    \ true;\n    int mid = n / 2;\n    for (int i = 0; i < mid; i++) {\n        if\
    \ (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n\
    \    return true;", "    int n = text.length();\n    int i = 0;\n    int j = n\
    \ - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n            return\
    \ false;\n        }\n        i++;\n        j--;\n    }\n    return true;", " \
    \   int n = text.length();\n    for (int i = 0; i < n / 2; i++) {\n        if\
    \ (text[i] != text[n - i - 1]) {\n            return false;\n        }\n    }\n\
    \    return true;", "    int n = text.size();\n    for (int i = 0; i < n / 2;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    int n = text.size();\n    int i = 0;\n\
    \    int j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n\
    \            return false;\n        }\n        i++;\n        j--;\n    }\n   \
    \ return true;", "    int n = text.size();\n    for (int i = 0; i < n / 2; i++)\
    \ {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n  \
    \      }\n    }\n    return true;", "    int n = text.size();\n    for (int i\
    \ = 0; i < n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n        \
    \    return false;\n        }\n    }\n    return true;", "    int n = text.size();\n\
    \    for (int i = 0; i < n / 2; i++) {\n        if (text[i] != text[n-i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;", "    int len\
    \ = text.length();\n    int mid = len / 2;\n    int i = 0;\n    int j = len -\
    \ 1;\n    while (i < mid && j >= 0) {\n        if (text[i] != text[j]) {\n   \
    \         return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ i == mid;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n\
    \    while (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n\
    \        }\n        i++;\n        j--;\n    }\n    return true;", "    int n =\
    \ text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n    \
    \    if (text[i] != text[j]) {\n            return false;\n        }\n       \
    \ i++;\n        j--;\n    }\n    return true;", "    // Write your code here\n\
    \    \n    for(int i=0;i<text.size()/2;i++)\n    {\n        if(text[i]!=text[text.size()-1-i])\n\
    \            return false;\n    }\n    return true;", "    bool flag = true;\n\
    \    int len = text.length();\n    for (int i = 0; i < len / 2; i++) {\n     \
    \   if (text[i] != text[len - 1 - i]) {\n            flag = false;\n         \
    \   break;\n        }\n    }\n    return flag;", "    int n = text.size();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    for (int i = 0; i <\
    \ n / 2; i++) {\n        if (text[i] != text[n - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    int n = text.size();\n   \
    \ int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    // Your code here\n    int n = text.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i]\
    \ != text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.length();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    if (n <= 1)\n        return true;\n \
    \   int mid = n / 2;\n    for (int i = 0; i < mid; i++)\n        if (text[i] !=\
    \ text[n - 1 - i])\n            return false;\n    return true;", "    int n =\
    \ text.size();\n    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n    \
    \    if (text[i] != text[j]) {\n            return false;\n        }\n       \
    \ i++;\n        j--;\n    }\n    return true;", "    bool isPalindrome = true;\n\
    \    int length = text.length();\n    for (int i = 0; i < length / 2; i++) {\n\
    \        if (text[i] != text[length - i - 1]) {\n            isPalindrome = false;\n\
    \            break;\n        }\n    }\n    return isPalindrome;", "    // Your\
    \ code here\n    int len = text.length();\n    int mid = len / 2;\n    int rev\
    \ = 0;\n    for (int i = 0; i < mid; i++) {\n        rev = rev * 10 + text[i]\
    \ - '0';\n    }\n    if (rev == text[mid]) {\n        return true;\n    }\n  \
    \  return false;", "    int len = text.length();\n    int mid = len / 2;\n   \
    \ int i = 0;\n    int j = len - 1;\n    while (i < mid && j >= 0) {\n        if\
    \ (text[i] != text[j]) {\n            return false;\n        }\n        i++;\n\
    \        j--;\n    }\n    if (i == mid) {\n        return true;\n    }\n    return\
    \ false;", "    if (text.length() < 2)\n        return true;\n    char first =\
    \ text[0];\n    char last = text[0];\n    for (int i = 1; i < text.length(); i++)\
    \ {\n        char c = text[i];\n        if (c != first)\n            return false;\n\
    \        first = c;\n    }\n    return true;", "    int n = text.length();\n \
    \   int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (text[i] !=\
    \ text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n\
    \    }\n    return true;", "    int n = text.size();\n    int i = 0;\n    int\
    \ j = n - 1;\n    while (i < j) {\n        if (text[i] != text[j]) {\n       \
    \     return false;\n        }\n        i++;\n        j--;\n    }\n    return\
    \ true;", "    int n = text.size();\n    int i = 0;\n    int j = n - 1;\n    while\
    \ (i < j) {\n        if (text[i] != text[j]) {\n            return false;\n  \
    \      }\n        i++;\n        j--;\n    }\n    return true;", "    int n = text.size();\n\
    \    if (n <= 1) return true;\n    int mid = n / 2;\n    for (int i = 0; i < mid;\
    \ i++) {\n        if (text[i] != text[n - i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    // Your code here\n    int len = text.length();\n\
    \    int mid = len / 2;\n    int i = 0;\n    int j = len - 1;\n    while (i <\
    \ mid) {\n        if (text[i] != text[j]) {\n            return false;\n     \
    \   }\n        i++;\n        j--;\n    }\n    return true;", "    int len = text.length();\n\
    \    if (len <= 1)\n        return true;\n    int mid = len / 2;\n    for (int\
    \ i = 0; i < mid; i++) {\n        if (text[i] != text[len - 1 - i])\n        \
    \    return false;\n    }\n    return true;"]
stop_tokens:
- "\n}"
