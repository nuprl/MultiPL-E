name: HumanEval_69_search
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
  \ vector of positive integers. Return the greatest integer that is greater than\
  \ \n// zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n// The frequency of an integer is the number of times it appears in\
  \ the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search((std::vector<long>({(long)4,\
  \ (long)1, (long)2, (long)2, (long)3, (long)1})))\n// (2)\n// >>> search((std::vector<long>({(long)1,\
  \ (long)2, (long)2, (long)3, (long)3, (long)3, (long)4, (long)4, (long)4})))\n//\
  \ (3)\n// >>> search((std::vector<long>({(long)5, (long)5, (long)4, (long)4, (long)4})))\n\
  // (-1)\nlong search(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6,\
  \ (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4,\
  \ (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3,\
  \ (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8,\
  \ (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8,\
  \ (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10,\
  \ (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6,\
  \ (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5,\
  \ (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5,\
  \ (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10,\
  \ (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8,\
  \ (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1,\
  \ (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9,\
  \ (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1,\
  \ (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1,\
  \ (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3,\
  \ (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9,\
  \ (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4})))\
  \ == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4,\
  \ (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6,\
  \ (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2,\
  \ (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8,\
  \ (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9,\
  \ (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10,\
  \ (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) ==\
  \ (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7,\
  \ (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1,\
  \ (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9,\
  \ (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2,\
  \ (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7,\
  \ (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n"
completions: ["    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n        if (freq > ans) {\n            ans = freq;\n    \
    \    }\n    }\n    return ans;", "    long ans = -1;\n    long freq = 0;\n   \
    \ for (long i : lst) {\n        freq += i;\n        if (freq >= i) {\n       \
    \     ans = i;\n            break;\n        }\n    }\n    return ans;", "    long\
    \ ans = -1;\n    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n\
    \        if(freq > ans) {\n            ans = freq;\n        }\n    }\n    return\
    \ ans;", "    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n \
    \       freq += i;\n        if (freq >= i) {\n            ans = i;\n         \
    \   break;\n        }\n    }\n    return ans;", "    long ans = -1;\n    long\
    \ freq[100000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < freq.length; i++) {\n        if(freq[i] >= ans)\
    \ {\n            ans = freq[i];\n        }\n    }\n    return ans;", "    long\
    \ ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n\
    \        if (freq >= i) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;", "    long ans = -1;\n    long freq = 0;\n    for (long\
    \ i : lst) {\n        freq += i;\n        if (freq >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;", "    // Your code\
    \ here\n    long ans = -1;\n    long freq[100000];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i < 100000; i++)\
    \ {\n        if (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;", "    long max = 0;\n    long freq = 0;\n\
    \    for (long i : lst) {\n        freq += i;\n        if (max < freq) max = freq;\n\
    \    }\n    return max > 0 ? max : -1;", "    long ans = -1;\n    long freq =\
    \ 0;\n    for (long i : lst) {\n        freq += i;\n        if (freq >= i) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;",
  "    long maxVal = -1;\n    long maxFreq = -1;\n    long currFreq = 0;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        if(currFreq < lst[i]) {\n           \
    \ currFreq = lst[i];\n            maxVal = i;\n            maxFreq = currFreq;\n\
    \        }\n    }\n    return maxVal;", "    long ans = -1;\n    long freq = 0;\n\
    \    for(long i : lst) {\n        freq += i;\n        if(freq >= i) {\n      \
    \      ans = i;\n            break;\n        }\n    }\n    return ans;", "   \
    \ long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq +=\
    \ i;\n        if (freq >= i) {\n            ans = i;\n            break;\n   \
    \     }\n    }\n    return ans;", "    long maxVal = -1;\n    long maxFreq = -1;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > maxVal) {\n\
    \            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n  \
    \  return maxFreq;", "    long maxVal = -1;\n    long maxFreq = -1;\n    for (long\
    \ i : lst) {\n        if (maxFreq < i) {\n            maxFreq = i;\n         \
    \   maxVal = i;\n        }\n    }\n    return maxVal;", "    long maxVal = -1;\n\
    \    long maxFreq = -1;\n    for (long i = 0; i < lst.size(); i++) {\n       \
    \ if (lst[i] > 0) {\n            if (maxFreq < lst[i]) {\n                maxFreq\
    \ = lst[i];\n                maxVal = i;\n            }\n        }\n    }\n  \
    \  return maxVal;", "    long ans = -1;\n    long freq = 0;\n    for (long i :\
    \ lst) {\n        freq += i;\n        if (freq > ans) {\n            ans = freq;\n\
    \        }\n    }\n    return ans;", "    long ans = -1;\n    long freq = 0;\n\
    \    for (long i : lst) {\n        freq += i;\n        if (freq >= i) {\n    \
    \        ans = i;\n            break;\n        }\n    }\n    return ans;", " \
    \   long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;", "    long maxVal = -1;\n    long maxFreq\
    \ = -1;\n    for (long i = 0; i < lst.size(); i++) {\n        if (maxVal < lst[i])\
    \ {\n            maxVal = lst[i];\n            maxFreq = i;\n        }\n    }\n\
    \    return maxFreq;"]
stop_tokens:
- "\n}"
