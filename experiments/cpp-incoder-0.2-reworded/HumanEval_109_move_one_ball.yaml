name: HumanEval_109_move_one_ball
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// We have a vector 'arr' of\
  \ N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the vector will be randomly\
  \ ordered. Your task is to determine if\n// it is possible to get a vector sorted\
  \ in non-decreasing order by performing \n// the following operation on the given\
  \ vector:\n// You are allowed to perform right shift operation any number of times.\n\
  // One right shift operation means shifting all elements of the vector by one\n\
  // position in the right direction. The last element of the vector will be moved\
  \ to\n// the starting position in the vector i.e. 0th index. \n// If it is possible\
  \ to obtain the sorted vector by performing the above operation\n// then return\
  \ true else return false.\n// If the given vector is empty then return true.\n//\
  \ Note: The given vector is guaranteed to have unique elements.\n// For Example:\n\
  // >>> move_one_ball((std::vector<long>({(long)3, (long)4, (long)5, (long)1, (long)2})))\n\
  // (true)\n// Explanation: By performin 2 right shift operations, non-decreasing\
  \ order can\n// be achieved for the given vector.\n// >>> move_one_ball((std::vector<long>({(long)3,\
  \ (long)5, (long)4, (long)1, (long)2})))\n// (false)\n// Explanation:It is not possible\
  \ to get non-decreasing order for the given\n// vector by performing any number\
  \ of right shift operations.\nbool move_one_ball(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = move_one_ball;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)4, (long)5, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)5, (long)10, (long)1, (long)2}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)3, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)5, (long)4, (long)1, (long)2}))) == (false));\n    assert(candidate((std::vector<long>()))\
  \ == (true));\n}\n"
completions: []
stop_tokens:
- "\n}"
