language: cpp
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 0 && num % 2 != num / 2) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptq8do2p.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpptq8do2p.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpptq8do2p.cpp: In function 'int main()':\n/tmp/tmpptq8do2p.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptq8do2p.cpp:2:\n/tmp/tmpptq8do2p.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpptq8do2p.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpptq8do2p.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpptq8do2p.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpptq8do2p.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpptq8do2p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 3 == 1 && num % 5 == 1 && num % 7 == 1 && num %\
    \ 9 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowx87kmc.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpowx87kmc.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpowx87kmc.cpp: In function 'int main()':\n/tmp/tmpowx87kmc.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpowx87kmc.cpp:2:\n/tmp/tmpowx87kmc.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpowx87kmc.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpowx87kmc.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpowx87kmc.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpowx87kmc.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpowx87kmc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    long sum = 0;\n    for(long num : nums) {\n\
    \        if(num > 10 && num % 2 == 1 && num % 2 == 0) {\n            sum += num;\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd25vpsol.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpd25vpsol.cpp:14:20: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long num : nums) {\n                    ^\n\
    /tmp/tmpd25vpsol.cpp: In function 'int main()':\n/tmp/tmpd25vpsol.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd25vpsol.cpp:2:\n/tmp/tmpd25vpsol.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpd25vpsol.cpp:24:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpd25vpsol.cpp:24:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpd25vpsol.cpp:24:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpd25vpsol.cpp:24:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpd25vpsol.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long ans = 0;\n    for (long i = 0; i < nums.size(); i++) {\n \
    \       if (nums[i] >= 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1 && nums[i]\
    \ % 100 != 11) {\n            ans++;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03gxi0es.cpp: In function 'int main()':\n/tmp/tmp03gxi0es.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp03gxi0es.cpp:2:\n/tmp/tmp03gxi0es.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp03gxi0es.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp03gxi0es.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp03gxi0es.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp03gxi0es.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp03gxi0es.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp03gxi0es.cpp:2:\n/tmp/tmp03gxi0es.cpp:22:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 2 == 0) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpisbxkuyc.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpisbxkuyc.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpisbxkuyc.cpp: In function 'int main()':\n/tmp/tmpisbxkuyc.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpisbxkuyc.cpp:2:\n/tmp/tmpisbxkuyc.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpisbxkuyc.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpisbxkuyc.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpisbxkuyc.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpisbxkuyc.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpisbxkuyc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 0 && num % 2 != num / 2) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptq8do2p.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpptq8do2p.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpptq8do2p.cpp: In function 'int main()':\n/tmp/tmpptq8do2p.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpptq8do2p.cpp:2:\n/tmp/tmpptq8do2p.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpptq8do2p.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpptq8do2p.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpptq8do2p.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpptq8do2p.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpptq8do2p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 10 == 1) {\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph69l8zrg.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmph69l8zrg.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmph69l8zrg.cpp: In function 'int main()':\n/tmp/tmph69l8zrg.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph69l8zrg.cpp:2:\n/tmp/tmph69l8zrg.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmph69l8zrg.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmph69l8zrg.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmph69l8zrg.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmph69l8zrg.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmph69l8zrg.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long ans = 0;\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum > 10) {\n            ans +=\
    \ 1;\n            sum = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujnd7_r4.cpp: In function 'int main()':\n/tmp/tmpujnd7_r4.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujnd7_r4.cpp:2:\n/tmp/tmpujnd7_r4.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpujnd7_r4.cpp:25:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpujnd7_r4.cpp:25:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpujnd7_r4.cpp:25:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpujnd7_r4.cpp:25:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpujnd7_r4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujnd7_r4.cpp:2:\n/tmp/tmpujnd7_r4.cpp:25:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    int count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 2 == 1) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe_zoetk0.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpe_zoetk0.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpe_zoetk0.cpp: In function 'int main()':\n/tmp/tmpe_zoetk0.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe_zoetk0.cpp:2:\n/tmp/tmpe_zoetk0.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpe_zoetk0.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpe_zoetk0.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpe_zoetk0.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe_zoetk0.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe_zoetk0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long ans = 0;\n    for (long num : nums) {\n        if (num > 10\
    \ && num % 2 == 0 && num % 2 != (num % 10)) {\n            ans++;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp78knprkv.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmp78knprkv.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmp78knprkv.cpp: In function 'int main()':\n/tmp/tmp78knprkv.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp78knprkv.cpp:2:\n/tmp/tmp78knprkv.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp78knprkv.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp78knprkv.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp78knprkv.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp78knprkv.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp78knprkv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long sum = 0;\n    long count = 0;\n    for (long num : nums) {\n\
    \        if (num > 10 && num % 2 == 1 && num % 2 == 0) {\n            sum += num;\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9x12002j.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmp9x12002j.cpp:14:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmp9x12002j.cpp: In function 'int main()':\n/tmp/tmp9x12002j.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9x12002j.cpp:2:\n/tmp/tmp9x12002j.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp9x12002j.cpp:24:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp9x12002j.cpp:24:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp9x12002j.cpp:24:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9x12002j.cpp:24:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9x12002j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 3 == 1 && num % 5 == 1 && num % 7 == 1 && num %\
    \ 9 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowx87kmc.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpowx87kmc.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpowx87kmc.cpp: In function 'int main()':\n/tmp/tmpowx87kmc.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpowx87kmc.cpp:2:\n/tmp/tmpowx87kmc.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpowx87kmc.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpowx87kmc.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpowx87kmc.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpowx87kmc.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpowx87kmc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    long sum = 0;\n    long lastDigit = 0;\n \
    \   long firstDigit = 0;\n    long lastDigit2 = 0;\n    long firstDigit2 = 0;\n\
    \    long lastDigit3 = 0;\n    long firstDigit3 = 0;\n    long lastDigit4 = 0;\n\
    \    long firstDigit4 = 0;\n    long lastDigit5 = 0;\n    long firstDigit5 = 0;\n\
    \    long lastDigit6 = 0;\n    long firstDigit6 = 0;\n    long lastDigit7 = 0;\n\
    \    long firstDigit7 = 0;\n    long lastDigit8 = 0;\n    long firstDigit8 = 0;\n\
    \    long lastDigit9 = 0;\n    long firstDigit9 = 0;\n    long lastDigit10 = 0;\n\
    \    long firstDigit10 = 0;\n    long lastDigit11 = 0;\n    long firstDigit11\
    \ = 0;\n    long lastDigit12 = 0;\n    long firstDigit12 = 0;\n    long lastDigit13\
    \ = 0;\n    long firstDigit13 = 0;\n    long lastDigit14 = 0;\n    long firstDigit14\
    \ = 0;\n    long lastDigit15 = 0;\n    long firstDigit15 = 0;\n    long lastDigit16\
    \ = 0;\n    long firstDigit16 = 0;\n    long lastDigit17 = 0;\n    long firstDigit17\
    \ = 0;\n    long lastDigit18 = 0;\n    long firstDigit18 = 0;\n    long lastDigit19\
    \ = 0;\n    long firstDigit19 = 0;\n    long lastDigit20 = 0;\n    long firstDigit20\
    \ = 0;\n    long lastDigit21 = 0;\n    long firstDigit21 = 0;\n    long lastDigit22\
    \ = 0;\n    long firstDigit22 = 0;\n    long lastDigit23 = 0;\n    long firstDigit23\
    \ = 0;\n    long lastDigit24 = 0;\n    long firstDigit24 = 0;\n    long lastDigit25\
    \ = 0;\n    long firstDigit25 = 0;\n    long lastDigit26 = 0;\n    long firstDigit26\
    \ = 0;\n    long lastDigit27 = 0;\n    long firstDigit27 = 0;\n    long lastDigit28\
    \ = 0;\n    long firstDigit28 = 0;\n    long lastDigit29 = 0;\n    long firstDigit29\
    \ = 0;\n    long lastDigit30 = 0;\n    long firstDigit30 = 0;\n    long lastDigit31\
    \ = 0;\n    long firstDigit31 = 0;\n    long lastDigit32 = 0;\n    long firstDigit32\
    \ = 0;\n    long lastDigit33 = 0;\n    long firstDigit33 = 0;\n    long lastDigit34\
    \ = 0;\n    long firstDigit34 = 0;\n    long lastDigit35 = 0;\n    long firstDigit35\
    \ = 0;\n    long lastDigit36 = 0;\n    long firstDigit36 = 0;\n    long lastDigit37\
    \ = 0;\n    long \n}\nint main() {\n    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq6woyj4_.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpq6woyj4_.cpp:88:1: error: expected unqualified-id before '}'\
    \ token\n }\n ^\n/tmp/tmpq6woyj4_.cpp: In function 'int main()':\n/tmp/tmpq6woyj4_.cpp:90:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq6woyj4_.cpp:2:\n/tmp/tmpq6woyj4_.cpp:91:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpq6woyj4_.cpp:91:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpq6woyj4_.cpp:91:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpq6woyj4_.cpp:91:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpq6woyj4_.cpp:91:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpq6woyj4_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cass"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 2 == 0) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpisbxkuyc.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpisbxkuyc.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpisbxkuyc.cpp: In function 'int main()':\n/tmp/tmpisbxkuyc.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpisbxkuyc.cpp:2:\n/tmp/tmpisbxkuyc.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpisbxkuyc.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpisbxkuyc.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpisbxkuyc.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpisbxkuyc.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpisbxkuyc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 != 0 && num % 2 != 1) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34yvmzj3.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmp34yvmzj3.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmp34yvmzj3.cpp: In function 'int main()':\n/tmp/tmp34yvmzj3.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp34yvmzj3.cpp:2:\n/tmp/tmp34yvmzj3.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp34yvmzj3.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp34yvmzj3.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp34yvmzj3.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp34yvmzj3.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp34yvmzj3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long ans = 0;\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum > 10) {\n            ans +=\
    \ 1;\n            sum = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujnd7_r4.cpp: In function 'int main()':\n/tmp/tmpujnd7_r4.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujnd7_r4.cpp:2:\n/tmp/tmpujnd7_r4.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpujnd7_r4.cpp:25:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpujnd7_r4.cpp:25:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpujnd7_r4.cpp:25:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpujnd7_r4.cpp:25:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpujnd7_r4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpujnd7_r4.cpp:2:\n/tmp/tmpujnd7_r4.cpp:25:7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 3 == 1) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyv_wxl2r.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpyv_wxl2r.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpyv_wxl2r.cpp: In function 'int main()':\n/tmp/tmpyv_wxl2r.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyv_wxl2r.cpp:2:\n/tmp/tmpyv_wxl2r.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpyv_wxl2r.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpyv_wxl2r.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpyv_wxl2r.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyv_wxl2r.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyv_wxl2r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (long num : nums) {\n        if (num >\
    \ 10 && num % 2 == 1 && num % 2 == 1) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp31fq48pc.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmp31fq48pc.cpp:13:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmp31fq48pc.cpp: In function 'int main()':\n/tmp/tmp31fq48pc.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = specialFilter;\n   \
    \       ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n      \
    \           from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp31fq48pc.cpp:2:\n/tmp/tmp31fq48pc.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmp31fq48pc.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmp31fq48pc.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp31fq48pc.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp31fq48pc.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp31fq48pc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substituti"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    long sum = 0;\n    long temp = 0;\n    long\
    \ sum2 = 0;\n    long temp2 = 0;\n    long sum3 = 0;\n    long temp3 = 0;\n  \
    \  long sum4 = 0;\n    long temp4 = 0;\n    long sum5 = 0;\n    long temp5 = 0;\n\
    \    long sum6 = 0;\n    long temp6 = 0;\n    long sum7 = 0;\n    long temp7 =\
    \ 0;\n    long sum8 = 0;\n    long temp8 = 0;\n    long sum9 = 0;\n    long temp9\
    \ = 0;\n    long sum10 = 0;\n    long temp10 = 0;\n    long sum11 = 0;\n    long\
    \ temp11 = 0;\n    long sum12 = 0;\n    long temp12 = 0;\n    long sum13 = 0;\n\
    \    long temp13 = 0;\n    long sum14 = 0;\n    long temp14 = 0;\n    long sum15\
    \ = 0;\n    long temp15 = 0;\n    long sum16 = 0;\n    long temp16 = 0;\n    long\
    \ sum17 = 0;\n    long temp17 = 0;\n    long sum18 = 0;\n    long temp18 = 0;\n\
    \    long sum19 = 0;\n    long temp19 = 0;\n    long sum20 = 0;\n    long temp20\
    \ = 0;\n    long sum21 = 0;\n    long temp21 = 0;\n    long sum22 = 0;\n    long\
    \ temp22 = 0;\n    long sum23 = 0;\n    long temp23 = 0;\n    long sum24 = 0;\n\
    \    long temp24 = 0;\n    long sum25 = 0;\n    long temp25 = 0;\n    long sum26\
    \ = 0;\n    long temp26 = 0;\n    long sum27 = 0;\n    long temp27 = 0;\n    long\
    \ sum28 = 0;\n    long temp28 = 0;\n    long sum29 = 0;\n    long temp29 = 0;\n\
    \    long sum30 = 0;\n    long temp30 = 0;\n    long sum31 = 0;\n    long temp31\
    \ = 0;\n    long sum32 = 0;\n    long temp32 = 0;\n    long sum33 = 0;\n    long\
    \ temp33 = 0;\n    long sum34 = 0;\n    long temp34 = 0;\n    long sum35 = 0;\n\
    \    long temp35 = 0;\n    long sum36 = 0;\n    long temp36 = 0;\n    long sum37\
    \ = 0;\n    long temp37 = 0;\n    long sum38 = 0;\n    long temp38 = 0;\n    long\
    \ sum39 = 0;\n    long temp39 = 0;\n    long sum40 = 0;\n    long temp40 = 0;\n\
    \    long sum41 = 0;\n    long temp41 = 0;\n    long sum42 = 0;\n    long temp42\
    \ = 0;\n    long sum43 = 0;\n    long temp43 = 0;\n    long \n}\nint main() {\n\
    \    auto candidate = specialFilter;\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)-2, (long)1, (long)-5}))) == (0));\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmowd6ao7.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpmowd6ao7.cpp:100:1: error: expected unqualified-id before '}'\
    \ token\n }\n ^\n/tmp/tmpmowd6ao7.cpp: In function 'int main()':\n/tmp/tmpmowd6ao7.cpp:102:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmowd6ao7.cpp:2:\n/tmp/tmpmowd6ao7.cpp:103:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpmowd6ao7.cpp:103:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpmowd6ao7.cpp:103:79: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpmowd6ao7.cpp:103:79: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmowd6ao7.cpp:103:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpmowd6ao7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes a vector of numbers as input and returns \n// the number of elements in\
    \ the vector that are greater than 10 and both \n// first and last digits of a\
    \ number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter((std::vector<long>({(long)15,\
    \ (long)-73, (long)14, (long)-15})))\n// (1)\n// >>> specialFilter((std::vector<long>({(long)33,\
    \ (long)-2, (long)-3, (long)45, (long)21, (long)109})))\n// (2)\nlong specialFilter(std::vector<long>\
    \ nums) {\n    long count = 0;\n    for (auto num : nums) {\n        if (num >\
    \ 10 && num % 2 == 0 && num % 2 != num % 2) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = specialFilter;\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1, (long)-5})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)15, (long)-73, (long)14,\
    \ (long)-15}))) == (1));\n    assert(candidate((std::vector<long>({(long)33, (long)-2,\
    \ (long)-3, (long)45, (long)21, (long)109}))) == (2));\n    assert(candidate((std::vector<long>({(long)43,\
    \ (long)-12, (long)93, (long)125, (long)121, (long)109}))) == (4));\n    assert(candidate((std::vector<long>({(long)71,\
    \ (long)-2, (long)-33, (long)75, (long)21, (long)19}))) == (3));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (0));\n    assert(candidate((std::vector<long>())) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7g697q2.cpp: In function 'long int specialFilter(std::vector<long\
    \ int>)':\n/tmp/tmpb7g697q2.cpp:13:15: error: 'num' does not name a type\n   \
    \  for (auto num : nums) {\n               ^\n/tmp/tmpb7g697q2.cpp:18:5: error:\
    \ expected ';' before 'return'\n     return count;\n     ^\n/tmp/tmpb7g697q2.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpb7g697q2.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpb7g697q2.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb7g697q2.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpb7g697q2.cpp: In function 'int main()':\n/tmp/tmpb7g697q2.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = specialFilter;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb7g697q2.cpp:2:\n/tmp/tmpb7g697q2.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2, (long)1,\
    \ (long)-5}))) == (0));\n                                        ^\n/tmp/tmpb7g697q2.cpp:22:79:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)5, (long)-2,\
    \ (long)1, (long)-5}))) == (0));\n                                           \
    \                                    ^\n/tmp/tmpb7g697q2.cpp:22:79: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb7g697q2.cpp:22:79: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb7g697q2.cpp:22:79:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb7g697q2.cpp:2:\n/us"
  stdout: ''
