name: HumanEval_57_monotonic
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector elements\
  \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
  \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
  \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
completions: ["    int n = l.size();\n    if (n == 0) return true;\n    long long\
    \ ans = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] < ans) return\
    \ false;\n        ans = l[i];\n    }\n    return true;", "    long long ans =\
    \ 0, n = l.size();\n    for (long long i = 0; i < n; i++) {\n        long long\
    \ j = i;\n        while (j > 0 && l[j-1] > l[j]) {\n            ans = l[j-1];\n\
    \            j--;\n        }\n        l[j] = ans;\n    }\n    return ans == 0;",
  "    long long ans = 0;\n    long long cur = l.front();\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (cur < l[i]) {\n            ans = 1;\n \
    \           break;\n        }\n        if (cur > l[i]) {\n            ans = 0;\n\
    \            break;\n        }\n        cur = l[i];\n    }\n    return ans ==\
    \ 1;", "    if (l.size() == 0) return false;\n    long long first = l[0];\n  \
    \  for (long long i = 1, j = first; i < l.size(); i++, j++) {\n        if (l[i]\
    \ < j) return false;\n    }\n    return true;", "    long long ans = 0;\n    long\
    \ long n = l.size();\n    for (long long i = 0; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            ans++;\n        }\n    }\n    return ans == 0;",
  "    long long ans = 0, i = 0;\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        if (i == 0) {\n            ans = *it;\n        }\n        else if\
    \ (*it < ans) {\n            ans = *it;\n        }\n        i++;\n    }\n    return\
    \ ans == 0;", "    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans) {\n            ans = l[i];\n        }\n    }\n  \
    \  return ans == l[0];", "    long long ans = 0;\n    long long n = l.size();\n\
    \    for (long long i = 0; i < n; i++) {\n        long long x = l[i];\n      \
    \  long long y = i;\n        while (y > 0 && l[y - 1] > x) {\n            ans\
    \ = l[y - 1];\n            y -= 1;\n        }\n        while (y < n && l[y + 1]\
    \ < x) {\n            ans = l[y + 1];\n            y += 1;\n        }\n      \
    \  if (y != i) {\n            ans = l[i];\n        }\n    }\n    return ans ==\
    \ 0;", "    long long ans = 0, i = 0;\n    long long n = l.size();\n    long long\
    \ m = l[n - 1];\n    while (i < n) {\n        if (l[i] < m) {\n            ans\
    \ = 1;\n            break;\n        }\n        if (l[i] > m) {\n            ans\
    \ = 0;\n            break;\n        }\n        i++;\n    }\n    return ans ==\
    \ 1;", "    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n\
    \            j = i;\n        } else {\n            ans = l[i];\n            i\
    \ = j;\n        }\n    }\n    return ans == l[j];", "    long long int max = 0,\
    \ min = std::numeric_limits<long long int>::max();\n    for (long long int i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        }\n        if (i\
    \ < min) {\n            min = i;\n        }\n    }\n    if (max < min) {\n   \
    \     return false;\n    }\n    return true;", "    long long ans = 0, n = l.size();\n\
    \    for (long long i = 0; i < n; i++) {\n        long long j = i;\n        while\
    \ (j > 0 && l[j-1] > l[j]) {\n            ans = l[j-1];\n            j--;\n  \
    \      }\n        l[j] = ans;\n    }\n    return ans == 0;", "    long long ans\
    \ = 0;\n    long long i = 0;\n    long long j = l.size() - 1;\n    while (i <\
    \ j) {\n        if (l[i] > l[j]) {\n            ans = 1;\n            break;\n\
    \        } else if (l[i] < l[j]) {\n            ans = 0;\n            break;\n\
    \        }\n        i++;\n        j--;\n    }\n    return ans;", "    long long\
    \ ans = l[0];\n    for (long long i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ < ans)\n            return false;\n        else if (l[i] > ans)\n          \
    \  return true;\n    }\n    return true;", "    long long ans = 0;\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        long long curr = l[i];\n        long\
    \ long next = l[(i + 1) % l.size()];\n        if (curr > next) {\n           \
    \ ans = 1;\n        } else if (curr < next) {\n            ans = -1;\n       \
    \ } else {\n            ans = 0;\n        }\n    }\n    return ans == 0;", " \
    \   long long ans = 0;\n    long long i = 0;\n    long long j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n  \
    \          j = i;\n        } else {\n            ans = l[i];\n            i =\
    \ j;\n        }\n    }\n    return ans == l[j];", "    int n = l.size();\n   \
    \ if (n == 0) return false;\n    if (n == 1) return true;\n    long long max =\
    \ l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] > max) return false;\n\
    \    }\n    return true;", "    long long ans = l[0];\n    for (long long i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] < ans)\n            return false;\n\
    \        if (l[i] > ans)\n            return true;\n    }\n    return true;",
  "    long long ans = 0;\n    long long i = 0;\n    long long j = l.size() - 1;\n\
    \    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n  \
    \          j = i;\n        } else {\n            ans = l[i];\n            i =\
    \ j;\n        }\n    }\n    return ans == l[j];", "    long long int max = 0,\
    \ min = std::numeric_limits<long long int>::max();\n    for (auto i : l) {\n \
    \       if (i > max) {\n            max = i;\n        } else if (i < min) {\n\
    \            min = i;\n        }\n    }\n    return max >= min;"]
stop_tokens:
- "\n}"
