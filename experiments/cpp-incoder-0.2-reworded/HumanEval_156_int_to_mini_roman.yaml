name: HumanEval_156_int_to_mini_roman
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer,\
  \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
  // Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n\
  // (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n\
  // (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n"
tests: "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19))\
  \ == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251))\
  \ == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500))\
  \ == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4))\
  \ == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90))\
  \ == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532))\
  \ == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994))\
  \ == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
completions: ["    std::string roman = \"\";\n    long n = number;\n    long m = 1;\n\
    \    while (n >= 1000) {\n        m += n / 1000;\n        n %= 1000;\n    }\n\
    \    roman = roman.substr(0, roman.length() - 1) + to_string(m);\n    long x =\
    \ n;\n    while (x > 0) {\n        roman += to_string(x % 10);\n        x /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num;\n    num =\
    \ number;\n    while (num > 0) {\n        roman = roman.substr(0, roman.length()\
    \ - 1) + to_string(num % 10);\n        num /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long num;\n    num = number;\n    while (num > 0) {\n\
    \        roman = to_string(num % 100) + roman;\n        num /= 100;\n    }\n \
    \   return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  long num = number;\n  while (num > 0) {\n    long mod = num % 10;\n\
    \    roman += (mod < 4 ? to_string(mod) : \"c\");\n    num /= 10;\n  }\n  return\
    \ roman;", "    std::string roman;\n    long roman_numeral = 0;\n    long roman_numeral_string\
    \ = 0;\n    long roman_numeral_string2 = 0;\n    long roman_numeral_string3 =\
    \ 0;\n    long roman_numeral_string4 = 0;\n    long roman_numeral_string5 = 0;\n\
    \    long roman_numeral_string6 = 0;\n    long roman_numeral_string7 = 0;\n  \
    \  long roman_numeral_string8 = 0;\n    long roman_numeral_string9 = 0;\n    long\
    \ roman_numeral_string10 = 0;\n    long roman_numeral_string11 = 0;\n    long\
    \ roman_numeral_string12 = 0;\n    long roman_numeral_string13 = 0;\n    long\
    \ roman_numeral_string14 = 0;\n    long roman_numeral_string15 = 0;\n    long\
    \ roman_numeral_string16 = 0;\n    long roman_numeral_string17 = 0;\n    long\
    \ roman_numeral_string18 = 0;\n    long roman_numeral_string19 = 0;\n    long\
    \ roman_numeral_string20 = 0;\n    long roman_numeral_string21 = 0;\n    long\
    \ roman_numeral_string22 = 0;\n    long roman_numeral_string23 = 0;\n    long\
    \ roman_numeral_string24 = 0;\n    long roman_numeral_string25 = 0;\n    long\
    \ roman_numeral_string26 = 0;\n    long roman_numeral_string27 = 0;\n    long\
    \ roman_numeral_string28 = 0;\n    long roman_numeral_string29 = 0;\n    long\
    \ roman_numeral_string30 = 0;\n    long roman_numeral_string31 = 0;\n    long\
    \ roman_numeral_string32 = 0;\n    long roman_numeral_string33 = 0;\n    long\
    \ roman_numeral_string34 = 0;\n    long roman_numeral_string35 = 0;\n    long\
    \ roman_numeral_string36 = 0;\n    long roman_numeral_string37 = 0;\n    long\
    \ roman_numeral_string38 = 0;\n    long roman_numeral_string39 = 0;\n    long\
    \ roman_numeral_string40 = 0;\n    long roman_numeral_string41 = 0;\n    long\
    \ roman_numeral_string42 = 0;\n    long roman_numeral_string43 = 0;\n    long\
    \ roman_numeral_string44 = 0;\n    long roman_numeral_string45 = 0;\n    long\
    \ roman_numeral_string46 = 0;\n    long roman_numeral_string47 = 0;\n    long\
    \ roman_numeral_string48 = 0;\n    long roman_numeral_string49 = 0;\n    long\
    \ roman_numeral_string50 = 0;\n    long ro", "    std::string roman;\n    long\
    \ remainder = number;\n    long temp = 0;\n    while (number != 0) {\n       \
    \ remainder = number % 10;\n        temp = remainder * 100 + temp;\n        roman\
    \ = to_string(temp) + roman;\n        number /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = 0;\n    while (number != 0) {\n       \
    \ temp = number % 10;\n        roman += (temp < 4 ? to_string(temp) : to_string(temp\
    \ + 1));\n        number /= 10;\n    }\n    return roman;", "    std::string roman\
    \ = \"\";\n    long temp = number;\n    while (temp > 0) {\n        int digit\
    \ = temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(digit - 4, \"\
    M\")) + std::string(digit - 9, \"CM\");\n        temp /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long romanNum = number;\n    long romanNum1\
    \ = romanNum;\n    long romanNum2 = romanNum;\n    long romanNum3 = romanNum;\n\
    \    long romanNum4 = romanNum;\n    long romanNum5 = romanNum;\n    long romanNum6\
    \ = romanNum;\n    long romanNum7 = romanNum;\n    long romanNum8 = romanNum;\n\
    \    long romanNum9 = romanNum;\n    long romanNum10 = romanNum;\n    long romanNum11\
    \ = romanNum;\n    long romanNum12 = romanNum;\n    long romanNum13 = romanNum;\n\
    \    long romanNum14 = romanNum;\n    long romanNum15 = romanNum;\n    long romanNum16\
    \ = romanNum;\n    long romanNum17 = romanNum;\n    long romanNum18 = romanNum;\n\
    \    long romanNum19 = romanNum;\n    long romanNum20 = romanNum;\n    long romanNum21\
    \ = romanNum;\n    long romanNum22 = romanNum;\n    long romanNum23 = romanNum;\n\
    \    long romanNum24 = romanNum;\n    long romanNum25 = romanNum;\n    long romanNum26\
    \ = romanNum;\n    long romanNum27 = romanNum;\n    long romanNum28 = romanNum;\n\
    \    long romanNum29 = romanNum;\n    long romanNum30 = romanNum;\n    long romanNum31\
    \ = romanNum;\n    long romanNum32 = romanNum;\n    long romanNum33 = romanNum;\n\
    \    long romanNum34 = romanNum;\n    long romanNum35 = romanNum;\n    long romanNum36\
    \ = romanNum;\n    long romanNum37 = romanNum;\n    long romanNum38 = romanNum;\n\
    \    long romanNum39 = romanNum;\n    long romanNum40 = romanNum;\n    long romanNum41\
    \ = romanNum;\n    long romanNum42 = romanNum;\n    long romanNum4", "    std::string\
    \ roman;\n    if (number < 0)\n        roman = \"-\";\n    else if (number ==\
    \ 0)\n        roman = \"0\";\n    else if (number < 4)\n        roman = \"i\"\
    ;\n    else if (number < 9)\n        roman = \"v\";\n    else if (number < 14)\n\
    \        roman = \"vi\";\n    else if (number < 19)\n        roman = \"x\";\n\
    \    else if (number < 24)\n        roman = \"xvi\";\n    else if (number < 39)\n\
    \        roman = \"l\";\n    else if (number < 49)\n        roman = \"xl\";\n\
    \    else if (number < 99)\n        roman = \"c\";\n    else if (number < 149)\n\
    \        roman = \"cv\";\n    else if (number < 199)\n        roman = \"xc\";\n\
    \    else if (number < 249)\n        roman = \"lc\";\n    else if (number < 499)\n\
    \        roman = \"xlc\";\n    else if (number < 999)\n        roman = \"xix\"\
    ;\n    else if (number < 1499)\n        roman = \"cli\";\n    else if (number\
    \ < 1999)\n        roman = \"cci\";\n    else if (number < 2499)\n        roman\
    \ = \"xci\";\n    else if (number < 4999)\n        roman = \"clii\";\n    else\
    \ if (number < 9999)\n        roman = \"cxxxvi\";\n    else if (number < 14999)\n\
    \        roman = \"cxlvi\";\n    else if (number < 19999)\n        roman = \"\
    xxvi\";\n    else if (number < 24999)\n        roman = \"xvi\";\n    else if (number\
    \ < 49999)\n        roman = \"xix\";\n    else if (number < 99999)\n        roman\
    \ = \"xxx\";\n    else if (number < 149999)\n        roman = \"xlxxvi\";\n   \
    \ else if (number < 199999)\n        roman = \"xxvi\";\n    else if (number <\
    \ 249999)\n        roman = \"xvi\";\n    else if (number < 499999)\n        roman\
    \ = \"xix\";\n    else if (number < 999999)\n        roman = \"xxx\";\n    else\
    \ if (number < 1500000)\n        roman = \"xlxxxvi\";\n    else if (number < 1999999)\n\
    \        roman = \"xxvi\";\n    else if (number < 2499998)\n        roman = \"\
    xvi\";\n    else if (number < 4999999)\n        roman = \"xix\";\n    else if\
    \ (number < 9999999)\n        roman = \"xxx\";\n    else if (number < 15000000)\n\
    \        roman = \"xlxxxvi", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int remainder = temp % 10;\n        roman +=\
    \ to_string(static_cast<int>(remainder));\n        temp /= 10;\n    }\n    roman\
    \ = roman.substr(0, roman.length() - 1);\n    return roman;", "    std::string\
    \ roman;\n    if (number == 0)\n        return roman;\n    long nums[] = {0, 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    long romans[] = {0, 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    long index = 0;\n    while\
    \ (number >= nums[index]) {\n        roman.append(1, static_cast<char>('M'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('CM'));\n      \
    \  number -= romans[index];\n        index++;\n    }\n    while (number >= nums[index])\
    \ {\n        roman.append(1, static_cast<char>('D'));\n        number -= nums[index];\n\
    \        index++;\n    }\n    while (number >= romans[index]) {\n        roman.append(1,\
    \ static_cast<char>('CD'));\n        number -= romans[index];\n        index++;\n\
    \    }\n    while (number >= nums[index]) {\n        roman.append(1, static_cast<char>('C'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('XC'));\n      \
    \  number -= romans[index];\n        index++;\n    }\n    while (number >= nums[index])\
    \ {\n        roman.append(1, static_cast<char>('L'));\n        number -= nums[index];\n\
    \        index++;\n    }\n    while (number >= romans[index]) {\n        roman.append(1,\
    \ static_cast<char>('XL'));\n        number -= romans[index];\n        index++;\n\
    \    }\n    while (number >= nums[index]) {\n        roman.append(1, static_cast<char>('X'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('IX'));\n      \
    \  number -= romans[index];\n        index++;\n    }\n    while (number >= nums[index])\
    \ {\n        roman.append(1, static_cast<char>('V'));\n        number -= nums[index];\n\
    \        index++;\n    }\n    while (number >= romans[index]) {\n        roman.append(1,\
    \ static_cast<char>('IV'));\n        number -= romans[index];\n        index++;\n\
    \    }\n    while (number >= nums[index]) {\n        roman.append(1, static_cast<char>('I'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('II'));\n      \
    \  number -= romans[index];\n        index++;\n    }", "    std::string roman;\n\
    \    long temp = 0;\n    int i = 0;\n    while (number >= 1000) {\n        temp\
    \ = number / 1000;\n        roman.append(temp % 10);\n        number -= temp *\
    \ 1000;\n        roman.append(\"M\");\n        i++;\n    }\n    while (number\
    \ >= 100) {\n        temp = number / 100;\n        roman.append(temp % 10);\n\
    \        number -= temp * 100;\n        roman.append(\"CM\");\n        i++;\n\
    \    }\n    while (number >= 10) {\n        temp = number / 10;\n        roman.append(temp\
    \ % 10);\n        number -= temp * 10;\n        roman.append(\"D\");\n       \
    \ i++;\n    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"C\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"X\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"L\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"V\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);", "    std::string roman;\n    long temp = number;\n    while (temp >\
    \ 0) {\n        long mod = temp % 10;\n        roman += (mod < 4 ? \"\" : (mod\
    \ < 7 ? \"\" : \"c\") + mod);\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   int digit = temp % 10;\n        roman += mini_roman[digit];\n        temp\
    \ /= 10;\n    }\n    return roman;", "    std::string roman;\n    if (number ==\
    \ 0)\n        roman = \"0\";\n    else {\n        long temp = number;\n      \
    \  while (temp > 0) {\n            roman = mini_roman[temp % 10] + roman;\n  \
    \          temp /= 10;\n        }\n    }\n    return roman;", "    std::string\
    \ roman = \"\";\n    long temp = 0;\n    while (number >= 1000) {\n        temp\
    \ = number % 1000;\n        roman += mini_roman[temp];\n        number /= 1000;\n\
    \    }\n    temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp\
    \ % 10];\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp;\n    long num;\n    long rem;\n    long i=0;\n    while(number!=0){\n\
    \        num=number%1000;\n        rem=number%10;\n        roman+=to_string(num);\n\
    \        number=number/10;\n        roman+=to_string(num);\n        roman+=to_string(rem);\n\
    \        i++;\n    }\n    while(roman.length()>i){\n        roman=roman.substr(0,i)+\"\
    M\"+roman.substr(i);\n    }\n    return roman;", "    std::string roman;\n   \
    \ if (number == 0) {\n        roman = \"0\";\n    } else {\n        long temp\
    \ = 0;\n        while (number >= 1000) {\n            number /= 1000;\n      \
    \      temp += 1000;\n        }\n        while (number >= 100) {\n           \
    \ number /= 100;\n            temp += 100;\n        }\n        while (number >=\
    \ 10) {\n            number /= 10;\n            temp += 10;\n        }\n     \
    \   roman = to_string(temp);\n        roman = to_string(temp - number) + roman;\n\
    \    }\n    return roman;", "    std::string roman;\n    long n = number;\n  \
    \  long m = 1;\n    while (n >= 1000) {\n        m += n / 1000;\n        n %=\
    \ 1000;\n    }\n    roman.push_back('M');\n    if (m > 9) {\n        roman.push_back('C');\n\
    \        roman.push_back('D');\n        roman.push_back('M');\n    } else {\n\
    \        roman.push_back('C');\n        roman.push_back('M');\n    }\n    while\
    \ (n >= 100) {\n        m += n / 100;\n        n %= 100;\n    }\n    roman.push_back('C');\n\
    \    roman.push_back('D');\n    if (m > 9) {\n        roman.push_back('C');\n\
    \        roman.push_back('D');\n        roman.push_back('M');\n    } else {\n\
    \        roman.push_back('C');\n        roman.push_back('M');\n    }\n    while\
    \ (n >= 10) {\n        m += n / 10;\n        n %= 10;\n    }\n    roman.push_back('C');\n\
    \    roman.push_back('M');\n    if (m > 9) {\n        roman.push_back('C');\n\
    \        roman.push_back('D');\n        roman.push_back('M');\n    } else {\n\
    \        roman.push_back('C');\n        roman.push_back('M');\n    }\n    while\
    \ (n >= 1) {\n        m += n;\n        n = 0;\n    }\n    roman.push_back('C');\n\
    \    roman.push_back('M');\n    if (m > 9) {\n        roman.push_back('C');\n\
    \        roman.push_back('D');\n        roman.push_back('M');\n    } else {\n\
    \        roman.push_back('C');\n        roman.push_back('M');\n    }\n    return\
    \ roman;", "    std::string roman;\n    if (number == 0) return roman;\n    long\
    \ num = number;\n    long roman_num = 0;\n    while (num > 0) {\n        roman_num\
    \ += num % 10;\n        num /= 10;\n    }\n    roman = mini_roman[roman_num];\n\
    \    return roman;", "    std::string roman = \"\";\n    long num = 0;\n    while\
    \ (number > 0) {\n        num = number % 10;\n        roman = roman[num] + roman;\n\
    \        number /= 10;\n    }\n    return roman;", "    std::string roman;\n \
    \   long num = number;\n    while (num > 0) {\n        long remainder = num %\
    \ 10;\n        roman = to_string(remainder) + roman;\n        num /= 10;\n   \
    \ }\n    return roman;", "    std::string roman;\n    long temp = number;\n  \
    \  while (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num;\n    long rem;\n    num = number;\n    rem = num % 10;\n    num =\
    \ num / 10;\n    roman = romans[rem];\n    while (num > 0) {\n        rem = num\
    \ % 10;\n        num = num / 10;\n        roman = romans[rem] + roman;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        long mod = temp % 10;\n        roman += (mod < 4 ? \"\"\
    \ : (mod < 7 ? \"\" : \"c\"));\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    if (number == 0) return roman;\n    long num = number;\n\
    \    long temp = 0;\n    long roman_num = 0;\n    while (num > 0) {\n        roman_num\
    \ = (num % 1000) / 100;\n        roman = roman[roman_num] + roman[roman_num +\
    \ 1];\n        num /= 1000;\n    }\n    return roman;", "    std::string roman;\n\
    \    long num = (number < 0) ? -number : number;\n    long num2 = num % 10;\n\
    \    long num3 = num / 10;\n    long num4 = num % 100;\n    long num5 = num /\
    \ 100;\n    long num6 = num % 1000;\n    long num7 = num / 1000;\n    long num8\
    \ = num % 10000;\n    long num9 = num / 10000;\n    long num10 = num % 100000;\n\
    \    long num11 = num / 100000;\n    long num12 = num % 1000000;\n    long num13\
    \ = num / 1000000;\n    long num14 = num % 10000000;\n    long num15 = num / 10000000;\n\
    \    long num16 = num % 1000000000;\n    long num17 = num / 1000000000;\n    long\
    \ num18 = num % 10000000000;\n    long num19 = num / 10000000000;\n    long num20\
    \ = num % 100000000000;\n    long num21 = num / 100000000000;\n    long num22\
    \ = num % 1000000000000;\n    long num23 = num / 1000000000000;\n    long num24\
    \ = num % 10000000000000;\n    long num25 = num / 10000000000000;\n    long num26\
    \ = num % 100000000000000;\n    long num27 = num / 100000000000000;\n    long\
    \ num28 = num % 1000000000000000;\n    long num29 = num / 1000000000000000;\n\
    \    long num30 = num % 100000000000000000;\n    long num31 = num / 100000000000000000;\n\
    \    long num32 = num % 100000000000000000;\n    long num33 = num / 100000000000000000;\n\
    \    long num34 = num % 1000000000000000000;\n    long num35 = num / 1000000000000000000;\n\
    \    long num36 = num % 10000000000000000000;\n    long num37 = num / 10000000000000000000;\n\
    \    long num38 = num % 100000000000000000000;\n    long num39 = num / 100000000000000000000;\n\
    \    long num40 = num % 1000000000000000000000;\n    long num41 = num / 1000000000000000000000;\n\
    \    long num42 = num % 10000000000000000000000;\n    long num43 = num / 10000000000000000000000;\n\
    \    long num44 = num % 100000000000000000000000;\n    long num45 = num / 100000000000000000000000;\n\
    \    long num46 = num % 10000000000000000000000000;\n    long num47 = num / 10000000000000000000000000;",
  "    std::string roman;\n    long temp;\n    while (number >= 1000) {\n        temp\
    \ = number % 1000;\n        roman += mini_roman[temp];\n        number /= 1000;\n\
    \    }\n    temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp\
    \ % 10];\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp;\n    long num;\n    long num1;\n    long num2;\n    long num3;\n\
    \    long num4;\n    long num5;\n    long num6;\n    long num7;\n    long num8;\n\
    \    long num9;\n    long num10;\n    long num11;\n    long num12;\n    long num13;\n\
    \    long num14;\n    long num15;\n    long num16;\n    long num17;\n    long\
    \ num18;\n    long num19;\n    long num20;\n    long num21;\n    long num22;\n\
    \    long num23;\n    long num24;\n    long num25;\n    long num26;\n    long\
    \ num27;\n    long num28;\n    long num29;\n    long num30;\n    long num31;\n\
    \    long num32;\n    long num33;\n    long num34;\n    long num35;\n    long\
    \ num36;\n    long num37;\n    long num38;\n    long num39;\n    long num40;\n\
    \    long num41;\n    long num42;\n    long num43;\n    long num44;\n    long\
    \ num45;\n    long num46;\n    long num47;\n    long num48;\n    long num49;\n\
    \    long num50;\n    long num51;\n    long num52;\n    long num53;\n    long\
    \ num54;\n    long num55;\n    long num56;\n    long num57;\n    long num58;\n\
    \    long num59;\n    long num60;\n    long num61;\n    long num62;\n    long\
    \ num63;\n    long num64;\n    long num65;\n    long num66;\n    long num67;\n\
    \    long num68;\n    long num69;\n    long num70;\n    long num71;\n    long\
    \ num72;\n    long num73;\n    long num74;\n    long num75;\n    long num76;\n\
    \    long num77;\n    long num78;\n    long num79;\n    long num80;\n    long\
    \ num81;\n    long num82;\n    long num83;\n    long num84;\n    long num85;\n\
    \    long num86;\n", "    std::string roman;\n    if (number < 0)\n        throw\
    \ std::invalid_argument(\"number must be positive\");\n    if (number < 10)\n\
    \        roman = \"x\";\n    else if (number < 100)\n        roman = \"c\";\n\
    \    else if (number < 1000)\n        roman = \"m\";\n    else if (number < 10000)\n\
    \        roman = \"d\";\n    else if (number < 100000)\n        roman = \"cd\"\
    ;\n    else if (number < 1000000)\n        roman = \"cm\";\n    else if (number\
    \ < 10000000)\n        roman = \"dam\";\n    else if (number < 100000000)\n  \
    \      roman = \"cm\";\n    else if (number < 1000000000)\n        roman = \"\
    m\";\n    else if (number < 10000000000)\n        roman = \"cm\";\n    else if\
    \ (number < 100000000000)\n        roman = \"m\";\n    else if (number < 1000000000000)\n\
    \        roman = \"c\";\n    else if (number < 10000000000000)\n        roman\
    \ = \"c\";\n    else if (number < 100000000000000)\n        roman = \"c\";\n \
    \   else if (number < 1000000000000000)\n        roman = \"c\";\n    else if (number\
    \ < 10000000000000000)\n        roman = \"c\";\n    else if (number < 100000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 1000000000000000000)\n        roman\
    \ = \"c\";\n    else if (number < 10000000000000000000)\n        roman = \"c\"\
    ;\n    else if (number < 100000000000000000000)\n        roman = \"c\";\n    else\
    \ if (number < 1000000000000000000000)\n        roman = \"c\";\n    else if (number\
    \ < 10000000000000000000000)\n        roman = \"c\";\n    else if (number < 100000000000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 1000000000000000000000000)\n  \
    \      roman = \"c\";\n    else if (number < 10000000000000000000000000)\n   \
    \     roman = \"c\";\n    else if (number < 100000000000000000000000000)\n   \
    \     roman = \"c\";\n    else if (number < 1000000000000000000000000000)\n  \
    \      roman = \"c\";\n    else if (number < 10000000000000000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 100000000000000000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 1000000000000000000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 10000000000000000000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 100000000000000000000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 1000000000000000000000000000000000)\n\
    \        roman = \"c\";\n    else if (number < 10000000000000000000000000000000000)\n\
    \        roman = \"c\";\n    else if (", "  assert(number > 0);\n  std::string\
    \ roman;\n  roman.reserve(number + 1);\n  long num = 0;\n  while (number > 0)\
    \ {\n    long remainder = number % 10;\n    roman.push_back(to_string(num));\n\
    \    roman.push_back(to_string(static_cast<int>(remainder)));\n    number /= 10;\n\
    \    ++num;\n  }\n  return roman;", "    std::string roman;\n    if (number <\
    \ 0)\n        throw std::invalid_argument(\"Invalid input\");\n    if (number\
    \ < 1000)\n        roman = \"x\";\n    else if (number < 900)\n        roman =\
    \ \"l\";\n    else if (number < 400)\n        roman = \"c\";\n    else if (number\
    \ < 900)\n        roman = \"d\";\n    else if (number < 400)\n        roman =\
    \ \"m\";\n    else if (number < 900)\n        roman = \"s\";\n    else if (number\
    \ < 400)\n        roman = \"p\";\n    else if (number < 900)\n        roman =\
    \ \"f\";\n    else if (number < 400)\n        roman = \"g\";\n    else if (number\
    \ < 900)\n        roman = \"h\";\n    else if (number < 400)\n        roman =\
    \ \"v\";\n    else if (number < 900)\n        roman = \"x\";\n    else if (number\
    \ < 400)\n        roman = \"c\";\n    else if (number < 900)\n        roman =\
    \ \"d\";\n    else if (number < 400)\n        roman = \"m\";\n    else if (number\
    \ < 900)\n        roman = \"s\";\n    else if (number < 400)\n        roman =\
    \ \"p\";\n    else if (number < 900)\n        roman = \"f\";\n    else if (number\
    \ < 400)\n        roman = \"g\";\n    else if (number < 900)\n        roman =\
    \ \"h\";\n    else if (number < 400)\n        roman = \"v\";\n    else if (number\
    \ < 900)\n        roman = \"x\";\n    else if (number < 400)\n        roman =\
    \ \"c\";\n    else if (number < 900)\n        roman = \"d\";\n    else if (number\
    \ < 400)\n        roman = \"m\";\n    else if (number < 900)\n        roman =\
    \ \"s\";\n    else if (number < 400)\n        roman = \"p\";\n    else if (number\
    \ < 900)\n        roman = \"f\";\n    else if (number < 400)\n        roman =\
    \ \"g\";\n    else if (number < 900)\n        roman = \"h\";\n    else if (number\
    \ < 400)\n        roman = \"v\";\n    else if (number < 900)\n        roman =\
    \ \"x\";\n    else if (number < 400)\n        roman = \"c\";\n    else if (number\
    \ < 900)\n        roman = \"d\";\n    else if (number < 400)\n        roman =\
    \ \"m\";\n    else if (number < 900)\n        roman = \"s\";\n    else if (number\
    \ < 400)\n        roman = \"p\";\n    else if (number < 900)\n        roman =\
    \ \"f\";\n    else if (number < 400)\n        roman = \"g\";\n    else if (number\
    \ < 900)\n        ro", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num;\n    long rem;\n    long temp;\n    long roman_num;\n    long roman_num_len;\n\
    \    long roman_num_len2;\n    long roman_num_len3;\n    long roman_num_len4;\n\
    \    long roman_num_len5;\n    long roman_num_len6;\n    long roman_num_len7;\n\
    \    long roman_num_len8;\n    long roman_num_len9;\n    long roman_num_len10;\n\
    \    long roman_num_len11;\n    long roman_num_len12;\n    long roman_num_len13;\n\
    \    long roman_num_len14;\n    long roman_num_len15;\n    long roman_num_len16;\n\
    \    long roman_num_len17;\n    long roman_num_len18;\n    long roman_num_len19;\n\
    \    long roman_num_len20;\n    long roman_num_len21;\n    long roman_num_len22;\n\
    \    long roman_num_len23;\n    long roman_num_len24;\n    long roman_num_len25;\n\
    \    long roman_num_len26;\n    long roman_num_len27;\n    long roman_num_len28;\n\
    \    long roman_num_len29;\n    long roman_num_len30;\n    long roman_num_len31;\n\
    \    long roman_num_len32;\n    long roman_num_len33;\n    long roman_num_len34;\n\
    \    long roman_num_len35;\n    long roman_num_len36;\n    long roman_num_len37;\n\
    \    long roman_num_len38;\n    long roman_num_len39;\n    long roman_num_len40;\n\
    \    long roman_num_len41;\n    long roman_num_len42;\n    long roman_num_len43;\n\
    \    long roman_num_len44;\n    long roman_num_len45;\n    long roman_num_len46;\n\
    \    long roman_num_len47;\n    long roman_num_len48;\n    long roman_num_len49;\n\
    \    long roman_num_len50;\n    long roman_num_len51;\n    long roman_num_len52;\n\
    \    long roman_num_len53;\n    long roman_num_len54;\n    long roman_num_len55;\n\
    \    long roman_num_len56;\n    ", "    std::string roman;\n    long num = number;\n\
    \    while (num > 0) {\n        int digit = num % 10;\n        roman += mini_roman[digit];\n\
    \        num /= 10;\n    }\n    return roman;", "    std::string roman;\n    if\
    \ (number == 0) {\n        roman = \"0\";\n        return roman;\n    }\n    long\
    \ temp = number % 1000;\n    number /= 1000;\n    long temp2 = number % 100;\n\
    \    number /= 100;\n    long temp3 = number % 10;\n    number /= 10;\n    long\
    \ temp4 = number;\n    roman = \"MCMXCIV\";\n    if (temp4 > 0)\n        roman\
    \ += int_to_mini_roman(temp);\n    if (temp3 > 0)\n        roman += int_to_mini_roman(temp2);\n\
    \    if (temp2 > 0)\n        roman += int_to_mini_roman(temp);\n    if (temp >\
    \ 0)\n        roman += int_to_mini_roman(temp2);\n    return roman;", "    std::string\
    \ roman;\n    long remainder = number;\n    long temp = 0;\n    long romanNum\
    \ = 0;\n    long romanNumCount = 0;\n    long romanNumCount2 = 0;\n    long romanNumCount3\
    \ = 0;\n    long romanNumCount4 = 0;\n    long romanNumCount5 = 0;\n    long romanNumCount6\
    \ = 0;\n    long romanNumCount7 = 0;\n    long romanNumCount8 = 0;\n    long romanNumCount9\
    \ = 0;\n    long romanNumCount10 = 0;\n    long romanNumCount11 = 0;\n    long\
    \ romanNumCount12 = 0;\n    long romanNumCount13 = 0;\n    long romanNumCount14\
    \ = 0;\n    long romanNumCount15 = 0;\n    long romanNumCount16 = 0;\n    long\
    \ romanNumCount17 = 0;\n    long romanNumCount18 = 0;\n    long romanNumCount19\
    \ = 0;\n    long romanNumCount20 = 0;\n    long romanNumCount21 = 0;\n    long\
    \ romanNumCount22 = 0;\n    long romanNumCount23 = 0;\n    long romanNumCount24\
    \ = 0;\n    long romanNumCount25 = 0;\n    long romanNumCount26 = 0;\n    long\
    \ romanNumCount27 = 0;\n    long romanNumCount28 = 0;\n    long romanNumCount29\
    \ = 0;\n    long romanNumCount30 = 0;\n    long romanNumCount31 = 0;\n    long\
    \ romanNumCount32 = 0;\n    long romanNumCount33 = 0;\n    long romanNumCount34\
    \ = 0;\n    long romanNumCount35 = 0;\n    long romanNumCount36 = 0;\n    long\
    \ romanNumCount37 = 0;\n    long romanNumCount38 = 0;\n    long romanNumCount39\
    \ = 0;\n    long romanNumCount40 = 0;\n    long romanNumCount41 = 0;\n    long\
    \ romanNumCount42 = 0;\n    long romanNumCount43 = 0;\n    long romanNumCount44\
    \ = 0;\n    long romanNumCount45 = 0;\n    long romanNumCount46 = 0;\n    long\
    \ romanNumCount47 = 0;\n    long romanNumCount48 = 0;\n    long romanNumCount49\
    \ = 0;\n    long romanNumCount50 = 0;\n    long romanNumCount51 = 0;\n    long\
    \ romanNumCount52 = 0;\n    long romanNumCount53 = 0;\n    long romanNumCount54\
    \ = 0;\n    long romanNumCount55", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        roman += mini_roman[temp % 10];\n        temp\
    \ /= 10;\n    }\n    return roman;", "    std::string roman = \"\";\n    long\
    \ temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp % 10];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ if (number < 0 || number > 1000)\n        return roman;\n    long roman_num\
    \ = 0;\n    long roman_den = 1;\n    while (number > 0) {\n        roman_num +=\
    \ number % 10;\n        roman_den *= 10;\n        number /= 10;\n    }\n    roman_num\
    \ -= roman_den;\n    while (roman_num > 0) {\n        roman += (roman_num % 10)\
    \ + 48;\n        roman_num /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long n = number;\n    while (n >= 1000) {\n        roman += int_to_mini_roman(n\
    \ / 1000) + \"x\";\n        n %= 1000;\n    }\n    roman += int_to_mini_roman(n);\n\
    \    return roman;", "    std::string roman;\n    long num = number;\n    long\
    \ num1 = num;\n    long num2 = num;\n    long num3 = num;\n    long num4 = num;\n\
    \    long num5 = num;\n    long num6 = num;\n    long num7 = num;\n    long num8\
    \ = num;\n    long num9 = num;\n    long num10 = num;\n    long num11 = num;\n\
    \    long num12 = num;\n    long num13 = num;\n    long num14 = num;\n    long\
    \ num15 = num;\n    long num16 = num;\n    long num17 = num;\n    long num18 =\
    \ num;\n    long num19 = num;\n    long num20 = num;\n    long num21 = num;\n\
    \    long num22 = num;\n    long num23 = num;\n    long num24 = num;\n    long\
    \ num25 = num;\n    long num26 = num;\n    long num27 = num;\n    long num28 =\
    \ num;\n    long num29 = num;\n    long num30 = num;\n    long num31 = num;\n\
    \    long num32 = num;\n    long num33 = num;\n    long num34 = num;\n    long\
    \ num35 = num;\n    long num36 = num;\n    long num37 = num;\n    long num38 =\
    \ num;\n    long num39 = num;\n    long num40 = num;\n    long num41 = num;\n\
    \    long num42 = num;\n    long num43 = num;\n    long num44 = num;\n    long\
    \ num45 = num;\n    long num46 = num;\n    long num47 = num;\n    long num48 =\
    \ num;\n    long num49 = num;\n    long num50 = num;\n    long num51 = num;\n\
    \    long num52 = num;\n    long num53 = num;\n    long num54 = num;\n    long\
    \ num55 = num;\n    long num56 = num;\n    long num57 = num;\n    long num58 =\
    \ num;\n    long num59 = num;\n    long num60 = num;\n    long num61 = num;\n\
    \    long num62 = num;\n    long num63 = num;\n    long num64 = num;\n    ", " \
    \   std::string roman;\n    long temp = number;\n    while (temp > 0) {\n    \
    \    int digit = temp % 10;\n        roman += mini_roman[digit];\n        temp\
    \ /= 10;\n    }\n    return roman;", "    std::string roman;\n    long temp =\
    \ number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        roman\
    \ += (digit < 4 ? \"\" : std::to_string(digit)) + mini_roman[digit];\n       \
    \ temp /= 10;\n    }\n    return roman;", "    std::string roman;\n    long temp\
    \ = number;\n    while (temp > 0) {\n        roman += (temp % 10) + \"\";\n  \
    \      temp /= 10;\n    }\n    roman = roman.substr(0, roman.length() - 1);\n\
    \    roman = roman.substr(0, roman.length() - 1);\n    return roman;", "    std::string\
    \ roman;\n    long remainder = number;\n    long temp = 0;\n    long romanNum\
    \ = 0;\n    while (number != 0) {\n        remainder = number % 10;\n        temp\
    \ = remainder * 100 + temp;\n        romanNum = temp % 1000;\n        roman =\
    \ to_string(romanNum) + roman;\n        number /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long num = number;\n    while (num > 0) {\n       \
    \ int digit = num % 10;\n        roman += mini_roman[digit];\n        num /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    long num2 = num;\n    long num3 = num;\n    long num4 = num;\n    long num5\
    \ = num;\n    long num6 = num;\n    long num7 = num;\n    long num8 = num;\n \
    \   long num9 = num;\n    long num10 = num;\n    long num11 = num;\n    long num12\
    \ = num;\n    long num13 = num;\n    long num14 = num;\n    long num15 = num;\n\
    \    long num16 = num;\n    long num17 = num;\n    long num18 = num;\n    long\
    \ num19 = num;\n    long num20 = num;\n    long num21 = num;\n    long num22 =\
    \ num;\n    long num23 = num;\n    long num24 = num;\n    long num25 = num;\n\
    \    long num26 = num;\n    long num27 = num;\n    long num28 = num;\n    long\
    \ num29 = num;\n    long num30 = num;\n    long num31 = num;\n    long num32 =\
    \ num;\n    long num33 = num;\n    long num34 = num;\n    long num35 = num;\n\
    \    long num36 = num;\n    long num37 = num;\n    long num38 = num;\n    long\
    \ num39 = num;\n    long num40 = num;\n    long num41 = num;\n    long num42 =\
    \ num;\n    long num43 = num;\n    long num44 = num;\n    long num45 = num;\n\
    \    long num46 = num;\n    long num47 = num;\n    long num48 = num;\n    long\
    \ num49 = num;\n    long num50 = num;\n    long num51 = num;\n    long num52 =\
    \ num;\n    long num53 = num;\n    long num54 = num;\n    long num55 = num;\n\
    \    long num56 = num;\n    long num57 = num;\n    long num58 = num;\n    long\
    \ num59 = num;\n    long num60 = num;\n    long num61 = num;\n    long num62 =\
    \ num;\n    long num63 = num;\n    long num64 = num;\n    long num65 = num;\n",
  "    std::string roman = \"\";\n    long num = 0;\n    while (number > 0) {\n  \
    \      long remainder = number % 10;\n        roman = to_string(remainder) + roman;\n\
    \        number /= 10;\n    }\n    num = number;\n    while (num > 0) {\n    \
    \    roman = to_string(num % 100) + roman;\n        num /= 100;\n    }\n    return\
    \ roman;", "  assert(number > 0);\n  std::string roman;\n  roman.reserve(number\
    \ + 1);\n  long nums[] = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1 };\n  for (long i = 0; i < number; i++) {\n    roman += nums[i];\n  }\n  roman[0]\
    \ = roman[0].to_lower();\n  return roman;", "    std::string roman;\n    long\
    \ num = (number < 0) ? -number : number;\n    long num2 = num;\n    while (num2\
    \ > 0) {\n        roman.push_back((num2 % 10) + '0');\n        num2 /= 10;\n \
    \   }\n    if (roman.back() == '0') {\n        roman.pop_back();\n    }\n    return\
    \ roman;", "    std::string roman;\n    long remainder = number;\n    long counter\
    \ = 1;\n    while (counter != 0) {\n        remainder = (remainder % counter)\
    \ + counter;\n        counter *= 10;\n        roman += (char)('0' + remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    return roman;", "  \
    \  std::string roman;\n    long remainder = number;\n    long temp = 0;\n    long\
    \ romanNum = 0;\n    long romanNumCount = 0;\n    long romanNumCount2 = 0;\n \
    \   long romanNumCount3 = 0;\n    long romanNumCount4 = 0;\n    long romanNumCount5\
    \ = 0;\n    long romanNumCount6 = 0;\n    long romanNumCount7 = 0;\n    long romanNumCount8\
    \ = 0;\n    long romanNumCount9 = 0;\n    long romanNumCount10 = 0;\n    long\
    \ romanNumCount11 = 0;\n    long romanNumCount12 = 0;\n    long romanNumCount13\
    \ = 0;\n    long romanNumCount14 = 0;\n    long romanNumCount15 = 0;\n    long\
    \ romanNumCount16 = 0;\n    long romanNumCount17 = 0;\n    long romanNumCount18\
    \ = 0;\n    long romanNumCount19 = 0;\n    long romanNumCount20 = 0;\n    long\
    \ romanNumCount21 = 0;\n    long romanNumCount22 = 0;\n    long romanNumCount23\
    \ = 0;\n    long romanNumCount24 = 0;\n    long romanNumCount25 = 0;\n    long\
    \ romanNumCount26 = 0;\n    long romanNumCount27 = 0;\n    long romanNumCount28\
    \ = 0;\n    long romanNumCount29 = 0;\n    long romanNumCount30 = 0;\n    long\
    \ romanNumCount31 = 0;\n    long romanNumCount32 = 0;\n    long romanNumCount33\
    \ = 0;\n    long romanNumCount34 = 0;\n    long romanNumCount35 = 0;\n    long\
    \ romanNumCount36 = 0;\n    long romanNumCount37 = 0;\n    long romanNumCount38\
    \ = 0;\n    long romanNumCount39 = 0;\n    long romanNumCount40 = 0;\n    long\
    \ romanNumCount41 = 0;\n    long romanNumCount42 = 0;\n    long romanNumCount43\
    \ = 0;\n    long romanNumCount44 = 0;\n    long romanNumCount45 = 0;\n    long\
    \ romanNumCount46 = 0;\n    long romanNumCount47 = 0;\n    long romanNumCount48\
    \ = 0;\n    long romanNumCount49 = 0;\n    long romanNumCount50 = 0;\n    long\
    \ romanNumCount51 = 0;\n    long romanNumCount52 = 0;\n    long romanNumCount53\
    \ = 0;\n    long romanNumCount54 = 0;\n    long romanNumCount55", "    std::string\
    \ roman;\n    long temp = number;\n    while (temp > 0) {\n        int digit =\
    \ temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(digit - 4, \"M\"\
    )) + std::string(digit - 9, \"CM\");\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = 0;\n    while (number >= 1000) {\n    \
    \    temp = number % 1000;\n        roman += mini_roman[temp];\n        number\
    \ /= 1000;\n    }\n    temp = number;\n    while (temp > 0) {\n        roman +=\
    \ mini_roman[temp % 10];\n        temp /= 10;\n    }\n    return roman;", "  assert(number\
    \ > 0);\n  std::string roman;\n  roman.reserve(number + 1);\n  long num = number;\n\
    \  while (num > 0) {\n    long remainder = num % 10;\n    roman += to_mini_roman_digit(remainder);\n\
    \    num /= 10;\n  }\n  roman[0] = tolower(roman[0]);\n  return roman;", "  assert(number\
    \ >= 1 && number <= 1000);\n  std::string roman;\n  roman.reserve(number + 1);\n\
    \  long num = number;\n  while (num > 0) {\n    long rem = num % 10;\n    roman\
    \ += mini_roman[rem];\n    num /= 10;\n  }\n  roman[0] = roman.at(0);\n  return\
    \ roman;", "    std::string roman;\n    long temp = number;\n    while (temp >\
    \ 0) {\n        long remainder = temp % 10;\n        roman += mini_roman[remainder];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n\
    \        roman += (digit < 4 ? \"\" : std::string(digit - 4, \"IV\")) + std::string(digit\
    \ - 9, \"IX\");\n        temp /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long temp = number;\n    while (temp > 0) {\n        int digit =\
    \ temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(digit - 4, \"\"\
    ));\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp = number;\n    long romanNum = 0;\n    while (temp > 0) {\n   \
    \     romanNum += (temp % 10);\n        temp /= 10;\n    }\n    romanNum = romanNum\
    \ * 100 + number % 100;\n    roman = romanNum.to_string() + roman.to_string();\n\
    \    roman = roman.substr(0, roman.length() - 1);\n    return roman;", "    std::string\
    \ roman;\n    long temp = number;\n    while (temp > 0) {\n        int digit =\
    \ temp % 10;\n        roman += mini_roman[digit];\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long temp;\n    long num;\n    long rem;\n    long romanNum;\n    long romanNumLen;\n\
    \    long romanNumCount;\n    long romanNumCount2;\n    long romanNumCount3;\n\
    \    long romanNumCount4;\n    long romanNumCount5;\n    long romanNumCount6;\n\
    \    long romanNumCount7;\n    long romanNumCount8;\n    long romanNumCount9;\n\
    \    long romanNumCount10;\n    long romanNumCount11;\n    long romanNumCount12;\n\
    \    long romanNumCount13;\n    long romanNumCount14;\n    long romanNumCount15;\n\
    \    long romanNumCount16;\n    long romanNumCount17;\n    long romanNumCount18;\n\
    \    long romanNumCount19;\n    long romanNumCount20;\n    long romanNumCount21;\n\
    \    long romanNumCount22;\n    long romanNumCount23;\n    long romanNumCount24;\n\
    \    long romanNumCount25;\n    long romanNumCount26;\n    long romanNumCount27;\n\
    \    long romanNumCount28;\n    long romanNumCount29;\n    long romanNumCount30;\n\
    \    long romanNumCount31;\n    long romanNumCount32;\n    long romanNumCount33;\n\
    \    long romanNumCount34;\n    long romanNumCount35;\n    long romanNumCount36;\n\
    \    long romanNumCount37;\n    long romanNumCount38;\n    long romanNumCount39;\n\
    \    long romanNumCount40;\n    long romanNumCount41;\n    long romanNumCount42;\n\
    \    long romanNumCount43;\n    long romanNumCount44;\n    long romanNumCount45;\n\
    \    long romanNumCount46;\n    long romanNumCount47;\n    long romanNumCount48;\n\
    \    long romanNumCount49;\n    long romanNumCount50;\n    long romanNumCount51;\n\
    \    long romanNumCount52;\n    long romanNumCount53;\n    long romanNumCount54;\n\
    \    long romanNumCount55;\n    ", "    std::string roman;\n    long num = number;\n\
    \    while (num > 0) {\n        long remainder = num % 10;\n        roman += to_string(static_cast<int>(remainder));\n\
    \        num -= remainder;\n    }\n    return roman;", "    std::string roman\
    \ = \"\";\n    long temp = 0;\n    long num = 0;\n    long num2 = 0;\n    long\
    \ num3 = 0;\n    long num4 = 0;\n    long num5 = 0;\n    long num6 = 0;\n    long\
    \ num7 = 0;\n    long num8 = 0;\n    long num9 = 0;\n    long num10 = 0;\n   \
    \ long num11 = 0;\n    long num12 = 0;\n    long num13 = 0;\n    long num14 =\
    \ 0;\n    long num15 = 0;\n    long num16 = 0;\n    long num17 = 0;\n    long\
    \ num18 = 0;\n    long num19 = 0;\n    long num20 = 0;\n    long num21 = 0;\n\
    \    long num22 = 0;\n    long num23 = 0;\n    long num24 = 0;\n    long num25\
    \ = 0;\n    long num26 = 0;\n    long num27 = 0;\n    long num28 = 0;\n    long\
    \ num29 = 0;\n    long num30 = 0;\n    long num31 = 0;\n    long num32 = 0;\n\
    \    long num33 = 0;\n    long num34 = 0;\n    long num35 = 0;\n    long num36\
    \ = 0;\n    long num37 = 0;\n    long num38 = 0;\n    long num39 = 0;\n    long\
    \ num40 = 0;\n    long num41 = 0;\n    long num42 = 0;\n    long num43 = 0;\n\
    \    long num44 = 0;\n    long num45 = 0;\n    long num46 = 0;\n    long num47\
    \ = 0;\n    long num48 = 0;\n    long num49 = 0;\n    long num50 = 0;\n    long\
    \ num51 = 0;\n    long num52 = 0;\n    long num53 = 0;\n    long num54 = 0;\n\
    \    long num55 = 0;\n    long num56 = 0;\n    long num57 = 0;\n    long num58\
    \ = 0;\n    long num59 = 0;\n    long num60 = 0;\n    long num61 = 0;\n    long\
    \ num62 = 0;\n    long num63 = 0;\n    long num64 = 0;\n    long num65 = 0;\n\
    \    long num66 = 0;\n    long num67 = 0;\n    long num68 = 0;\n    long num69\
    \ = 0;\n    long num70 = 0;\n    long num71 = 0;\n    long num72 = 0;\n    long\
    \ num73 = 0;\n    long num74 = 0;\n    long num75 = 0;\n    long num76 = 0;\n\
    \    long num77 = 0;\n    long num78 = 0;\n    long num79 = 0;\n    long num80\
    \ = 0;\n    long num81 = 0;\n    long num82 = 0;\n    long num83 = 0;\n    long\
    \ num84 = 0;\n    long ", "    std::string roman = \"\";\n    long temp = number;\n\
    \    while (temp > 0) {\n        long remainder = temp % 10;\n        roman +=\
    \ mini_roman[remainder];\n        temp /= 10;\n    }\n    return roman;", "  \
    \  std::string roman;\n    long num = number;\n    long roman_num = 0;\n    long\
    \ roman_num_temp = 0;\n    long roman_num_temp2 = 0;\n    long roman_num_temp3\
    \ = 0;\n    long roman_num_temp4 = 0;\n    long roman_num_temp5 = 0;\n    long\
    \ roman_num_temp6 = 0;\n    long roman_num_temp7 = 0;\n    long roman_num_temp8\
    \ = 0;\n    long roman_num_temp9 = 0;\n    long roman_num_temp10 = 0;\n    long\
    \ roman_num_temp11 = 0;\n    long roman_num_temp12 = 0;\n    long roman_num_temp13\
    \ = 0;\n    long roman_num_temp14 = 0;\n    long roman_num_temp15 = 0;\n    long\
    \ roman_num_temp16 = 0;\n    long roman_num_temp17 = 0;\n    long roman_num_temp18\
    \ = 0;\n    long roman_num_temp19 = 0;\n    long roman_num_temp20 = 0;\n    long\
    \ roman_num_temp21 = 0;\n    long roman_num_temp22 = 0;\n    long roman_num_temp23\
    \ = 0;\n    long roman_num_temp24 = 0;\n    long roman_num_temp25 = 0;\n    long\
    \ roman_num_temp26 = 0;\n    long roman_num_temp27 = 0;\n    long roman_num_temp28\
    \ = 0;\n    long roman_num_temp29 = 0;\n    long roman_num_temp30 = 0;\n    long\
    \ roman_num_temp31 = 0;\n    long roman_num_temp32 = 0;\n    long roman_num_temp33\
    \ = 0;\n    long roman_num_temp34 = 0;\n    long roman_num_temp35 = 0;\n    long\
    \ roman_num_temp36 = 0;\n    long roman_num_temp37 = 0;\n    long roman_num_temp38\
    \ = 0;\n    long roman_num_temp39 = 0;\n    long roman_num_temp40 = 0;\n    long\
    \ roman_num_temp41 = 0;\n    long roman_num_temp42 = 0;\n    long roman_num_temp43\
    \ = 0;\n    long roman_num_temp44 = 0;\n    long roman_num_temp45 = 0;\n    long\
    \ roman_num_temp46 = 0;\n    long roman_num_temp47 = 0;\n    long roman_num_temp48\
    \ = 0;\n    long roman_num_temp49 = 0;\n    long roman_num_temp50 = 0;\n    long\
    \ roman_num_temp51 = 0;\n    long roman_num_temp52 = 0;\n    long roman_num_temp53\
    \ = 0;\n    long roman_num_temp54 = 0;\n    long roman_num_temp55 = 0;\n    long\
    \ roman_", "  assert(number > 0);\n  std::string roman;\n  long num = number;\n\
    \  while (num > 0) {\n    long remainder = num % 10;\n    roman += mini_roman[remainder];\n\
    \    num /= 10;\n  }\n  return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  long nums[] = {0, 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n  for (int i = 0; i < 10; i++) {\n    if (number >= nums[i]) {\n   \
    \   long rest = number % nums[i];\n      roman.append(to_string(nums[i]));\n \
    \     roman.append(to_string(nums[i - 1]));\n      roman.append(to_string(rest));\n\
    \      number /= nums[i];\n    } else {\n      roman.append(to_string(nums[i]));\n\
    \      roman.append(to_string(nums[i - 1]));\n      roman.append(to_string(number));\n\
    \      break;\n    }\n  }\n  return roman;", "    std::string roman;\n    long\
    \ remainder = number;\n    int counter = 0;\n    while (number != 0) {\n     \
    \   remainder = number % 10;\n        roman = to_string(counter) + to_string(static_cast<int>(remainder));\n\
    \        number /= 10;\n        ++counter;\n    }\n    return roman;", "    std::string\
    \ roman;\n    if (number == 0)\n        roman = \"0\";\n    else if (number <\
    \ 0)\n        roman = \"-\" + int_to_mini_roman(-number);\n    else {\n      \
    \  long temp = 0;\n        while (number >= 1000) {\n            number -= 1000;\n\
    \            temp += 500;\n        }\n        while (number >= 100) {\n      \
    \      number -= 100;\n            temp += 400;\n        }\n        while (number\
    \ >= 10) {\n            number -= 10;\n            temp += 300;\n        }\n \
    \       while (number >= 1) {\n            number -= 1;\n            temp += 200;\n\
    \        }\n        roman += to_string(temp);\n    }\n    return roman;", "  \
    \  std::string roman;\n    long num;\n    long num1;\n    long num2;\n    long\
    \ num3;\n    long num4;\n    long num5;\n    long num6;\n    long num7;\n    long\
    \ num8;\n    long num9;\n    long num10;\n    long num11;\n    long num12;\n \
    \   long num13;\n    long num14;\n    long num15;\n    long num16;\n    long num17;\n\
    \    long num18;\n    long num19;\n    long num20;\n    long num21;\n    long\
    \ num22;\n    long num23;\n    long num24;\n    long num25;\n    long num26;\n\
    \    long num27;\n    long num28;\n    long num29;\n    long num30;\n    long\
    \ num31;\n    long num32;\n    long num33;\n    long num34;\n    long num35;\n\
    \    long num36;\n    long num37;\n    long num38;\n    long num39;\n    long\
    \ num40;\n    long num41;\n    long num42;\n    long num43;\n    long num44;\n\
    \    long num45;\n    long num46;\n    long num47;\n    long num48;\n    long\
    \ num49;\n    long num50;\n    long num51;\n    long num52;\n    long num53;\n\
    \    long num54;\n    long num55;\n    long num56;\n    long num57;\n    long\
    \ num58;\n    long num59;\n    long num60;\n    long num61;\n    long num62;\n\
    \    long num63;\n    long num64;\n    long num65;\n    long num66;\n    long\
    \ num67;\n    long num68;\n    long num69;\n    long num70;\n    long num71;\n\
    \    long num72;\n    long num73;\n    long num74;\n    long num75;\n    long\
    \ num76;\n    long num77;\n    long num78;\n    long num79;\n    long num80;\n\
    \    long num81;\n    long num82;\n    long num83;\n    long num84;\n    long\
    \ num85;\n    long num86;\n    long num87;", "    std::string roman;\n    long\
    \ num = number;\n    long num1 = num % 10;\n    long num2 = num / 10;\n    long\
    \ num3 = num % 100;\n    long num4 = num / 100;\n    long num5 = num % 1000;\n\
    \    long num6 = num / 1000;\n    long num7 = num % 10000;\n    long num8 = num\
    \ / 10000;\n    long num9 = num % 100000;\n    long num10 = num / 100000;\n  \
    \  long num11 = num % 1000000;\n    long num12 = num / 1000000;\n    long num13\
    \ = num % 10000000;\n    long num14 = num / 10000000;\n    long num15 = num %\
    \ 1000000000;\n    long num16 = num / 1000000000;\n    long num17 = num % 10000000000;\n\
    \    long num18 = num / 10000000000;\n    long num19 = num % 100000000000;\n \
    \   long num20 = num / 100000000000;\n    long num21 = num % 10000000000000;\n\
    \    long num22 = num / 10000000000000;\n    long num23 = num % 100000000000000;\n\
    \    long num24 = num / 100000000000000;\n    long num25 = num % 1000000000000000;\n\
    \    long num26 = num / 1000000000000000;\n    long num27 = num % 100000000000000000;\n\
    \    long num28 = num / 100000000000000000;\n    long num29 = num % 100000000000000000;\n\
    \    long num30 = num / 100000000000000000;\n    long num31 = num % 1000000000000000000;\n\
    \    long num32 = num / 1000000000000000000;\n    long num33 = num % 10000000000000000000;\n\
    \    long num34 = num / 10000000000000000000;\n    long num35 = num % 100000000000000000000;\n\
    \    long num36 = num / 100000000000000000000;\n    long num37 = num % 10000000000000000000000;\n\
    \    long num38 = num / 10000000000000000000000;\n    long num39 = num % 100000000000000000000000;\n\
    \    long num40 = num / 100000000000000000000000;\n    long num41 = num % 10000000000000000000000000;\n\
    \    long num42 = num / 10000000000000000000000000;\n    long num43 = num % 100000000000000000000000000;\n\
    \    long num44 = num / 100000000000000000000000000;\n    long num45 = num % 1000000000000000000000000000;\n\
    \    long num46 = num / 1000000000000000000000000000;\n    long num47 = ", " \
    \   std::string roman;\n    long temp = number;\n    while (temp > 0) {\n    \
    \    long mod = temp % 10;\n        roman += (mod < 4 ? to_string(mod) : \"M\"\
    );\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp = number;\n    long romanNum = 0;\n    while (temp > 0) {\n   \
    \     romanNum += (temp % 10);\n        temp /= 10;\n    }\n    if (romanNum >\
    \ 0) {\n        roman = int_to_mini_roman(romanNum);\n    }\n    roman = roman.to_string()\
    \ + roman;\n    roman = roman.substr(0, roman.length() - 1);\n    return roman;",
  "    std::string roman = \"\";\n    long temp = number;\n    while (temp > 0) {\n\
    \        int digit = temp % 10;\n        roman += mini_roman[digit];\n       \
    \ temp /= 10;\n    }\n    return roman;", "    std::string roman = \"\";\n   \
    \ long temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp\
    \ % 10];\n        temp /= 10;\n    }\n    return roman;", "    std::string roman\
    \ = \"\";\n    long temp = number;\n    while (temp > 0) {\n        int remainder\
    \ = temp % 10;\n        roman += (char)('M' + remainder);\n        temp /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        long mod = temp % 10;\n        roman += (mod\
    \ < 4 ? \"\" : (mod < 7 ? \"\" : \"c\")) + mod;\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman = \"\";\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  roman.reserve(number + 1);\n  long temp = number;\n  while (temp >\
    \ 0) {\n    long mod = temp % 10;\n    roman += mini_roman[mod];\n    temp /=\
    \ 10;\n  }\n  roman[0] = roman[0].upper();\n  return roman;", "    std::string\
    \ roman;\n    long num = number;\n    long num1 = num;\n    long num2 = num;\n\
    \    long num3 = num;\n    long num4 = num;\n    long num5 = num;\n    long num6\
    \ = num;\n    long num7 = num;\n    long num8 = num;\n    long num9 = num;\n \
    \   long num10 = num;\n    long num11 = num;\n    long num12 = num;\n    long\
    \ num13 = num;\n    long num14 = num;\n    long num15 = num;\n    long num16 =\
    \ num;\n    long num17 = num;\n    long num18 = num;\n    long num19 = num;\n\
    \    long num20 = num;\n    long num21 = num;\n    long num22 = num;\n    long\
    \ num23 = num;\n    long num24 = num;\n    long num25 = num;\n    long num26 =\
    \ num;\n    long num27 = num;\n    long num28 = num;\n    long num29 = num;\n\
    \    long num30 = num;\n    long num31 = num;\n    long num32 = num;\n    long\
    \ num33 = num;\n    long num34 = num;\n    long num35 = num;\n    long num36 =\
    \ num;\n    long num37 = num;\n    long num38 = num;\n    long num39 = num;\n\
    \    long num40 = num;\n    long num41 = num;\n    long num42 = num;\n    long\
    \ num43 = num;\n    long num44 = num;\n    long num45 = num;\n    long num46 =\
    \ num;\n    long num47 = num;\n    long num48 = num;\n    long num49 = num;\n\
    \    long num50 = num;\n    long num51 = num;\n    long num52 = num;\n    long\
    \ num53 = num;\n    long num54 = num;\n    long num55 = num;\n    long num56 =\
    \ num;\n    long num57 = num;\n    long num58 = num;\n    long num59 = num;\n\
    \    long num60 = num;\n    long num61 = num;\n    long num62 = num;\n    long\
    \ num63 = num;\n    long num64 = num;\n    ", "    std::string roman;\n    long\
    \ temp = number;\n    while (temp > 0) {\n        long remainder = temp % 10;\n\
    \        roman += mini_roman[remainder];\n        temp /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long num = number;\n    while (num > 0)\
    \ {\n        int digit = num % 10;\n        roman += (digit < 4 ? \"\" : std::string(1,\
    \ \"M\") + std::string(digit - 4, \"\"));\n        num /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long temp = number;\n    while (temp >\
    \ 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long n = number;\n    long m = 1000;\n    long r = 1;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp", "    std::string roman;\n    long n = number;\n    long m = 1;\n\
    \    while (n > 0) {\n        long r = n % 10;\n        roman = roman.substr(0,\
    \ roman.length() - 1) + roman_map[r];\n        n = n / 10;\n    }\n    if (roman.length()\
    \ == 0) {\n        roman = \"0\";\n    }\n    return roman;", "  assert(number\
    \ >= 1 && number <= 1000);\n  std::string roman;\n  roman.reserve(number + 1);\n\
    \  long num = number;\n  while (num > 0) {\n    long mod = num % 10;\n    roman\
    \ += (mod < 4 ? \"\" : std::to_string(mod)) + std::to_string(num / 10);\n    num\
    \ %= 10;\n  }\n  return roman;", "    std::string roman = \"\";\n    long temp\
    \ = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        roman\
    \ += int_to_mini_roman_digit(digit);\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = 0;\n    while (number >= 1000) {\n    \
    \    temp = number % 1000;\n        roman += mini_roman[temp];\n        number\
    \ /= 1000;\n    }\n    temp = number;\n    while (temp > 0) {\n        roman +=\
    \ mini_roman[temp % 10];\n        temp /= 10;\n    }\n    return roman;", "  \
    \  std::string roman;\n    long num = 0;\n    while (number > 0) {\n        roman\
    \ = roman.substr(0, roman.length() - 1) + to_string(number % 10) + roman.substr(roman.length()\
    \ - 1);\n        number /= 10;\n    }\n    if (number == 0) {\n        roman =\
    \ roman.substr(0, roman.length() - 1) + to_string(number) + roman.substr(roman.length()\
    \ - 1);\n    }\n    return roman;", "    std::string roman;\n    if (number <\
    \ 0)\n        throw std::invalid_argument(\"Invalid input\");\n    long nums[]\
    \ = { 1000, 500, 100, 50, 10, 5, 1, 1 };\n    long sum = 0;\n    while (number\
    \ >= nums[sum]) {\n        sum += nums[sum];\n        roman.append(1, nums[sum]);\n\
    \    }\n    roman.append(1, number % nums[sum]);\n    return roman;", "    std::string\
    \ roman;\n    if (number == 0) {\n        roman = \"0\";\n    } else if (number\
    \ < 3999) {\n        roman = \"x\";\n    } else if (number < 9999) {\n       \
    \ roman = \"c\";\n    } else if (number < 49999) {\n        roman = \"dx\";\n\
    \    } else if (number < 99999) {\n        roman = \"i\";\n    } else if (number\
    \ < 999999) {\n        roman = \"ii\";\n    } else if (number < 9999999) {\n \
    \       roman = \"iii\";\n    } else if (number < 999999999) {\n        roman\
    \ = \"iv\";\n    } else if (number < 99999999999) {\n        roman = \"v\";\n\
    \    } else if (number < 999999999999) {\n        roman = \"vi\";\n    } else\
    \ if (number < 999999999999999) {\n        roman = \"vii\";\n    } else if (number\
    \ < 999999999999999999) {\n        roman = \"viii\";\n    } else if (number <\
    \ 999999999999999999999) {\n        roman = \"ix\";\n    } else if (number < 999999999999999999999)\
    \ {\n        roman = \"x\";\n    } else if (number < 999999999999999999999) {\n\
    \        roman = \"x\";\n    } else if (number < 999999999999999999999) {\n  \
    \      roman = \"x\";\n    } else if (number < 999999999999999999999) {\n    \
    \    roman = \"x\";\n    } else if (number < 999999999999999999999) {\n      \
    \  roman = \"x\";\n    } else if (number < 999999999999999999999) {\n        roman\
    \ = \"x\";\n    } else if (number < 999999999999999999999) {\n        roman =\
    \ \"x\";\n    } else if (number < 999999999999999999999) {\n        roman = \"\
    x\";\n    } else if (number < 999999999999999999999) {\n        roman = \"x\"\
    ;\n    } else if (number < 999999999999999999999) {\n        roman = \"x\";\n\
    \    } else if (number < 999999999999999999999) {\n        roman = \"x\";\n  \
    \  } else if (number < 999999999999999999999) {\n        roman = \"x\";\n    }\
    \ else if (number < 999999999999999999999) {\n        roman = \"x\";\n    } else\
    \ if (number < 999999999999999999999) {\n        roman = \"x\";\n    } else if\
    \ (number < 999999999999999999999) {\n        roman = \"x\";\n    } else if (number\
    \ < 999999999999999999999) {\n        roman = \"x\";\n    } else if (number <\
    \ 999999999999999999999) {\n        roman = \"x\";\n    } else if (number < 999999999999999999999)\
    \ {\n        roman = \"x\";\n    } else if (number < 999999999999999999999) {\n\
    \        roman = \"x\";\n    } else if (number < 999999999999999999999) {\n  \
    \      roman = \"x", "  assert(number > 0);\n  std::string roman;\n  long temp\
    \ = number;\n  while (temp > 0) {\n    long mod = temp % 1000;\n    temp = temp\
    \ / 1000;\n    if (mod >= 100) {\n      roman += to_string(mod);\n      roman\
    \ += \"M\";\n    } else if (mod >= 10) {\n      roman += to_string(mod);\n   \
    \   roman += \"CM\";\n    } else if (mod >= 1) {\n      roman += to_string(mod);\n\
    \      roman += \"D\";\n    } else {\n      roman += to_string(mod);\n      roman\
    \ += \"CD\";\n    }\n  }\n  return roman;", "  std::string roman = \"\";\n  long\
    \ n = number;\n  while (n) {\n    roman += (n % 10) + \"\";\n    n /= 10;\n  }\n\
    \  std::reverse(roman.begin(), roman.end());\n  return roman;", "    std::string\
    \ roman;\n    long num = (number < 0) ? -number : number;\n    long num2 = num;\n\
    \    long num3 = num;\n    long num4 = num;\n    long num5 = num;\n    long num6\
    \ = num;\n    long num7 = num;\n    long num8 = num;\n    long num9 = num;\n \
    \   long num10 = num;\n    long num11 = num;\n    long num12 = num;\n    long\
    \ num13 = num;\n    long num14 = num;\n    long num15 = num;\n    long num16 =\
    \ num;\n    long num17 = num;\n    long num18 = num;\n    long num19 = num;\n\
    \    long num20 = num;\n    long num21 = num;\n    long num22 = num;\n    long\
    \ num23 = num;\n    long num24 = num;\n    long num25 = num;\n    long num26 =\
    \ num;\n    long num27 = num;\n    long num28 = num;\n    long num29 = num;\n\
    \    long num30 = num;\n    long num31 = num;\n    long num32 = num;\n    long\
    \ num33 = num;\n    long num34 = num;\n    long num35 = num;\n    long num36 =\
    \ num;\n    long num37 = num;\n    long num38 = num;\n    long num39 = num;\n\
    \    long num40 = num;\n    long num41 = num;\n    long num42 = num;\n    long\
    \ num43 = num;\n    long num44 = num;\n    long num45 = num;\n    long num46 =\
    \ num;\n    long num47 = num;\n    long num48 = num;\n    long num49 = num;\n\
    \    long num50 = num;\n    long num51 = num;\n    long num52 = num;\n    long\
    \ num53 = num;\n    long num54 = num;\n    long num55 = num;\n    long num56 =\
    \ num;\n    long num57 = num;\n    long num58 = num;\n    long num59 = num;\n\
    \    long num60 = num;\n    long num61 = num;\n    long num62 = num;\n    long\
    \ num63 = num;\n    long num64 = num;\n    ", "    std::string roman;\n    long\
    \ temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n   \
    \     roman += mini_roman[digit];\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   int digit = temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(digit\
    \ - 4, \"M\")) + std::string(digit - 9, \"CM\");\n        temp /= 10;\n    }\n\
    \    return roman;", "  assert(number > 0);\n  std::string roman;\n  roman.reserve(number\
    \ + 1);\n  long nums[] = {0, 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n  for (int i = 0; i < number; i++) {\n    roman += nums[number - i - 1];\n\
    \  }\n  return roman;", "    std::string roman;\n    long num = (number < 0) ?\
    \ -number : number;\n    long num1 = num;\n    long num2 = num;\n    long num3\
    \ = num;\n    long num4 = num;\n    long num5 = num;\n    long num6 = num;\n \
    \   long num7 = num;\n    long num8 = num;\n    long num9 = num;\n    long num10\
    \ = num;\n    long num11 = num;\n    long num12 = num;\n    long num13 = num;\n\
    \    long num14 = num;\n    long num15 = num;\n    long num16 = num;\n    long\
    \ num17 = num;\n    long num18 = num;\n    long num19 = num;\n    long num20 =\
    \ num;\n    long num21 = num;\n    long num22 = num;\n    long num23 = num;\n\
    \    long num24 = num;\n    long num25 = num;\n    long num26 = num;\n    long\
    \ num27 = num;\n    long num28 = num;\n    long num29 = num;\n    long num30 =\
    \ num;\n    long num31 = num;\n    long num32 = num;\n    long num33 = num;\n\
    \    long num34 = num;\n    long num35 = num;\n    long num36 = num;\n    long\
    \ num37 = num;\n    long num38 = num;\n    long num39 = num;\n    long num40 =\
    \ num;\n    long num41 = num;\n    long num42 = num;\n    long num43 = num;\n\
    \    long num44 = num;\n    long num45 = num;\n    long num46 = num;\n    long\
    \ num47 = num;\n    long num48 = num;\n    long num49 = num;\n    long num50 =\
    \ num;\n    long num51 = num;\n    long num52 = num;\n    long num53 = num;\n\
    \    long num54 = num;\n    long num55 = num;\n    long num56 = num;\n    long\
    \ num57 = num;\n    long num58 = num;\n    long num59 = num;\n    long num60 =\
    \ num;\n    long num61 = num;\n    long num62 = num;\n    long num63 = num;\n\
    \    long ", "    std::string roman;\n    long temp;\n    long num;\n    long\
    \ rem;\n    long nums[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\
    \    long romans[] = {1, 5, 10, 50, 100, 500, 1000, 50};\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_rev[1000];\n    long romans_rev[1000];\n\
    \    long romans_rev[1000];\n    long romans_", "    std::string roman;\n    long\
    \ temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n   \
    \     roman += (digit < 4 ? \"\" : std::to_string(digit));\n        temp /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    while (num > 0) {\n        int digit = num % 10;\n        roman += (digit\
    \ < 4 ? \"\" : std::string(digit - 4, \"M\")) + std::string(digit - 9, \"CM\"\
    );\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n \
    \   long temp = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n\
    \        roman += mini_roman[digit];\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp;\n    long num;\n    long rem;\n    long\
    \ temp2;\n    long num2;\n    long rem;2;\n    long temp3;\n    long num3;\n \
    \   long rem;3;\n    long temp4;\n    long num4;\n    long rem;4;\n    long temp5;\n\
    \    long num5;\n    long rem;5;\n    long temp6;\n    long num6;\n    long rem;6;\n\
    \    long temp7;\n    long num7;\n    long rem;7;\n    long temp8;\n    long num8;\n\
    \    long rem;8;\n    long temp9;\n    long num9;\n    long rem;9;\n    long temp10;\n\
    \    long num10;\n    long rem;10;\n    long temp11;\n    long num11;\n    long\
    \ rem;11;\n    long temp12;\n    long num12;\n    long rem;12;\n    long temp13;\n\
    \    long num13;\n    long rem;13;\n    long temp14;\n    long num14;\n    long\
    \ rem;14;\n    long temp15;\n    long num15;\n    long rem;15;\n    long temp16;\n\
    \    long num16;\n    long rem;16;\n    long temp17;\n    long num17;\n    long\
    \ rem;17;\n    long temp18;\n    long num18;\n    long rem;18;\n    long temp19;\n\
    \    long num19;\n    long rem;19;\n    long temp20;\n    long num20;\n    long\
    \ rem;20;\n    long temp21;\n    long num21;\n    long rem;21;\n    long temp22;\n\
    \    long num22;\n    long rem;22;\n    long temp23;\n    long num23;\n    long\
    \ rem;23;\n    long temp24;\n    long num24;\n    long rem;24;\n    long temp25;\n\
    \    long num25;\n    long rem;25;\n    long temp26;\n    long num26;\n    long\
    \ rem;26;\n    long temp27;\n    long num27;\n    long rem;27;\n    long temp28;\n\
    \    long num28;\n    long rem;28;\n    long temp29;\n    long num29;\n    long\
    \ rem;29;\n    long temp30;\n    long num30;\n    long rem;30;\n    long temp31;\n\
    \    long num31;\n    long rem;31;\n", "    std::string roman;\n    long temp\
    \ = number;\n    while (temp > 0) {\n        int remainder = temp % 10;\n    \
    \    roman += mini_roman[remainder];\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   roman += mini_roman[temp % 10];\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman = \"\";\n    long num = number;\n    while (num > 0) {\n\
    \        roman += int_to_roman(num % 10);\n        num /= 10;\n    }\n    return\
    \ roman;", "  assert(number > 0);\n  std::string roman;\n  long remainder = number;\n\
    \  int counter = 0;\n  while (counter < 1000) {\n    if (remainder >= 1000) {\n\
    \      remainder -= 1000;\n      roman += \"M\";\n      counter++;\n    }\n  \
    \  if (remainder >= 500) {\n      remainder -= 500;\n      roman += \"CM\";\n\
    \      counter++;\n    }\n    if (remainder >= 100) {\n      remainder -= 100;\n\
    \      roman += \"D\";\n      counter++;\n    }\n    if (remainder >= 50) {\n\
    \      remainder -= 50;\n      roman += \"CD\";\n      counter++;\n    }\n   \
    \ if (remainder >= 10) {\n      remainder -= 10;\n      roman += \"C\";\n    \
    \  counter++;\n    }\n    if (remainder >= 5) {\n      remainder -= 5;\n     \
    \ roman += \"XC\";\n      counter++;\n    }\n    if (remainder >= 1) {\n     \
    \ remainder -= 1;\n      roman += \"L\";\n      counter++;\n    }\n    if (remainder\
    \ >= 0.5) {\n      remainder -= 0.5;\n      roman += \"XL\";\n      counter++;\n\
    \    }\n    if (remainder >= 0.25) {\n      remainder -= 0.25;\n      roman +=\
    \ \"X\";\n      counter++;\n    }\n    if (remainder >= 0.1) {\n      remainder\
    \ -= 0.1;\n      roman += \"IX\";\n      counter++;\n    }\n    if (remainder\
    \ >= 0.05) {\n      remainder -= 0.05;\n      roman += \"V\";\n      counter++;\n\
    \    }\n    if (remainder >= 0.01) {\n      remainder -= 0.01;\n      roman +=\
    \ \"IV\";\n      counter++;\n    }\n    if (remainder >= 0.001) {\n      remainder\
    \ -= 0.001;\n      roman += \"I\";\n      counter++;\n    }\n  }\n  return roman;",
  "    std::string roman;\n    long n = number;\n    long m = n;\n    while (m !=\
    \ 0) {\n        long r = m % 10;\n        roman = roman.insert(roman.begin(),\
    \ static_cast<char>(r));\n        m /= 10;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long num = number;\n    while (num > 0) {\n        long remainder\
    \ = num % 10;\n        roman += mini_roman[remainder];\n        num /= 10;\n \
    \   }\n    return roman;", "    std::string roman;\n    long num = number;\n \
    \   while (num > 0) {\n        long remainder = num % 10;\n        roman += (char)('M'\
    \ + remainder);\n        num -= remainder;\n    }\n    return roman;", "    std::string\
    \ roman;\n    if (number == 0) return roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long temp = number;\n    long roman_num = 0;\n    long roman_den = 1;\n    while\
    \ (temp > 0) {\n        roman_num += temp % 10;\n        temp /= 10;\n       \
    \ roman_den *= 10;\n    }\n    roman_num += roman_den;\n    roman.reserve(roman_num);\n\
    \    while (roman_num > 0) {\n        roman += (number % roman_den) + 48;\n  \
    \      number /= roman_den;\n        roman_num /= 10;\n        roman_den *= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num = number;\n\
    \    long romanNum = 0;\n    long romanNumCount = 0;\n    long romanNumCount2\
    \ = 0;\n    long romanNumCount3 = 0;\n    long romanNumCount4 = 0;\n    long romanNumCount5\
    \ = 0;\n    long romanNumCount6 = 0;\n    long romanNumCount7 = 0;\n    long romanNumCount8\
    \ = 0;\n    long romanNumCount9 = 0;\n    long romanNumCount10 = 0;\n    long\
    \ romanNumCount11 = 0;\n    long romanNumCount12 = 0;\n    long romanNumCount13\
    \ = 0;\n    long romanNumCount14 = 0;\n    long romanNumCount15 = 0;\n    long\
    \ romanNumCount16 = 0;\n    long romanNumCount17 = 0;\n    long romanNumCount18\
    \ = 0;\n    long romanNumCount19 = 0;\n    long romanNumCount20 = 0;\n    long\
    \ romanNumCount21 = 0;\n    long romanNumCount22 = 0;\n    long romanNumCount23\
    \ = 0;\n    long romanNumCount24 = 0;\n    long romanNumCount25 = 0;\n    long\
    \ romanNumCount26 = 0;\n    long romanNumCount27 = 0;\n    long romanNumCount28\
    \ = 0;\n    long romanNumCount29 = 0;\n    long romanNumCount30 = 0;\n    long\
    \ romanNumCount31 = 0;\n    long romanNumCount32 = 0;\n    long romanNumCount33\
    \ = 0;\n    long romanNumCount34 = 0;\n    long romanNumCount35 = 0;\n    long\
    \ romanNumCount36 = 0;\n    long romanNumCount37 = 0;\n    long romanNumCount38\
    \ = 0;\n    long romanNumCount39 = 0;\n    long romanNumCount40 = 0;\n    long\
    \ romanNumCount41 = 0;\n    long romanNumCount42 = 0;\n    long romanNumCount43\
    \ = 0;\n    long romanNumCount44 = 0;\n    long romanNumCount45 = 0;\n    long\
    \ romanNumCount46 = 0;\n    long romanNumCount47 = 0;\n    long romanNumCount48\
    \ = 0;\n    long romanNumCount49 = 0;\n    long romanNumCount50 = 0;\n    long\
    \ romanNumCount51 = 0;\n    long romanNumCount52 = 0;\n    long romanNumCount53\
    \ = 0;\n    long romanNumCount54 = 0;\n    long romanNumCount55 = 0;\n    long\
    \ roman", "    std::string roman = \"\";\n    long remainder = number;\n    long\
    \ counter = 1;\n    while (remainder > 0) {\n        remainder = remainder / 10;\n\
    \        roman += std::to_string(counter);\n        counter++;\n    }\n    return\
    \ roman;", "    std::string roman = \"\";\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long n = number;\n    while (n != 0) {\n        long remainder = n % 10;\n \
    \       n /= 10;\n        roman += mini_roman[remainder];\n    }\n    return roman;",
  "    std::string roman;\n    long num = (number < 0) ? -number : number;\n    long\
    \ num2 = num % 10;\n    long num3 = num / 10;\n    long num4 = num % 100;\n  \
    \  long num5 = num / 100;\n    long num6 = num % 1000;\n    long num7 = num /\
    \ 1000;\n    long num8 = num % 10000;\n    long num9 = num / 10000;\n    long\
    \ num10 = num % 100000;\n    long num11 = num / 100000;\n    long num12 = num\
    \ % 1000000;\n    long num13 = num / 1000000;\n    long num14 = num % 10000000;\n\
    \    long num15 = num / 10000000;\n    long num16 = num % 1000000000;\n    long\
    \ num17 = num / 1000000000;\n    long num18 = num % 10000000000;\n    long num19\
    \ = num / 10000000000;\n    long num20 = num % 100000000000;\n    long num21 =\
    \ num / 100000000000;\n    long num22 = num % 1000000000000;\n    long num23 =\
    \ num / 1000000000000;\n    long num24 = num % 10000000000000;\n    long num25\
    \ = num / 10000000000000;\n    long num26 = num % 100000000000000;\n    long num27\
    \ = num / 100000000000000;\n    long num28 = num % 1000000000000000;\n    long\
    \ num29 = num / 1000000000000000;\n    long num30 = num % 100000000000000000;\n\
    \    long num31 = num / 100000000000000000;\n    long num32 = num % 1000000000000000000;\n\
    \    long num33 = num / 1000000000000000000;\n    long num34 = num % 10000000000000000000;\n\
    \    long num35 = num / 10000000000000000000;\n    long num36 = num % 100000000000000000000;\n\
    \    long num37 = num / 100000000000000000000;\n    long num38 = num % 1000000000000000000000;\n\
    \    long num39 = num / 1000000000000000000000;\n    long num40 = num % 10000000000000000000000;\n\
    \    long num41 = num / 10000000000000000000000;\n    long num42 = num % 100000000000000000000000;\n\
    \    long num43 = num / 100000000000000000000000;\n    long num44 = num % 10000000000000000000000000;\n\
    \    long num45 = num / 10000000000000000000000000;\n    long num46 = num % 100000000000000000000000000;\n\
    \    long num47 = num / 100000000000000000000000000;", "  assert(number > 0);\n\
    \  std::string roman;\n  roman.reserve(number + 1);\n  long num = 0;\n  while\
    \ (number > 0) {\n    long remainder = number % 10;\n    roman.push_back(remainder\
    \ + '0');\n    number /= 10;\n  }\n  roman.push_back('0');\n  roman = roman.substr(0,\
    \ roman.size() - 1);\n  roman = roman.substr(0, roman.size() - 1);\n  return roman;",
  "    std::string roman;\n    long num = (number < 0) ? -number : number;\n    long\
    \ num2 = num % 10;\n    long num3 = num / 10;\n    long num4 = num % 100;\n  \
    \  long num5 = num / 100;\n    long num6 = num % 1000;\n    long num7 = num /\
    \ 1000;\n    long num8 = num % 10000;\n    long num9 = num / 10000;\n    long\
    \ num10 = num % 100000;\n    long num11 = num / 100000;\n    long num12 = num\
    \ % 1000000;\n    long num13 = num / 1000000;\n    long num14 = num % 10000000;\n\
    \    long num15 = num / 10000000;\n    long num16 = num % 1000000000;\n    long\
    \ num17 = num / 1000000000;\n    long num18 = num % 10000000000;\n    long num19\
    \ = num / 10000000000;\n    long num20 = num % 100000000000;\n    long num21 =\
    \ num / 100000000000;\n    long num22 = num % 10000000000000;\n    long num23\
    \ = num / 10000000000000;\n    long num24 = num % 100000000000000;\n    long num25\
    \ = num / 100000000000000;\n    long num26 = num % 1000000000000000;\n    long\
    \ num27 = num / 1000000000000000;\n    long num28 = num % 100000000000000000;\n\
    \    long num29 = num / 100000000000000000;\n    long num30 = num % 1000000000000000000;\n\
    \    long num31 = num / 1000000000000000000;\n    long num32 = num % 10000000000000000000;\n\
    \    long num33 = num / 10000000000000000000;\n    long num34 = num % 100000000000000000000;\n\
    \    long num35 = num / 100000000000000000000;\n    long num36 = num % 10000000000000000000000;\n\
    \    long num37 = num / 10000000000000000000000;\n    long num38 = num % 100000000000000000000000;\n\
    \    long num39 = num / 100000000000000000000000;\n    long num40 = num % 10000000000000000000000000;\n\
    \    long num41 = num / 10000000000000000000000000;\n    long num42 = num % 100000000000000000000000000;\n\
    \    long num43 = num / 100000000000000000000000000;\n    long num44 = num % 1000000000000000000000000000;\n\
    \    long num45 = num / 1000000000000000000000000000;\n    long num46 = num %\
    \ 100000000000000000000000000000;\n    long num47 = num / 100", "    std::string\
    \ roman;\n    long temp;\n    long num;\n    long num1;\n    long num2;\n    long\
    \ num3;\n    long num4;\n    long num5;\n    long num6;\n    long num7;\n    long\
    \ num8;\n    long num9;\n    long num10;\n    long num11;\n    long num12;\n \
    \   long num13;\n    long num14;\n    long num15;\n    long num16;\n    long num17;\n\
    \    long num18;\n    long num19;\n    long num20;\n    long num21;\n    long\
    \ num22;\n    long num23;\n    long num24;\n    long num25;\n    long num26;\n\
    \    long num27;\n    long num28;\n    long num29;\n    long num30;\n    long\
    \ num31;\n    long num32;\n    long num33;\n    long num34;\n    long num35;\n\
    \    long num36;\n    long num37;\n    long num38;\n    long num39;\n    long\
    \ num40;\n    long num41;\n    long num42;\n    long num43;\n    long num44;\n\
    \    long num45;\n    long num46;\n    long num47;\n    long num48;\n    long\
    \ num49;\n    long num50;\n    long num51;\n    long num52;\n    long num53;\n\
    \    long num54;\n    long num55;\n    long num56;\n    long num57;\n    long\
    \ num58;\n    long num59;\n    long num60;\n    long num61;\n    long num62;\n\
    \    long num63;\n    long num64;\n    long num65;\n    long num66;\n    long\
    \ num67;\n    long num68;\n    long num69;\n    long num70;\n    long num71;\n\
    \    long num72;\n    long num73;\n    long num74;\n    long num75;\n    long\
    \ num76;\n    long num77;\n    long num78;\n    long num79;\n    long num80;\n\
    \    long num81;\n    long num82;\n    long num83;\n    long num84;\n    long\
    \ num85;\n    long num86;\n", "    std::string roman = \"\";\n    long temp =\
    \ 0;\n    long num = 0;\n    while (number > 0) {\n        temp = number % 10;\n\
    \        roman += temp_to_mini_roman(temp);\n        number /= 10;\n    }\n  \
    \  return roman;", "    std::string roman;\n    long n = number;\n    long m =\
    \ 1;\n    while (n > 0) {\n        long r = n % 10;\n        roman = roman.substr(0,\
    \ roman.length() - 1) + roman_map[r];\n        n = n / 10;\n    }\n    if (roman.length()\
    \ == 0)\n        return \"0\";\n    roman = roman.substr(0, roman.length() - 1);\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long n = number;\n    while (n >= 1000) {\n        roman.push_back('M');\n \
    \       n -= 1000;\n    }\n    while (n >= 900) {\n        roman.push_back('CM');\n\
    \        n -= 900;\n    }\n    while (n >= 500) {\n        roman.push_back('D');\n\
    \        n -= 500;\n    }\n    while (n >= 400) {\n        roman.push_back('CD');\n\
    \        n -= 400;\n    }\n    while (n >= 100) {\n        roman.push_back('C');\n\
    \        n -= 100;\n    }\n    while (n >= 90) {\n        roman.push_back('XC');\n\
    \        n -= 90;\n    }\n    while (n >= 50) {\n        roman.push_back('L');\n\
    \        n -= 50;\n    }\n    while (n >= 40) {\n        roman.push_back('XL');\n\
    \        n -= 40;\n    }\n    while (n >= 10) {\n        roman.push_back('X');\n\
    \        n -= 10;\n    }\n    while (n >= 9) {\n        roman.push_back('IX');\n\
    \        n -= 9;\n    }\n    while (n >= 5) {\n        roman.push_back('V');\n\
    \        n -= 5;\n    }\n    while (n >= 4) {\n        roman.push_back('IV');\n\
    \        n -= 4;\n    }\n    while (n >= 1) {\n        roman.push_back('I');\n\
    \        n -= 1;\n    }\n    return roman;", "    std::string roman = \"\";\n\
    \    long temp = number;\n    while (temp > 0) {\n        long remainder = temp\
    \ % 10;\n        roman += mini_roman[remainder];\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        long remainder = temp % 10;\n        roman += mini_roman[remainder];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long temp = number;\n    while (temp > 0) {\n        long mod = temp % 10;\n\
    \        roman += (mod < 4 ? \"\" : (mod < 7 ? \"\" : \"i\"));\n        temp /=\
    \ 10;\n    }\n    return roman;", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num = 0;\n    while (number > 0) {\n        long remainder = number % 10;\n\
    \        roman = to_string(remainder) + roman;\n        number /= 10;\n    }\n\
    \    roman = roman.substr(0, roman.length() - 1);\n    return roman;", "    std::string\
    \ roman;\n    long num = (number < 0) ? -number : number;\n    long num2 = num\
    \ % 10;\n    long num3 = num / 10;\n    long num4 = num % 1000;\n    long num5\
    \ = num / 1000;\n    long num6 = num % 10000;\n    long num7 = num / 10000;\n\
    \    long num8 = num % 100000;\n    long num9 = num / 100000;\n    long num10\
    \ = num % 1000000;\n    long num11 = num / 1000000;\n    long num12 = num % 10000000;\n\
    \    long num13 = num / 10000000;\n    long num14 = num % 1000000000;\n    long\
    \ num15 = num / 1000000000;\n    long num16 = num % 10000000000;\n    long num17\
    \ = num / 10000000000;\n    long num18 = num % 100000000000;\n    long num19 =\
    \ num / 100000000000;\n    long num20 = num % 10000000000000;\n    long num21\
    \ = num / 10000000000000;\n    long num22 = num % 100000000000000;\n    long num23\
    \ = num / 100000000000000;\n    long num24 = num % 1000000000000000;\n    long\
    \ num25 = num / 1000000000000000;\n    long num26 = num % 100000000000000000;\n\
    \    long num27 = num / 100000000000000000;\n    long num28 = num % 1000000000000000000;\n\
    \    long num29 = num / 1000000000000000000;\n    long num30 = num % 10000000000000000000;\n\
    \    long num31 = num / 10000000000000000000;\n    long num32 = num % 1000000000000000000000;\n\
    \    long num33 = num / 1000000000000000000000;\n    long num34 = num % 10000000000000000000000;\n\
    \    long num35 = num / 10000000000000000000000;\n    long num36 = num % 100000000000000000000000;\n\
    \    long num37 = num / 100000000000000000000000;\n    long num38 = num % 10000000000000000000000000;\n\
    \    long num39 = num / 10000000000000000000000000;\n    long num40 = num % 100000000000000000000000000;\n\
    \    long num41 = num / 100000000000000000000000000;\n    long num42 = num % 1000000000000000000000000000;\n\
    \    long num43 = num / 1000000000000000000000000000;\n    long num44 = num %\
    \ 100000000000000000000000000000;\n    long num45 = num / 100000000000000000000000000000;\n\
    \    long num46 = num % 1000000000000000000000000000000", "    std::string roman;\n\
    \    long temp;\n    long num;\n    long den;\n    long num1;\n    long num2;\n\
    \    long num3;\n    long num4;\n    long num5;\n    long num6;\n    long num7;\n\
    \    long num8;\n    long num9;\n    long num10;\n    long num11;\n    long num12;\n\
    \    long num13;\n    long num14;\n    long num15;\n    long num16;\n    long\
    \ num17;\n    long num18;\n    long num19;\n    long num20;\n    long num21;\n\
    \    long num22;\n    long num23;\n    long num24;\n    long num25;\n    long\
    \ num26;\n    long num27;\n    long num28;\n    long num29;\n    long num30;\n\
    \    long num31;\n    long num32;\n    long num33;\n    long num34;\n    long\
    \ num35;\n    long num36;\n    long num37;\n    long num38;\n    long num39;\n\
    \    long num40;\n    long num41;\n    long num42;\n    long num43;\n    long\
    \ num44;\n    long num45;\n    long num46;\n    long num47;\n    long num48;\n\
    \    long num49;\n    long num50;\n    long num51;\n    long num52;\n    long\
    \ num53;\n    long num54;\n    long num55;\n    long num56;\n    long num57;\n\
    \    long num58;\n    long num59;\n    long num60;\n    long num61;\n    long\
    \ num62;\n    long num63;\n    long num64;\n    long num65;\n    long num66;\n\
    \    long num67;\n    long num68;\n    long num69;\n    long num70;\n    long\
    \ num71;\n    long num72;\n    long num73;\n    long num74;\n    long num75;\n\
    \    long num76;\n    long num77;\n    long num78;\n    long num79;\n    long\
    \ num80;\n    long num81;\n    long num82;\n    long num83;\n    long num84;\n\
    \    long num85;\n    ", "    std::string roman;\n    long temp = number;\n  \
    \  while (temp > 0) {\n        roman.push_back((temp % 10) + '0');\n        temp\
    \ /= 10;\n    }\n    roman.erase(roman.size() - 1);\n    roman.insert(0, \"i\"\
    );\n    return roman;", "    std::string roman;\n    long num = number;\n    long\
    \ temp = 0;\n    while (num > 0) {\n        temp = num % 10;\n        roman =\
    \ to_string(temp) + roman;\n        num /= 10;\n    }\n    return roman;", " \
    \   std::string roman;\n    long temp = number;\n    while (temp > 0) {\n    \
    \    int remainder = temp % 10;\n        roman += mini_roman[remainder];\n   \
    \     temp /= 10;\n    }\n    return roman;", "    std::string roman;\n    if\
    \ (number < 0)\n        roman = \"-\" + int_to_mini_roman(-number);\n    else\
    \ if (number == 0)\n        roman = \"0\";\n    else if (number < 4)\n       \
    \ roman = \"i\";\n    else if (number < 9)\n        roman = \"v\";\n    else if\
    \ (number < 14)\n        roman = \"vi\";\n    else if (number < 19)\n        roman\
    \ = \"x\";\n    else if (number < 24)\n        roman = \"xvi\";\n    else if (number\
    \ < 39)\n        roman = \"l\";\n    else if (number < 49)\n        roman = \"\
    xl\";\n    else if (number < 99)\n        roman = \"c\";\n    else if (number\
    \ < 149)\n        roman = \"cl\";\n    else if (number < 199)\n        roman =\
    \ \"xc\";\n    else if (number < 249)\n        roman = \"xlc\";\n    else if (number\
    \ < 499)\n        roman = \"xc\";\n    else if (number < 999)\n        roman =\
    \ \"ix\";\n    else if (number < 1499)\n        roman = \"iv\";\n    else if (number\
    \ < 19999)\n        roman = \"ix\";\n    else if (number < 24999)\n        roman\
    \ = \"iv\";\n    else if (number < 49999)\n        roman = \"iv\";\n    else if\
    \ (number < 999999)\n        roman = \"v\";\n    else if (number < 9999999)\n\
    \        roman = \"vi\";\n    else if (number < 99999999)\n        roman = \"\
    vi\";\n    else if (number < 999999999)\n        roman = \"vi\";\n    else if\
    \ (number < 1000000000)\n        roman = \"vi\";\n    else if (number < 10000000000)\n\
    \        roman = \"vi\";\n    else if (number < 100000000000)\n        roman =\
    \ \"vi\";\n    else if (number < 1000000000000)\n        roman = \"vi\";\n   \
    \ else if (number < 10000000000000)\n        roman = \"vi\";\n    else if (number\
    \ < 100000000000000L)\n        roman = \"vi\";\n    else if (number < 1000000000000000)\n\
    \        roman = \"vi\";\n    else if (number < 10000000000000000L)\n        roman\
    \ = \"vi\";\n    else if (number < 100000000000000000)\n        roman = \"vi\"\
    ;\n    else if (number < 1000000000000000000L)\n        roman = \"vi\";\n    else\
    \ if (number < 10000000000000000000)\n        roman = \"vi\";\n    else if (number\
    \ < 100000000000000000000L)\n        roman = \"vi\";\n    else if (number < 1000000000000000000000)\n\
    \        roman = \"vi\";\n    else if (number < 100", "    std::string roman;\n\
    \    long num = (number);\n    long num1 = (number / 1000);\n    long num2 = (number\
    \ % 1000);\n    long num3 = (num2 / 100);\n    long num4 = (num2 % 100);\n   \
    \ long num5 = (num3 / 10);\n    long num6 = (num3 % 10);\n    long num7 = (num4\
    \ / 1);\n    long num8 = (num4 % 1);\n    long num9 = (num5 / 1);\n    long num10\
    \ = (num5 % 1);\n    long num11 = (num6 / 1);\n    long num12 = (num6 % 1);\n\
    \    long num13 = (num7 / 1);\n    long num14 = (num7 % 1);\n    long num15 =\
    \ (num8 / 1);\n    long num16 = (num8 % 1);\n    long num17 = (num9 / 1);\n  \
    \  long num18 = (num9 % 1);\n    long num19 = (num10 / 1);\n    long num20 = (num10\
    \ % 1);\n    long num21 = (num11 / 1);\n    long num22 = (num11 % 1);\n    long\
    \ num23 = (num12 / 1);\n    long num24 = (num12 % 1);\n    long num25 = (num13\
    \ / 1);\n    long num26 = (num13 % 1);\n    long num27 = (num14 / 1);\n    long\
    \ num28 = (num14 % 1);\n    long num29 = (num15 / 1);\n    long num30 = (num15\
    \ % 1);\n    long num31 = (num16 / 1);\n    long num32 = (num16 % 1);\n    long\
    \ num33 = (num17 / 1);\n    long num34 = (num17 % 1);\n    long num35 = (num18\
    \ / 1);\n    long num36 = (num18 % 1);\n    long num37 = (num19 / 1);\n    long\
    \ num38 = (num19 % 1);\n    long num39 = (num20 / 1);\n    long num40 = (num20\
    \ % 1);\n    long num41 = (num21 / 1);\n    long num42 = (num21 % 1);\n    long\
    \ num43 = (num22 / 1);\n    long num44 = (num22 % 1);\n    long num45 = (num23\
    \ / 1);\n    long num46 = (num23 % 1);\n    long num47 = (num24 / 1);\n    long\
    \ num48 = (num24 % 1);\n    long num49 = (num25 / 1);\n    long num50 = (num25\
    \ % 1);\n    long num", "    std::string roman;\n    long romanNum = number;\n\
    \    long romanNum1 = romanNum;\n    long romanNum2 = romanNum;\n    long romanNum3\
    \ = romanNum;\n    long romanNum4 = romanNum;\n    long romanNum5 = romanNum;\n\
    \    long romanNum6 = romanNum;\n    long romanNum7 = romanNum;\n    long romanNum8\
    \ = romanNum;\n    long romanNum9 = romanNum;\n    long romanNum10 = romanNum;\n\
    \    long romanNum11 = romanNum;\n    long romanNum12 = romanNum;\n    long romanNum13\
    \ = romanNum;\n    long romanNum14 = romanNum;\n    long romanNum15 = romanNum;\n\
    \    long romanNum16 = romanNum;\n    long romanNum17 = romanNum;\n    long romanNum18\
    \ = romanNum;\n    long romanNum19 = romanNum;\n    long romanNum20 = romanNum;\n\
    \    long romanNum21 = romanNum;\n    long romanNum22 = romanNum;\n    long romanNum23\
    \ = romanNum;\n    long romanNum24 = romanNum;\n    long romanNum25 = romanNum;\n\
    \    long romanNum26 = romanNum;\n    long romanNum27 = romanNum;\n    long romanNum28\
    \ = romanNum;\n    long romanNum29 = romanNum;\n    long romanNum30 = romanNum;\n\
    \    long romanNum31 = romanNum;\n    long romanNum32 = romanNum;\n    long romanNum33\
    \ = romanNum;\n    long romanNum34 = romanNum;\n    long romanNum35 = romanNum;\n\
    \    long romanNum36 = romanNum;\n    long romanNum37 = romanNum;\n    long romanNum38\
    \ = romanNum;\n    long romanNum39 = romanNum;\n    long romanNum40 = romanNum;\n\
    \    long romanNum41 = romanNum;\n    long romanNum42 = romanNum;\n    long romanNum4",
  "    std::string roman;\n    long num;\n    long rem;\n    long temp;\n    long\
    \ roman_num;\n    long roman_rem;\n    long roman_temp;\n    long roman_num_temp;\n\
    \    long roman_num_temp_rem;\n    long roman_num_temp_rem_rem;\n    long roman_num_temp_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem;\n    long roman_num_temp_rem_rem_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem_rem_rem;\n    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem;\n    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n  \
    \  long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n    long\
    \ roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n    long\
    \ roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n  \
    \  long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem;\n\
    \    long roman_num_temp_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_rem_", " \
    \   std::string roman;\n    long temp = 0;\n    while (number >= 1000) {\n   \
    \     temp = number % 1000;\n        roman += mini_roman[temp];\n        number\
    \ /= 1000;\n    }\n    while (number >= 100) {\n        temp = number % 100;\n\
    \        roman += mini_roman[temp];\n        number /= 100;\n    }\n    while\
    \ (number >= 10) {\n        temp = number % 10;\n        roman += mini_roman[temp];\n\
    \        number /= 10;\n    }\n    roman += mini_roman[number];\n    return roman;",
  "    std::string roman = \"\";\n    long temp = number;\n    while (temp > 0) {\n\
    \        int digit = temp % 10;\n        roman += mini_roman[digit];\n       \
    \ temp /= 10;\n    }\n    return roman;", "    std::string roman;\n    long temp\
    \ = 0;\n    long num = 0;\n    long num2 = 0;\n    long num3 = 0;\n    long num4\
    \ = 0;\n    long num5 = 0;\n    long num6 = 0;\n    long num7 = 0;\n    long num8\
    \ = 0;\n    long num9 = 0;\n    long num10 = 0;\n    long num11 = 0;\n    long\
    \ num12 = 0;\n    long num13 = 0;\n    long num14 = 0;\n    long num15 = 0;\n\
    \    long num16 = 0;\n    long num17 = 0;\n    long num18 = 0;\n    long num19\
    \ = 0;\n    long num20 = 0;\n    long num21 = 0;\n    long num22 = 0;\n    long\
    \ num23 = 0;\n    long num24 = 0;\n    long num25 = 0;\n    long num26 = 0;\n\
    \    long num27 = 0;\n    long num28 = 0;\n    long num29 = 0;\n    long num30\
    \ = 0;\n    long num31 = 0;\n    long num32 = 0;\n    long num33 = 0;\n    long\
    \ num34 = 0;\n    long num35 = 0;\n    long num36 = 0;\n    long num37 = 0;\n\
    \    long num38 = 0;\n    long num39 = 0;\n    long num40 = 0;\n    long num41\
    \ = 0;\n    long num42 = 0;\n    long num43 = 0;\n    long num44 = 0;\n    long\
    \ num45 = 0;\n    long num46 = 0;\n    long num47 = 0;\n    long num48 = 0;\n\
    \    long num49 = 0;\n    long num50 = 0;\n    long num51 = 0;\n    long num52\
    \ = 0;\n    long num53 = 0;\n    long num54 = 0;\n    long num55 = 0;\n    long\
    \ num56 = 0;\n    long num57 = 0;\n    long num58 = 0;\n    long num59 = 0;\n\
    \    long num60 = 0;\n    long num61 = 0;\n    long num62 = 0;\n    long num63\
    \ = 0;\n    long num64 = 0;\n    long num65 = 0;\n    long num66 = 0;\n    long\
    \ num67 = 0;\n    long num68 = 0;\n    long num69 = 0;\n    long num70 = 0;\n\
    \    long num71 = 0;\n    long num72 = 0;\n    long num73 = 0;\n    long num74\
    \ = 0;\n    long num75 = 0;\n    long num76 = 0;\n    long num77 = 0;\n    long\
    \ num78 = 0;\n    long num79 = 0;\n    long num80 = 0;\n    long num81 = 0;\n\
    \    long num82 = 0;\n    long num83 = 0;\n    long num84 = 0;\n    long ", " \
    \   std::string roman;\n    long n = number;\n    long m = 1000;\n    long r =\
    \ 1;\n    while (n >= m) {\n        n -= m;\n        roman.append(1, static_cast<char>('M'));\n\
    \        m /= 100;\n    }\n    while (n >= 100) {\n        n -= 100;\n       \
    \ roman.append(1, static_cast<char>('C'));\n        r /= 10;\n    }\n    while\
    \ (n >= 10) {\n        n -= 10;\n        roman.append(1, static_cast<char>('X'));\n\
    \        r /= 10;\n    }\n    roman.append(1, static_cast<char>('I'));\n    roman.append(1,\
    \ static_cast<char>('V'));\n    roman.append(1, static_cast<char>('X'));\n   \
    \ roman.append(1, static_cast<char>('L'));\n    roman.append(1, static_cast<char>('C'));\n\
    \    roman.append(1, static_cast<char>('D'));\n    roman.append(1, static_cast<char>('M'));\n\
    \    roman.append(1, static_cast<char>('I'));\n    roman.append(1, static_cast<char>('V'));\n\
    \    roman.append(1, static_cast<char>('X'));\n    roman.append(1, static_cast<char>('L'));\n\
    \    roman.append(1, static_cast<char>('C'));\n    roman.append(1, static_cast<char>('D'));\n\
    \    roman.append(1, static_cast<char>('M'));\n    roman.append(1, static_cast<char>('I'));\n\
    \    roman.append(1, static_cast<char>('V'));\n    roman.append(1, static_cast<char>('X'));\n\
    \    roman.append(1, static_cast<char>('L'));\n    roman.append(1, static_cast<char>('C'));\n\
    \    roman.append(1, static_cast<char>('D'));\n    roman.append(1, static_cast<char>('M'));\n\
    \    roman.append(1, static_cast<char>('I'));\n    roman.append(1, static_cast<char>('V'));\n\
    \    roman.append(1, static_cast<char>('X'));\n    roman.append(1, static_cast<char>('L'));\n\
    \    roman.append(1, static_cast<char>('C'));\n    roman.append(1, static_cast<char>('D'));\n\
    \    roman.append(1, static_cast<char>('M'));\n    roman.append(1, static_cast<char>('I'));\n\
    \    roman.append(1, static_cast<char>('V'));\n    roman.append(1, static_cast<char>('X'));\n\
    \    roman.append(1, static_cast<char>('L'));\n    roman.append(1, static_cast<char>('C'));\n\
    \    roman.append(1, ", "    std::string roman = \"\";\n    if (number < 0)\n\
    \        return \"Invalid input\";\n    int num = (int) number;\n    while (num\
    \ > 0) {\n        int remainder = num % 10;\n        roman += (char)('M' + remainder);\n\
    \        num -= remainder;\n    }\n    return roman;", "    std::string roman;\n\
    \    long roman_num = 0;\n    while (number > 0) {\n        roman_num += number\
    \ % 10;\n        number /= 10;\n    }\n    if (roman_num > 0) {\n        roman\
    \ = int_to_mini_roman(roman_num);\n        roman = roman.substr(0, roman.length()\
    \ - 1) + roman.substr(roman.length() - 1);\n    }\n    if (roman.length() == 1)\
    \ {\n        roman = \"i\" + roman;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long temp = number;\n    while (temp > 0) {\n        int digit =\
    \ temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(1, \"M\"[digit])\
    \ + \"\");\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long num = number;\n    long temp = 0;\n    long romanNum = 0;\n    long\
    \ romanNum2 = 0;\n    long romanNum3 = 0;\n    long romanNum4 = 0;\n    long romanNum5\
    \ = 0;\n    long romanNum6 = 0;\n    long romanNum7 = 0;\n    long romanNum8 =\
    \ 0;\n    long romanNum9 = 0;\n    long romanNum10 = 0;\n    long romanNum11 =\
    \ 0;\n    long romanNum12 = 0;\n    long romanNum13 = 0;\n    long romanNum14\
    \ = 0;\n    long romanNum15 = 0;\n    long romanNum16 = 0;\n    long romanNum17\
    \ = 0;\n    long romanNum18 = 0;\n    long romanNum19 = 0;\n    long romanNum20\
    \ = 0;\n    long romanNum21 = 0;\n    long romanNum22 = 0;\n    long romanNum23\
    \ = 0;\n    long romanNum24 = 0;\n    long romanNum25 = 0;\n    long romanNum26\
    \ = 0;\n    long romanNum27 = 0;\n    long romanNum28 = 0;\n    long romanNum29\
    \ = 0;\n    long romanNum30 = 0;\n    long romanNum31 = 0;\n    long romanNum32\
    \ = 0;\n    long romanNum33 = 0;\n    long romanNum34 = 0;\n    long romanNum35\
    \ = 0;\n    long romanNum36 = 0;\n    long romanNum37 = 0;\n    long romanNum38\
    \ = 0;\n    long romanNum39 = 0;\n    long romanNum40 = 0;\n    long romanNum41\
    \ = 0;\n    long romanNum42 = 0;\n    long romanNum43 = 0;\n    long romanNum44\
    \ = 0;\n    long romanNum45 = 0;\n    long romanNum46 = 0;\n    long romanNum47\
    \ = 0;\n    long romanNum48 = 0;\n    long romanNum49 = 0;\n    long romanNum50\
    \ = 0;\n    long romanNum51 = 0;\n    long romanNum52 = 0;\n    long romanNum53\
    \ = 0;\n    long romanNum54 = 0;\n    long romanNum55 = 0;\n    long romanNum56\
    \ = 0;\n    long romanNum57 = 0;\n    long romanNum58 = 0;\n    long romanNum59\
    \ = 0;\n    long romanNum60 = 0;\n    long romanNum61 = 0;\n    long romanNum62\
    \ = 0;\n    long romanNum", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int remainder = temp % 10;\n        roman +=\
    \ mini_roman[remainder];\n        temp /= 10;\n    }\n    return roman;", "  \
    \  std::string roman;\n    if (number < 0)\n        throw std::invalid_argument(\"\
    Invalid input\");\n    if (number < 10)\n        roman = \"x\";\n    else if (number\
    \ < 100)\n        roman = \"c\";\n    else if (number < 1000)\n        roman =\
    \ \"m\";\n    else\n        roman = \"d\";\n    while (number >= 1000) {\n   \
    \     roman = roman.substr(0, roman.size() - 1) + to_string(number % 1000) + roman.substr(roman.size()\
    \ - 1);\n        number /= 1000;\n    }\n    while (number >= 100) {\n       \
    \ roman = roman.substr(0, roman.size() - 1) + to_string(number % 100) + roman.substr(roman.size()\
    \ - 1);\n        number /= 100;\n    }\n    while (number >= 10) {\n        roman\
    \ = roman.substr(0, roman.size() - 1) + to_string(number % 10) + roman.substr(roman.size()\
    \ - 1);\n        number /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp = number;\n    while (temp > 0) {\n        long remainder = temp\
    \ % 10;\n        roman += (char)('M' + remainder);\n        temp /= 10;\n    }\n\
    \    return roman;", "    std::string roman;\n    long num;\n    num = number;\n\
    \    while (num > 0) {\n        long remainder = num % 10;\n        roman += mini_roman[remainder];\n\
    \        num /= 10;\n    }\n    return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  roman.reserve(number + 1);\n  // We start with the first digit.\n\
    \  roman.push_back('M');\n  // For each subsequent digit, we subtract or add one\
    \ depending on whether the\n  // previous digit was even or odd.\n  for (int i\
    \ = 1; i < number; ++i) {\n    roman.push_back((number % 2 == 0) ? \"IV\" : \"\
    IX\");\n    number /= 2;\n  }\n  return roman;", "    std::string roman;\n   \
    \ long num = number;\n    long temp = 0;\n    long romanNum = 0;\n    long romanNumCount\
    \ = 0;\n    long romanNumCount2 = 0;\n    long romanNumCount3 = 0;\n    long romanNumCount4\
    \ = 0;\n    long romanNumCount5 = 0;\n    long romanNumCount6 = 0;\n    long romanNumCount7\
    \ = 0;\n    long romanNumCount8 = 0;\n    long romanNumCount9 = 0;\n    long romanNumCount10\
    \ = 0;\n    long romanNumCount11 = 0;\n    long romanNumCount12 = 0;\n    long\
    \ romanNumCount13 = 0;\n    long romanNumCount14 = 0;\n    long romanNumCount15\
    \ = 0;\n    long romanNumCount16 = 0;\n    long romanNumCount17 = 0;\n    long\
    \ romanNumCount18 = 0;\n    long romanNumCount19 = 0;\n    long romanNumCount20\
    \ = 0;\n    long romanNumCount21 = 0;\n    long romanNumCount22 = 0;\n    long\
    \ romanNumCount23 = 0;\n    long romanNumCount24 = 0;\n    long romanNumCount25\
    \ = 0;\n    long romanNumCount26 = 0;\n    long romanNumCount27 = 0;\n    long\
    \ romanNumCount28 = 0;\n    long romanNumCount29 = 0;\n    long romanNumCount30\
    \ = 0;\n    long romanNumCount31 = 0;\n    long romanNumCount32 = 0;\n    long\
    \ romanNumCount33 = 0;\n    long romanNumCount34 = 0;\n    long romanNumCount35\
    \ = 0;\n    long romanNumCount36 = 0;\n    long romanNumCount37 = 0;\n    long\
    \ romanNumCount38 = 0;\n    long romanNumCount39 = 0;\n    long romanNumCount40\
    \ = 0;\n    long romanNumCount41 = 0;\n    long romanNumCount42 = 0;\n    long\
    \ romanNumCount43 = 0;\n    long romanNumCount44 = 0;\n    long romanNumCount45\
    \ = 0;\n    long romanNumCount46 = 0;\n    long romanNumCount47 = 0;\n    long\
    \ romanNumCount48 = 0;\n    long romanNumCount49 = 0;\n    long romanNumCount50\
    \ = 0;\n    long romanNumCount51 = 0;\n    long romanNumCount52 = 0;\n    long\
    \ romanNumCount53 = 0;\n    long romanNumCount54 = 0;\n    long romanNumCount55\
    \ = 0;", "    std::string roman;\n    long temp = number;\n    while (temp > 0)\
    \ {\n        int remainder = temp % 10;\n        roman += mini_roman[remainder];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num;\n    long temp;\n    long rem;\n    long num_bits;\n    long num_digits;\n\
    \    long num_roman;\n    long num_remainder;\n    long num_roman_digits;\n  \
    \  long num_roman_remainder;\n    long num_roman_digits_remainder;\n    long num_roman_digits_remainder_temp;\n\
    \    long num_roman_digits_remainder_temp_temp;\n    long num_roman_digits_remainder_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp;\n    long num_roman_digits_remainder_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp;\n    long\
    \ num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp;\n    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long num_roman_digits_remainder_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long ", "    std::string roman;\n    long num = number;\n    while (num >\
    \ 0) {\n        long remainder = num % 10;\n        roman = to_string(remainder)\
    \ + roman;\n        num /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long num = (number < 0) ? -number : number;\n    long num2 = num;\n    long\
    \ num3 = num;\n    long num4 = num;\n    long num5 = num;\n    long num6 = num;\n\
    \    long num7 = num;\n    long num8 = num;\n    long num9 = num;\n    long num10\
    \ = num;\n    long num11 = num;\n    long num12 = num;\n    long num13 = num;\n\
    \    long num14 = num;\n    long num15 = num;\n    long num16 = num;\n    long\
    \ num17 = num;\n    long num18 = num;\n    long num19 = num;\n    long num20 =\
    \ num;\n    long num21 = num;\n    long num22 = num;\n    long num23 = num;\n\
    \    long num24 = num;\n    long num25 = num;\n    long num26 = num;\n    long\
    \ num27 = num;\n    long num28 = num;\n    long num29 = num;\n    long num30 =\
    \ num;\n    long num31 = num;\n    long num32 = num;\n    long num33 = num;\n\
    \    long num34 = num;\n    long num35 = num;\n    long num36 = num;\n    long\
    \ num37 = num;\n    long num38 = num;\n    long num39 = num;\n    long num40 =\
    \ num;\n    long num41 = num;\n    long num42 = num;\n    long num43 = num;\n\
    \    long num44 = num;\n    long num45 = num;\n    long num46 = num;\n    long\
    \ num47 = num;\n    long num48 = num;\n    long num49 = num;\n    long num50 =\
    \ num;\n    long num51 = num;\n    long num52 = num;\n    long num53 = num;\n\
    \    long num54 = num;\n    long num55 = num;\n    long num56 = num;\n    long\
    \ num57 = num;\n    long num58 = num;\n    long num59 = num;\n    long num60 =\
    \ num;\n    long num61 = num;\n    long num62 = num;\n    long num63 = num;\n\
    \    long num64 = num;\n    ", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num = number;\n    long romanNum = 0;\n    long romanNumCount = 0;\n  \
    \  long romanNumCount2 = 0;\n    long romanNumCount3 = 0;\n    long romanNumCount4\
    \ = 0;\n    long romanNumCount5 = 0;\n    long romanNumCount6 = 0;\n    long romanNumCount7\
    \ = 0;\n    long romanNumCount8 = 0;\n    long romanNumCount9 = 0;\n    long romanNumCount10\
    \ = 0;\n    long romanNumCount11 = 0;\n    long romanNumCount12 = 0;\n    long\
    \ romanNumCount13 = 0;\n    long romanNumCount14 = 0;\n    long romanNumCount15\
    \ = 0;\n    long romanNumCount16 = 0;\n    long romanNumCount17 = 0;\n    long\
    \ romanNumCount18 = 0;\n    long romanNumCount19 = 0;\n    long romanNumCount20\
    \ = 0;\n    long romanNumCount21 = 0;\n    long romanNumCount22 = 0;\n    long\
    \ romanNumCount23 = 0;\n    long romanNumCount24 = 0;\n    long romanNumCount25\
    \ = 0;\n    long romanNumCount26 = 0;\n    long romanNumCount27 = 0;\n    long\
    \ romanNumCount28 = 0;\n    long romanNumCount29 = 0;\n    long romanNumCount30\
    \ = 0;\n    long romanNumCount31 = 0;\n    long romanNumCount32 = 0;\n    long\
    \ romanNumCount33 = 0;\n    long romanNumCount34 = 0;\n    long romanNumCount35\
    \ = 0;\n    long romanNumCount36 = 0;\n    long romanNumCount37 = 0;\n    long\
    \ romanNumCount38 = 0;\n    long romanNumCount39 = 0;\n    long romanNumCount40\
    \ = 0;\n    long romanNumCount41 = 0;\n    long romanNumCount42 = 0;\n    long\
    \ romanNumCount43 = 0;\n    long romanNumCount44 = 0;\n    long romanNumCount45\
    \ = 0;\n    long romanNumCount46 = 0;\n    long romanNumCount47 = 0;\n    long\
    \ romanNumCount48 = 0;\n    long romanNumCount49 = 0;\n    long romanNumCount50\
    \ = 0;\n    long romanNumCount51 = 0;\n    long romanNumCount52 = 0;\n    long\
    \ romanNumCount53 = 0;\n    long romanNumCount54 = 0;\n    long romanNumCount55\
    \ = 0;\n    long roman", "    std::string roman;\n    long num = number;\n   \
    \ while (num > 0) {\n        int remainder = num % 10;\n        roman += int_to_mini_roman_digit(remainder);\n\
    \        num /= 10;\n    }\n    return roman;", "    std::string roman = \"\"\
    ;\n    long temp = 0;\n    while (number > 0) {\n        temp = number % 10;\n\
    \        roman += (temp * 100 + int('M') - int('M' + 10 * (temp > 0)));\n    \
    \    number /= 10;\n    }\n    return roman;", "    std::string roman;\n    long\
    \ remainder = number;\n    long counter = 1;\n    while (remainder > 0) {\n  \
    \      remainder = remainder % 10;\n        roman = to_string(counter) + roman;\n\
    \        counter++;\n    }\n    return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  roman.reserve(number + 1);\n  long curr = number;\n  while (curr >\
    \ 0) {\n    long next = curr - 1;\n    roman.push_back((next % 10) + '0');\n \
    \   curr = next;\n  }\n  roman.push_back('0');\n  return roman;", "    std::string\
    \ roman;\n    long num;\n    long rem;\n    long temp;\n    long roman_num;\n\
    \    long roman_num_temp;\n    long roman_num_temp2;\n    long roman_num_temp3;\n\
    \    long roman_num_temp4;\n    long roman_num_temp5;\n    long roman_num_temp6;\n\
    \    long roman_num_temp7;\n    long roman_num_temp8;\n    long roman_num_temp9;\n\
    \    long roman_num_temp10;\n    long roman_num_temp11;\n    long roman_num_temp12;\n\
    \    long roman_num_temp13;\n    long roman_num_temp14;\n    long roman_num_temp15;\n\
    \    long roman_num_temp16;\n    long roman_num_temp17;\n    long roman_num_temp18;\n\
    \    long roman_num_temp19;\n    long roman_num_temp20;\n    long roman_num_temp21;\n\
    \    long roman_num_temp22;\n    long roman_num_temp23;\n    long roman_num_temp24;\n\
    \    long roman_num_temp25;\n    long roman_num_temp26;\n    long roman_num_temp27;\n\
    \    long roman_num_temp28;\n    long roman_num_temp29;\n    long roman_num_temp30;\n\
    \    long roman_num_temp31;\n    long roman_num_temp32;\n    long roman_num_temp33;\n\
    \    long roman_num_temp34;\n    long roman_num_temp35;\n    long roman_num_temp36;\n\
    \    long roman_num_temp37;\n    long roman_num_temp38;\n    long roman_num_temp39;\n\
    \    long roman_num_temp40;\n    long roman_num_temp41;\n    long roman_num_temp42;\n\
    \    long roman_num_temp43;\n    long roman_num_temp44;\n    long roman_num_temp45;\n\
    \    long roman_num_temp46;\n    long roman_num_temp47;\n    long roman_num_temp48;\n\
    \    long roman_num_temp49;\n    long roman_num_temp50;\n    long roman_num_temp51;\n\
    \    long roman_num_temp52;\n    long roman_num_temp53;\n    long roman_num_temp54;\n\
    \    long roman_num_temp55;\n    long roman_num_temp56;\n", "    std::string roman;\n\
    \    long temp;\n    int i;\n    temp = number;\n    roman = \"\";\n    while\
    \ (temp != 0) {\n        i = temp % 10;\n        roman = roman.substr(0, roman.length()\
    \ - 1) + std::to_string(i) + roman.substr(roman.length() - 1);\n        temp /=\
    \ 10;\n    }\n    return roman;", "    std::string roman;\n    long num = (number\
    \ < 0) ? -number : number;\n    long num2 = num % 10;\n    long num3 = num / 10;\n\
    \    long num4 = num % 100;\n    long num5 = num / 100;\n    long num6 = num %\
    \ 1000;\n    long num7 = num / 1000;\n    long num8 = num % 10000;\n    long num9\
    \ = num / 10000;\n    long num10 = num % 100000;\n    long num11 = num / 100000;\n\
    \    long num12 = num % 1000000;\n    long num13 = num / 1000000;\n    long num14\
    \ = num % 10000000;\n    long num15 = num / 10000000;\n    long num16 = num %\
    \ 1000000000;\n    long num17 = num / 1000000000;\n    long num18 = num % 1000000000000;\n\
    \    long num19 = num / 1000000000000;\n    long num20 = num % 1000000000000000;\n\
    \    long num21 = num / 1000000000000000;\n    long num22 = num % 1000000000000000000;\n\
    \    long num23 = num / 1000000000000000000;\n    long num24 = num % 100000000000000000000;\n\
    \    long num25 = num / 100000000000000000000;\n    long num26 = num % 100000000000000000000000;\n\
    \    long num27 = num / 100000000000000000000000;\n    long num28 = num % 100000000000000000000000000;\n\
    \    long num29 = num / 100000000000000000000000000;\n    long num30 = num % 10000000000000000000000000000;\n\
    \    long num31 = num / 10000000000000000000000000000;\n    long num32 = num %\
    \ 10000000000000000000000000000000000;\n    long num33 = num / 10000000000000000000000000000000000;\n\
    \    long num34 = num % 1000000000000000000000000000000000000;\n    long num35\
    \ = num / 1000000000000000000000000000000000000;\n    long num36 = num % 1000000000000000000000000000000000000000;\n\
    \    long num37 = num / 1000000000000000000000000000000000000000;\n    long num38\
    \ = num % 1000000000000000000000000000000000000000000;\n    long num39 = num /\
    \ 1000000000000000000000000000000000000000000;\n    long num40 = num % 100000000000000000000000000000000000000000000;\n\
    \    long num41 = num / 100000000000000000000000000000000000000000000;\n    long\
    \ num42 = num % 100000000000000000000000000000000000000000000000;\n    long num43\
    \ = num / 100000000000000000000000000000000000000000000000;\n    long num44 =\
    \ num % 100000000000000000000000000000000000000000000000000;\n    long num45 =\
    \ num / 100000000000000000000000000000000000000000000000000;\n    long num46 =\
    \ num % 10000000000000000000000000000000000000000000000000000;\n    long num47\
    \ = num / ", "    std::string roman;\n    long temp = number;\n    while (temp\
    \ > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n   \
    \ long num = number;\n    while (num > 0) {\n        long remainder = num % 10;\n\
    \        roman += (std::string)remainder;\n        num -= remainder;\n    }\n\
    \    return roman;", "    std::string roman;\n    long num = number;\n    long\
    \ num1 = num;\n    long num2 = num;\n    long num3 = num;\n    long num4 = num;\n\
    \    long num5 = num;\n    long num6 = num;\n    long num7 = num;\n    long num8\
    \ = num;\n    long num9 = num;\n    long num10 = num;\n    long num11 = num;\n\
    \    long num12 = num;\n    long num13 = num;\n    long num14 = num;\n    long\
    \ num15 = num;\n    long num16 = num;\n    long num17 = num;\n    long num18 =\
    \ num;\n    long num19 = num;\n    long num20 = num;\n    long num21 = num;\n\
    \    long num22 = num;\n    long num23 = num;\n    long num24 = num;\n    long\
    \ num25 = num;\n    long num26 = num;\n    long num27 = num;\n    long num28 =\
    \ num;\n    long num29 = num;\n    long num30 = num;\n    long num31 = num;\n\
    \    long num32 = num;\n    long num33 = num;\n    long num34 = num;\n    long\
    \ num35 = num;\n    long num36 = num;\n    long num37 = num;\n    long num38 =\
    \ num;\n    long num39 = num;\n    long num40 = num;\n    long num41 = num;\n\
    \    long num42 = num;\n    long num43 = num;\n    long num44 = num;\n    long\
    \ num45 = num;\n    long num46 = num;\n    long num47 = num;\n    long num48 =\
    \ num;\n    long num49 = num;\n    long num50 = num;\n    long num51 = num;\n\
    \    long num52 = num;\n    long num53 = num;\n    long num54 = num;\n    long\
    \ num55 = num;\n    long num56 = num;\n    long num57 = num;\n    long num58 =\
    \ num;\n    long num59 = num;\n    long num60 = num;\n    long num61 = num;\n\
    \    long num62 = num;\n    long num63 = num;\n    long num64 = num;\n    ", " \
    \   std::string roman;\n    if (number < 0)\n        roman = \"-\";\n    else\
    \ if (number == 0)\n        roman = \"0\";\n    else {\n        long temp = 0;\n\
    \        while (number >= 1000) {\n            number /= 1000;\n            temp\
    \ += 1000;\n        }\n        while (number >= 100) {\n            number /=\
    \ 100;\n            temp += 100;\n        }\n        while (number >= 10) {\n\
    \            number /= 10;\n            temp += 10;\n        }\n        roman\
    \ = to_string(temp);\n        roman = roman.substr(0, 1) + to_string(number %\
    \ 10) + roman.substr(1);\n    }\n    return roman;", "    std::string roman;\n\
    \    long num = (number);\n    long num1 = num;\n    long num2 = num;\n    long\
    \ num3 = num;\n    long num4 = num;\n    long num5 = num;\n    long num6 = num;\n\
    \    long num7 = num;\n    long num8 = num;\n    long num9 = num;\n    long num10\
    \ = num;\n    long num11 = num;\n    long num12 = num;\n    long num13 = num;\n\
    \    long num14 = num;\n    long num15 = num;\n    long num16 = num;\n    long\
    \ num17 = num;\n    long num18 = num;\n    long num19 = num;\n    long num20 =\
    \ num;\n    long num21 = num;\n    long num22 = num;\n    long num23 = num;\n\
    \    long num24 = num;\n    long num25 = num;\n    long num26 = num;\n    long\
    \ num27 = num;\n    long num28 = num;\n    long num29 = num;\n    long num30 =\
    \ num;\n    long num31 = num;\n    long num32 = num;\n    long num33 = num;\n\
    \    long num34 = num;\n    long num35 = num;\n    long num36 = num;\n    long\
    \ num37 = num;\n    long num38 = num;\n    long num39 = num;\n    long num40 =\
    \ num;\n    long num41 = num;\n    long num42 = num;\n    long num43 = num;\n\
    \    long num44 = num;\n    long num45 = num;\n    long num46 = num;\n    long\
    \ num47 = num;\n    long num48 = num;\n    long num49 = num;\n    long num50 =\
    \ num;\n    long num51 = num;\n    long num52 = num;\n    long num53 = num;\n\
    \    long num54 = num;\n    long num55 = num;\n    long num56 = num;\n    long\
    \ num57 = num;\n    long num58 = num;\n    long num59 = num;\n    long num60 =\
    \ num;\n    long num61 = num;\n    long num62 = num;\n    long num63 = num;\n\
    \    long num64 = num;", "    std::string roman;\n    long remainder = number;\n\
    \    long counter = 0;\n    while (remainder > 0) {\n        remainder--;\n  \
    \      counter++;\n    }\n    roman.clear();\n    while (counter > 0) {\n    \
    \    roman.push_back((remainder % 10) + '0');\n        remainder = remainder /\
    \ 10;\n        counter--;\n    }\n    return roman;", "    std::string roman;\n\
    \    long n = number;\n    long m = 1000;\n    long r = 1;\n    long temp;\n \
    \   while (n >= m) {\n        temp = m * r;\n        roman.append(temp % 10);\n\
    \        n -= temp / 10;\n        r *= 10;\n    }\n    roman.append(n % 10);\n\
    \    return roman;", "    std::string roman;\n    long num = number;\n    long\
    \ num1 = num;\n    long num2 = num;\n    long num3 = num;\n    long num4 = num;\n\
    \    long num5 = num;\n    long num6 = num;\n    long num7 = num;\n    long num8\
    \ = num;\n    long num9 = num;\n    long num10 = num;\n    long num11 = num;\n\
    \    long num12 = num;\n    long num13 = num;\n    long num14 = num;\n    long\
    \ num15 = num;\n    long num16 = num;\n    long num17 = num;\n    long num18 =\
    \ num;\n    long num19 = num;\n    long num20 = num;\n    long num21 = num;\n\
    \    long num22 = num;\n    long num23 = num;\n    long num24 = num;\n    long\
    \ num25 = num;\n    long num26 = num;\n    long num27 = num;\n    long num28 =\
    \ num;\n    long num29 = num;\n    long num30 = num;\n    long num31 = num;\n\
    \    long num32 = num;\n    long num33 = num;\n    long num34 = num;\n    long\
    \ num35 = num;\n    long num36 = num;\n    long num37 = num;\n    long num38 =\
    \ num;\n    long num39 = num;\n    long num40 = num;\n    long num41 = num;\n\
    \    long num42 = num;\n    long num43 = num;\n    long num44 = num;\n    long\
    \ num45 = num;\n    long num46 = num;\n    long num47 = num;\n    long num48 =\
    \ num;\n    long num49 = num;\n    long num50 = num;\n    long num51 = num;\n\
    \    long num52 = num;\n    long num53 = num;\n    long num54 = num;\n    long\
    \ num55 = num;\n    long num56 = num;\n    long num57 = num;\n    long num58 =\
    \ num;\n    long num59 = num;\n    long num60 = num;\n    long num61 = num;\n\
    \    long num62 = num;\n    long num63 = num;\n    long num64 = num;\n    ", " \
    \   std::string roman = \"\";\n    long n = number;\n    long m = 1;\n    while\
    \ (n > 0) {\n        long r = n % 10;\n        roman += int_to_mini_roman_digit(r);\n\
    \        n /= 10;\n    }\n    while (m > 0 && roman.length() > 0) {\n        roman\
    \ = mini_roman_digit_to_int(roman.substr(0, roman.length() - 1));\n        m /=\
    \ 10;\n    }\n    return roman;", "    std::string roman = \"\";\n    long temp\
    \ = number;\n    while (temp > 0) {\n        int digit = temp % 10;\n        roman\
    \ += mini_roman[digit];\n        temp /= 10;\n    }\n    return roman;", "   \
    \ std::string roman;\n    long num = number;\n    while (num > 0) {\n        long\
    \ remainder = num % 10;\n        roman += (char)('M' + remainder);\n        num\
    \ -= remainder;\n    }\n    return roman;", "    std::string roman;\n    if (number\
    \ == 0)\n        return roman;\n    long nums[] = {0, 1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    long sum = 0;\n    long curr = number;\n \
    \   while (curr > 0) {\n        sum += nums[curr % 10];\n        curr /= 10;\n\
    \    }\n    while (sum > 0) {\n        roman += nums[sum % 10];\n        sum /=\
    \ 10;\n    }\n    return roman;", "    std::string roman;\n    long romanNum =\
    \ number;\n    long romanNum1 = romanNum;\n    long romanNum2 = romanNum;\n  \
    \  long romanNum3 = romanNum;\n    long romanNum4 = romanNum;\n    long romanNum5\
    \ = romanNum;\n    long romanNum6 = romanNum;\n    long romanNum7 = romanNum;\n\
    \    long romanNum8 = romanNum;\n    long romanNum9 = romanNum;\n    long romanNum10\
    \ = romanNum;\n    long romanNum11 = romanNum;\n    long romanNum12 = romanNum;\n\
    \    long romanNum13 = romanNum;\n    long romanNum14 = romanNum;\n    long romanNum15\
    \ = romanNum;\n    long romanNum16 = romanNum;\n    long romanNum17 = romanNum;\n\
    \    long romanNum18 = romanNum;\n    long romanNum19 = romanNum;\n    long romanNum20\
    \ = romanNum;\n    long romanNum21 = romanNum;\n    long romanNum22 = romanNum;\n\
    \    long romanNum23 = romanNum;\n    long romanNum24 = romanNum;\n    long romanNum25\
    \ = romanNum;\n    long romanNum26 = romanNum;\n    long romanNum27 = romanNum;\n\
    \    long romanNum28 = romanNum;\n    long romanNum29 = romanNum;\n    long romanNum30\
    \ = romanNum;\n    long romanNum31 = romanNum;\n    long romanNum32 = romanNum;\n\
    \    long romanNum33 = romanNum;\n    long romanNum34 = romanNum;\n    long romanNum35\
    \ = romanNum;\n    long romanNum36 = romanNum;\n    long romanNum37 = romanNum;\n\
    \    long romanNum38 = romanNum;\n    long romanNum39 = romanNum;\n    long romanNum40\
    \ = romanNum;\n    long romanNum41 = romanNum;\n    long romanNum42 = romanNum;\n\
    \    long romanNum4", "    std::string roman;\n    if (number == 0)\n        return\
    \ roman;\n    long roman_num = 0;\n    long roman_den = 1;\n    while (number\
    \ > 0) {\n        roman_num += number % 10;\n        roman_den *= 10;\n      \
    \  number /= 10;\n    }\n    roman_num -= roman_den;\n    while (roman_num >=\
    \ 10) {\n        roman += to_string(roman_num % 10);\n        roman_num /= 10;\n\
    \    }\n    roman += to_string(roman_num);\n    return roman;", "    std::string\
    \ roman;\n    if (number < 0)\n        throw std::invalid_argument(\"Invalid input\"\
    );\n    if (number == 0)\n        roman = \"0\";\n    else if (number < 10)\n\
    \        roman = \"x\" + int_to_mini_roman(number / 10);\n    else if (number\
    \ < 100)\n        roman = \"l\" + int_to_mini_roman(number / 10);\n    else if\
    \ (number < 1000)\n        roman = \"c\" + int_to_mini_roman(number / 10);\n \
    \   else if (number < 10000)\n        roman = \"d\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000)\n        roman = \"cd\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000)\n        roman = \"cm\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000)\n        roman = \"dx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000)\n        roman = \"dl\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000)\n        roman = \"cdl\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000)\n        roman = \"cmx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000000)\n        roman = \"dxc\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000)\n        roman = \"cdxl\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 10000000000000)\n        roman = \"cmxc\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 100000000000000)\n        roman = \"dxcl\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000000)\n        roman = \"cdxli\" +\
    \ int_to_mini_roman(number / 10);\n    else if (number < 10000000000000000)\n\
    \        roman = \"cmxdx\" + int_to_mini_roman(number / 10);\n    else if (number\
    \ < 100000000000000000)\n        roman = \"dxclx\" + int_to_mini_roman(number\
    \ / 10);\n    else if (number < 1000000000000000000)\n        roman = \"cdxlc\"\
    \ + int_to_mini_roman(number / 10);\n    else if (number < 10000000000000000000)\n\
    \        roman = \"cmxcd\" + int_to_mini_roman(number / 10);\n    else if (number\
    \ < 100000000000000000000)\n        roman = \"dx", "    std::string roman;\n \
    \   long n = number;\n    long roman_num = 0;\n    long roman_den = 1;\n    long\
    \ roman_num2 = 0;\n    long roman_den2 = 0;\n    long roman_num3 = 0;\n    long\
    \ roman_den3 = 0;\n    long roman_num4 = 0;\n    long roman_den4 = 0;\n    long\
    \ roman_num5 = 0;\n    long roman_den5 = 0;\n    long roman_num6 = 0;\n    long\
    \ roman_den6 = 0;\n    long roman_num7 = 0;\n    long roman_den7 = 0;\n    long\
    \ roman_num8 = 0;\n    long roman_den8 = 0;\n    long roman_num9 = 0;\n    long\
    \ roman_den9 = 0;\n    long roman_num10 = 0;\n    long roman_den10 = 0;\n    long\
    \ roman_num11 = 0;\n    long roman_den11 = 0;\n    long roman_num12 = 0;\n   \
    \ long roman_den12 = 0;\n    long roman_num13 = 0;\n    long roman_den13 = 0;\n\
    \    long roman_num14 = 0;\n    long roman_den14 = 0;\n    long roman_num15 =\
    \ 0;\n    long roman_den15 = 0;\n    long roman_num16 = 0;\n    long roman_den16\
    \ = 0;\n    long roman_num17 = 0;\n    long roman_den17 = 0;\n    long roman_num18\
    \ = 0;\n    long roman_den18 = 0;\n    long roman_num19 = 0;\n    long roman_den19\
    \ = 0;\n    long roman_num20 = 0;\n    long roman_den20 = 0;\n    long roman_num21\
    \ = 0;\n    long roman_den21 = 0;\n    long roman_num22 = 0;\n    long roman_den22\
    \ = 0;\n    long roman_num23 = 0;\n    long roman_den23 = 0;\n    long roman_num24\
    \ = 0;\n    long roman_den24 = 0;\n    long roman_num25 = 0;\n    long roman_den25\
    \ = 0;\n    long roman_num26 = 0;\n    long roman_den26 = 0;\n    long roman_num27\
    \ = 0;\n    long roman_den27 = 0;\n    long roman_num28 = 0;\n    long roman_den28\
    \ = 0;\n    long roman_num29 = 0;\n    long roman_den29 = 0;\n    long roman_num30\
    \ = 0;\n    long roman_den30 = 0;\n    long roman_num31 = 0;\n    long roman_den31\
    \ = 0;\n    long roman_num32 = 0;\n    long roman_den32 = 0;", "    std::string\
    \ roman;\n    long temp = number;\n    while (temp > 0) {\n        long remainder\
    \ = temp % 10;\n        roman += mini_roman[remainder];\n        temp /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long n = number;\n  \
    \  long m = 1;\n    long r = 1;\n    while (n > 0) {\n        long tmp = n;\n\
    \        n -= tmp * m;\n        m *= 10;\n        r += tmp;\n    }\n    while\
    \ (m > 0) {\n        roman += std::to_string(m);\n        m /= 10;\n    }\n  \
    \  roman += std::to_string(r);\n    return roman;", "  assert(number >= 1 && number\
    \ <= 1000);\n  std::string roman;\n  roman.reserve(number + 1);\n  long num =\
    \ number;\n  while (num > 0) {\n    long mod = num % 1000;\n    num = num / 1000;\n\
    \    roman += mini_roman[mod];\n  }\n  return roman;", "    std::string roman;\n\
    \    long n = number;\n    long m = n;\n    long temp = 0;\n    long roman_num\
    \ = 0;\n    long roman_num_temp = 0;\n    long roman_num_temp2 = 0;\n    long\
    \ roman_num_temp3 = 0;\n    long roman_num_temp4 = 0;\n    long roman_num_temp5\
    \ = 0;\n    long roman_num_temp6 = 0;\n    long roman_num_temp7 = 0;\n    long\
    \ roman_num_temp8 = 0;\n    long roman_num_temp9 = 0;\n    long roman_num_temp10\
    \ = 0;\n    long roman_num_temp11 = 0;\n    long roman_num_temp12 = 0;\n    long\
    \ roman_num_temp13 = 0;\n    long roman_num_temp14 = 0;\n    long roman_num_temp15\
    \ = 0;\n    long roman_num_temp16 = 0;\n    long roman_num_temp17 = 0;\n    long\
    \ roman_num_temp18 = 0;\n    long roman_num_temp19 = 0;\n    long roman_num_temp20\
    \ = 0;\n    long roman_num_temp21 = 0;\n    long roman_num_temp22 = 0;\n    long\
    \ roman_num_temp23 = 0;\n    long roman_num_temp24 = 0;\n    long roman_num_temp25\
    \ = 0;\n    long roman_num_temp26 = 0;\n    long roman_num_temp27 = 0;\n    long\
    \ roman_num_temp28 = 0;\n    long roman_num_temp29 = 0;\n    long roman_num_temp30\
    \ = 0;\n    long roman_num_temp31 = 0;\n    long roman_num_temp32 = 0;\n    long\
    \ roman_num_temp33 = 0;\n    long roman_num_temp34 = 0;\n    long roman_num_temp35\
    \ = 0;\n    long roman_num_temp36 = 0;\n    long roman_num_temp37 = 0;\n    long\
    \ roman_num_temp38 = 0;\n    long roman_num_temp39 = 0;\n    long roman_num_temp40\
    \ = 0;\n    long roman_num_temp41 = 0;\n    long roman_num_temp42 = 0;\n    long\
    \ roman_num_temp43 = 0;\n    long roman_num_temp44 = 0;\n    long roman_num_temp45\
    \ = 0;\n    long roman_num_temp46 = 0;\n    long roman_num_temp47 = 0;\n    long\
    \ roman_num_temp48 = 0;\n    long roman_num_temp49 = 0;\n    long roman_num_temp50\
    \ = 0;\n    long roman_num_temp51 = 0;\n    long roman_num_temp52 = 0;\n    long\
    \ roman_num_temp53 = 0;\n    long roman_num_temp54 = 0;\n    long ro", "    std::string\
    \ roman;\n    long num = number;\n    long num1 = num % 10;\n    long num2 = num\
    \ / 10;\n    long num3 = num % 100;\n    long num4 = num / 100;\n    long num5\
    \ = num % 1000;\n    long num6 = num / 1000;\n    long num7 = num % 10000;\n \
    \   long num8 = num / 10000;\n    long num9 = num % 100000;\n    long num10 =\
    \ num / 100000;\n    long num11 = num % 1000000;\n    long num12 = num / 1000000;\n\
    \    long num13 = num % 10000000;\n    long num14 = num / 10000000;\n    long\
    \ num15 = num % 1000000000;\n    long num16 = num / 1000000000;\n    long num17\
    \ = num % 10000000000;\n    long num18 = num / 10000000000;\n    long num19 =\
    \ num % 100000000000;\n    long num20 = num / 100000000000;\n    long num21 =\
    \ num % 10000000000000;\n    long num22 = num / 10000000000000;\n    long num23\
    \ = num % 100000000000000;\n    long num24 = num / 100000000000000;\n    long\
    \ num25 = num % 1000000000000000;\n    long num26 = num / 1000000000000000;\n\
    \    long num27 = num % 100000000000000000;\n    long num28 = num / 100000000000000000;\n\
    \    long num29 = num % 1000000000000000000;\n    long num30 = num / 1000000000000000000;\n\
    \    long num31 = num % 10000000000000000000;\n    long num32 = num / 10000000000000000000;\n\
    \    long num33 = num % 100000000000000000000;\n    long num34 = num / 100000000000000000000;\n\
    \    long num35 = num % 1000000000000000000000;\n    long num36 = num / 1000000000000000000000;\n\
    \    long num37 = num % 10000000000000000000000;\n    long num38 = num / 10000000000000000000000;\n\
    \    long num39 = num % 100000000000000000000000;\n    long num40 = num / 100000000000000000000000;\n\
    \    long num41 = num % 10000000000000000000000000;\n    long num42 = num / 10000000000000000000000000;\n\
    \    long num43 = num % 100000000000000000000000000;\n    long num44 = num / 100000000000000000000000000;\n\
    \    long num45 = num % 1000000000000000000000000000;\n    long num46 = num /\
    \ 1000000000000000000000000000;\n    long num47 = ", "    std::string roman;\n\
    \    long num;\n    num = number;\n    while (num > 0) {\n        roman = to_string(num\
    \ % 100) + roman;\n        num /= 100;\n    }\n    return roman;", "    std::string\
    \ roman;\n    long num = number;\n    long num2 = num;\n    long num3 = num;\n\
    \    long num4 = num;\n    long num5 = num;\n    long num6 = num;\n    long num7\
    \ = num;\n    long num8 = num;\n    long num9 = num;\n    long num10 = num;\n\
    \    long num11 = num;\n    long num12 = num;\n    long num13 = num;\n    long\
    \ num14 = num;\n    long num15 = num;\n    long num16 = num;\n    long num17 =\
    \ num;\n    long num18 = num;\n    long num19 = num;\n    long num20 = num;\n\
    \    long num21 = num;\n    long num22 = num;\n    long num23 = num;\n    long\
    \ num24 = num;\n    long num25 = num;\n    long num26 = num;\n    long num27 =\
    \ num;\n    long num28 = num;\n    long num29 = num;\n    long num30 = num;\n\
    \    long num31 = num;\n    long num32 = num;\n    long num33 = num;\n    long\
    \ num34 = num;\n    long num35 = num;\n    long num36 = num;\n    long num37 =\
    \ num;\n    long num38 = num;\n    long num39 = num;\n    long num40 = num;\n\
    \    long num41 = num;\n    long num42 = num;\n    long num43 = num;\n    long\
    \ num44 = num;\n    long num45 = num;\n    long num46 = num;\n    long num47 =\
    \ num;\n    long num48 = num;\n    long num49 = num;\n    long num50 = num;\n\
    \    long num51 = num;\n    long num52 = num;\n    long num53 = num;\n    long\
    \ num54 = num;\n    long num55 = num;\n    long num56 = num;\n    long num57 =\
    \ num;\n    long num58 = num;\n    long num59 = num;\n    long num60 = num;\n\
    \    long num61 = num;\n    long num62 = num;\n    long num63 = num;\n    long\
    \ num64 = num;\n    long num65 = num;\n", "    std::string roman;\n    long temp\
    \ = number;\n    long num = 0;\n    while (temp > 0) {\n        temp = temp /\
    \ 10;\n        num++;\n    }\n    long num2 = num;\n    while (num2 > 0) {\n \
    \       roman = roman.substr(0, roman.length() - 1) + to_string(num % 10);\n \
    \       num2 = num2 / 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long remainder = number;\n    long temp = 0;\n    while (remainder > 0) {\n\
    \        remainder = remainder / 10;\n        temp = temp * 10 + remainder;\n\
    \    }\n    roman = int_to_mini_roman_helper(temp);\n    roman = roman.substr(0,\
    \ roman.size() - 1);\n    return roman;", "    std::string roman = \"\";\n   \
    \ long num = (number * 100) % 1000;\n    long num1 = (number * 10) % 100;\n  \
    \  long num2 = (number * 1) % 10;\n    long num3 = (number * 100) % 10;\n    long\
    \ num4 = (number * 1000) % 10;\n    long num5 = (number * 10000) % 10;\n    long\
    \ num6 = (number * 100000) % 10;\n    long num7 = (number * 1000000) % 10;\n \
    \   long num8 = (number * 10000000) % 10;\n    long num9 = (number * 100000000)\
    \ % 10;\n    long num10 = (number * 1000000000) % 10;\n    long num11 = (number\
    \ * 10000000000) % 10;\n    long num12 = (number * 100000000000) % 10;\n    long\
    \ num13 = (number * 1000000000000) % 10;\n    long num14 = (number * 10000000000000)\
    \ % 10;\n    long num15 = (number * 100000000000000) % 10;\n    long num16 = (number\
    \ * 1000000000000000) % 10;\n    long num17 = (number * 10000000000000000) % 10;\n\
    \    long num18 = (number * 100000000000000000) % 10;\n    long num19 = (number\
    \ * 1000000000000000000) % 10;\n    long num20 = (number * 10000000000000000000)\
    \ % 10;\n    long num21 = (number * 100000000000000000000) % 10;\n    long num22\
    \ = (number * 1000000000000000000000) % 10;\n    long num23 = (number * 10000000000000000000000)\
    \ % 10;\n    long num24 = (number * 100000000000000000000000) % 10;\n    long\
    \ num25 = (number * 1000000000000000000000000) % 10;\n    long num26 = (number\
    \ * 10000000000000000000000000) % 10;\n    long num27 = (number * 100000000000000000000000000)\
    \ % 10;\n    long num28 = (number * 1000000000000000000000000000) % 10;\n    long\
    \ num29 = (number * 10000000000000000000000000000) % 10;\n    long num30 = (number\
    \ * 100000000000000000000000000000) % 10;\n    long num31 = (number * 1000000000000000000000000000000)\
    \ % 10;\n    long num32 = (number * 10000000000000000000000000000000) % 10;\n\
    \    long num33 = (number * 100000000000000000000000000000000) % 10;\n    long\
    \ num34 = (number * 1000000000000000000000000000000000) % 10;\n    long num35\
    \ = (number * 1000000000000000000000000000000000) % 10;\n    long num36 = (number\
    \ * 1000000000000000000000000000000000) % 10;\n    long num37 = (number * 1000000000000000000000000000000000)\
    \ % 10;\n    long num38 = (number * 1000000000000000000000000000000000) % 10;\n\
    \    long num39 = (number * 1000000000000000000", "    std::string roman;\n  \
    \  if (number < 0)\n        throw std::invalid_argument(\"Invalid input\");\n\
    \    if (number < 10)\n        roman = \"x\";\n    else if (number < 100)\n  \
    \      roman = \"c\";\n    else if (number < 1000)\n        roman = \"m\";\n \
    \   else\n        roman = \"d\";\n    while (number >= 1000) {\n        roman\
    \ = roman.substr(0, roman.length() - 1) + to_string(number % 1000) + roman.substr(roman.length()\
    \ - 1);\n        number /= 1000;\n    }\n    while (number >= 100) {\n       \
    \ roman = roman.substr(0, roman.length() - 1) + to_string(number % 100) + roman.substr(roman.length()\
    \ - 1);\n        number /= 100;\n    }\n    while (number >= 10) {\n        roman\
    \ = roman.substr(0, roman.length() - 1) + to_string(number % 10) + roman.substr(roman.length()\
    \ - 1);\n        number /= 10;\n    }\n    roman = roman.substr(0, roman.length()\
    \ - 1) + to_string(number) + roman.substr(roman.length() - 1);\n    return roman;",
  "    std::string roman;\n    if (number == 0)\n        roman = \"0\";\n    else\
    \ {\n        long nums[] = { 1000, 500, 100, 50, 10, 5, 1, 1 };\n        long\
    \ sum = 0;\n        for (int i = 0; i < sizeof(nums) / sizeof(nums[0]); i++) {\n\
    \            sum += nums[i];\n            if (number < sum)\n                break;\n\
    \        }\n        roman = \"\";\n        while (number >= sum) {\n         \
    \   roman += nums[number % sum];\n            number /= sum;\n        }\n    }\n\
    \    return roman;", "    std::string roman;\n    long num = number;\n    while\
    \ (num > 0) {\n        int digit = num % 10;\n        roman += (digits[digit]);\n\
    \        num -= digit;\n    }\n    return roman;", "    std::string roman;\n \
    \   long n = number;\n    long m = 1;\n    while (n >= 1000) {\n        n /= 1000;\n\
    \        m *= 10;\n    }\n    while (n > 0) {\n        roman += std::to_string(m)\
    \ + std::to_string(n%10);\n        n /= 10;\n    }\n    return roman;"]
stop_tokens:
- "\n}"
