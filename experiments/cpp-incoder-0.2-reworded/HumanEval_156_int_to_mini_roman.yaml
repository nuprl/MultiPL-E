name: HumanEval_156_int_to_mini_roman
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer,\
  \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
  // Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman((19))\n\
  // (\"xix\")\n// >>> int_to_mini_roman((152))\n// (\"clii\")\n// >>> int_to_mini_roman((426))\n\
  // (\"cdxxvi\")\nstd::string int_to_mini_roman(long number) {\n"
tests: "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19))\
  \ == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251))\
  \ == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500))\
  \ == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4))\
  \ == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90))\
  \ == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532))\
  \ == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994))\
  \ == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
completions: ["    std::string roman = \"\";\n    long n = number;\n    long m = 1;\n\
    \    while (n >= 1000) {\n        m += n / 1000;\n        n %= 1000;\n    }\n\
    \    roman = roman.substr(0, roman.length() - 1) + to_string(m);\n    long x =\
    \ n;\n    while (x > 0) {\n        roman += to_string(x % 10);\n        x /= 10;\n\
    \    }\n    return roman;", "    std::string roman;\n    long num;\n    num =\
    \ number;\n    while (num > 0) {\n        roman = roman.substr(0, roman.length()\
    \ - 1) + to_string(num % 10);\n        num /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long num;\n    num = number;\n    while (num > 0) {\n\
    \        roman = to_string(num % 100) + roman;\n        num /= 100;\n    }\n \
    \   return roman;", "    std::string roman;\n    long temp = number;\n    while\
    \ (temp > 0) {\n        int digit = temp % 10;\n        roman += mini_roman[digit];\n\
    \        temp /= 10;\n    }\n    return roman;", "  assert(number > 0);\n  std::string\
    \ roman;\n  long num = number;\n  while (num > 0) {\n    long mod = num % 10;\n\
    \    roman += (mod < 4 ? to_string(mod) : \"c\");\n    num /= 10;\n  }\n  return\
    \ roman;", "    std::string roman;\n    long roman_numeral = 0;\n    long roman_numeral_string\
    \ = 0;\n    long roman_numeral_string2 = 0;\n    long roman_numeral_string3 =\
    \ 0;\n    long roman_numeral_string4 = 0;\n    long roman_numeral_string5 = 0;\n\
    \    long roman_numeral_string6 = 0;\n    long roman_numeral_string7 = 0;\n  \
    \  long roman_numeral_string8 = 0;\n    long roman_numeral_string9 = 0;\n    long\
    \ roman_numeral_string10 = 0;\n    long roman_numeral_string11 = 0;\n    long\
    \ roman_numeral_string12 = 0;\n    long roman_numeral_string13 = 0;\n    long\
    \ roman_numeral_string14 = 0;\n    long roman_numeral_string15 = 0;\n    long\
    \ roman_numeral_string16 = 0;\n    long roman_numeral_string17 = 0;\n    long\
    \ roman_numeral_string18 = 0;\n    long roman_numeral_string19 = 0;\n    long\
    \ roman_numeral_string20 = 0;\n    long roman_numeral_string21 = 0;\n    long\
    \ roman_numeral_string22 = 0;\n    long roman_numeral_string23 = 0;\n    long\
    \ roman_numeral_string24 = 0;\n    long roman_numeral_string25 = 0;\n    long\
    \ roman_numeral_string26 = 0;\n    long roman_numeral_string27 = 0;\n    long\
    \ roman_numeral_string28 = 0;\n    long roman_numeral_string29 = 0;\n    long\
    \ roman_numeral_string30 = 0;\n    long roman_numeral_string31 = 0;\n    long\
    \ roman_numeral_string32 = 0;\n    long roman_numeral_string33 = 0;\n    long\
    \ roman_numeral_string34 = 0;\n    long roman_numeral_string35 = 0;\n    long\
    \ roman_numeral_string36 = 0;\n    long roman_numeral_string37 = 0;\n    long\
    \ roman_numeral_string38 = 0;\n    long roman_numeral_string39 = 0;\n    long\
    \ roman_numeral_string40 = 0;\n    long roman_numeral_string41 = 0;\n    long\
    \ roman_numeral_string42 = 0;\n    long roman_numeral_string43 = 0;\n    long\
    \ roman_numeral_string44 = 0;\n    long roman_numeral_string45 = 0;\n    long\
    \ roman_numeral_string46 = 0;\n    long roman_numeral_string47 = 0;\n    long\
    \ roman_numeral_string48 = 0;\n    long roman_numeral_string49 = 0;\n    long\
    \ roman_numeral_string50 = 0;\n    long ro", "    std::string roman;\n    long\
    \ remainder = number;\n    long temp = 0;\n    while (number != 0) {\n       \
    \ remainder = number % 10;\n        temp = remainder * 100 + temp;\n        roman\
    \ = to_string(temp) + roman;\n        number /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = 0;\n    while (number != 0) {\n       \
    \ temp = number % 10;\n        roman += (temp < 4 ? to_string(temp) : to_string(temp\
    \ + 1));\n        number /= 10;\n    }\n    return roman;", "    std::string roman\
    \ = \"\";\n    long temp = number;\n    while (temp > 0) {\n        int digit\
    \ = temp % 10;\n        roman += (digit < 4 ? \"\" : std::string(digit - 4, \"\
    M\")) + std::string(digit - 9, \"CM\");\n        temp /= 10;\n    }\n    return\
    \ roman;", "    std::string roman;\n    long romanNum = number;\n    long romanNum1\
    \ = romanNum;\n    long romanNum2 = romanNum;\n    long romanNum3 = romanNum;\n\
    \    long romanNum4 = romanNum;\n    long romanNum5 = romanNum;\n    long romanNum6\
    \ = romanNum;\n    long romanNum7 = romanNum;\n    long romanNum8 = romanNum;\n\
    \    long romanNum9 = romanNum;\n    long romanNum10 = romanNum;\n    long romanNum11\
    \ = romanNum;\n    long romanNum12 = romanNum;\n    long romanNum13 = romanNum;\n\
    \    long romanNum14 = romanNum;\n    long romanNum15 = romanNum;\n    long romanNum16\
    \ = romanNum;\n    long romanNum17 = romanNum;\n    long romanNum18 = romanNum;\n\
    \    long romanNum19 = romanNum;\n    long romanNum20 = romanNum;\n    long romanNum21\
    \ = romanNum;\n    long romanNum22 = romanNum;\n    long romanNum23 = romanNum;\n\
    \    long romanNum24 = romanNum;\n    long romanNum25 = romanNum;\n    long romanNum26\
    \ = romanNum;\n    long romanNum27 = romanNum;\n    long romanNum28 = romanNum;\n\
    \    long romanNum29 = romanNum;\n    long romanNum30 = romanNum;\n    long romanNum31\
    \ = romanNum;\n    long romanNum32 = romanNum;\n    long romanNum33 = romanNum;\n\
    \    long romanNum34 = romanNum;\n    long romanNum35 = romanNum;\n    long romanNum36\
    \ = romanNum;\n    long romanNum37 = romanNum;\n    long romanNum38 = romanNum;\n\
    \    long romanNum39 = romanNum;\n    long romanNum40 = romanNum;\n    long romanNum41\
    \ = romanNum;\n    long romanNum42 = romanNum;\n    long romanNum4", "    std::string\
    \ roman;\n    if (number < 0)\n        roman = \"-\";\n    else if (number ==\
    \ 0)\n        roman = \"0\";\n    else if (number < 4)\n        roman = \"i\"\
    ;\n    else if (number < 9)\n        roman = \"v\";\n    else if (number < 14)\n\
    \        roman = \"vi\";\n    else if (number < 19)\n        roman = \"x\";\n\
    \    else if (number < 24)\n        roman = \"xvi\";\n    else if (number < 39)\n\
    \        roman = \"l\";\n    else if (number < 49)\n        roman = \"xl\";\n\
    \    else if (number < 99)\n        roman = \"c\";\n    else if (number < 149)\n\
    \        roman = \"cv\";\n    else if (number < 199)\n        roman = \"xc\";\n\
    \    else if (number < 249)\n        roman = \"lc\";\n    else if (number < 499)\n\
    \        roman = \"xlc\";\n    else if (number < 999)\n        roman = \"xix\"\
    ;\n    else if (number < 1499)\n        roman = \"cli\";\n    else if (number\
    \ < 1999)\n        roman = \"cci\";\n    else if (number < 2499)\n        roman\
    \ = \"xci\";\n    else if (number < 4999)\n        roman = \"clii\";\n    else\
    \ if (number < 9999)\n        roman = \"cxxxvi\";\n    else if (number < 14999)\n\
    \        roman = \"cxlvi\";\n    else if (number < 19999)\n        roman = \"\
    xxvi\";\n    else if (number < 24999)\n        roman = \"xvi\";\n    else if (number\
    \ < 49999)\n        roman = \"xix\";\n    else if (number < 99999)\n        roman\
    \ = \"xxx\";\n    else if (number < 149999)\n        roman = \"xlxxvi\";\n   \
    \ else if (number < 199999)\n        roman = \"xxvi\";\n    else if (number <\
    \ 249999)\n        roman = \"xvi\";\n    else if (number < 499999)\n        roman\
    \ = \"xix\";\n    else if (number < 999999)\n        roman = \"xxx\";\n    else\
    \ if (number < 1500000)\n        roman = \"xlxxxvi\";\n    else if (number < 1999999)\n\
    \        roman = \"xxvi\";\n    else if (number < 2499998)\n        roman = \"\
    xvi\";\n    else if (number < 4999999)\n        roman = \"xix\";\n    else if\
    \ (number < 9999999)\n        roman = \"xxx\";\n    else if (number < 15000000)\n\
    \        roman = \"xlxxxvi", "    std::string roman;\n    long temp = number;\n\
    \    while (temp > 0) {\n        int remainder = temp % 10;\n        roman +=\
    \ to_string(static_cast<int>(remainder));\n        temp /= 10;\n    }\n    roman\
    \ = roman.substr(0, roman.length() - 1);\n    return roman;", "    std::string\
    \ roman;\n    if (number == 0)\n        return roman;\n    long nums[] = {0, 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    long romans[] = {0, 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    long index = 0;\n    while\
    \ (number >= nums[index]) {\n        roman.append(1, static_cast<char>('M'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('CM'));\n      \
    \  number -= romans[index];\n        index++;\n    }\n    while (number >= nums[index])\
    \ {\n        roman.append(1, static_cast<char>('D'));\n        number -= nums[index];\n\
    \        index++;\n    }\n    while (number >= romans[index]) {\n        roman.append(1,\
    \ static_cast<char>('CD'));\n        number -= romans[index];\n        index++;\n\
    \    }\n    while (number >= nums[index]) {\n        roman.append(1, static_cast<char>('C'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('XC'));\n      \
    \  number -= romans[index];\n        index++;\n    }\n    while (number >= nums[index])\
    \ {\n        roman.append(1, static_cast<char>('L'));\n        number -= nums[index];\n\
    \        index++;\n    }\n    while (number >= romans[index]) {\n        roman.append(1,\
    \ static_cast<char>('XL'));\n        number -= romans[index];\n        index++;\n\
    \    }\n    while (number >= nums[index]) {\n        roman.append(1, static_cast<char>('X'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('IX'));\n      \
    \  number -= romans[index];\n        index++;\n    }\n    while (number >= nums[index])\
    \ {\n        roman.append(1, static_cast<char>('V'));\n        number -= nums[index];\n\
    \        index++;\n    }\n    while (number >= romans[index]) {\n        roman.append(1,\
    \ static_cast<char>('IV'));\n        number -= romans[index];\n        index++;\n\
    \    }\n    while (number >= nums[index]) {\n        roman.append(1, static_cast<char>('I'));\n\
    \        number -= nums[index];\n        index++;\n    }\n    while (number >=\
    \ romans[index]) {\n        roman.append(1, static_cast<char>('II'));\n      \
    \  number -= romans[index];\n        index++;\n    }", "    std::string roman;\n\
    \    long temp = 0;\n    int i = 0;\n    while (number >= 1000) {\n        temp\
    \ = number / 1000;\n        roman.append(temp % 10);\n        number -= temp *\
    \ 1000;\n        roman.append(\"M\");\n        i++;\n    }\n    while (number\
    \ >= 100) {\n        temp = number / 100;\n        roman.append(temp % 10);\n\
    \        number -= temp * 100;\n        roman.append(\"CM\");\n        i++;\n\
    \    }\n    while (number >= 10) {\n        temp = number / 10;\n        roman.append(temp\
    \ % 10);\n        number -= temp * 10;\n        roman.append(\"D\");\n       \
    \ i++;\n    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"C\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"X\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"L\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"V\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);\n        number -= temp;\n        roman.append(\"I\");\n        i++;\n\
    \    }\n    while (number >= 1) {\n        temp = number;\n        roman.append(temp\
    \ % 10);", "    std::string roman;\n    long temp = number;\n    while (temp >\
    \ 0) {\n        long mod = temp % 10;\n        roman += (mod < 4 ? \"\" : (mod\
    \ < 7 ? \"\" : \"c\") + mod);\n        temp /= 10;\n    }\n    return roman;",
  "    std::string roman;\n    long temp = number;\n    while (temp > 0) {\n     \
    \   int digit = temp % 10;\n        roman += mini_roman[digit];\n        temp\
    \ /= 10;\n    }\n    return roman;", "    std::string roman;\n    if (number ==\
    \ 0)\n        roman = \"0\";\n    else {\n        long temp = number;\n      \
    \  while (temp > 0) {\n            roman = mini_roman[temp % 10] + roman;\n  \
    \          temp /= 10;\n        }\n    }\n    return roman;", "    std::string\
    \ roman = \"\";\n    long temp = 0;\n    while (number >= 1000) {\n        temp\
    \ = number % 1000;\n        roman += mini_roman[temp];\n        number /= 1000;\n\
    \    }\n    temp = number;\n    while (temp > 0) {\n        roman += mini_roman[temp\
    \ % 10];\n        temp /= 10;\n    }\n    return roman;", "    std::string roman;\n\
    \    long temp;\n    long num;\n    long rem;\n    long i=0;\n    while(number!=0){\n\
    \        num=number%1000;\n        rem=number%10;\n        roman+=to_string(num);\n\
    \        number=number/10;\n        roman+=to_string(num);\n        roman+=to_string(rem);\n\
    \        i++;\n    }\n    while(roman.length()>i){\n        roman=roman.substr(0,i)+\"\
    M\"+roman.substr(i);\n    }\n    return roman;", "    std::string roman;\n   \
    \ if (number == 0) {\n        roman = \"0\";\n    } else {\n        long temp\
    \ = 0;\n        while (number >= 1000) {\n            number /= 1000;\n      \
    \      temp += 1000;\n        }\n        while (number >= 100) {\n           \
    \ number /= 100;\n            temp += 100;\n        }\n        while (number >=\
    \ 10) {\n            number /= 10;\n            temp += 10;\n        }\n     \
    \   roman = to_string(temp);\n        roman = to_string(temp - number) + roman;\n\
    \    }\n    return roman;"]
stop_tokens:
- "\n}"
