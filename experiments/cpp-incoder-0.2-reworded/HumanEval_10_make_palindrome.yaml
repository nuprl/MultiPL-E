name: HumanEval_10_make_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome\
  \ that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the\
  \ longest postfix of supplied string that is a palindrome.\n// - Append to the end\
  \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
  // >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n//\
  \ (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"\
  xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"\
  jerry\")) == (\"jerryrrej\"));\n}\n"
completions: ["    string reverse = \"\";\n    for (auto &c : string) {\n        reverse\
    \ = reverse + c;\n    }\n    string prefix = string;\n    size_t prefix_length\
    \ = string.length();\n    for (size_t i = prefix_length; i > 0; i--) {\n     \
    \   prefix = prefix + reverse;\n    }\n    return prefix;", "    string reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n\
    \    reverse = reverse.substr(0, reverse.length() / 2);\n    reverse = reverse\
    \ + reverse.substr(reverse.length() / 2);\n    return string;", "    std::string\
    \ reverse = \"\";\n    int start = 0;\n    int end = string.length() - 1;\n  \
    \  while (start < end) {\n        reverse = reverse + string.substr(start, end\
    \ - start + 1);\n        start = end + 1;\n        end = start - 1;\n    }\n \
    \   reverse = reverse + string.substr(start, string.length() - start);\n    return\
    \ reverse;", "    std::string reverse = \"\";\n    for (auto &c : string) {\n\
    \        reverse = reverse + c;\n    }\n    reverse = reverse + reverse;\n   \
    \ return string;", "    std::string result = string;\n    size_t prefix_len =\
    \ string.length();\n    size_t suffix_len = string.length();\n    while (suffix_len\
    \ > 0) {\n        suffix_len--;\n        std::string suffix = string.substr(suffix_len);\n\
    \        std::string reverse = std::string(suffix.rbegin(), suffix.rend());\n\
    \        if (reverse == suffix) {\n            result += suffix;\n           \
    \ break;\n        }\n    }\n    return result;", "    std::string reverse = \"\
    \";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n   \
    \ reverse = reverse.substr(0, reverse.length() / 2);\n    reverse = reverse +\
    \ reverse.substr(reverse.length() / 2);\n    return string;", "    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = string.length() - 1;\n    while (i < j)\
    \ {\n        reverse += string[i];\n        i++;\n        j--;\n    }\n    reverse\
    \ += string[j];\n    return reverse;", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    int max_len = 0, max_pos = 0;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        max_len = max(max_len, string.length()\
    \ - i);\n        max_pos = i;\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    string reverse\
    \ = string(max_pos, max_len);\n    for (int i = string.length() - 1; i >= 0; i--)\
    \ {\n        reverse = string(max_pos, max_len) + string(i);\n        if (reverse\
    \ == string) {\n            return reverse;\n        }\n    }\n    return \"\"\
    ;", "    std::string palindrome;\n    string reverse;\n    int length = string.length();\n\
    \    int max_index = length - 1;\n    int max_index2 = length - 2;\n    int max_index3\
    \ = length - 3;\n    int max_index4 = length - 4;\n    int max_index5 = length\
    \ - 5;\n    int max_index6 = length - 6;\n    int max_index7 = length - 7;\n \
    \   int max_index8 = length - 8;\n    int max_index9 = length - 9;\n    int max_index10\
    \ = length - 10;\n    int max_index11 = length - 11;\n    int max_index12 = length\
    \ - 12;\n    int max_index13 = length - 13;\n    int max_index14 = length - 14;\n\
    \    int max_index15 = length - 15;\n    int max_index16 = length - 16;\n    int\
    \ max_index17 = length - 17;\n    int max_index18 = length - 18;\n    int max_index19\
    \ = length - 19;\n    int max_index20 = length - 20;\n    int max_index21 = length\
    \ - 21;\n    int max_index22 = length - 22;\n    int max_index23 = length - 23;\n\
    \    int max_index24 = length - 24;\n    int max_index25 = length - 25;\n    int\
    \ max_index26 = length - 26;\n    int max_index27 = length - 27;\n    int max_index28\
    \ = length - 28;\n    int max_index29 = length - 29;\n    int max_index30 = length\
    \ - 30;\n    int max_index31 = length - 31;\n    int max_index32 = length - 32;\n\
    \    int max_index33 = length - 33;\n    int max_index34 = length - 34;\n    int\
    \ max_index35 = length - 35;\n    int max_index36 = length - 36;\n    int max_index37\
    \ = length - 37;\n    int max_index38 = length - 38;\n    int max_index39 = length\
    \ - 39;\n    int max_index40 = length - 40;\n    int max_index41 = length - 41;\n\
    \    int max_index42 = length - 42;\n    int max_index43 = length - 43;\n    int\
    \ max_index44 = length - 44;\n    int max_index45 = length - 45;\n    int max_index46\
    \ = length - 46;\n    int max_index47 = length - 47;\n    int max_index48 = length\
    \ - 48;\n    int max_index49 = length - 49;\n    int max_index50 = length - 50;\n\
    \    int max_index51 = length - 51;\n    int max_index52 = length - 52;\n    int\
    \ max_index53 = length - 53;\n    int max_index54 = length - 54;\n    int max_index55\
    \ = length - 55;\n    int max_index56 = length - 56;\n    int max_index57 = length\
    \ - 57;\n    int max_index58 = length - 58;\n    int max_index", "    std::string\
    \ palindrome = string;\n    std::string prefix = string;\n    std::string suffix\
    \ = string;\n    std::string reverse = \"\";\n    int i = 0;\n    int j = 0;\n\
    \    while (i < prefix.size() && j < suffix.size()) {\n        if (prefix[i] !=\
    \ suffix[j]) {\n            break;\n        }\n        reverse = reverse + suffix[j];\n\
    \        i++;\n        j++;\n    }\n    if (i == prefix.size()) {\n        return\
    \ palindrome;\n    }\n    if (j == suffix.size()) {\n        return reverse +\
    \ palindrome;\n    }\n    return reverse + palindrome + suffix;", "    string\
    \ postfix = \"\";\n    int length = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        postfix += string[i];\n        length++;\n    }\n    std::string\
    \ reverse = postfix.substr(0, length);\n    string prefix = postfix.substr(0,\
    \ length - 1);\n    std::string result = prefix + reverse + postfix;\n    return\
    \ result;", "    std::string reversed = string;\n    std::reverse(string.begin(),\
    \ string.end());\n    string += reversed;\n    return string;", "    std::string\
    \ palindrome = string;\n    std::string reverse;\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reverse += string[i];\n \
    \   }\n    for (int i = length - 1; i >= 0; i--) {\n        reverse += string[i];\n\
    \    }\n    palindrome += reverse;\n    return palindrome;", "    std::string\
    \ reverse = \"\";\n    size_t pos = 0;\n    size_t longest = 0;\n    for (size_t\
    \ i = 0; i < string.length(); i++) {\n        pos = i;\n        while (pos > 0\
    \ && string[pos-1] == string[pos]) {\n            pos--;\n        }\n        reverse\
    \ += string[pos];\n        if (pos > longest) {\n            longest = pos;\n\
    \        }\n    }\n    reverse += string[longest];\n    return reverse;", "  \
    \  std::string reverse = \"\";\n    std::string prefix = \"\";\n    int max_len\
    \ = string.length();\n    for (int i = 0; i < max_len; i++) {\n        if (string[i]\
    \ == string[max_len - 1 - i]) {\n            prefix += string[i];\n        } else\
    \ {\n            prefix += string[i] + string[max_len - 1 - i];\n        }\n \
    \   }\n    reverse = prefix;\n    for (int i = max_len - 1; i >= 0; i--) {\n \
    \       if (string[i] == string[max_len - 1 - i]) {\n            reverse += string[i];\n\
    \        } else {\n            reverse += string[i] + string[max_len - 1 - i];\n\
    \        }\n    }\n    return reverse;", "    std::string reverse = \"\";\n  \
    \  int length = string.length();\n    int i = 0;\n    while (i < length) {\n \
    \       reverse = reverse + string[i];\n        i++;\n    }\n    reverse = reverse\
    \ + string[length - 1];\n    return reverse;", "    std::string ans = string;\n\
    \    int len = string.length();\n    int max_len = 0, min_len = len;\n    for\
    \ (int i = 0; i < len; i++) {\n        if (string[i] == string[len - 1 - i]) {\n\
    \            len--;\n        } else {\n            len--;\n            len++;\n\
    \        }\n        if (len > max_len) {\n            max_len = len;\n       \
    \ }\n        if (len < min_len) {\n            min_len = len;\n        }\n   \
    \ }\n    std::string reverse = string;\n    for (int i = 0; i < max_len; i++)\
    \ {\n        reverse[max_len - 1 - i] = string[i];\n    }\n    reverse[max_len\
    \ - 1 - min_len] = string[max_len - 1 - min_len];\n    ans = ans + reverse;\n\
    \    return ans;", "    string postfix = \"\";\n    string prefix = \"\";\n  \
    \  string reverse = \"\";\n    string suffix;\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++) {\n        postfix = postfix + string[i];\n\
    \    }\n    length = postfix.length();\n    for (int i = 0; i < length; i++) {\n\
    \        prefix = prefix + postfix;\n    }\n    length = prefix.length();\n  \
    \  for (int i = 0; i < length; i++) {\n        reverse = reverse + prefix[i];\n\
    \    }\n    length = reverse.length();\n    for (int i = 0; i < length; i++) {\n\
    \        suffix = reverse + suffix;\n    }\n    return suffix;", "    std::string\
    \ reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      longest = i;\n        }\n    }\n    for (size_t i = 0; i < string.size()\
    \ - longest; i++) {\n        reverse += string[i];\n    }\n    reverse += string[string.size()\
    \ - longest];\n    return reverse;", "    string reverse;\n    string prefix;\n\
    \    string suffix;\n    string longest;\n    longest = string;\n    reverse =\
    \ string;\n    prefix = string;\n    suffix = string;\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        longest = prefix + longest;\n\
    \        reverse = reverse + reverse;\n        prefix = prefix.substr(0, i) +\
    \ prefix.substr(i + 1, string.length());\n        suffix = suffix.substr(0, i)\
    \ + suffix.substr(i + 1, string.length());\n    }\n    longest = prefix + longest;\n\
    \    reverse = reverse + reverse;\n    longest = longest.substr(0, string.length()\
    \ / 2);\n    reverse = reverse + reverse.substr(0, string.length() / 2);\n   \
    \ longest = longest + suffix;\n    reverse = reverse + reverse.substr(0, string.length()\
    \ / 2);\n    return longest;"]
stop_tokens:
- "\n}"
