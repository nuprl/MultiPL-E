name: HumanEval_10_make_palindrome
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find the shortest palindrome\
  \ that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the\
  \ longest postfix of supplied string that is a palindrome.\n// - Append to the end\
  \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
  // >>> make_palindrome((\"\"))\n// (\"\")\n// >>> make_palindrome((\"cat\"))\n//\
  \ (\"catac\")\n// >>> make_palindrome((\"cata\"))\n// (\"catac\")\nstd::string make_palindrome(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = make_palindrome;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"x\")) == (\"x\"));\n    assert(candidate((\"\
  xyz\")) == (\"xyzyx\"));\n    assert(candidate((\"xyx\")) == (\"xyx\"));\n    assert(candidate((\"\
  jerry\")) == (\"jerryrrej\"));\n}\n"
completions: ["    string reverse = \"\";\n    for (auto &c : string) {\n        reverse\
    \ = reverse + c;\n    }\n    string prefix = string;\n    size_t prefix_length\
    \ = string.length();\n    for (size_t i = prefix_length; i > 0; i--) {\n     \
    \   prefix = prefix + reverse;\n    }\n    return prefix;", "    string reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n\
    \    reverse = reverse.substr(0, reverse.length() / 2);\n    reverse = reverse\
    \ + reverse.substr(reverse.length() / 2);\n    return string;", "    std::string\
    \ reverse = \"\";\n    int start = 0;\n    int end = string.length() - 1;\n  \
    \  while (start < end) {\n        reverse = reverse + string.substr(start, end\
    \ - start + 1);\n        start = end + 1;\n        end = start - 1;\n    }\n \
    \   reverse = reverse + string.substr(start, string.length() - start);\n    return\
    \ reverse;", "    std::string reverse = \"\";\n    for (auto &c : string) {\n\
    \        reverse = reverse + c;\n    }\n    reverse = reverse + reverse;\n   \
    \ return string;", "    std::string result = string;\n    size_t prefix_len =\
    \ string.length();\n    size_t suffix_len = string.length();\n    while (suffix_len\
    \ > 0) {\n        suffix_len--;\n        std::string suffix = string.substr(suffix_len);\n\
    \        std::string reverse = std::string(suffix.rbegin(), suffix.rend());\n\
    \        if (reverse == suffix) {\n            result += suffix;\n           \
    \ break;\n        }\n    }\n    return result;", "    std::string reverse = \"\
    \";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n   \
    \ reverse = reverse.substr(0, reverse.length() / 2);\n    reverse = reverse +\
    \ reverse.substr(reverse.length() / 2);\n    return string;", "    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = string.length() - 1;\n    while (i < j)\
    \ {\n        reverse += string[i];\n        i++;\n        j--;\n    }\n    reverse\
    \ += string[j];\n    return reverse;", "    // Find the longest postfix of supplied\
    \ string that is a palindrome.\n    int max_len = 0, max_pos = 0;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        max_len = max(max_len, string.length()\
    \ - i);\n        max_pos = i;\n    }\n    // Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n    string reverse\
    \ = string(max_pos, max_len);\n    for (int i = string.length() - 1; i >= 0; i--)\
    \ {\n        reverse = string(max_pos, max_len) + string(i);\n        if (reverse\
    \ == string) {\n            return reverse;\n        }\n    }\n    return \"\"\
    ;", "    std::string palindrome;\n    string reverse;\n    int length = string.length();\n\
    \    int max_index = length - 1;\n    int max_index2 = length - 2;\n    int max_index3\
    \ = length - 3;\n    int max_index4 = length - 4;\n    int max_index5 = length\
    \ - 5;\n    int max_index6 = length - 6;\n    int max_index7 = length - 7;\n \
    \   int max_index8 = length - 8;\n    int max_index9 = length - 9;\n    int max_index10\
    \ = length - 10;\n    int max_index11 = length - 11;\n    int max_index12 = length\
    \ - 12;\n    int max_index13 = length - 13;\n    int max_index14 = length - 14;\n\
    \    int max_index15 = length - 15;\n    int max_index16 = length - 16;\n    int\
    \ max_index17 = length - 17;\n    int max_index18 = length - 18;\n    int max_index19\
    \ = length - 19;\n    int max_index20 = length - 20;\n    int max_index21 = length\
    \ - 21;\n    int max_index22 = length - 22;\n    int max_index23 = length - 23;\n\
    \    int max_index24 = length - 24;\n    int max_index25 = length - 25;\n    int\
    \ max_index26 = length - 26;\n    int max_index27 = length - 27;\n    int max_index28\
    \ = length - 28;\n    int max_index29 = length - 29;\n    int max_index30 = length\
    \ - 30;\n    int max_index31 = length - 31;\n    int max_index32 = length - 32;\n\
    \    int max_index33 = length - 33;\n    int max_index34 = length - 34;\n    int\
    \ max_index35 = length - 35;\n    int max_index36 = length - 36;\n    int max_index37\
    \ = length - 37;\n    int max_index38 = length - 38;\n    int max_index39 = length\
    \ - 39;\n    int max_index40 = length - 40;\n    int max_index41 = length - 41;\n\
    \    int max_index42 = length - 42;\n    int max_index43 = length - 43;\n    int\
    \ max_index44 = length - 44;\n    int max_index45 = length - 45;\n    int max_index46\
    \ = length - 46;\n    int max_index47 = length - 47;\n    int max_index48 = length\
    \ - 48;\n    int max_index49 = length - 49;\n    int max_index50 = length - 50;\n\
    \    int max_index51 = length - 51;\n    int max_index52 = length - 52;\n    int\
    \ max_index53 = length - 53;\n    int max_index54 = length - 54;\n    int max_index55\
    \ = length - 55;\n    int max_index56 = length - 56;\n    int max_index57 = length\
    \ - 57;\n    int max_index58 = length - 58;\n    int max_index", "    std::string\
    \ palindrome = string;\n    std::string prefix = string;\n    std::string suffix\
    \ = string;\n    std::string reverse = \"\";\n    int i = 0;\n    int j = 0;\n\
    \    while (i < prefix.size() && j < suffix.size()) {\n        if (prefix[i] !=\
    \ suffix[j]) {\n            break;\n        }\n        reverse = reverse + suffix[j];\n\
    \        i++;\n        j++;\n    }\n    if (i == prefix.size()) {\n        return\
    \ palindrome;\n    }\n    if (j == suffix.size()) {\n        return reverse +\
    \ palindrome;\n    }\n    return reverse + palindrome + suffix;", "    string\
    \ postfix = \"\";\n    int length = 0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        postfix += string[i];\n        length++;\n    }\n    std::string\
    \ reverse = postfix.substr(0, length);\n    string prefix = postfix.substr(0,\
    \ length - 1);\n    std::string result = prefix + reverse + postfix;\n    return\
    \ result;", "    std::string reversed = string;\n    std::reverse(string.begin(),\
    \ string.end());\n    string += reversed;\n    return string;", "    std::string\
    \ palindrome = string;\n    std::string reverse;\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reverse += string[i];\n \
    \   }\n    for (int i = length - 1; i >= 0; i--) {\n        reverse += string[i];\n\
    \    }\n    palindrome += reverse;\n    return palindrome;", "    std::string\
    \ reverse = \"\";\n    size_t pos = 0;\n    size_t longest = 0;\n    for (size_t\
    \ i = 0; i < string.length(); i++) {\n        pos = i;\n        while (pos > 0\
    \ && string[pos-1] == string[pos]) {\n            pos--;\n        }\n        reverse\
    \ += string[pos];\n        if (pos > longest) {\n            longest = pos;\n\
    \        }\n    }\n    reverse += string[longest];\n    return reverse;", "  \
    \  std::string reverse = \"\";\n    std::string prefix = \"\";\n    int max_len\
    \ = string.length();\n    for (int i = 0; i < max_len; i++) {\n        if (string[i]\
    \ == string[max_len - 1 - i]) {\n            prefix += string[i];\n        } else\
    \ {\n            prefix += string[i] + string[max_len - 1 - i];\n        }\n \
    \   }\n    reverse = prefix;\n    for (int i = max_len - 1; i >= 0; i--) {\n \
    \       if (string[i] == string[max_len - 1 - i]) {\n            reverse += string[i];\n\
    \        } else {\n            reverse += string[i] + string[max_len - 1 - i];\n\
    \        }\n    }\n    return reverse;", "    std::string reverse = \"\";\n  \
    \  int length = string.length();\n    int i = 0;\n    while (i < length) {\n \
    \       reverse = reverse + string[i];\n        i++;\n    }\n    reverse = reverse\
    \ + string[length - 1];\n    return reverse;", "    std::string ans = string;\n\
    \    int len = string.length();\n    int max_len = 0, min_len = len;\n    for\
    \ (int i = 0; i < len; i++) {\n        if (string[i] == string[len - 1 - i]) {\n\
    \            len--;\n        } else {\n            len--;\n            len++;\n\
    \        }\n        if (len > max_len) {\n            max_len = len;\n       \
    \ }\n        if (len < min_len) {\n            min_len = len;\n        }\n   \
    \ }\n    std::string reverse = string;\n    for (int i = 0; i < max_len; i++)\
    \ {\n        reverse[max_len - 1 - i] = string[i];\n    }\n    reverse[max_len\
    \ - 1 - min_len] = string[max_len - 1 - min_len];\n    ans = ans + reverse;\n\
    \    return ans;", "    string postfix = \"\";\n    string prefix = \"\";\n  \
    \  string reverse = \"\";\n    string suffix;\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++) {\n        postfix = postfix + string[i];\n\
    \    }\n    length = postfix.length();\n    for (int i = 0; i < length; i++) {\n\
    \        prefix = prefix + postfix;\n    }\n    length = prefix.length();\n  \
    \  for (int i = 0; i < length; i++) {\n        reverse = reverse + prefix[i];\n\
    \    }\n    length = reverse.length();\n    for (int i = 0; i < length; i++) {\n\
    \        suffix = reverse + suffix;\n    }\n    return suffix;", "    std::string\
    \ reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      longest = i;\n        }\n    }\n    for (size_t i = 0; i < string.size()\
    \ - longest; i++) {\n        reverse += string[i];\n    }\n    reverse += string[string.size()\
    \ - longest];\n    return reverse;", "    string reverse;\n    string prefix;\n\
    \    string suffix;\n    string longest;\n    longest = string;\n    reverse =\
    \ string;\n    prefix = string;\n    suffix = string;\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        longest = prefix + longest;\n\
    \        reverse = reverse + reverse;\n        prefix = prefix.substr(0, i) +\
    \ prefix.substr(i + 1, string.length());\n        suffix = suffix.substr(0, i)\
    \ + suffix.substr(i + 1, string.length());\n    }\n    longest = prefix + longest;\n\
    \    reverse = reverse + reverse;\n    longest = longest.substr(0, string.length()\
    \ / 2);\n    reverse = reverse + reverse.substr(0, string.length() / 2);\n   \
    \ longest = longest + suffix;\n    reverse = reverse + reverse.substr(0, string.length()\
    \ / 2);\n    return longest;", "    string reverse = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reverse += string[i];\n \
    \   }\n    reverse += string[length - 1];\n    return reverse;", "    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n    while (i < j) {\n\
    \        reverse += string[j];\n        i++;\n        j--;\n    }\n    reverse\
    \ += string[i];\n    return reverse;", "    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    int max_length = 0;\n    int index = 0;\n    while (index\
    \ < string.length()) {\n        if (string[index] == string[index + 1]) {\n  \
    \          postfix = postfix + string[index];\n            index = index + 1;\n\
    \        } else {\n            max_length = std::max(max_length, index - 1);\n\
    \            prefix = prefix + string[index];\n            index = index + 1;\n\
    \        }\n    }\n    max_length = std::max(max_length, index - 1);\n    prefix\
    \ = prefix + string[index];\n    index = index + 1;\n    while (index < string.length())\
    \ {\n        if (string[index] == string[index + 1]) {\n            postfix =\
    \ postfix + string[index];\n            index = index + 1;\n        } else {\n\
    \            max_length = std::max(max_length, index - 1);\n            prefix\
    \ = prefix + string[index];\n            index = index + 1;\n        }\n    }\n\
    \    max_length = std::max(max_length, index - 1);\n    prefix = prefix + string[index];\n\
    \    index = index + 1;\n    while (index < string.length()) {\n        if (string[index]\
    \ == string[index + 1]) {\n            postfix = postfix + string[index];\n  \
    \          index = index + 1;\n        } else {\n            max_length = std::max(max_length,\
    \ index - 1);\n            prefix = prefix + string[index];\n            index\
    \ = index + 1;\n        }\n    }\n    max_length = std::max(max_length, index\
    \ - 1);\n    prefix = prefix + string[index];\n    index = index + 1;\n    while\
    \ (index < string.length()) {\n        if (string[index] == string[index + 1])\
    \ {\n            postfix = postfix + string[index];\n            index = index\
    \ + 1;\n        } else {\n            max_length = std::max(max_length, index\
    \ - 1);\n            prefix = prefix + string[index];\n            index = index\
    \ + 1;\n        }\n    }\n    max_length = std::max(max_length, index - 1);\n\
    \    prefix = prefix + string[index];\n    index = index + 1;\n    while (index\
    \ < string.length()) {\n        if (string[index] == string[index + 1]) {\n  \
    \          postfix = postfix + string[index];\n            index = index + 1;\n\
    \        } else {\n            max_length = std::max(max_length, index - 1);\n\
    \            prefix = prefix + string[index];\n            index = index + 1;\n\
    \        }\n    }\n    max_length = std::max(max_length, index - 1);\n    prefix\
    \ = prefix + string[index];\n    index = index + 1;\n    while (index < string.length())\
    \ {\n        if (string[index] == string[index + 1]) {\n            postfix =\
    \ postfix + string[index];\n            index = index + 1;\n        } else {\n\
    \            max_length = std::max(max_length, index - 1);\n            prefix\
    \ = prefix + string[index];\n            index = index + 1;\n        }\n    }\n\
    \    max_length = std::max(max_length, index - 1);\n    prefix = prefix + string[index];",
  "    std::string reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0;\
    \ i < string.size(); i++) {\n        size_t j = string.size() - i - 1;\n     \
    \   if (j > longest) {\n            longest = j;\n        }\n        reverse =\
    \ reverse + string[j];\n    }\n    reverse = reverse + string[longest];\n    return\
    \ reverse;", "    std::string palindrome;\n    std::string prefix = string;\n\
    \    std::string suffix = string;\n    int length = 0;\n    while(length > 0)\
    \ {\n        length = prefix.size();\n        while(length > 0) {\n          \
    \  length--;\n            suffix = prefix + suffix;\n        }\n        std::string\
    \ reverse = suffix;\n        reverse.resize(string.length());\n        std::reverse(reverse.begin(),\
    \ reverse.end());\n        palindrome = palindrome + reverse + suffix;\n     \
    \   prefix = prefix;\n        suffix = suffix;\n    }\n    return palindrome;",
  "    string reverse;\n    string prefix;\n    string suffix;\n    string postfix\
    \ = string;\n    bool found = false;\n    int i = 0;\n    int j = string.length()\
    \ - 1;\n    while (!found && i < j) {\n        if (string[i] != string[j]) {\n\
    \            found = true;\n        }\n        else if (string[i] == string[j])\
    \ {\n            i++;\n            j--;\n        }\n        else {\n         \
    \   reverse = reverse + string[i];\n            i++;\n            j--;\n     \
    \   }\n    }\n    prefix = postfix.substr(0, i);\n    suffix = postfix.substr(i);\n\
    \    postfix = prefix + reverse;\n    return postfix;", "    string reverse =\
    \ \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n\
    \    reverse = reverse.substr(0, reverse.length() / 2);\n    reverse = reverse\
    \ + reverse.substr(reverse.length() / 2);\n    return reverse;", "    string reverse\
    \ = \"\";\n    for (size_t i = 0; i < string.size(); i++) {\n        reverse =\
    \ reverse + string[i];\n    }\n    reverse = reverse + string[string.size() -\
    \ 1];\n    return reverse;", "    std::string palindrome = string;\n    int length\
    \ = string.length();\n    int max_index = length - 1;\n    int max_index2 = length\
    \ - 2;\n    int max_index3 = length - 3;\n    int max_index4 = length - 4;\n \
    \   int max_index5 = length - 5;\n    int max_index6 = length - 6;\n    int max_index7\
    \ = length - 7;\n    int max_index8 = length - 8;\n    int max_index9 = length\
    \ - 9;\n    int max_index10 = length - 10;\n    int max_index11 = length - 11;\n\
    \    int max_index12 = length - 12;\n    int max_index13 = length - 13;\n    int\
    \ max_index14 = length - 14;\n    int max_index15 = length - 15;\n    int max_index16\
    \ = length - 16;\n    int max_index17 = length - 17;\n    int max_index18 = length\
    \ - 18;\n    int max_index19 = length - 19;\n    int max_index20 = length - 20;\n\
    \    int max_index21 = length - 21;\n    int max_index22 = length - 22;\n    int\
    \ max_index23 = length - 23;\n    int max_index24 = length - 24;\n    int max_index25\
    \ = length - 25;\n    int max_index26 = length - 26;\n    int max_index27 = length\
    \ - 27;\n    int max_index28 = length - 28;\n    int max_index29 = length - 29;\n\
    \    int max_index30 = length - 30;\n    int max_index31 = length - 31;\n    int\
    \ max_index32 = length - 32;\n    int max_index33 = length - 33;\n    int max_index34\
    \ = length - 34;\n    int max_index35 = length - 35;\n    int max_index36 = length\
    \ - 36;\n    int max_index37 = length - 37;\n    int max_index38 = length - 38;\n\
    \    int max_index39 = length - 39;\n    int max_index40 = length - 40;\n    int\
    \ max_index41 = length - 41;\n    int max_index42 = length - 42;\n    int max_index43\
    \ = length - 43;\n    int max_index44 = length - 44;\n    int max_index45 = length\
    \ - 45;\n    int max_index46 = length - 46;\n    int max_index47 = length - 47;\n\
    \    int max_index48 = length - 48;\n    int max_index49 = length - 49;\n    int\
    \ max_index50 = length - 50;\n    int max_index51 = length - 51;\n    int max_index52\
    \ = length - 52;\n    int max_index53 = length - 53;\n    int max_index54 = length\
    \ - 54;\n    int max_index55 = length - 55;\n    int max_index56 = length - 56;\n\
    \    int max_index57 = length - 57;\n    int max_index58 = length - 58;\n    int\
    \ max_index59 = length - 59", "    string reverse = \"\";\n    int max_len = string.length();\n\
    \    for (int i = 0; i < max_len; i++) {\n        reverse += string[i];\n    }\n\
    \    reverse = reverse.substr(0, max_len);\n    string prefix = \"\";\n    int\
    \ prefix_len = string.length();\n    for (int i = 0; i < max_len; i++) {\n   \
    \     prefix += string[i];\n    }\n    prefix = prefix.substr(0, prefix_len);\n\
    \    return prefix + reverse;", "    std::string reverse = \"\";\n    int i =\
    \ 0;\n    int j = string.size() - 1;\n    while (i < j) {\n        reverse +=\
    \ string[i];\n        i++;\n        j--;\n    }\n    reverse += string[j];\n \
    \   return reverse;", "    string reverse = \"\";\n    int i = 0;\n    int j =\
    \ string.size() - 1;\n    while (i < j) {\n        reverse += string[i];\n   \
    \     i++;\n        j--;\n    }\n    reverse += string[j];\n    return reverse;",
  "    std::string palindrome = string;\n    size_t length = string.length();\n  \
    \  size_t i = 0;\n    while (i < length) {\n        size_t j = length - 1;\n \
    \       while (j >= 0) {\n            if (string[i] != string[j]) {\n        \
    \        break;\n            }\n            j--;\n        }\n        if (j ==\
    \ -1) {\n            palindrome.push_back(string[i]);\n            i++;\n    \
    \    }\n    }\n    return palindrome;", "    string reverse = \"\";\n    int length\
    \ = string.length();\n    int i = 0;\n    while (i < length) {\n        reverse\
    \ += string[length - 1 - i];\n        i++;\n    }\n    string prefix = string;\n\
    \    string postfix = reverse;\n    string result = prefix + postfix;\n    return\
    \ result;", "    std::string reverse = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length / 2; i++) {\n        reverse += string[i];\n \
    \   }\n    for (int i = length / 2; i < length; i++) {\n        reverse += string[i];\n\
    \    }\n    return string + reverse;", "    std::string result = string;\n   \
    \ std::string prefix = string;\n    std::string suffix = string;\n    int length\
    \ = string.length();\n    int max_index = 0;\n    int max_index2 = 0;\n    int\
    \ max_index3 = 0;\n    int max_index4 = 0;\n    int max_index5 = 0;\n    int max_index6\
    \ = 0;\n    int max_index7 = 0;\n    int max_index8 = 0;\n    int max_index9 =\
    \ 0;\n    int max_index10 = 0;\n    int max_index11 = 0;\n    int max_index12\
    \ = 0;\n    int max_index13 = 0;\n    int max_index14 = 0;\n    int max_index15\
    \ = 0;\n    int max_index16 = 0;\n    int max_index17 = 0;\n    int max_index18\
    \ = 0;\n    int max_index19 = 0;\n    int max_index20 = 0;\n    int max_index21\
    \ = 0;\n    int max_index22 = 0;\n    int max_index23 = 0;\n    int max_index24\
    \ = 0;\n    int max_index25 = 0;\n    int max_index26 = 0;\n    int max_index27\
    \ = 0;\n    int max_index28 = 0;\n    int max_index29 = 0;\n    int max_index30\
    \ = 0;\n    int max_index31 = 0;\n    int max_index32 = 0;\n    int max_index33\
    \ = 0;\n    int max_index34 = 0;\n    int max_index35 = 0;\n    int max_index36\
    \ = 0;\n    int max_index37 = 0;\n    int max_index38 = 0;\n    int max_index39\
    \ = 0;\n    int max_index40 = 0;\n    int max_index41 = 0;\n    int max_index42\
    \ = 0;\n    int max_index43 = 0;\n    int max_index44 = 0;\n    int max_index45\
    \ = 0;\n    int max_index46 = 0;\n    int max_index47 = 0;\n    int max_index48\
    \ = 0;\n    int max_index49 = 0;\n    int max_index50 = 0;\n    int max_index51\
    \ = 0;\n    int max_index52 = 0;\n    int max_index53 = 0;\n    int max_index54\
    \ = 0;\n    int max_index55 = 0;\n    int max_index56 = 0;\n    int max_index57\
    \ = 0;\n    int max_index58 = 0;\n    int max_index59 = 0;\n    int max_index60\
    \ = 0;\n    int max_index61 = 0;\n    int max_index62 = 0;\n    int max_index63\
    \ = 0;\n    int max_index64 = 0;\n    int max_index65 = 0;\n    int max_index66\
    \ = 0;\n    int max_index67 = 0;\n    int max_index68 = 0;\n    int max_index69\
    \ = 0;\n    int max_index70 = 0;\n    int max_index71 = 0;\n    int max_index72\
    \ = 0;\n    int max_index73 = 0;\n    int max_index74 = 0;\n    int max_index75\
    \ = 0;\n    int max_index76 = 0;\n    int max_index77 = 0;\n    int max_index78\
    \ = 0;\n    int max_index79 = 0;\n    int max_index80 = 0;\n    int max_index81\
    \ = 0;\n    int max_index82 = 0;\n    int max_index83", "    std::string result\
    \ = string;\n    int length = string.length();\n    int max_len = length;\n  \
    \  int max_pos = 0;\n    for (int i = 1; i < length; ++i) {\n        if (string[i]\
    \ == string[length - i - 1]) {\n            max_len = i;\n            max_pos\
    \ = i;\n        }\n    }\n    std::string prefix = string.substr(0, max_pos);\n\
    \    std::string suffix = string.substr(max_pos + 1, length);\n    std::string\
    \ reverse = suffix;\n    for (int i = 0; i < max_len; ++i) {\n        reverse[max_len\
    \ - 1 - i] = reverse[i];\n    }\n    reverse = reverse + prefix;\n    result =\
    \ prefix + reverse;\n    return result;", "    string postfix = \"\";\n    int\
    \ length = 0;\n    for (auto c : string) {\n        length++;\n        postfix\
    \ += c;\n    }\n    string reverse = std::string(length - postfix.size(), 0);\n\
    \    for (int i = length - 1; i >= 0; i--) {\n        reverse[length - 1 - i]\
    \ = postfix[i];\n    }\n    return reverse + postfix;", "    std::string palindrome\
    \ = string;\n    size_t prefix_len = string.length();\n    size_t suffix_len =\
    \ string.length();\n    bool found = false;\n    while (!found && suffix_len >\
    \ 0) {\n        suffix_len--;\n        found = string.compare(prefix_len, suffix_len,\
    \ string[prefix_len], string[suffix_len]) == 0;\n    }\n    if (found) {\n   \
    \     palindrome.append(string);\n        palindrome.append(string);\n    }\n\
    \    return palindrome;", "    std::string result = string;\n    std::string postfix\
    \ = \"\";\n    std::string prefix = \"\";\n    int longest = 0;\n    for (int\
    \ i = 0; i < string.length(); i++) {\n        postfix = postfix + string[i];\n\
    \        prefix = prefix + string[i];\n        if (string[i] == string[string.length()\
    \ - i - 1]) {\n            longest = i;\n        }\n    }\n    std::string reverse\
    \ = prefix.substr(0, longest);\n    std::string append = reverse;\n    for (int\
    \ i = longest - 1; i >= 0; i--) {\n        append = append + string[i];\n    }\n\
    \    result = result + append;\n    return result;", "    std::string postfix\
    \ = \"\";\n    std::string prefix = \"\";\n    std::string reverse = \"\";\n \
    \   for (auto &c : string) {\n        if (c != ' ') {\n            postfix +=\
    \ c;\n        } else {\n            prefix = postfix.substr(0, postfix.size()\
    \ - 1);\n            reverse = prefix + reverse;\n            postfix = \"\";\n\
    \        }\n    }\n    return reverse;", "    string reversed = string;\n    reversed.erase(reversed.begin(),\
    \ std::find_if(reversed.rbegin(), reversed.rend(), [](char ch) {\n        return\
    \ !std::isalpha(ch);\n    }));\n    reversed.insert(reversed.end(), string.begin(),\
    \ string.end());\n    return reversed;", "    std::string reverse = \"\";\n  \
    \  size_t start = 0;\n    size_t end = string.size() - 1;\n    while (start <\
    \ end) {\n        reverse += string[start];\n        start += 1;\n        end\
    \ -= 1;\n    }\n    reverse += string[start];\n    return reverse;", "    std::string\
    \ palindrome = string;\n    size_t prefix_length = 0;\n    size_t suffix_length\
    \ = 0;\n    size_t longest_palindrome_length = 0;\n    std::string longest_palindrome;\n\
    \    // Find the longest postfix of supplied string that is a palindrome.\n  \
    \  while (true) {\n        prefix_length = longest_palindrome_length;\n      \
    \  suffix_length = string.length() - longest_palindrome_length;\n        longest_palindrome_length\
    \ = longest_palindrome.length();\n        if (suffix_length < longest_palindrome_length)\
    \ {\n            longest_palindrome_length = suffix_length;\n        }\n     \
    \   if (prefix_length + longest_palindrome_length == string.length()) {\n    \
    \        break;\n        }\n        if (string[prefix_length] == string[prefix_length\
    \ + longest_palindrome_length - 1]) {\n            longest_palindrome.append(string[prefix_length]);\n\
    \            longest_palindrome.append(string[prefix_length + longest_palindrome_length\
    \ - 1]);\n        }\n    }\n    // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n    size_t prefix_length\
    \ = string.length() - longest_palindrome_length;\n    longest_palindrome.append(string.substr(prefix_length));\n\
    \    return palindrome;", "    std::string reverse = \"\";\n    size_t max_index\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        if (string[i]\
    \ == string[max_index]) {\n            max_index++;\n        } else {\n      \
    \      max_index = 0;\n        }\n        reverse = reverse + string[i];\n   \
    \ }\n    reverse = reverse + string[max_index];\n    return reverse;", "    string\
    \ reverse;\n    string prefix;\n    string suffix;\n    string postfix = string;\n\
    \    int length = string.length();\n    int i = 0;\n    int j = 0;\n    while\
    \ (i < length) {\n        if (string[i] == string[j]) {\n            postfix.push_back(string[i]);\n\
    \            i++;\n            j++;\n        } else {\n            reverse.push_back(string[j]);\n\
    \            j++;\n        }\n    }\n    prefix = postfix.substr(0, i);\n    suffix\
    \ = postfix.substr(i);\n    return prefix + reverse + suffix;", "    string reverse\
    \ = \"\";\n    int len = string.length();\n    for (int i = 0; i < len / 2; i++)\
    \ {\n        reverse += string[i];\n    }\n    reverse += string[len - 1];\n \
    \   return reverse;", "    std::string reverse = \"\";\n    size_t start = 0;\n\
    \    size_t end = string.size() - 1;\n    while (start < end) {\n        reverse\
    \ += string[start];\n        start += 1;\n        end -= 1;\n    }\n    reverse\
    \ += string[end];\n    return reverse;", "    std::string result = string;\n \
    \   size_t prefix_len = string.length();\n    size_t suffix_len = string.length();\n\
    \    while (suffix_len > 0) {\n        suffix_len--;\n        if (string[suffix_len]\
    \ != string[suffix_len + 1])\n            break;\n    }\n    std::string prefix\
    \ = string.substr(0, prefix_len);\n    std::string suffix = string.substr(suffix_len);\n\
    \    std::string reverse = suffix;\n    std::reverse(prefix.begin(), prefix.end());\n\
    \    reverse.append(reverse);\n    result = prefix + reverse;\n    return result;",
  "    string reverse = \"\";\n    for (auto &c : string) {\n        reverse = reverse\
    \ + c;\n    }\n    reverse = reverse.substr(0, reverse.length() / 2);\n    reverse\
    \ = reverse + reverse.substr(reverse.length() / 2, reverse.length());\n    return\
    \ string;", "    string postfix = \"\";\n    string prefix = \"\";\n    string\
    \ reverse = \"\";\n    string longest = \"\";\n    string longestPrefix = \"\"\
    ;\n    string longestPostfix = \"\";\n    string longestReverse = \"\";\n    string\
    \ longestLongest = \"\";\n    string longestLongestPrefix = \"\";\n    string\
    \ longestLongestPostfix = \"\";\n    string longestLongestReverse = \"\";\n  \
    \  string longestLongestLongest = \"\";\n    string longestLongestLongestPrefix\
    \ = \"\";\n    string longestLongestLongestPostfix = \"\";\n    string longestLongestLongestReverse\
    \ = \"\";\n    string longestLongestLongestLongest = \"\";\n    string longestLongestLongestLongestPrefix\
    \ = \"\";\n    string longestLongestLongestLongestPostfix = \"\";\n    string\
    \ longestLongestLongestLongestReverse = \"\";\n    string longestLongestLongestLongestLongest\
    \ = \"\";\n    string longestLongestLongestLongestLongestPrefix = \"\";\n    string\
    \ longestLongestLongestLongestLongestPostfix = \"\";\n    string longestLongestLongestLongestLongestReverse\
    \ = \"\";\n    string longestLongestLongestLongestLongestLongest = \"\";\n   \
    \ string longestLongestLongestLongestLongestLongestPrefix = \"\";\n    string\
    \ longestLongestLongestLongestLongestLongestPostfix = \"\";\n    string longestLongestLongestLongestLongestLongestReverse\
    \ = \"\";\n    string longestLongestLongestLongestLongestLongestLongest = \"\"\
    ;\n    string longestLongestLongestLongestLongestLongestLongestPrefix = \"\";\n\
    \    string longestLongestLongestLongestLongestLongestLongestPostfix = \"\";\n\
    \    string longestLongestLongestLongestLongestLongestLongestReverse = \"\";\n\
    \    string longestLongestLongestLongestLongestLongestLongest = \"\";\n    string\
    \ longestLongestLongestLongestLongestLongestLongestPrefix = \"\";\n    string\
    \ longestLongestLongestLongestLongestLongestLongestPostfix = \"\";\n    string\
    \ longestLongestLongestLongestLongestLongestLongestReverse = \"\";\n    string\
    \ longestLongestLongestLongestLongestLongestLongestLongest = \"\";\n    string\
    \ longestLongestLongestLongestLongestLongestLongestPrefix = \"\";\n    string\
    \ longestLongestLongestLongestLongestLongestLongestLongestPostfix = \"\";\n  \
    \  string longestLongestLongestLongestLongest", "    string reverse = \"\";\n\
    \    for (auto &c : string) {\n        reverse.push_back(c);\n    }\n    reverse.erase(reverse.size()\
    \ - 1, reverse.end());\n    string prefix = string;\n    string postfix = \"\"\
    ;\n    for (auto &c : string) {\n        postfix.push_back(c);\n    }\n    for\
    \ (auto &c : reverse) {\n        prefix.push_back(c);\n    }\n    prefix.erase(prefix.size()\
    \ - 1, prefix.end());\n    string result = prefix + postfix;\n    return result;",
  "    string reverse = \"\";\n    int len = string.length();\n    for (int i = 0;\
    \ i < len / 2; i++) {\n        reverse += string[i];\n    }\n    reverse += string[len\
    \ - 1];\n    return reverse;", "    std::string reverse = \"\";\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        size_t j = string.size()\
    \ - 1 - i;\n        if (string[i] == string[j]) {\n            longest = std::max(longest,\
    \ j);\n        }\n    }\n    for (size_t i = 0; i < longest; i++) {\n        reverse\
    \ = reverse + string[i];\n    }\n    reverse = reverse + string[longest];\n  \
    \  return reverse;", "    string postfix = \"\";\n    string prefix = \"\";\n\
    \    int max_length = 0;\n    int index = 0;\n    while (index < string.length())\
    \ {\n        if (string[index] == string[string.length() - index - 1]) {\n   \
    \         postfix = postfix + string[index];\n            max_length = max_length\
    \ + 1;\n        } else {\n            postfix = postfix + string[index];\n   \
    \         prefix = prefix + string[string.length() - index - 1];\n           \
    \ max_length = max_length + 1;\n        }\n        index = index + 1;\n    }\n\
    \    if (max_length == 1) {\n        return string;\n    }\n    std::string reverse\
    \ = prefix;\n    for (int i = 0; i < max_length - 1; i++) {\n        reverse =\
    \ reverse + postfix;\n    }\n    return reverse;", "    string postfix = string;\n\
    \    string prefix = string;\n    string reverse = \"\";\n    int length = string.length();\n\
    \    int i = 0;\n    int j = 0;\n    while (i < length) {\n        if (string[i]\
    \ == string[length - 1 - i]) {\n            reverse = reverse + string[i];\n \
    \           i++;\n            j = length - 1 - i;\n        } else {\n        \
    \    reverse = reverse + string[i];\n            i++;\n            j = length\
    \ - 1 - i;\n        }\n    }\n    prefix = prefix.substr(0, j);\n    postfix =\
    \ postfix.substr(0, j);\n    string result = prefix + reverse + postfix;\n   \
    \ return result;", "    string postfix = \"\";\n    string prefix = \"\";\n  \
    \  for (auto c : string) {\n        postfix += c;\n    }\n    for (auto c : string)\
    \ {\n        prefix += c;\n    }\n    std::string reverse = prefix;\n    for (auto\
    \ i = postfix.size() - 1; i >= 0; i--) {\n        reverse += postfix[i];\n   \
    \ }\n    return reverse;", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    int max_len = 0, max_len_index = 0;\n    for (int\
    \ i = 0; i <= string.length(); i++) {\n        max_len = max(max_len, string.length()\
    \ - i);\n        max_len_index = i;\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    std::string\
    \ result = string;\n    for (int i = max_len_index - 1; i >= 0; i--) {\n     \
    \   result += string[i];\n    }\n    return result;", "    string reverse;\n \
    \   string postfix = string;\n    int length = string.length();\n    for (int\
    \ i = 0; i < length; i++) {\n        reverse += postfix[i];\n    }\n    for (int\
    \ i = 0; i < length; i++) {\n        postfix = postfix.substr(0, i) + reverse\
    \ + postfix.substr(i + 1, string.length());\n    }\n    return postfix;", "  \
    \  std::string reverse = \"\";\n    for (auto &c : string) {\n        reverse\
    \ = reverse + c;\n    }\n    for (auto &c : string) {\n        if (c != reverse[reverse.size()\
    \ - 1 - c]) {\n            return \"\";\n        }\n    }\n    return string;",
  "    string postfix = \"\";\n    string prefix = \"\";\n    for (auto c : string)\
    \ {\n        postfix += c;\n        prefix += c;\n    }\n    string reverse =\
    \ prefix;\n    for (auto c : postfix) {\n        reverse += c;\n    }\n    return\
    \ reverse + postfix;", "    std::string palindrome = string;\n    size_t prefix_length\
    \ = 0;\n    for (size_t i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[string.length() - i - 1]) {\n            prefix_length++;\n      \
    \  } else {\n            break;\n        }\n    }\n    palindrome.insert(palindrome.length()\
    \ - prefix_length, \"a\");\n    return palindrome;", "    string reverse;\n  \
    \  int len = string.length();\n    int max_len = len - 1;\n    int min_len = 0;\n\
    \    int max_pos = 0;\n    int min_pos = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    while (i < len) {\n        if (string[i] == string[len -\
    \ 1 - i]) {\n            reverse.append(string[i]);\n            i += 1;\n   \
    \     } else {\n            reverse.append(string[i]);\n            reverse.append(string[len\
    \ - 1 - i]);\n            i += 1;\n            j += 1;\n        }\n    }\n   \
    \ if (reverse.length() == 0) {\n        return string;\n    }\n    while (j <\
    \ max_len) {\n        if (reverse[j] == reverse[max_len]) {\n            reverse.append(reverse[j]);\n\
    \            j += 1;\n        } else {\n            reverse.append(reverse[j]);\n\
    \            reverse.append(reverse[max_len]);\n            j += 1;\n        \
    \    max_len -= 1;\n        }\n    }\n    while (k < min_len) {\n        if (reverse[k]\
    \ == reverse[min_len]) {\n            reverse.append(reverse[k]);\n          \
    \  k += 1;\n        } else {\n            reverse.append(reverse[k]);\n      \
    \      reverse.append(reverse[min_len]);\n            k += 1;\n            min_len\
    \ -= 1;\n        }\n    }\n    return reverse;", "    string reverse = \"\";\n\
    \    int len = string.length();\n    for (int i = 0; i < len / 2; i++) {\n   \
    \     reverse += string[i];\n    }\n    reverse += string[len - 1];\n    return\
    \ reverse;", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    int max_len = 0, len = 0;\n    for (auto c : string) {\n        len = std::max(len,\
    \ std::abs(c - string[max_len]));\n        max_len = std::max(max_len, len);\n\
    \    }\n    // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n    std::string result = string;\n   \
    \ for (int i = max_len - 1; i >= 0; i--) {\n        result[max_len - i] = string[i];\n\
    \    }\n    return result;", "    std::string result = string;\n    std::string\
    \ postfix = \"\";\n    int length = 0;\n    while (length < string.length()) {\n\
    \        postfix = postfix + string[length];\n        length++;\n    }\n    std::string\
    \ reverse = \"\";\n    for (int i = 0; i < postfix.length(); i++) {\n        reverse\
    \ = reverse + postfix[i];\n    }\n    if (reverse == postfix) {\n        return\
    \ result;\n    }\n    string temp = string;\n    string temp2 = reverse;\n   \
    \ while (temp2.length() > temp.length()) {\n        temp2 = temp2 + temp[temp.length()\
    \ - temp2.length()];\n    }\n    temp = temp + temp2;\n    temp = temp + reverse;\n\
    \    return temp;", "    std::string palindrome = string;\n    size_t prefix_len\
    \ = string.length();\n    size_t suffix_len = string.length();\n    size_t palindrome_len\
    \ = string.length();\n    size_t prefix_postfix_len = prefix_len + suffix_len;\n\
    \    size_t palindrome_postfix_len = palindrome_len + suffix_len;\n    size_t\
    \ prefix_postfix_postfix_len = prefix_postfix_len + palindrome_postfix_len;\n\
    \    size_t prefix_postfix_postfix_postfix_len = prefix_postfix_postfix_len +\
    \ suffix_len;\n    size_t prefix_postfix_postfix_postfix_postfix_len = prefix_postfix_postfix_postfix_len\
    \ + palindrome_postfix_postfix_len;\n    size_t prefix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_len + suffix_len;\n    size_t prefix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_postfix_len + palindrome_postfix_postfix_postfix_len;\n\
    \    size_t prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_postfix_postfix_len + suffix_len;\n\
    \    size_t prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_postfix_postfix_len + palindrome_postfix_postfix_postfix_postfix_len;\n\
    \    size_t prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len + suffix_len;\n\
    \    size_t prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ + palindrome_postfix_postfix_postfix_postfix_len;\n    size_t prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ + suffix_len;\n    size_t prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ + palindrome_postfix_postfix_postfix_postfix_postfix_len;\n    size_t prefix_postfix_postfix_postfix_postfix_postfix_post",
  "    std::string reverse = \"\";\n    int i = 0;\n    while (i < string.length())\
    \ {\n        reverse = reverse + string[i];\n        i++;\n    }\n    reverse\
    \ = reverse + string[i];\n    return reverse;", "    std::string palindrome =\
    \ string;\n    int length = string.length();\n    int i = 0;\n    int j = 0;\n\
    \    while (i < length / 2) {\n        if (string[i] != string[j]) {\n       \
    \     palindrome.append(string[j]);\n        }\n        i++;\n        j++;\n \
    \   }\n    return palindrome;", "    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    string reverse = \"\";\n    int i = 0;\n    int j = 0;\n    int\
    \ k = 0;\n    int n = string.length();\n    while (i < n) {\n        postfix =\
    \ postfix + string[i];\n        i++;\n    }\n    while (i < n) {\n        prefix\
    \ = prefix + string[i];\n        i++;\n    }\n    while (i < n) {\n        reverse\
    \ = reverse + string[i];\n        i++;\n    }\n    if (postfix != reverse) {\n\
    \        postfix = postfix.substr(0, n - 1);\n        reverse = reverse.substr(0,\
    \ n - 1);\n    }\n    std::string palindrome = prefix + postfix + reverse;\n \
    \   return palindrome;", "    std::string palindrome;\n    int start = 0;\n  \
    \  int end = string.length() - 1;\n    while (start < end) {\n        if (string[start]\
    \ != string[end]) {\n            palindrome.push_back(string[start]);\n      \
    \      palindrome.push_back(string[end]);\n            start = end + 1;\n    \
    \        end = start - 1;\n        } else {\n            start = end + 1;\n  \
    \          end = start - 1;\n        }\n    }\n    return palindrome;", "    string\
    \ reverse;\n    string prefix;\n    string suffix;\n    size_t longest = 0;\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        longest = i;\n    \
    \    for (size_t j = i; j < string.size(); j++) {\n            if (string[j] !=\
    \ string[i - j]) {\n                longest = j;\n                break;\n   \
    \         }\n        }\n    }\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        if (i == longest) {\n            reverse.append(string[i]);\n   \
    \     }\n    }\n    for (size_t i = 0; i < string.size(); i++) {\n        if (i\
    \ == longest + 1) {\n            prefix.append(string[i]);\n        }\n    }\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        if (i == longest +\
    \ 2) {\n            suffix.append(string[i]);\n        }\n    }\n    return prefix\
    \ + reverse + suffix;", "    string reverse = \"\";\n    string prefix = \"\"\
    ;\n    string suffix = \"\";\n    int start = 0;\n    int end = 0;\n    int length\
    \ = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int length2 = 0;\n\
    \    int length3 = 0;\n    int length4 = 0;\n    int length5 = 0;\n    int length6\
    \ = 0;\n    int length7 = 0;\n    int length8 = 0;\n    int length9 = 0;\n   \
    \ int length10 = 0;\n    int length11 = 0;\n    int length12 = 0;\n    int length13\
    \ = 0;\n    int length14 = 0;\n    int length15 = 0;\n    int length16 = 0;\n\
    \    int length17 = 0;\n    int length18 = 0;\n    int length19 = 0;\n    int\
    \ length20 = 0;\n    int length21 = 0;\n    int length22 = 0;\n    int length23\
    \ = 0;\n    int length24 = 0;\n    int length25 = 0;\n    int length26 = 0;\n\
    \    int length27 = 0;\n    int length28 = 0;\n    int length29 = 0;\n    int\
    \ length30 = 0;\n    int length31 = 0;\n    int length32 = 0;\n    int length33\
    \ = 0;\n    int length34 = 0;\n    int length35 = 0;\n    int length36 = 0;\n\
    \    int length37 = 0;\n    int length38 = 0;\n    int length39 = 0;\n    int\
    \ length40 = 0;\n    int length41 = 0;\n    int length42 = 0;\n    int length43\
    \ = 0;\n    int length44 = 0;\n    int length45 = 0;\n    int length46 = 0;\n\
    \    int length47 = 0;\n    int length48 = 0;\n    int length49 = 0;\n    int\
    \ length50 = 0;\n    int length51 = 0;\n    int length52 = 0;\n    int length53\
    \ = 0;\n    int length54 = 0;\n    int length55 = 0;\n    int length56 = 0;\n\
    \    int length57 = 0;\n    int length58 = 0;\n    int length59 = 0;\n    int\
    \ length60 = 0;\n    int length61 = 0;\n    int length62 = 0;\n    int length63\
    \ = 0;\n    int length64 = 0;\n    int length65 = 0;\n    int length66 = 0;\n\
    \    int length67 = 0;\n    int length68 = 0;\n    int length69 = 0;\n    int\
    \ length70 = 0;\n    int length71 = 0;\n    int length72 = 0;\n    int length73\
    \ = 0;\n    int length74 = 0;\n    int length75 = 0;\n    int length76 = 0;\n\
    \    int length77 = 0;\n    int length78 = 0;\n    int length79 = 0;\n    int\
    \ length80 = 0;\n    int length81 = 0;\n    int length82 = 0;\n    int length83\
    \ = 0;\n    int length84 = 0;\n    int length85 = 0;\n    int length86 = 0;\n\
    \    int length87 = 0;\n    int length88 = 0;\n    int length89 = 0;\n    int\
    \ length90 = 0;\n    int length91 = 0;\n    int length92 = 0;\n    int length93\
    \ = 0;\n    int length94 = 0;\n    int length95 = 0;\n    int length96 = 0;\n\
    \    int length97", "    string reverse = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++) {\n        reverse += string[i];\n    }\n\
    \    string postfix = \"\";\n    int postfix_length = string.length();\n    for\
    \ (int i = 0; i < postfix_length; i++) {\n        postfix += string[postfix_length\
    \ - i - 1];\n    }\n    string result = postfix + reverse;\n    return result;",
  "    std::string palindrome;\n    string reverse;\n    int length = string.length();\n\
    \    int i = 0;\n    int j = 0;\n    while (i < length) {\n        if (string[i]\
    \ == string[length - 1 - i]) {\n            palindrome.push_back(string[i]);\n\
    \            i++;\n            j++;\n        } else {\n            palindrome.push_back(string[i]);\n\
    \            reverse.push_back(string[j]);\n            i++;\n            j++;\n\
    \        }\n    }\n    reverse.push_back(string[j]);\n    return palindrome +\
    \ reverse;", "    string reverse = \"\";\n    int i = 0;\n    int j = string.size()\
    \ - 1;\n    while (i < j) {\n        reverse += string[i];\n        i++;\n   \
    \     j--;\n    }\n    reverse += string[j];\n    return reverse;", "    std::string\
    \ reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      longest = i;\n        }\n    }\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        if (string[i] == string[string.length() - 1 - i]) {\n      \
    \      reverse = reverse + string[i];\n        }\n    }\n    return reverse +\
    \ string.substr(0, longest);", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    int max_len = 0, max_index = 0;\n    for (int i =\
    \ 0; i < string.length(); i++) {\n        int j = i + 1;\n        while (j < string.length()\
    \ && string[i] == string[j]) {\n            j++;\n        }\n        if (j - i\
    \ > max_len) {\n            max_len = j - i;\n            max_index = i;\n   \
    \     }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    string reverse = string;\n  \
    \  for (int i = max_index; i >= 0; i--) {\n        reverse[max_index - i] = string[i];\n\
    \    }\n    return reverse;", "    string reverse;\n    int len = string.length();\n\
    \    int start = 0;\n    int end = len - 1;\n    while (start < end) {\n     \
    \   if (string[start] != string[end]) {\n            reverse = reverse + string[start];\n\
    \            start = start + 1;\n            end = end - 1;\n        } else {\n\
    \            reverse = reverse + string[start];\n            start = start + 1;\n\
    \            end = end - 1;\n        }\n    }\n    return reverse + string[start];",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    int\
    \ max_len = 0, max_idx = 0;\n    for (int i = 1; i < string.length(); i++) {\n\
    \        if (string[i] == string[i - 1]) {\n            ++max_len;\n        }\
    \ else {\n            max_len = string.length() - i;\n            max_idx = i;\n\
    \        }\n    }\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    std::string reverse =\
    \ string.substr(0, max_idx) + string[max_idx];\n    // Return the reversed string.\n\
    \    return reverse;", "    string reverse = \"\";\n    int length = string.length();\n\
    \    int i = 0;\n    while (i < length) {\n        reverse = reverse + string[length\
    \ - i - 1];\n        i++;\n    }\n    string prefix = string;\n    int j = length\
    \ - 1;\n    while (j >= 0) {\n        prefix = prefix + string[j];\n        j--;\n\
    \    }\n    return prefix + reverse;", "    string postfix = \"\";\n    string\
    \ prefix = \"\";\n    string reverse = \"\";\n    string palindrome = \"\";\n\
    \    int length = string.length();\n    for (int i = 0; i < length; i++) {\n \
    \       postfix += string[i];\n    }\n    for (int i = 0; i < length; i++) {\n\
    \        prefix += string[length - i - 1];\n    }\n    reverse = prefix;\n   \
    \ for (int i = 0; i < length; i++) {\n        reverse += string[i];\n    }\n \
    \   for (int i = 0; i < length; i++) {\n        if (reverse == postfix) {\n  \
    \          palindrome = prefix + reverse;\n            break;\n        }\n   \
    \ }\n    return palindrome;", "    string reverse = \"\";\n    for (size_t i =\
    \ 0; i < string.size(); i++) {\n        reverse.push_back(string[string.size()\
    \ - i - 1]);\n    }\n    reverse.push_back(string[0]);\n    return reverse;",
  "    std::string ans = string;\n    int n = string.length();\n    int max_len =\
    \ 0, min_len = n;\n    for (int i = 0; i < n; i++) {\n        if (string[i] ==\
    \ string[n-i-1]) {\n            max_len = i;\n            min_len = n;\n     \
    \   }\n    }\n    for (int i = max_len; i >= min_len; i--) {\n        ans += string[n-i-1];\n\
    \    }\n    return ans;", "    std::string palindrome = string;\n    int length\
    \ = string.length();\n    int i = 0;\n    while (i < length) {\n        int j\
    \ = length - 1;\n        while (j >= 0) {\n            if (string[i] != string[j])\
    \ {\n                break;\n            }\n            j--;\n        }\n    \
    \    if (j >= 0) {\n            palindrome.append(string[i]);\n            palindrome.append(string[j]);\n\
    \            i += 1;\n            j += 1;\n        }\n    }\n    return palindrome;",
  "    std::string reverse = \"\";\n    int n = string.length();\n    for (int i =\
    \ 0; i < n; ++i) {\n        reverse += string[n - i - 1];\n    }\n    return string\
    \ + reverse;", "    string reverse = \"\";\n    string prefix = string;\n    string\
    \ postfix = \"\";\n    int i = 0;\n    int j = 0;\n    while (i < prefix.size())\
    \ {\n        if (prefix[i] != postfix[j]) {\n            reverse = reverse + postfix[j];\n\
    \            j = j + 1;\n        }\n        else {\n            reverse = reverse\
    \ + postfix[j];\n            i = i + 1;\n        }\n    }\n    return reverse\
    \ + postfix[j];", "    string postfix = \"\";\n    string prefix = \"\";\n   \
    \ string reverse = \"\";\n    size_t max_len = string.length();\n    for (size_t\
    \ i = 0; i < max_len; i++) {\n        postfix += string[i];\n        reverse +=\
    \ string[max_len - i - 1];\n    }\n    prefix = postfix + reverse;\n    return\
    \ prefix;", "    string reverse = \"\";\n    for (auto &c : string) {\n      \
    \  reverse = reverse + c;\n    }\n    string prefix = string;\n    string postfix\
    \ = reverse;\n    string palindrome = prefix + postfix;\n    return palindrome;",
  "    string reverse = \"\";\n    int length = string.length();\n    for (int i =\
    \ 0; i < length / 2; i++) {\n        reverse += string[i];\n    }\n    for (int\
    \ i = length / 2; i < length; i++) {\n        reverse += string[i];\n    }\n \
    \   return string + reverse;", "    std::string reverse = \"\";\n    int i = 0;\n\
    \    int j = string.size() - 1;\n    while (i < j) {\n        reverse += string[i];\n\
    \        i++;\n        j--;\n    }\n    reverse += string[j];\n    return reverse;",
  "    std::string palindrome = string;\n    size_t max_len = string.length();\n \
    \   size_t prefix_len = 0;\n    size_t suffix_len = 0;\n    std::string prefix\
    \ = \"\";\n    std::string suffix = \"\";\n    for (size_t i = 0; i < max_len;\
    \ i++) {\n        if (string[i] == string[max_len - i - 1]) {\n            prefix_len++;\n\
    \        } else {\n            suffix_len++;\n        }\n    }\n    prefix = string.substr(0,\
    \ prefix_len);\n    suffix = string.substr(max_len - suffix_len, max_len - prefix_len);\n\
    \    palindrome.append(suffix);\n    palindrome.append(prefix);\n    return palindrome;",
  "    std::string palindrome = string;\n    int length = string.length();\n    int\
    \ i = 0;\n    int j = length - 1;\n    while (i < j) {\n        if (string[i]\
    \ != string[j]) {\n            int temp = string[i];\n            string[i] =\
    \ string[j];\n            string[j] = temp;\n        }\n        i++;\n       \
    \ j--;\n    }\n    return palindrome;", "    std::string palindrome = string;\n\
    \    size_t prefix_len = 0;\n    size_t suffix_len = 0;\n    size_t max_len =\
    \ string.length();\n    std::string prefix = string;\n    std::string suffix =\
    \ string;\n    std::string reverse = string;\n    for (size_t i = 0; i < max_len;\
    \ ++i) {\n        if (string[i] == string[max_len - i - 1]) {\n            prefix_len++;\n\
    \        } else {\n            break;\n        }\n    }\n    for (size_t i = max_len\
    \ - 1; i >= 0; --i) {\n        if (string[i] == string[max_len - i - 1]) {\n \
    \           suffix_len++;\n        } else {\n            break;\n        }\n \
    \   }\n    if (suffix_len > prefix_len) {\n        std::swap(suffix_len, prefix_len);\n\
    \    }\n    std::string postfix = \"\";\n    for (size_t i = 0; i < prefix_len;\
    \ ++i) {\n        postfix.push_back(string[i]);\n    }\n    for (size_t i = 0;\
    \ i < suffix_len; ++i) {\n        postfix.push_back(string[max_len - i - 1]);\n\
    \    }\n    for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }\n \
    \   for (size_t i = 0; i < max_len; ++i) {\n        if (string[i] == string[max_len\
    \ - i - 1]) {\n            postfix.push_back(string[i]);\n        }\n    }", " \
    \   std::string reverse = \"\";\n    int start = 0;\n    int end = string.length()\
    \ - 1;\n    while (start < end) {\n        reverse += string.at(start);\n    \
    \    start += 1;\n        end -= 1;\n    }\n    reverse += string.at(start);\n\
    \    return reverse;", "    string postfix = \"\";\n    string prefix = \"\";\n\
    \    for (auto c : string) {\n        postfix += c;\n        prefix += c;\n  \
    \  }\n    std::string reverse = prefix;\n    for (auto c : postfix) {\n      \
    \  reverse += c;\n    }\n    return reverse + postfix;", "    std::string palindrome\
    \ = string;\n    int n = string.length();\n    for (int i = 0; i < n; ++i) {\n\
    \        for (int j = i + 1; j < n; ++j) {\n            if (string[i] != string[j])\
    \ {\n                std::swap(string[i], string[j]);\n                std::swap(palindrome[i],\
    \ palindrome[j]);\n            }\n        }\n    }\n    return palindrome;", " \
    \   std::string reverse = \"\";\n    size_t longest = 0;\n    for (size_t i =\
    \ 0; i < string.size(); i++) {\n        size_t j = string.size() - 1 - i;\n  \
    \      if (string[i] == string[j]) {\n            longest = i;\n        }\n  \
    \  }\n    for (size_t i = 0; i < string.size(); i++) {\n        size_t j = string.size()\
    \ - 1 - i;\n        if (string[i] == string[j]) {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    return reverse + string.substr(0, longest);",
  "    std::string postfix = \"\";\n    std::string prefix = \"\";\n    std::string\
    \ reverse = \"\";\n    std::string palindrome = \"\";\n    bool flag = false;\n\
    \    for (auto &c : string) {\n        if (c != ' ') {\n            postfix =\
    \ postfix + c;\n        } else {\n            flag = true;\n        }\n    }\n\
    \    if (flag) {\n        prefix = postfix.substr(0, postfix.length() - 1);\n\
    \        reverse = reverse(prefix);\n        palindrome = postfix + reverse;\n\
    \    }\n    return palindrome;", "    std::string postfix = \"\";\n    std::string\
    \ prefix = \"\";\n    std::string reverse = \"\";\n    int i = 0;\n    int j =\
    \ 0;\n    int n = string.length();\n    while (i < n) {\n        if (string[i]\
    \ == string[n-1]) {\n            postfix += string[i];\n            reverse =\
    \ reverse + string[n-1];\n            i++;\n            n--;\n        } else {\n\
    \            postfix += string[i];\n            reverse = reverse + string[i];\n\
    \            i++;\n        }\n    }\n    prefix = prefix + reverse;\n    return\
    \ prefix + postfix;", "    std::string reverse = \"\";\n    for (auto &c : string)\
    \ {\n        reverse = reverse + c;\n    }\n    reverse = reverse.substr(0, reverse.length()\
    \ / 2);\n    reverse = reverse + reverse.substr(reverse.length() / 2);\n    return\
    \ string;", "    std::string reverse = \"\";\n    std::string prefix = \"\";\n\
    \    size_t longest = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n \
    \       size_t j = string.size() - i - 1;\n        if (j >= longest) {\n     \
    \       longest = j;\n            prefix = string.substr(0, i);\n        }\n \
    \       reverse += string[j];\n    }\n    reverse += prefix;\n    reverse.resize(longest);\n\
    \    return reverse;", "    string reverse = \"\";\n    for (auto it = string.rbegin();\
    \ it != string.rend(); ++it) {\n        reverse.push_back(*it);\n    }\n    string\
    \ prefix = string;\n    string suffix = reverse;\n    prefix.erase(prefix.size()\
    \ - 1);\n    suffix.erase(suffix.size() - 1);\n    string result = prefix + suffix;\n\
    \    return result;", "    std::string reverse = \"\";\n    size_t start = 0;\n\
    \    size_t end = string.length() - 1;\n    while (start < end) {\n        reverse\
    \ += string.at(start);\n        start += 1;\n        end -= 1;\n    }\n    reverse\
    \ += string.at(end);\n    return reverse;", "    string reverse = \"\";\n    for\
    \ (auto &c : string) {\n        reverse = reverse + c;\n    }\n    reverse = reverse\
    \ + string;\n    return reverse;", "    string reverse = \"\";\n    string prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.length(); i++) {\n        reverse\
    \ += string[i];\n    }\n    for (size_t i = 0; i < string.length(); i++) {\n \
    \       prefix += string[i];\n    }\n    string postfix = \"\";\n    for (size_t\
    \ i = 0; i < reverse.length(); i++) {\n        postfix += reverse[i];\n    }\n\
    \    if (postfix != prefix) {\n        return \"\";\n    }\n    return string;",
  "    string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n  \
    \  while (i < j) {\n        reverse += string[j];\n        i++;\n        j--;\n\
    \    }\n    reverse += string[i];\n    return reverse;", "    std::string reverse\
    \ = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        size_t j = i;\n        while (j > 0 && string[j - 1] == string[j])\
    \ {\n            j--;\n        }\n        if (j > longest) {\n            longest\
    \ = j;\n        }\n        reverse += string[i];\n    }\n    reverse += string.substr(longest,\
    \ string.length() - longest);\n    return reverse;", "    std::string result =\
    \ string;\n    size_t longest = 0;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        size_t j = i;\n        while (j > 0 && string[j - 1] == string[j])\
    \ {\n            j--;\n        }\n        if (j > longest) {\n            longest\
    \ = j;\n        }\n    }\n    std::string prefix = string.substr(0, longest);\n\
    \    std::string suffix = string.substr(longest);\n    std::string reverse = suffix;\n\
    \    std::reverse(suffix.begin(), suffix.end());\n    reverse.append(prefix);\n\
    \    result = prefix + reverse;\n    return result;", "    std::string palindrome;\n\
    \    string reverse;\n    string prefix;\n    string suffix;\n    string postfix\
    \ = string;\n    string postfix_reverse;\n    string postfix_suffix;\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int length = 0;\n    int length_postfix\
    \ = postfix.length();\n    int length_postfix_reverse = postfix_reverse.length();\n\
    \    int length_postfix_suffix = postfix_suffix.length();\n    while (i < length_postfix\
    \ && j < length_postfix_reverse) {\n        if (postfix[i] == postfix_reverse[j])\
    \ {\n            postfix_suffix += postfix[i];\n            postfix_reverse +=\
    \ postfix_reverse[j];\n            postfix_suffix += postfix[i];\n           \
    \ postfix_reverse += postfix_reverse[j];\n            postfix_suffix += postfix[i];\n\
    \            postfix_reverse += postfix_reverse[j];\n            postfix_suffix\
    \ += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n       \
    \     postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse[j];\n\
    \            postfix_suffix += postfix[i];\n            postfix_reverse += postfix_reverse",
  "    std::string reverse = \"\";\n    for (auto &c : string) {\n        reverse\
    \ = reverse + c;\n    }\n    reverse = reverse + string; // append the original\
    \ string\n    reverse = reverse.substr(0, reverse.length()/2); // remove the first\
    \ half of the reversed string\n    return reverse;", "    string reverse = \"\"\
    ;\n    for (auto &c : string) {\n        reverse = c + reverse;\n    }\n    return\
    \ string + reverse;", "    std::string ans = string;\n    std::string postfix\
    \ = \"\";\n    std::string reverse = \"\";\n    for (auto &c : ans) {\n      \
    \  reverse += c;\n    }\n    for (auto &c : postfix) {\n        reverse += c;\n\
    \    }\n    if (reverse == postfix) {\n        return ans;\n    }\n    std::string\
    \ prefix = \"\";\n    for (auto &c : reverse) {\n        prefix += c;\n    }\n\
    \    ans += prefix;\n    ans += reverse;\n    return ans;", "    string reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse = c + reverse;\n    }\n\
    \    return string + reverse;", "    std::string palindrome = string;\n    int\
    \ len = string.length();\n    for (int i = 0; i < len / 2; i++) {\n        palindrome\
    \ = std::string(string[i], string[len - i - 1]) + palindrome;\n    }\n    return\
    \ palindrome;", "    std::string palindrome = string;\n    std::string reverse_string;\n\
    \    int length = string.length();\n    int index = 0;\n    while (index < length)\
    \ {\n        reverse_string += string[index];\n        index++;\n    }\n    reverse_string\
    \ += string[index];\n    index = length - 1;\n    while (index >= 0) {\n     \
    \   reverse_string += string[index];\n        index--;\n    }\n    if (palindrome\
    \ == reverse_string) {\n        return palindrome;\n    } else {\n        return\
    \ palindrome + reverse_string;\n    }", "    std::string reverse = \"\";\n   \
    \ size_t start = 0;\n    size_t end = string.length();\n    while (start < end)\
    \ {\n        reverse = reverse + string.substr(start, end - start);\n        start\
    \ = end;\n        end = end - 1;\n    }\n    return reverse + string.substr(start,\
    \ end - start);", "    string reversed = \"\";\n    size_t max_index = 0;\n  \
    \  for (size_t i = 0; i < string.length(); i++) {\n        max_index = i;\n  \
    \      for (size_t j = i + 1; j < string.length(); j++) {\n            if (string[j]\
    \ != string[max_index]) {\n                max_index = j;\n            }\n   \
    \     }\n        reversed += string[i];\n        reversed += string[max_index];\n\
    \    }\n    return reversed;", "    std::string palindrome = string;\n    size_t\
    \ start = 0;\n    size_t end = palindrome.size() - 1;\n    while (start < end)\
    \ {\n        if (palindrome[start] != palindrome[end]) {\n            end = end\
    \ - 1;\n        } else {\n            start = start + 1;\n            end = end\
    \ - 1;\n        }\n    }\n    palindrome.insert(palindrome.begin(), palindrome[start]);\n\
    \    return palindrome;", "    string postfix = \"\";\n    int length = string.length();\n\
    \    for (int i = 0; i < length; i++) {\n        postfix += string[i];\n    }\n\
    \    string reverse = \"\";\n    for (int i = length - 1; i >= 0; i--) {\n   \
    \     reverse += string[i];\n    }\n    postfix = reverse + postfix;\n    return\
    \ postfix;", "    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    std::string postfix = string;\n    int n = string.length();\n    for (int\
    \ i = 0; i < n; ++i) {\n        if (string[i] != string[n-i-1]) {\n          \
    \  postfix = postfix + string[n-i-1];\n            break;\n        }\n    }\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    std::string reverse = postfix.substr(0,\
    \ n-1);\n    return reverse + string;", "    std::string reverse = \"\";\n   \
    \ for (auto &c : string) {\n        reverse = reverse + c;\n    }\n    reverse\
    \ = reverse.substr(0, reverse.length() / 2);\n    reverse = reverse + reverse.substr(reverse.length()\
    \ / 2, reverse.length());\n    return string;", "    string reverse = \"\";\n\
    \    int i = 0;\n    int j = string.length() - 1;\n    while (i < j) {\n     \
    \   reverse += string[i];\n        i++;\n        j--;\n    }\n    reverse += string[j];\n\
    \    return reverse;", "    // Find the longest postfix of supplied string that\
    \ is a palindrome.\n    int max_len = 0, max_pos = 0;\n    for (int i = 0; i <\
    \ string.length(); i++) {\n        int j = i + 1;\n        while (j < string.length()\
    \ && string[j] != string[i]) {\n            j++;\n        }\n        if (j - i\
    \ > max_len) {\n            max_len = j - i;\n            max_pos = i;\n     \
    \   }\n    }\n    // Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n    string reverse = string;\n  \
    \  reverse[max_pos] = reverse[max_pos] + 'a' - 'a';\n    return reverse;", " \
    \   string reverse;\n    for (auto &c : string) {\n        reverse.push_back(c);\n\
    \    }\n    reverse.erase(reverse.size() - 1, reverse.end());\n    string palindrome\
    \ = string;\n    for (auto &c : string) {\n        if (c != reverse.back()) {\n\
    \            palindrome += c;\n        }\n    }\n    return palindrome;", "  \
    \  std::string palindrome = string;\n    int length = string.length();\n    int\
    \ i = 0;\n    int j = 0;\n    while (i < length / 2) {\n        if (string[i]\
    \ != string[j]) {\n            palindrome.append(string[j]);\n        }\n    \
    \    i++;\n        j++;\n    }\n    palindrome.append(string[j]);\n    return\
    \ palindrome;", "    std::string palindrome;\n    string reverse;\n    size_t\
    \ longest = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        size_t\
    \ j = string.size() - i - 1;\n        if (j >= longest) {\n            longest\
    \ = j;\n        }\n    }\n    for (size_t i = 0; i < longest; i++) {\n       \
    \ reverse.push_back(string[i]);\n    }\n    for (size_t i = 0; i < longest; i++)\
    \ {\n        palindrome.push_back(reverse[i]);\n    }\n    return palindrome;",
  "    string reverse = \"\";\n    string prefix = \"\";\n    int i = 0;\n    while\
    \ (i < string.size()) {\n        if (string[i] == string[string.size() - 1 - i])\
    \ {\n            prefix += string[i];\n        } else {\n            reverse =\
    \ prefix + reverse;\n            prefix = string[i];\n        }\n        i++;\n\
    \    }\n    return reverse + prefix;", "    std::string palindrome = string;\n\
    \    int length = string.length();\n    int max_index = length - 1;\n    int min_index\
    \ = 0;\n    while (min_index <= max_index) {\n        int mid = (min_index + max_index)\
    \ / 2;\n        if (string[mid] == string[max_index]) {\n            min_index\
    \ = mid + 1;\n        } else {\n            max_index = mid - 1;\n        }\n\
    \    }\n    for (int i = min_index; i <= max_index; i++) {\n        palindrome.append(1,\
    \ string[i]);\n    }\n    return palindrome;", "    std::string palindrome = string;\n\
    \    int length = string.length();\n    int max_index = 0;\n    for (int i = 0;\
    \ i < length; i++) {\n        if (string[i] == string[length - 1 - i]) {\n   \
    \         max_index = i;\n        }\n    }\n    for (int i = max_index; i >= 0;\
    \ i--) {\n        palindrome.append(1, string[i]);\n    }\n    return palindrome;",
  "    std::string reverse = \"\";\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        reverse += string[string.size() - i - 1];\n    }\n    return string\
    \ + reverse;", "    string reverse = \"\";\n    for (auto &c : string) {\n   \
    \     reverse = reverse + c;\n    }\n    reverse = reverse.substr(0, reverse.length()\
    \ / 2);\n    reverse = reverse + reverse.substr(reverse.length() / 2, reverse.length());\n\
    \    return reverse;", "    std::string reverse = \"\";\n    int i = 0;\n    int\
    \ j = string.size() - 1;\n    while (i < j) {\n        reverse = reverse + string[j];\n\
    \        i++;\n        j--;\n    }\n    reverse = reverse + string[i];\n    return\
    \ reverse;", "    std::string reverse = \"\";\n    int i = 0;\n    while (i <\
    \ string.length()) {\n        reverse = reverse + string[i];\n        i++;\n \
    \   }\n    reverse = reverse + string[i];\n    return reverse;", "    string reverse\
    \ = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n    }\n\
    \    reverse = reverse.substr(0, reverse.length()/2);\n    reverse = reverse +\
    \ reverse.substr(reverse.length()/2);\n    return reverse;", "    std::string\
    \ reverse = \"\";\n    std::string prefix = \"\";\n    std::string suffix = \"\
    \";\n    bool found = false;\n    for (auto c : string) {\n        found = found\
    \ || (c == '(');\n        found = found || (c == ')');\n        found = found\
    \ || (c == '[');\n        found = found || (c == ']');\n        found = found\
    \ || (c == '{');\n        found = found || (c == '}');\n        found = found\
    \ || (c == '<');\n        found = found || (c == '>');\n        found = found\
    \ || (c == '!');\n        found = found || (c == '.');\n        found = found\
    \ || (c == '?');\n        found = found || (c == '$');\n        found = found\
    \ || (c == '%');\n        found = found || (c == '^');\n        found = found\
    \ || (c == '&');\n        found = found || (c == '*');\n        found = found\
    \ || (c == '+');\n        found = found || (c == '|');\n        found = found\
    \ || (c == '\\\\');\n        found = found || (c == '/');\n        found = found\
    \ || (c == '(');\n        found = found || (c == ')');\n        found = found\
    \ || (c == '[');\n        found = found || (c == ']');\n        found = found\
    \ || (c == '{');\n        found = found || (c == '}');\n        found = found\
    \ || (c == '<');\n        found = found || (c == '>');\n        found = found\
    \ || (c == '!');\n        found = found || (c == '.');\n        found = found\
    \ || (c == '?');\n        found = found || (c == '$');\n        found = found\
    \ || (c == '%');\n        found = found || (c == '^');\n        found = found\
    \ || (c == '&');\n        found = found || (c == '*');\n        found = found\
    \ || (c == '+');\n        found = found || (c == '|');\n        found = found\
    \ || (c == '\\\\');\n        found = found || (c == '/');\n        found = found\
    \ || (c == '(');\n        found = found || (c == ')');\n        found = found\
    \ || (c == '[');\n        found = found || (c == ']');\n        found = found\
    \ || (c == '{');\n        found = found || (c == '}');\n        found = found\
    \ || (c == '<');\n        found = found || (c == '>');\n        found = found\
    \ || (c == '!');\n        found = found || (c == '.');\n        found = found\
    \ || (c == '?');\n        found = found || (c == '$');\n        found = found\
    \ || (c == '%');\n        found = found || (c == '^');\n        found = found\
    \ || (c == '", "    string postfix = \"\";\n    string prefix = \"\";\n    for\
    \ (auto c : string) {\n        postfix += c;\n        prefix += c;\n    }\n  \
    \  std::string reverse = prefix;\n    for (auto c : postfix) {\n        reverse\
    \ += c;\n    }\n    return reverse + postfix;", "    string reverse;\n    string\
    \ prefix;\n    string suffix;\n    string postfix = string;\n    size_t longest\
    \ = 0;\n    size_t index = 0;\n    bool found = false;\n    while (!found && index\
    \ < postfix.size()) {\n        longest = std::max(longest, postfix.size() - index);\n\
    \        found = postfix.substr(index, longest) == postfix.substr(0, longest);\n\
    \        index += longest;\n    }\n    prefix = postfix.substr(0, index);\n  \
    \  suffix = postfix.substr(index, postfix.size());\n    reverse = prefix + suffix;\n\
    \    return reverse;", "    std::string palindrome = string;\n    size_t prefix_len\
    \ = string.length();\n    size_t suffix_len = string.length();\n    size_t max_length\
    \ = 0;\n    std::string prefix;\n    std::string suffix;\n    std::string reverse;\n\
    \    while (true) {\n        max_length = prefix_len > suffix_len ? prefix_len\
    \ : suffix_len;\n        prefix = string.substr(0, max_length);\n        suffix\
    \ = string.substr(max_length, string.length());\n        reverse = std::string(suffix.rbegin(),\
    \ suffix.rend());\n        if (reverse == prefix) {\n            palindrome =\
    \ prefix + palindrome;\n            prefix_len -= max_length;\n            suffix_len\
    \ -= max_length;\n        } else {\n            break;\n        }\n    }\n   \
    \ return palindrome;", "    std::string palindrome = string;\n    size_t start\
    \ = 0;\n    size_t end = palindrome.size() - 1;\n    while (start < end) {\n \
    \       if (palindrome[start] != palindrome[end]) {\n            palindrome.insert(start,\
    \ palindrome[end]);\n            start += 1;\n            end -= 1;\n        }\
    \ else {\n            start += 1;\n            end -= 1;\n        }\n    }\n \
    \   return palindrome;", "    std::string palindrome = string;\n    int n = palindrome.size();\n\
    \    int i = 0;\n    int j = n - 1;\n    while (i < j) {\n        if (palindrome[i]\
    \ != palindrome[j]) {\n            int k = i;\n            while (k < j && palindrome[k]\
    \ == palindrome[k + 1]) {\n                k++;\n            }\n            j\
    \ = k;\n        } else {\n            i++;\n            j--;\n        }\n    }\n\
    \    return palindrome;", "    std::string ans = string;\n    int len = string.length();\n\
    \    int max_len = 0, min_len = 0;\n    for (int i = 0; i < len; i++) {\n    \
    \    int j = len - 1 - i;\n        if (j >= 0 && string[i] == string[j]) {\n \
    \           max_len = std::max(max_len, j);\n            min_len = std::min(min_len,\
    \ j);\n        }\n    }\n    if (max_len == min_len) {\n        return string;\n\
    \    }\n    std::string reverse = string;\n    for (int i = max_len - 1; i >=\
    \ min_len; i--) {\n        reverse[i] = string[max_len - 1 - i];\n    }\n    ans\
    \ += reverse;\n    return ans;", "    std::string palindrome = string;\n    size_t\
    \ max_len = string.length();\n    size_t prefix_len = 0;\n    size_t suffix_len\
    \ = 0;\n    for (size_t i = 0; i < max_len; ++i) {\n        char c = string[i];\n\
    \        if (i == 0) {\n            prefix_len = i;\n        }\n        if (i\
    \ == max_len - 1) {\n            suffix_len = i;\n        }\n        if (c ==\
    \ string[prefix_len] && c == string[suffix_len]) {\n            palindrome.append(string[prefix_len],\
    \ 1);\n            palindrome.append(string[suffix_len], 1);\n            prefix_len++;\n\
    \            suffix_len++;\n        }\n    }\n    return palindrome;", "    //\
    \ Find the longest postfix of supplied string that is a palindrome.\n    int max_len\
    \ = 0, max_index = 0;\n    for (int i = 0; i < string.length(); i++) {\n     \
    \   int index = string.find_first_not_of(string[i], max_index + 1);\n        if\
    \ (index == string.length() - 1) {\n            max_len = i;\n            max_index\
    \ = index;\n        } else {\n            max_index = index;\n        }\n    }\n\
    \    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    string reversed = \"\";\n    for (int i\
    \ = max_len - 1; i >= 0; i--) {\n        reversed = string[i] + reversed;\n  \
    \  }\n    return reversed;", "    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    size_t max_len = 0, max_idx = 0;\n    for (size_t\
    \ i = 0; i < string.size(); ++i) {\n        size_t j = string.size() - 1 - i;\n\
    \        if (string[i] == string[j]) {\n            ++i;\n            --j;\n \
    \       }\n        if (j - i > max_len) {\n            max_len = j - i;\n    \
    \        max_idx = i;\n        }\n    }\n    // Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n    std::string\
    \ result = string;\n    size_t prefix_len = string.size() - max_idx;\n    for\
    \ (size_t i = 0; i < prefix_len; ++i) {\n        result[max_idx + i] = string[prefix_len\
    \ - i - 1];\n    }\n    return result;", "    std::string reverse = \"\";\n  \
    \  int i = 0;\n    int j = string.size() - 1;\n    while (i < j) {\n        if\
    \ (string[i] != string[j]) {\n            reverse = reverse + string[j];\n   \
    \         j = j - 1;\n        } else {\n            reverse = reverse + string[i];\n\
    \            i = i + 1;\n        }\n    }\n    reverse = reverse + string[i];\n\
    \    return reverse;", "    string reverse = \"\";\n    for (auto &c : string)\
    \ {\n        reverse = c + reverse;\n    }\n    return string + reverse;", " \
    \   std::string palindrome;\n    int length = string.length();\n    int max_index\
    \ = length - 1;\n    int min_index = 0;\n    int max_palindrome_length = 0;\n\
    \    int min_palindrome_length = 0;\n    int max_palindrome_length_index = 0;\n\
    \    int min_palindrome_length_index = 0;\n    int max_palindrome_length_palindrome\
    \ = 0;\n    int min_palindrome_length_palindrome = 0;\n    int max_palindrome_length_palindrome_index\
    \ = 0;\n    int min_palindrome_length_palindrome_index = 0;\n    for (int i =\
    \ 0; i < length; i++) {\n        if (string[i] == string[max_index]) {\n     \
    \       max_palindrome_length++;\n            max_palindrome_length_index = i;\n\
    \        }\n        if (string[i] == string[min_index]) {\n            min_palindrome_length++;\n\
    \            min_palindrome_length_index = i;\n        }\n    }\n    if (max_palindrome_length\
    \ == min_palindrome_length) {\n        palindrome = string;\n    } else {\n  \
    \      if (max_palindrome_length > min_palindrome_length) {\n            max_palindrome_length_palindrome\
    \ = max_palindrome_length;\n            max_palindrome_length_palindrome_index\
    \ = max_index;\n            max_palindrome_length_palindrome = max_palindrome_length_palindrome\
    \ + 1;\n            max_palindrome_length_palindrome_index = max_palindrome_length_palindrome_index\
    \ + 1;\n        } else {\n            min_palindrome_length_palindrome = min_palindrome_length;\n\
    \            min_palindrome_length_palindrome_index = min_index;\n           \
    \ min_palindrome_length_palindrome = min_palindrome_length_palindrome + 1;\n \
    \           min_palindrome_length_palindrome_index = min_palindrome_length_palindrome_index\
    \ + 1;\n        }\n        palindrome = string.substr(0, max_palindrome_length_palindrome_index)\
    \ + string[max_palindrome_length_palindrome_index] + string.substr(min_palindrome_length_palindrome_index);\n\
    \    }\n    return palindrome;", "    string postfix = \"\";\n    string prefix\
    \ = \"\";\n    int max_length = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] == string[string.length() - 1 - i]) {\n           \
    \ max_length++;\n        } else {\n            max_length = 0;\n        }\n  \
    \      if (max_length > 0) {\n            postfix = postfix + string[i];\n   \
    \     }\n    }\n    prefix = postfix + string[string.length() - max_length];\n\
    \    return prefix + string[string.length() - max_length];", "    std::string\
    \ reverse = \"\";\n    int len = string.length();\n    int start = 0;\n    int\
    \ end = len - 1;\n    while (start < end) {\n        if (string[start] != string[end])\
    \ {\n            reverse = reverse + string[start];\n            start = end;\n\
    \            end = len - 1;\n        } else {\n            start = start + 1;\n\
    \            end = end - 1;\n        }\n    }\n    return reverse + string[start];",
  "    string postfix = \"\";\n    string prefix = \"\";\n    string reverse = \"\"\
    ;\n    string palindrome = \"\";\n    int length = string.length();\n    for (int\
    \ i = 0; i < length; i++) {\n        postfix += string[i];\n    }\n    for (int\
    \ i = 0; i < length; i++) {\n        prefix += string[length - i - 1];\n    }\n\
    \    reverse = prefix + postfix;\n    bool flag = true;\n    for (int i = 0; i\
    \ < reverse.length(); i++) {\n        if (reverse[i] != string[i]) {\n       \
    \     flag = false;\n            break;\n        }\n    }\n    if (flag) {\n \
    \       palindrome = reverse;\n    }\n    return palindrome;", "    std::string\
    \ reversed = \"\";\n    for (auto it = string.rbegin(); it != string.rend(); ++it)\
    \ {\n        reversed += *it;\n    }\n    reversed += string;\n    return reversed;",
  "    string reverse = \"\";\n    string prefix = string;\n    int i = 0;\n    int\
    \ j = string.length() - 1;\n    while (i < j) {\n        if (string[i] != string[j])\
    \ {\n            reverse = reverse + string[i];\n            i++;\n          \
    \  j--;\n        } else {\n            i++;\n            j--;\n        }\n   \
    \ }\n    reverse = reverse + string[j];\n    return prefix + reverse;", "    std::string\
    \ palindrome = string;\n    std::string prefix = \"\";\n    std::string suffix\
    \ = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < palindrome.size();\
    \ i++) {\n        longest = i;\n        for (size_t j = i; j < palindrome.size();\
    \ j++) {\n            if (palindrome[j] != palindrome[longest - i]) {\n      \
    \          longest = j;\n            }\n        }\n        prefix = palindrome.substr(0,\
    \ longest);\n        suffix = palindrome.substr(longest, palindrome.size() - longest);\n\
    \        palindrome = prefix + suffix;\n    }\n    return palindrome;", "    string\
    \ postfix = \"\";\n    string prefix = \"\";\n    for (auto c : string) {\n  \
    \      postfix += c;\n        prefix += c;\n    }\n    std::string reverse = prefix;\n\
    \    for (auto c : postfix) {\n        reverse = reverse.substr(0, reverse.length()\
    \ - 1) + c;\n    }\n    return reverse;", "    std::string result = string;\n\
    \    std::string reverse = \"\";\n    int i = 0;\n    int j = result.size() -\
    \ 1;\n    while (i < j) {\n        reverse += result[i];\n        i++;\n     \
    \   j--;\n    }\n    reverse += result[j];\n    reverse = reverse.substr(0, reverse.size()\
    \ - 1);\n    result += reverse;\n    return result;", "    std::string palindrome\
    \ = string;\n    std::string prefix = \"\";\n    std::string suffix = \"\";\n\
    \    int max_length = 0;\n    int i = 0;\n    int j = 0;\n    while (i < palindrome.size())\
    \ {\n        max_length = max_length > palindrome.size() ? max_length : palindrome.size();\n\
    \        j = i;\n        while (j < palindrome.size() && palindrome[j] != palindrome[i])\
    \ {\n            j++;\n        }\n        prefix = palindrome.substr(0, j);\n\
    \        suffix = palindrome.substr(j);\n        palindrome = prefix + palindrome.reverse_iterator()\
    \ + suffix;\n        i++;\n    }\n    return palindrome;", "    std::string result\
    \ = string;\n    size_t max_len = string.length();\n    std::string prefix = string;\n\
    \    std::string suffix = string;\n    size_t prefix_len = 0;\n    size_t suffix_len\
    \ = 0;\n    bool found = false;\n    while (!found) {\n        prefix_len = string.length()\
    \ - prefix_len - 1;\n        suffix_len = string.length() - suffix_len - 1;\n\
    \        found = prefix_len == suffix_len;\n        if (found) {\n           \
    \ prefix = prefix.substr(0, prefix_len);\n            suffix = suffix.substr(0,\
    \ suffix_len);\n        }\n    }\n    std::string reversed_prefix = prefix;\n\
    \    std::string reversed_suffix = suffix;\n    for (size_t i = 0; i < reversed_suffix.length();\
    \ ++i) {\n        reversed_prefix.push_back(reversed_suffix[reversed_suffix.length()\
    \ - 1 - i]);\n    }\n    std::string reversed_reversed_prefix = reversed_prefix;\n\
    \    for (size_t i = 0; i < reversed_prefix.length(); ++i) {\n        reversed_reversed_prefix.push_back(reversed_prefix[reversed_prefix.length()\
    \ - 1 - i]);\n    }\n    std::string reversed_reversed_reversed_prefix = reversed_reversed_prefix;\n\
    \    for (size_t i = 0; i < reversed_reversed_prefix.length(); ++i) {\n      \
    \  reversed_reversed_reversed_prefix.push_back(reversed_reversed_prefix[reversed_reversed_prefix.length()\
    \ - 1 - i]);\n    }\n    std::string reversed_reversed_reversed_reversed_prefix\
    \ = reversed_reversed_reversed_prefix;\n    for (size_t i = 0; i < reversed_reversed_reversed_prefix.length();\
    \ ++i) {\n        reversed_reversed_reversed_reversed_prefix.push_back(reversed_reversed_reversed_prefix[reversed_reversed_reversed_prefix.length()\
    \ - 1 - i]);\n    }\n    std::string reversed_reversed_reversed_reversed_reversed_prefix\
    \ = reversed_reversed_reversed_reversed_prefix;\n    for (size_t i = 0; i < reversed_reversed_reversed_reversed_prefix.length();\
    \ ++i) {\n        reversed_reversed_reversed_reversed_reversed_prefix.push_back(reversed_reversed_reversed_reversed_prefix[reversed_reversed_reversed_reversed_prefix.length()\
    \ - 1 - i]);\n    }\n    std::string reversed_reversed_reversed_reversed_reversed_reversed_prefix\
    \ = reversed_reversed_reversed_reversed_reversed_prefix;\n    for (size_t i =\
    \ 0; i < reversed_reversed_reversed_reversed_reversed_prefix.length(); ++i) {\n\
    \        reversed_reversed_reversed_reversed_reversed_reversed_prefix.push_back(reversed_reversed_reversed_reversed_reversed_reversed_prefix[reversed_reversed_reversed_reversed_reversed_reversed_prefix.length()\
    \ - 1 - i]);\n    }\n    std::string reversed_reversed_reversed_reversed_reversed_reverse",
  "    string postfix = \"\";\n    int max_len = string.length();\n    int min_len\
    \ = max_len;\n    int min_len_index = 0;\n    int max_len_index = 0;\n    for\
    \ (int i = 0; i < max_len; i++) {\n        if (string[i] == string[max_len - 1])\
    \ {\n            max_len_index = i;\n        }\n    }\n    for (int i = 0; i <\
    \ max_len; i++) {\n        if (string[i] == string[min_len - 1]) {\n         \
    \   min_len_index = i;\n        }\n    }\n    for (int i = min_len_index + 1;\
    \ i <= max_len_index; i++) {\n        postfix += string[i];\n    }\n    return\
    \ postfix + string[max_len_index];", "    string reverse = \"\";\n    int i =\
    \ 0;\n    int j = string.size() - 1;\n    while (i < j) {\n        reverse = reverse\
    \ + string[j];\n        i++;\n        j--;\n    }\n    return string + reverse;",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    int\
    \ max_len = 0, min_len = string.length();\n    for (int i = 0; i < string.length();\
    \ i++) {\n        max_len = max(max_len, string.length() - i);\n        min_len\
    \ = min(min_len, string.length() - i);\n    }\n    // Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    std::string result = string;\n    for (int i = 0; i < max_len; i++) {\n \
    \       result += string[string.length() - i - 1];\n    }\n    // Reverse the\
    \ string prefix.\n    for (int i = 0; i < min_len; i++) {\n        result += 'a'\
    \ - 1;\n    }\n    return result;", "    string reverse = \"\";\n    int i = 0;\n\
    \    int j = string.length() - 1;\n    while (i < j) {\n        reverse += string[i];\n\
    \        i++;\n        j--;\n    }\n    reverse += string[j];\n    return reverse;",
  "    std::string palindrome = string;\n    std::string prefix = string;\n    std::string\
    \ suffix = string;\n    int prefix_length = 0;\n    int suffix_length = 0;\n \
    \   int palindrome_length = 0;\n    int i = 0;\n    int j = 0;\n    while (i <\
    \ prefix.size()) {\n        if (prefix[i] == 'a') {\n            prefix_length++;\n\
    \        }\n        i++;\n    }\n    while (j < suffix.size()) {\n        if (suffix[j]\
    \ == 'a') {\n            suffix_length++;\n        }\n        j++;\n    }\n  \
    \  while (i < prefix.size()) {\n        if (prefix[i] == 'a') {\n            prefix_length++;\n\
    \        }\n        i++;\n    }\n    while (j < suffix.size()) {\n        if (suffix[j]\
    \ == 'a') {\n            suffix_length++;\n        }\n        j++;\n    }\n  \
    \  if (prefix_length >= suffix_length) {\n        palindrome_length = prefix_length;\n\
    \    } else {\n        palindrome_length = suffix_length;\n    }\n    while (i\
    \ < prefix.size()) {\n        if (prefix[i] == 'a') {\n            prefix_length++;\n\
    \        }\n        i++;\n    }\n    while (j < suffix.size()) {\n        if (suffix[j]\
    \ == 'a') {\n            suffix_length++;\n        }\n        j++;\n    }\n  \
    \  if (prefix_length >= suffix_length) {\n        palindrome_length = prefix_length;\n\
    \    } else {\n        palindrome_length = suffix_length;\n    }\n    while (i\
    \ < prefix.size()) {\n        if (prefix[i] == 'a') {\n            prefix_length++;\n\
    \        }\n        i++;\n    }\n    while (j < suffix.size()) {\n        if (suffix[j]\
    \ == 'a') {\n            suffix_length++;\n        }\n        j++;\n    }\n  \
    \  if (prefix_length >= suffix_length) {\n        palindrome_length = prefix_length;\n\
    \    } else {\n        palindrome_length = suffix_length;\n    }\n    while (i\
    \ < prefix.size()) {\n        if (prefix[i] == 'a') {\n            prefix_length++;\n\
    \        }\n        i++;\n    }\n    while (j < suffix.size()) {\n        if (suffix[j]\
    \ == 'a') {\n            suffix_length++;\n        }\n        j++;\n    }\n  \
    \  if (prefix_length >= suffix_length) {\n        palindrome_length = prefix_length;\n\
    \    } else {\n        palindrome_length = suffix_length;\n    }\n    while (i\
    \ < prefix.size()) {\n        if (prefix[i] == 'a') {\n            prefix_length++;\n\
    \        }\n        i++;\n    }\n    while (j < suffix.size()) {\n        if (suffix[j]\
    \ == 'a') {\n            suffix_length++;\n        }\n        j++;\n    }\n  \
    \  if (prefix_length >= suffix_length) {\n        palindrome_length = prefix_length;\n\
    \    } else {\n        palindrome_length = suffix_length;\n    }\n    while (i\
    \ < prefix.size", "    string reverse = \"\";\n    size_t max_index = 0;\n   \
    \ for (size_t i = 0; i < string.size(); i++) {\n        if (string[i] != string[max_index])\
    \ {\n            max_index = i;\n        }\n    }\n    for (size_t i = max_index;\
    \ i >= 0; i--) {\n        reverse += string[i];\n    }\n    return reverse;",
  "    std::string palindrome = string;\n    std::string reverse = \"\";\n    int\
    \ i = 0;\n    int j = palindrome.size() - 1;\n    while (i < j) {\n        if\
    \ (palindrome[i] != palindrome[j]) {\n            reverse = reverse + palindrome[j];\n\
    \            j = j - 1;\n        } else {\n            i = i + 1;\n          \
    \  j = j - 1;\n        }\n    }\n    reverse = reverse + palindrome[j];\n    return\
    \ palindrome + reverse;", "    std::string reverse = \"\";\n    size_t start =\
    \ 0;\n    size_t end = 0;\n    bool found = false;\n    while (!found) {\n   \
    \     end = string.size() - 1;\n        while (end >= start && !found) {\n   \
    \         if (string[end] == string[start]) {\n                reverse = reverse\
    \ + string[end];\n                found = true;\n            }\n            end--;\n\
    \        }\n        if (!found) {\n            reverse = reverse + string[end];\n\
    \            found = true;\n        }\n        start++;\n    }\n    return reverse;",
  "    std::string reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0;\
    \ i < string.size(); i++) {\n        size_t j = string.size() - 1 - i;\n     \
    \   if (string[i] == string[j]) {\n            longest = i;\n        }\n    }\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        size_t j = string.size()\
    \ - 1 - i;\n        if (string[i] == string[j]) {\n            reverse = reverse\
    \ + string[i];\n        }\n    }\n    string += reverse;\n    return string;",
  "    std::string reverse = \"\";\n    for (auto it = string.rbegin(); it != string.rend();\
    \ ++it) {\n        reverse.push_back(*it);\n    }\n    return string + reverse;",
  "    // Find the longest postfix of supplied string that is a palindrome.\n    int\
    \ max_len = 0, max_pos = 0;\n    for (int i = 0; i < string.length(); i++) {\n\
    \        if (string[i] == string[string.length() - 1 - i]) {\n            int\
    \ j = i + 1;\n            while (j < string.length() && string[j] == string[string.length()\
    \ - 1 - j]) {\n                j++;\n            }\n            if (j - i > max_len)\
    \ {\n                max_len = j - i;\n                max_pos = i;\n        \
    \    }\n        }\n    }\n    // Append to the end of the string reverse of a\
    \ string prefix that comes before the palindromic suffix.\n    string reverse\
    \ = string;\n    for (int i = max_pos; i >= 0; i--) {\n        reverse[max_pos\
    \ + i] = string[i];\n    }\n    return reverse;", "    std::string result = string;\n\
    \    std::string prefix = string;\n    std::string suffix = string;\n    size_t\
    \ prefix_len = string.length();\n    size_t suffix_len = string.length();\n  \
    \  while (prefix_len > 0) {\n        size_t prefix_end = prefix_len;\n       \
    \ while (prefix_end > 0 && string[prefix_end - 1] == string[prefix_end - 1]) {\n\
    \            prefix_end--;\n        }\n        prefix = prefix.substr(0, prefix_end);\n\
    \        suffix_len = string.length() - prefix_end - 1;\n        suffix_end =\
    \ suffix_len;\n        while (suffix_end > 0 && string[suffix_end - 1] == string[suffix_end\
    \ - 1]) {\n            suffix_end--;\n        }\n        suffix = suffix.substr(0,\
    \ suffix_end);\n        if (suffix == prefix) {\n            break;\n        }\n\
    \        std::string reverse = suffix;\n        reverse.resize(suffix_end - suffix_len\
    \ + 1);\n        reverse.assign(reverse.rbegin(), reverse.rend());\n        result\
    \ += reverse;\n    }\n    return result;", "    std::string palindrome = string;\n\
    \    size_t prefix_length = 0;\n    size_t suffix_length = 0;\n    size_t palindrome_length\
    \ = 0;\n    size_t i = 0;\n    size_t j = 0;\n    bool found = false;\n    while\
    \ (!found && i < palindrome.size()) {\n        found = true;\n        j = i;\n\
    \        while (j < palindrome.size() && palindrome[j] != palindrome[i]) {\n \
    \           j++;\n        }\n        if (j - i == 1) {\n            prefix_length\
    \ = j;\n            suffix_length = i;\n            palindrome_length = j;\n \
    \       }\n        i = j;\n    }\n    if (found) {\n        std::string reversed\
    \ = palindrome.substr(0, prefix_length) + palindrome.substr(palindrome_length\
    \ - suffix_length, palindrome_length);\n        palindrome = reversed;\n    }\n\
    \    return palindrome;", "    string reverse = \"\";\n    string prefix = \"\"\
    ;\n    string suffix = \"\";\n    int length = string.length();\n    int i = 0;\n\
    \    int j = 0;\n    while (i < length) {\n        if (string[i] == string[length\
    \ - 1 - i]) {\n            reverse = reverse + string[i];\n            i++;\n\
    \            j = length - 1;\n        } else {\n            reverse = reverse\
    \ + string[i];\n            j = i;\n        }\n    }\n    length = reverse.length();\n\
    \    i = length - 1;\n    while (i >= 0) {\n        if (reverse[i] == reverse[length\
    \ - 1 - i]) {\n            prefix = prefix + string[i];\n            i = length\
    \ - 1;\n        } else {\n            prefix = prefix + string[i];\n         \
    \   i = i - 1;\n        }\n    }\n    length = prefix.length();\n    i = length\
    \ - 1;\n    while (i >= 0) {\n        if (prefix[i] == prefix[length - 1 - i])\
    \ {\n            suffix = suffix + string[i];\n            i = length - 1;\n \
    \       } else {\n            suffix = suffix + string[i];\n            i = i\
    \ - 1;\n        }\n    }\n    return prefix + reverse + suffix;", "    std::string\
    \ ans = string;\n    std::string reverse = \"\";\n    int len = string.length();\n\
    \    for (int i = 0; i < len / 2; i++) {\n        reverse += string[i];\n    }\n\
    \    for (int i = len - 1; i >= 0; i--) {\n        reverse += string[i];\n   \
    \ }\n    ans += reverse;\n    return ans;", "    std::string reverse = \"\";\n\
    \    int start = 0;\n    int end = string.size() - 1;\n    while (start < end)\
    \ {\n        reverse += string[start];\n        ++start;\n        --end;\n   \
    \ }\n    reverse += string[start];\n    return reverse;", "    string reverse\
    \ = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n    while (i < j) {\n\
    \        reverse += string[i];\n        i++;\n        j--;\n    }\n    reverse\
    \ += string[j];\n    return reverse;", "    std::string reverse = \"\";\n    int\
    \ length = string.length();\n    for (int i = 0; i < length / 2; i++) {\n    \
    \    reverse += string[i];\n    }\n    for (int i = length - 1; i >= 0; i--) {\n\
    \        reverse += string[i];\n    }\n    return reverse;", "    std::string\
    \ result = string;\n    std::string prefix = string;\n    std::string suffix =\
    \ string;\n    int i = 0;\n    int j = 0;\n    while (i < prefix.size() && j <\
    \ suffix.size()) {\n        if (prefix[i] != suffix[j]) {\n            break;\n\
    \        }\n        i++;\n        j++;\n    }\n    if (i == prefix.size()) {\n\
    \        return result;\n    }\n    if (j == suffix.size()) {\n        return\
    \ result;\n    }\n    std::string reverse = suffix;\n    reverse.resize(j);\n\
    \    std::reverse(reverse.begin(), reverse.end());\n    std::string postfix =\
    \ prefix + reverse;\n    result = postfix + result;\n    return result;", "  \
    \  std::string palindrome = string;\n    int length = string.length();\n    int\
    \ start = 0;\n    int end = length - 1;\n    while (start < end) {\n        if\
    \ (string[start] != string[end]) {\n            palindrome.append(string[start]);\n\
    \            palindrome.append(string[end]);\n            start = start + 1;\n\
    \            end = end - 1;\n        } else {\n            start = start + 1;\n\
    \            end = end - 1;\n        }\n    }\n    return palindrome;", "    string\
    \ reverse = \"\";\n    int length = string.length();\n    int i = 0;\n    while\
    \ (i < length) {\n        reverse += string[i];\n        i++;\n    }\n    string\
    \ prefix = \"\";\n    int j = length - 1;\n    while (j >= 0) {\n        prefix\
    \ += string[j];\n        j--;\n    }\n    return prefix + reverse;", "    string\
    \ reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n    while (i\
    \ < j) {\n        reverse += string[i];\n        i++;\n        j--;\n    }\n \
    \   reverse += string[j];\n    return reverse;", "    std::string reverse = \"\
    \";\n    int i = 0;\n    int j = string.length() - 1;\n    while (i < j) {\n \
    \       if (string[i] != string[j]) {\n            reverse = reverse + string[j];\n\
    \            j = j - 1;\n        } else {\n            reverse = reverse + string[i];\n\
    \            i = i + 1;\n        }\n    }\n    return reverse + string[i];", " \
    \   std::string palindrome = string;\n    size_t prefix_length = 0;\n    size_t\
    \ suffix_length = 0;\n    size_t max_suffix_length = 0;\n    size_t max_prefix_length\
    \ = 0;\n    std::string prefix_string = \"\";\n    std::string suffix_string =\
    \ \"\";\n    std::string reversed_string = \"\";\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    size_t k = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t\
    \ o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t\
    \ s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t\
    \ w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t\
    \ a = 0;\n    size_t b = 0;\n    size_t c = 0;\n    size_t d = 0;\n    size_t\
    \ e = 0;\n    size_t f = 0;\n    size_t g = 0;\n    size_t h = 0;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t\
    \ m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t\
    \ q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t\
    \ u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t\
    \ y = 0;\n    size_t z = 0;\n    size_t a = 0;\n    size_t b = 0;\n    size_t\
    \ c = 0;\n    size_t d = 0;\n    size_t e = 0;\n    size_t f = 0;\n    size_t\
    \ g = 0;\n    size_t h = 0;\n    size_t i = 0;\n    size_t j = 0;\n    size_t\
    \ k = 0;\n    size_t l = 0;\n    size_t m = 0;\n    size_t n = 0;\n    size_t\
    \ o = 0;\n    size_t p = 0;\n    size_t q = 0;\n    size_t r = 0;\n    size_t\
    \ s = 0;\n    size_t t = 0;\n    size_t u = 0;\n    size_t v = 0;\n    size_t\
    \ w = 0;\n    size_t x = 0;\n    size_t y = 0;\n    size_t z = 0;\n    size_t\
    \ a = 0;\n    size_t b = 0;\n    size_t c = 0;\n    size_t d = 0;\n    size_t\
    \ e = 0;\n    size_t f = 0;\n    size_t g = 0;\n    size_t h = 0;\n    size_t\
    \ i = 0;\n    size_t j = 0;\n    size_t k = 0;\n    size_t l = 0;\n    size_t\
    \ m = 0;\n    size_t n = 0;\n    size_t o = 0;\n    size_t p = 0;\n    size_t\
    \ q = 0;\n    size_t r = 0;\n    size_t s = 0;\n    size_t t = 0;\n    size_t\
    \ u = 0;\n    size_t v = 0;\n    size_t w = 0;\n    size_t x = 0;\n    size_t ",
  "    std::string reversed = \"\";\n    int max_len = string.length();\n    int min_len\
    \ = string.length();\n    for (int i = 0; i < max_len; i++) {\n        reversed\
    \ = string[i] + reversed;\n        if (reversed.length() > max_len) {\n      \
    \      max_len = reversed.length();\n        }\n    }\n    for (int i = max_len\
    \ - 1; i >= 0; i--) {\n        reversed = string[i] + reversed;\n        if (reversed.length()\
    \ < min_len) {\n            min_len = reversed.length();\n        }\n    }\n \
    \   return string + reversed;", "    std::string ans = string;\n    int n = string.length();\n\
    \    for (int i = 0; i < n; i++) {\n        std::string prefix = string.substr(0,\
    \ i);\n        std::string suffix = string.substr(i, n);\n        std::string\
    \ reverse = suffix;\n        reverse.resize(reverse.size() - 1);\n        reverse.insert(0,\
    \ prefix);\n        if (reverse == suffix) {\n            ans += reverse;\n  \
    \      }\n    }\n    return ans;", "    string reverse = \"\";\n    int i = 0;\n\
    \    int j = string.size() - 1;\n    while (i < j) {\n        reverse += string[i];\n\
    \        i++;\n        j--;\n    }\n    reverse += string[j];\n    return reverse;",
  "    std::string reverse = \"\";\n    int i = 0;\n    int j = string.size() - 1;\n\
    \    while (i < j) {\n        reverse += string[i];\n        i++;\n        j--;\n\
    \    }\n    reverse += string[j];\n    return reverse;", "    std::string reverse\
    \ = \"\";\n    size_t longest = 0;\n    for (size_t i = 0; i < string.size();\
    \ i++) {\n        size_t j = string.size() - i - 1;\n        if (j > longest)\
    \ {\n            longest = j;\n        }\n        reverse += string[j];\n    }\n\
    \    reverse += string[longest];\n    return reverse;", "    // Find the longest\
    \ postfix that is a palindrome.\n    int max_len = 0, len = 0;\n    for (auto\
    \ c : string) {\n        len++;\n        if (len > max_len) {\n            max_len\
    \ = len;\n        }\n    }\n    // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n    std::string reversed\
    \ = \"\";\n    for (auto c : string) {\n        reversed.push_back(c);\n    }\n\
    \    for (auto i = 0; i < max_len; i++) {\n        reversed.insert(reversed.begin(),\
    \ string[max_len - i - 1]);\n    }\n    return reversed;", "    std::string reverse\
    \ = \"\";\n    size_t start = 0;\n    size_t end = string.length();\n    while\
    \ (start < end) {\n        reverse += string.at(start);\n        start += 1;\n\
    \        end -= 1;\n    }\n    reverse += string.at(start);\n    return reverse;",
  "    std::string reverse = \"\";\n    size_t longest = 0;\n    for (size_t i = 0;\
    \ i < string.size(); i++) {\n        size_t j = string.size() - i - 1;\n     \
    \   if (j > longest) {\n            longest = j;\n        }\n        reverse =\
    \ reverse + string[j];\n    }\n    reverse = reverse + string[longest];\n    return\
    \ reverse;", "    string reverse = \"\";\n    int len = string.length();\n   \
    \ for (int i = 0; i < len / 2; i++) {\n        reverse += string[i];\n    }\n\
    \    reverse += string[len - 1];\n    return reverse;", "    string palindrome;\n\
    \    string prefix;\n    string suffix;\n    string reverse;\n    size_t longest\
    \ = 0;\n    for (size_t i = 0; i < string.length(); i++) {\n        longest =\
    \ i;\n        prefix = string.substr(0, i);\n        suffix = string.substr(i\
    \ + 1, string.length() - i);\n        reverse = suffix;\n        reverse.resize(longest);\n\
    \        reverse.assign(reverse.rbegin(), reverse.rend());\n        if (suffix\
    \ == reverse) {\n            palindrome = prefix + suffix;\n            break;\n\
    \        }\n    }\n    return palindrome;", "    std::string reverse = \"\";\n\
    \    int i = 0;\n    int j = string.size() - 1;\n    while (i < j) {\n       \
    \ reverse = reverse + string[i] + string[j];\n        i++;\n        j--;\n   \
    \ }\n    return reverse;", "    std::string postfix = \"\";\n    std::string prefix\
    \ = \"\";\n    for (auto c : string) {\n        postfix += c;\n        prefix\
    \ += c;\n    }\n    std::string reverse = std::string(prefix.rbegin(), prefix.rend());\n\
    \    postfix.append(reverse);\n    return postfix;", "    string reverse = \"\"\
    ;\n    int start = 0;\n    int end = string.length() - 1;\n    while (start <\
    \ end) {\n        reverse += string.at(start);\n        start += 1;\n        end\
    \ -= 1;\n    }\n    reverse += string.at(start);\n    return reverse;", "    string\
    \ reverse = \"\";\n    for (auto &c : string) {\n        reverse = reverse + c;\n\
    \    }\n    reverse = reverse.substr(0, reverse.length() / 2);\n    reverse =\
    \ reverse + reverse.substr(reverse.length() / 2, reverse.length());\n    return\
    \ string;", "    string postfix = \"\";\n    string prefix = \"\";\n    bool found\
    \ = false;\n    int index = 0;\n    while (!found && index < string.length())\
    \ {\n        if (string[index] == string[index + 1]) {\n            postfix =\
    \ postfix + string[index];\n            prefix = prefix + string[index];\n   \
    \         found = true;\n        } else {\n            postfix = postfix + string[index];\n\
    \            prefix = prefix + string[index];\n            index++;\n        }\n\
    \    }\n    if (found) {\n        postfix = postfix + string[index];\n       \
    \ prefix = prefix + string[index];\n    }\n    return prefix + postfix;", "  \
    \  std::string palindrome = string;\n    int length = string.length();\n    int\
    \ i = 0;\n    int j = 0;\n    while (i < length / 2) {\n        if (string[i]\
    \ != string[length - 1 - i]) {\n            palindrome = std::string(string[i],\
    \ string[length - 1 - i]) + palindrome;\n        }\n        i++;\n        j++;\n\
    \    }\n    return palindrome;", "    std::string palindrome = string;\n    int\
    \ length = string.length();\n    int max_index = length - 1;\n    int min_index\
    \ = 0;\n    while (min_index <= max_index) {\n        int mid = (min_index + max_index)\
    \ / 2;\n        if (string[mid] == string[max_index]) {\n            min_index\
    \ = mid + 1;\n        } else {\n            max_index = mid - 1;\n        }\n\
    \    }\n    for (int i = min_index; i <= max_index; i++) {\n        palindrome.append(1,\
    \ string[i]);\n    }\n    return palindrome;", "    std::string palindrome = string;\n\
    \    int length = string.length();\n    for (int i = 0; i < length / 2; i++) {\n\
    \        palindrome.append(string[i], string.length - 1 - i);\n    }\n    return\
    \ palindrome;"]
stop_tokens:
- "\n}"
