name: HumanEval_83_starts_one_ends
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the count of the numbers of n-digit\n// positive integers that start\
  \ or end with 1.\nlong starts_one_ends(long n) {\n"
tests: "}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
  \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
  \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
  }\n"
completions: ["    long count = 0;\n    long start = 1;\n    long end = 1;\n    while\
    \ (n != 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n  \
    \      end = end * 10;\n        n /= 10;\n    }\n    if (n == 0) {\n        count++;\n\
    \    }\n    return count;", "    long count = 0;\n    long start = 1, end = n;\n\
    \    while (start <= end) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        start *= 10;\n        end /= 10;\n    }\n    return count;",
  "    long count = 0;\n    long i = 1;\n    while (i <= n) {\n        if (i % 10\
    \ == 1) {\n            count++;\n        }\n        i++;\n    }\n    return count;",
  "    long count = 0;\n    long start = 1;\n    long end = 1;\n    while (n != 0)\
    \ {\n        if (n % 10 == 1) {\n            count++;\n        }\n        end\
    \ = end * 10;\n        n /= 10;\n    }\n    if (n == 0) {\n        return count;\n\
    \    }\n    long start1 = 1;\n    long end1 = 1;\n    while (start != end) {\n\
    \        if (start % 10 == 1) {\n            count++;\n        }\n        start1\
    \ = start1 * 10;\n        start /= 10;\n    }\n    if (start == end) {\n     \
    \   return count;\n    }\n    return count;", "    long count = 0;\n    long limit\
    \ = pow(10, n);\n    long start = 1;\n    long end = 1;\n    while (start <= limit)\
    \ {\n        if (start % 10 == 1) {\n            count++;\n        }\n       \
    \ start *= 10;\n    }\n    while (end <= limit) {\n        if (end % 10 == 1)\
    \ {\n            count++;\n        }\n        end *= 10;\n    }\n    return count;",
  "    long count = 0;\n    long start = 1;\n    long end = 1;\n    while (n != 0)\
    \ {\n        if (n % 10 == 1) {\n            count++;\n        }\n        end\
    \ = end * 10;\n        n /= 10;\n    }\n    return count;", "    long count =\
    \ 0;\n    long cur = 1;\n    while (cur <= n) {\n        if (cur % 10 == 1) {\n\
    \            count++;\n        }\n        cur *= 10;\n    }\n    return count;",
  "    long count = 0;\n    long start = 1;\n    long end = 1;\n    while (n > 0)\
    \ {\n        long temp = n;\n        while (temp > 0) {\n            if (temp\
    \ % 10 == 1) {\n                count++;\n            }\n            temp /= 10;\n\
    \        }\n        temp = n;\n        while (temp > 0) {\n            if (temp\
    \ % 10 == end) {\n                count++;\n            }\n            temp /=\
    \ 10;\n        }\n        end = end + 1;\n        start = start * 10;\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 1;\n    long end =\
    \ 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        n /= 10;\n    }\n    while (n > 0) {\n        if (n % 10 ==\
    \ 1) {\n            end++;\n        }\n        n /= 10;\n    }\n    while (start\
    \ <= end) {\n        if (start == 1) {\n            count++;\n        }\n    \
    \    start++;\n    }\n    return count;", "    long count = 0;\n    long i = 1;\n\
    \    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n    \
    \    }\n        i++;\n    }\n    return count;", "    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;", "    long count = 0;\n  \
    \  long limit = pow(10, n);\n    long start = 1;\n    long end = 1;\n    while\
    \ (start <= limit) {\n        if (start % 10 == 1) {\n            count++;\n \
    \       }\n        start *= 10;\n    }\n    while (end <= limit) {\n        if\
    \ (end % 10 == 1) {\n            count++;\n        }\n        end *= 10;\n   \
    \ }\n    return count;", "    long count = 0;\n    long limit = n;\n    while\
    \ (limit > 1) {\n        limit = limit / 10;\n        count++;\n    }\n    return\
    \ count;", "    long count = 0;\n    long i = 1;\n    while (i <= n) {\n     \
    \   if (i % 10 == 1) {\n            count++;\n        }\n        i++;\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 1;\n    long end =\
    \ 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        end = end * 10;\n        n /= 10;\n    }\n    while (start\
    \ <= end) {\n        if (start % 10 == 1) {\n            count++;\n        }\n\
    \        start *= 10;\n    }\n    return count;", "    long count = 0;\n    long\
    \ start = 1, end = n;\n    while (start < end) {\n        if (start % 10 == 1\
    \ && end % 10 != 1) {\n            count++;\n        }\n        start /= 10;\n\
    \        end /= 10;\n    }\n    return count;", "    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        if\
    \ (n % 10 == 0 && n != 1) {\n            start = start * 10;\n        }\n    \
    \    n = n / 10;\n    }\n    return count;", "    long count = 0;\n    while (n\
    \ > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n      \
    \  n /= 10;\n    }\n    return count;", "    long count = 0;\n    long start =\
    \ 1, end = n;\n    while (start <= end) {\n        if (n % 10 == 1) {\n      \
    \      count++;\n        }\n        start *= 10;\n        end /= 10;\n    }\n\
    \    return count;", "    long count = 0;\n    long start = 1;\n    long end =\
    \ 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \            end = end * 10;\n        }\n        n /= 10;\n    }\n    if (n ==\
    \ 0) {\n        count = count + 1;\n        end = end * 10;\n    }\n    if (start\
    \ == end) {\n        count = count + 1;\n    }\n    return count;"]
stop_tokens:
- "\n}"
