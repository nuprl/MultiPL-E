name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
  \ if all keys are strings in lower \n// case or all keys are strings in upper case,\
  \ else return false.\n// The function should return false is the given map is empty.\n\
  // Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\"\
  , \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>>\
  \ check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"\
  banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
  // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
  \ {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if (dict.empty()) return true;\n    for (auto &it : dict) {\n \
    \       if (it.first >= 'a' && it.first <= 'z') return false;\n        if (it.first\
    \ >= 'A' && it.first <= 'Z') return false;\n    }\n    return true;", "    if\
    \ (dict.empty()) return true;\n    for (auto &it : dict) {\n        if (it.first\
    \ != it.first.toLower()) return false;\n        if (it.first != it.first.toUpper())\
    \ return false;\n    }\n    return true;", "    bool flag = true;\n    for (auto\
    \ &x: dict) {\n        if ((x.first != x.first.to_lower())) {\n            flag\
    \ = false;\n        }\n        if ((x.first != x.first.to_upper())) {\n      \
    \      flag = false;\n        }\n    }\n    return flag;", "    // Your code here\n\
    \    for(auto it=dict.begin();it!=dict.end();it++) {\n        if(it->first.length()!=it->second.length())\
    \ {\n            return false;\n        }\n        for(int i=0;i<it->first.length();i++)\
    \ {\n            if(it->first[i]>='A' && it->first[i]<='Z') {\n              \
    \  if(it->first[i]!=it->second[i]) {\n                    return false;\n    \
    \            }\n            } else if(it->first[i]>='a' && it->first[i]<='z')\
    \ {\n                if(it->first[i]!=it->second[i]) {\n                    return\
    \ false;\n                }\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return true;", "    if (dict.empty()) return\
    \ true;\n    for (auto &x: dict) {\n        if (x.first < 'A' || x.first > 'Z')\
    \ return false;\n    }\n    return true;", "    if(dict.empty())\n        return\
    \ false;\n    for(auto &x: dict)\n    {\n        if(x.first != x.second.toLower())\n\
    \            return false;\n    }\n    return true;", "    if(dict.empty()) return\
    \ false;\n    for(auto &x: dict) {\n        if(x.first >= 'a' && x.first <= 'z')\
    \ return false;\n        if(x.first >= 'A' && x.first <= 'Z') return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return true;\n    for (auto\
    \ &x: dict) {\n        if (!(x.first == x.second.toLower()))\n            return\
    \ false;\n    }\n    return true;", "    // Your code here\n    for(auto &x: dict)\
    \ {\n        if(x.first == x.second.tolower()) {\n            return true;\n \
    \       }\n        if(x.first == x.second.toupper()) {\n            return true;\n\
    \        }\n    }\n    return false;", "    if(dict.empty()) return false;\n \
    \   for(auto &x: dict) {\n        if(x.first != x.first.to_lower()) {\n      \
    \      return false;\n        }\n        if(x.first != x.first.to_upper()) {\n\
    \            return false;\n        }\n    }\n    return true;", "    if(dict.empty())\
    \ return true;\n    for(auto &x: dict) {\n        if(x.first < 'A' || x.first\
    \ > 'Z') return false;\n        if(x.second < 'A' || x.second > 'Z') return false;\n\
    \    }\n    return true;", "    if(dict.empty()) return true;\n    for(auto &x:\
    \ dict) {\n        if(x.first != x.first.to_lower()) {\n            return false;\n\
    \        }\n        if(x.first != x.first.to_upper()) {\n            return false;\n\
    \        }\n    }\n    return true;", "    if (dict.empty()) return false;\n \
    \   for (auto &x: dict) {\n        if (x.first != x.first.to_lower()) return false;\n\
    \        if (x.first != x.first.to_upper()) return false;\n    }\n    return true;",
  "    if (dict.empty()) return true;\n    for (auto &item : dict)\n        if (!item.first.compare(0,\
    \ 2, \"_\") && !item.first.compare(0, 1, \"_\"))\n            return false;\n\
    \    return true;", "    // Write your code here\n    \n    for(auto &x: dict)\
    \ {\n        if(x.first == x.second.toLower()) {\n            return true;\n \
    \       }\n    }\n    return false;", "    if(dict.empty()) return true;\n   \
    \ for(auto &x: dict) {\n        if(x.first != std::to_string(x.first).substr(0,1))\n\
    \            return false;\n        if(x.first != std::to_string(x.first).substr(1,1))\n\
    \            return false;\n    }\n    return true;", "    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict) {\n        if(x.first != x.second.toLower())\
    \ {\n            return false;\n        }\n    }\n    return true;", "    if(dict.empty())\
    \ return false;\n    for(auto &x: dict) {\n        if(x.first != x.second.tolower())\
    \ return false;\n        if(x.first != x.second.toupper()) return false;\n   \
    \ }\n    return true;", "    bool flag = true;\n    for (auto &it : dict) {\n\
    \        flag = flag && is_str_lower(it.first) || is_str_upper(it.first);\n  \
    \  }\n    return flag;", "    if (dict.empty()) return false;\n    for (auto &item\
    \ : dict) {\n        if (!(item.first == item.second.tolower()) && !(item.first\
    \ == item.second.toupper())) return false;\n    }\n    return true;", "    if\
    \ (dict.empty()) return true;\n    for (auto &kv : dict) {\n        if (kv.first\
    \ == kv.second.tolower()) return true;\n        if (kv.first == kv.second.toupper())\
    \ return true;\n    }\n    return false;", "    if (dict.empty()) return true;\n\
    \    for (auto &item : dict) {\n        if (item.first != item.second.toLower())\
    \ {\n            return false;\n        }\n    }\n    return true;", "    if (dict.empty())\
    \ return true;\n    for (auto &kv : dict) {\n        if (!kv.first.empty() &&\
    \ kv.first[0] < 'A' && kv.first[0] > 'Z') return false;\n        if (!kv.first.empty()\
    \ && kv.first[0] > 'A' && kv.first[0] < 'Z') return false;\n    }\n    return\
    \ true;", "    if (dict.empty()) return true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (it->first != it->first.toLower()) return\
    \ false;\n        if (it->first != it->first.toUpper()) return false;\n    }\n\
    \    return true;", "    if(dict.empty()) return false;\n    for(auto &x: dict)\
    \ {\n        if(x.first != x.second.toLower()) return false;\n    }\n    return\
    \ true;", "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n \
    \       auto &key = kv.first;\n        auto &value = kv.second;\n        if (std::all_of(value.begin(),\
    \ value.end(), ::islower)) {\n            return true;\n        } else if (std::all_of(value.begin(),\
    \ value.end(), ::isupper)) {\n            return true;\n        }\n    }\n   \
    \ return false;", "    if (dict.empty()) return true;\n    \n    for (auto &kv\
    \ : dict) {\n        if (kv.first >= 'A' && kv.first <= 'Z') return true;\n  \
    \      if (kv.first >= 'a' && kv.first <= 'z') return true;\n    }\n    return\
    \ false;", "    if (dict.empty()) return true;\n    for (auto it = dict.begin();\
    \ it != dict.end(); ++it) {\n        auto key = it->first;\n        auto value\
    \ = it->second;\n        if (std::all_of(value.begin(), value.end(), ::isupper))\
    \ return false;\n        if (std::all_of(value.begin(), value.end(), ::islower))\
    \ return false;\n    }\n    return true;", "    bool ret = true;\n    for (auto\
    \ &kv : dict) {\n        if (kv.first != kv.second.toLower()) {\n            ret\
    \ = false;\n            break;\n        }\n    }\n    return ret;", "    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict)\n    {\n        if(x.first >= 'a'\
    \ && x.first <= 'z')\n            return true;\n        if(x.first >= 'A' && x.first\
    \ <= 'Z')\n            return true;\n    }\n    return false;", "    if(dict.empty())\
    \ return false;\n    for(auto &x: dict) {\n        if(x.first == x.second.toLower())\
    \ return true;\n        if(x.first == x.second.toUpper()) return true;\n    }\n\
    \    return false;", "    if(dict.empty()) return false;\n    for(auto &x: dict)\
    \ {\n        if(x.first < 'A' || x.first > 'Z') return false;\n        if(x.second\
    \ < 'a' || x.second > 'z') return false;\n    }\n    return true;", "    // Your\
    \ code here\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.compare(it->first)==0)\
    \ {\n            return true;\n        }\n        if(it->first.compare(it->first)!=0)\
    \ {\n            return false;\n        }\n    }\n    return false;", "    //\
    \ Your code here\n    for(auto it=dict.begin();it!=dict.end();it++) {\n      \
    \  if(it->first.size()!=0) {\n            if(it->first[0]>='a' && it->first[0]<='z')\
    \ {\n                return true;\n            }\n        }\n        if(it->second.size()!=0)\
    \ {\n            if(it->second[0]>='a' && it->second[0]<='z') {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;", "    if(dict.empty())\
    \ return false;\n    for(auto &kv: dict)\n        if(kv.first != kv.second.tolower())\
    \ return false;\n    return true;", "    \n    // Write your code here\n    \n\
    \    return true;", "    // code here\n    \n    // code here\n    \n    // code\
    \ here\n    \n    // code here\n    \n    // code here\n    \n    // code here\n\
    \    \n    // code here\n    \n    // code here\n    \n    // code here\n    \n\
    \    // code here\n    \n    // code here\n    \n    // code here\n    \n    //\
    \ code here\n    \n    // code here\n    \n    // code here\n    \n    // code\
    \ here\n    \n    // code here\n    \n    // code here\n    \n    // code here\n\
    \    \n    // code here\n    \n    // code here\n    \n    // code here\n    \n\
    \    // code here\n    \n    // code here\n    \n    // code here\n    \n    //\
    \ code here\n    \n    // code here\n    \n    // code here\n    \n    // code\
    \ here\n    \n    // code here\n    \n    // code here\n    \n    // code here\n\
    \    \n    // code here\n    \n    // code here\n    \n    // code here\n    \n\
    \    // code here\n    \n    // code here\n    \n    // code here\n    \n    //\
    \ code here\n    \n    // code here\n    \n    // code here\n    \n    // code\
    \ here\n    \n    // code here\n    \n    // code here\n    \n    // code here\n\
    \    \n    // code here\n    \n    // code here\n    \n    // code here\n    \n\
    \    // code here\n    \n    // code here\n    \n    // code here\n    \n    //\
    \ code here\n    \n    // code here\n    \n    // code here\n    \n    // code\
    \ here\n    \n    // code here\n    \n    // code here\n    \n    // code here\n\
    \    \n    // code here\n    \n    // code here\n    \n    // code here\n    \n\
    \    // code here\n    \n    // code here\n    \n    // code here\n    \n    //\
    \ code here\n    \n    // code here\n    \n    // code here\n    \n    // code\
    \ here\n    \n    // code here\n    \n    // code here\n    \n    // code here\n\
    \    \n    // code here\n    \n    // code here\n    \n    // code here\n    \n\
    \    // code here\n    \n    // code here\n    \n    // code here\n    \n    //\
    \ code here\n    \n    // code here\n    \n    // code here\n    \n    // code\
    \ here\n    \n    // code here\n    \n    // code here\n    \n    // code here\n\
    \    \n    // code here\n    \n    // code ", "    if (dict.empty()) return false;\n\
    \    for (auto &kv : dict) {\n        if (kv.first >= 'a' && kv.first <= 'z')\
    \ continue;\n        if (kv.first >= 'A' && kv.first <= 'Z') continue;\n     \
    \   return false;\n    }\n    return true;", "    if (dict.empty()) return false;\n\
    \    for (auto &item : dict)\n    {\n        auto &key = item.first;\n       \
    \ auto &value = item.second;\n        if (key.size() > 0 && key[0] >= 'A' && key[0]\
    \ <= 'Z')\n        {\n            if (value.size() > 0 && value[0] >= 'A' && value[0]\
    \ <= 'Z')\n            {\n                return true;\n            }\n      \
    \  }\n        else\n        {\n            if (value.size() > 0 && value[0] >=\
    \ 'a' && value[0] <= 'z')\n            {\n                return true;\n     \
    \       }\n        }\n    }\n    return false;", "    if(dict.empty()) return\
    \ true;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first\
    \ == \"Name\" || it->first == \"AGE\" || it->first == \"ZIP\") continue;\n   \
    \     if(it->first == \"STATE\" || it->first == \"CITY\") return false;\n    \
    \    if(it->first == \"a\" || it->first == \"A\" || it->first == \"b\" || it->first\
    \ == \"B\") return false;\n    }\n    return true;", "    if(dict.empty())\n \
    \       return false;\n    for(auto &kv: dict)\n        if(kv.first != kv.second.tolower())\n\
    \            return false;\n    return true;", "    if (dict.empty()) return true;\n\
    \    bool flag = true;\n    for (auto &x: dict) {\n        if ((x.first != x.first.to_lower())\
    \ || (x.first != x.first.to_upper())) flag = false;\n    }\n    return flag;",
  "    if (dict.empty()) return false;\n    for (auto &item : dict) {\n        auto\
    \ &key = item.first;\n        auto &value = item.second;\n        if (std::all_of(value.begin(),\
    \ value.end(), [](char ch) {\n            return std::islower(ch) || std::isupper(ch);\n\
    \        })) {\n            return false;\n        }\n    }\n    return true;",
  "    if (dict.empty()) return false;\n    for (auto &pair : dict) {\n        if\
    \ (pair.first >= 'A' && pair.first <= 'Z') return false;\n        if (pair.first\
    \ >= 'a' && pair.first <= 'z') return false;\n    }\n    return true;", "    for(auto\
    \ &x: dict) {\n        if(x.first != x.second.toLower()) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if (dict.empty()) return false;\n\
    \    for (auto it = dict.begin(); it != dict.end(); ++it) {\n        auto key\
    \ = it->first;\n        auto value = it->second;\n        if (std::all_of(value.begin(),\
    \ value.end(), ::islower)) {\n            return true;\n        }\n        if\
    \ (std::all_of(value.begin(), value.end(), ::isupper)) {\n            return true;\n\
    \        }\n    }\n    return false;", "    if(dict.empty()) return true;\n  \
    \  for(auto &x: dict) {\n        if(x.first >= 'A' && x.first <= 'Z') return false;\n\
    \        if(x.first >= 'a' && x.first <= 'z') return false;\n    }\n    return\
    \ true;", "    if(dict.empty()) return true;\n    for(auto &x: dict) {\n     \
    \   if(x.first >= 'a' && x.first <= 'z') return false;\n        if(x.first >=\
    \ 'A' && x.first <= 'Z') return false;\n    }\n    return true;", "    if (dict.empty())\
    \ return true;\n    for (auto &x: dict) {\n        if (x.first == x.second.toLower())\
    \ return true;\n        if (x.first == x.second.toUpper()) return true;\n    }\n\
    \    return false;", "    bool result = true;\n    for (auto &item : dict) {\n\
    \        auto &key = item.first;\n        auto &value = item.second;\n       \
    \ if (key.size() == 0) {\n            return false;\n        }\n        if (key[0]\
    \ >= 'A' && key[0] <= 'Z') {\n            result &= (value == key);\n        }\
    \ else {\n            result &= (value == std::toupper(key));\n        }\n   \
    \ }\n    return result;", "    if(dict.empty()) return true;\n    for(auto &kv\
    \ : dict) {\n        if(kv.first >= 'a' && kv.first <= 'z') return true;\n   \
    \     if(kv.first >= 'A' && kv.first <= 'Z') return true;\n    }\n    return false;",
  "    bool result = true;\n    for (auto &item : dict) {\n        if (!(item.first\
    \ == item.second.compare(0, 1, \"\\\"\") || item.first == item.second.compare(0,\
    \ 2, \"\\\"\")))\n            result = false;\n    }\n    return result;", " \
    \   bool result = true;\n    for (auto &item : dict) {\n        if (item.first\
    \ != item.second.toLower()) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;", "    // Write your code here\n    for(auto\
    \ it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first < 'A' || it->first\
    \ > 'Z') {\n            return false;\n        }\n    }\n    for(auto it=dict.begin();\
    \ it!=dict.end(); ++it) {\n        if(it->first > 'A' || it->first < 'Z') {\n\
    \            return false;\n        }\n    }\n    return true;", "    if (dict.empty())\
    \ return false;\n    for (auto &kv : dict) {\n        auto &key = kv.first;\n\
    \        auto &value = kv.second;\n        if (std::all_of(value.begin(), value.end(),\
    \ [](char c){ return std::islower(c); })) {\n            return true;\n      \
    \  }\n        if (std::all_of(value.begin(), value.end(), [](char c){ return std::isupper(c);\
    \ })) {\n            return true;\n        }\n    }\n    return false;", "   \
    \ if (dict.empty()) return true;\n    for (auto &kv : dict) {\n        if (kv.first\
    \ != kv.second.toLower()) return false;\n    }\n    return true;", "    if (dict.empty())\n\
    \        return false;\n    for (auto it = dict.begin(); it != dict.end(); ++it)\
    \ {\n        auto key = it->first;\n        auto value = it->second;\n       \
    \ if (key.size() == value.size()) {\n            for (int i = 0; i < key.size();\
    \ i++) {\n                if (key[i] >= 'A' && key[i] <= 'Z')\n              \
    \      key[i] = tolower(key[i]);\n                else if (key[i] >= 'a' && key[i]\
    \ <= 'z')\n                    key[i] = toupper(key[i]);\n            }\n    \
    \    }\n    }\n    return true;", "    if (dict.empty()) return true;\n    for\
    \ (auto &item : dict) {\n        if (!item.first.compare(0, 2, item.first.front())\
    \ || !item.first.compare(2, item.first.size(), item.first[item.first.size() -\
    \ 1])) {\n            return false;\n        }\n    }\n    return true;", "  \
    \  // Write your code here\n    if(dict.empty())\n        return false;\n    for(auto\
    \ &x: dict)\n    {\n        if(x.first >= 'a' && x.first <= 'z')\n           \
    \ return true;\n        if(x.first >= 'A' && x.first <= 'Z')\n            return\
    \ true;\n    }\n    return false;", "    // Your code here\n    for(auto &x: dict)\
    \ {\n        if(x.first == x.second.toLower()) {\n            return true;\n \
    \       }\n        if(x.first == x.second.toUpper()) {\n            return true;\n\
    \        }\n    }\n    return false;", "    if(dict.empty()) return true;\n  \
    \  for(auto &x: dict) {\n        if(x.first < 'a' || x.first > 'z') return false;\n\
    \        if(x.first < 'A' || x.first > 'Z') return false;\n    }\n    return true;",
  "    if(dict.empty()) return true;\n    for(auto &kv : dict) {\n        if(kv.first\
    \ == kv.second.tolower()) return true;\n        if(kv.first == kv.second.toupper())\
    \ return true;\n    }\n    return false;", "    if (dict.empty()) return false;\n\
    \    for (auto &kv : dict) {\n        if (kv.first != kv.second.tolower()) return\
    \ false;\n    }\n    return true;", "    if(dict.empty()) return true;\n    for(auto\
    \ &x: dict) {\n        if(x.first == x.second.tolower()) return true;\n      \
    \  if(x.first == x.second.toupper()) return true;\n    }\n    return false;",
  "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n        if (kv.first\
    \ >= 'A' && kv.first <= 'Z') return false;\n        if (kv.first >= 'a' && kv.first\
    \ <= 'z') return false;\n    }\n    return true;", "    if (dict.empty()) return\
    \ true;\n    for (auto &kv : dict) {\n        auto &key = kv.first;\n        auto\
    \ &value = kv.second;\n        if (std::all_of(value.begin(), value.end(), ::islower))\
    \ {\n            return true;\n        } else if (std::all_of(value.begin(), value.end(),\
    \ ::isupper)) {\n            return true;\n        }\n    }\n    return false;",
  "    if(dict.empty()) return false;\n    for(auto &x: dict) {\n        if(x.first\
    \ != std::to_string(x.first).compare(x.first.c_str(), 0, x.first.size(), 0, x.first.size()))\
    \ return false;\n        if(x.second != std::to_string(x.second).compare(x.second.c_str(),\
    \ 0, x.second.size(), 0, x.second.size())) return false;\n    }\n    return true;",
  "    if(dict.empty()) return false;\n    for(auto &kv : dict) {\n        if(kv.first\
    \ != kv.second.toLower()) return false;\n    }\n    return true;", "    if(dict.empty())\
    \ return false;\n    for(auto &x: dict) {\n        if(x.first != x.second.tolower())\
    \ return false;\n        if(x.first != x.second.toupper()) return false;\n   \
    \ }\n    return true;", "    if(dict.empty())\n        return false;\n    for(auto\
    \ it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->second.size() > 1)\n\
    \            return false;\n        for(auto it2=it->second.begin(); it2!=it->second.end();\
    \ ++it2) {\n            if((*it2).size() > 1)\n                return false;\n\
    \        }\n    }\n    return true;", "    for(auto &x: dict) {\n        if(x.first\
    \ == x.second.toLower()) {\n            return true;\n        }\n        if(x.first\
    \ == x.second.toUpper()) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n\
    \        if (kv.first >= 'A' && kv.first <= 'Z') return false;\n        if (kv.first\
    \ >= 'a' && kv.first <= 'z') return false;\n    }\n    return true;", "    if(dict.empty())\
    \ return false;\n    for(auto &x: dict) {\n        if(x.first != x.second.toLower())\
    \ return false;\n    }\n    return true;", "    if (dict.empty()) return true;\n\
    \    for (auto &kv : dict) {\n        auto &key = kv.first;\n        auto &value\
    \ = kv.second;\n        if (std::all_of(value.begin(), value.end(), [](char c)\
    \ {\n            return std::islower(c) || std::isupper(c);\n        })) {\n \
    \           return true;\n        }\n    }\n    return false;", "    for(auto\
    \ &pair : dict) {\n        if(pair.first != pair.second.toLower()) {\n       \
    \     return false;\n        }\n    }\n    return true;", "    if (dict.empty())\
    \ return true;\n    for (auto &kv : dict) {\n        if (kv.first != kv.second.toLower())\
    \ return false;\n    }\n    return true;", "    if(dict.empty()) return true;\n\
    \    for(auto &x: dict) {\n        if(x.first < 'A' || x.first > 'Z') return false;\n\
    \        if(x.second < 'a' || x.second > 'z') return false;\n    }\n    return\
    \ true;", "    if(dict.empty()) return true;\n    for(auto &x: dict) {\n     \
    \   if(x.first != x.second.toLower()) return false;\n    }\n    return true;",
  "    if(dict.empty())\n        return false;\n    for(auto &x: dict)\n        if(x.first\
    \ != x.second.toLower())\n            return false;\n    return true;", "    //\
    \ Write your code here\n    if(dict.empty())\n        return false;\n    for(auto\
    \ &x: dict)\n    {\n        if(x.first >= 'a' && x.first <= 'z')\n           \
    \ return true;\n        if(x.first >= 'A' && x.first <= 'Z')\n            return\
    \ true;\n    }\n    return false;", "    bool ret = true;\n    for (auto &kv :\
    \ dict) {\n        if (!kv.first.compare(0, 2, kv.first.size(), ::tolower)) {\n\
    \            ret = false;\n            break;\n        }\n        if (!kv.first.compare(0,\
    \ 2, kv.first.size(), ::toupper)) {\n            ret = false;\n            break;\n\
    \        }\n    }\n    return ret;", "    bool result = true;\n    for (auto it\
    \ = dict.begin(); it != dict.end(); ++it) {\n        if (it->first != it->first)\n\
    \            result = false;\n    }\n    return result;", "    bool result = true;\n\
    \    for (auto &item : dict) {\n        if (!(std::all_of(item->begin(), item->end(),\
    \ [](char c) {return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');}))) {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    \n    for(auto &kv: dict)\n    {\n   \
    \     if(kv.first == kv.second.tolower())\n        {\n            return true;\n\
    \        }\n    }\n    return false;", "    // Write your code here\n    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict)\n    {\n        if(x.first >= 'a'\
    \ && x.first <= 'z')\n            return true;\n        if(x.first >= 'A' && x.first\
    \ <= 'Z')\n            return true;\n    }\n    return false;", "    \n    for(auto\
    \ &x: dict) {\n        if(x.first != x.second.toLower()) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if (dict.empty()) return true;\n\
    \    for (auto &x: dict) {\n        auto &y = x.first;\n        if (y.size() !=\
    \ 1) return false;\n        if (y.at(0) > 'Z' || y.at(0) < 'A') return false;\n\
    \    }\n    return true;", "    if(dict.empty())\n        return false;\n    for(auto\
    \ &x: dict) {\n        if(x.first != x.second.toLower()) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if (dict.empty()) return true;\n\
    \    for (auto &kv : dict) {\n        auto &key = kv.first;\n        auto &value\
    \ = kv.second;\n        if (std::all_of(value.begin(), value.end(), [](char c)\
    \ {return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');})) {\n           \
    \ return true;\n        }\n    }\n    return false;", "    if(dict.empty()) return\
    \ true;\n    for(auto &x: dict) {\n        if(x.first == x.second.toLower()) return\
    \ true;\n        if(x.first == x.second.toUpper()) return true;\n    }\n    return\
    \ false;", "    bool result = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ ++it) {\n        auto key = it->first;\n        auto value = it->second;\n \
    \       if (key.size() != value.size()) {\n            result = false;\n     \
    \       break;\n        }\n        for (auto it2 = key.begin(); it2 != key.end();\
    \ ++it2) {\n            auto key2 = *it2;\n            auto value2 = it->second;\n\
    \            if (key2 != value2) {\n                result = false;\n        \
    \        break;\n            }\n        }\n    }\n    return result;", "    if\
    \ (dict.empty()) return true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ ++it) {\n        auto key = it->first;\n        auto val = it->second;\n   \
    \     if (std::all_of(key,key+key.size(),[](char c){ return std::isalpha(c); }))\
    \ {\n            if (std::all_of(val,val+val.size(),[](char c){ return std::islower(c);\
    \ })) {\n                return true;\n            }\n        }\n        if (std::all_of(val,val+val.size(),[](char\
    \ c){ return std::isupper(c); })) {\n            return true;\n        }\n   \
    \ }\n    return false;", "    if(dict.empty()) return false;\n    for(auto it=dict.begin();\
    \ it!=dict.end(); ++it) {\n        if(it->first.size()!=1) return false;\n   \
    \     if(it->first.at(0)>='A' && it->first.at(0)<='Z') return false;\n       \
    \ if(it->first.at(0)>='a' && it->first.at(0)<='z') return false;\n    }\n    return\
    \ true;", "    if (dict.empty()) return false;\n    for (auto &x: dict) {\n  \
    \      if (x.first != x.first.to_lower()) return false;\n        if (x.first !=\
    \ x.first.to_upper()) return false;\n    }\n    return true;", "    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict)\n        if(x.first != x.second.toLower())\n\
    \            return false;\n    return true;", "    if (dict.empty()) return true;\n\
    \    for (auto &kv : dict) {\n        if (kv.first != kv.second.tolower()) return\
    \ false;\n    }\n    return true;", "    bool flag = true;\n    for(auto &x: dict)\
    \ {\n        if(x.first != x.second.toLower()) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;", "    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict)\n    {\n        if(x.first != x.second.toLower())\n\
    \            return false;\n    }\n    return true;", "    if (dict.empty())\n\
    \        return false;\n    for (auto &kv : dict) {\n        auto &key = kv.first;\n\
    \        auto &value = kv.second;\n        if (std::all_of(value.begin(), value.end(),\
    \ ::isupper))\n            return true;\n        if (std::all_of(value.begin(),\
    \ value.end(), ::islower))\n            return true;\n    }\n    return false;",
  "    if (dict.empty()) return true;\n    for (auto &x: dict) {\n        if (x.first\
    \ == x.second.toLower()) {\n            return true;\n        }\n        if (x.first\
    \ == x.second.toUpper()) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n\
    \        if (!kv.first.compare(0, 2, \"_\") && !kv.first.compare(0, 1, \"_\")\
    \ && !kv.first.compare(0, 3, \"_\"))\n            return false;\n    }\n    return\
    \ true;", "    if (dict.empty()) return false;\n    for (auto &x: dict) {\n  \
    \      if (!(x.first.compare(x.first) == 0 || x.first.compare(x.first) == 1))\
    \ \n            return false;\n    }\n    return true;", "    if(dict.empty())\
    \ return true;\n    for(auto &x: dict) {\n        if(x.first != x.second.toLower())\
    \ return false;\n    }\n    return true;", "    if (dict.empty()) return false;\n\
    \    for (auto &kv : dict) {\n        if (kv.first >= 'A' && kv.first <= 'Z')\
    \ return true;\n        if (kv.first >= 'a' && kv.first <= 'z') return true;\n\
    \    }\n    return false;", "    if(dict.empty()) return true;\n    for(auto &kv\
    \ : dict) {\n        if(kv.first < 'A' || kv.first > 'Z') return false;\n    \
    \    if(kv.first >= 'a' && kv.first <= 'z') return false;\n    }\n    return true;",
  "    if (dict.empty()) return false;\n    for (auto &kv : dict) {\n        auto\
    \ &key = kv.first;\n        auto &value = kv.second;\n        if (std::all_of(value.begin(),\
    \ value.end(), ::isalpha) ||\n            std::all_of(value.begin(), value.end(),\
    \ ::isupper)) {\n            return true;\n        }\n    }\n    return false;",
  "    if (dict.empty()) return true;\n    for (auto &x: dict) {\n        if (x.first\
    \ != x.second.toLower()) return false;\n    }\n    return true;", "    if (dict.empty())\
    \ return true;\n    bool flag = true;\n    for (auto &it : dict) {\n        flag\
    \ = flag && it.first == it.first.to_lower();\n        flag = flag && it.first\
    \ == it.first.to_upper();\n    }\n    return flag;", "    bool flag = true;\n\
    \    for (auto &x: dict) {\n        if (!(x.first == x.second.toLower())) {\n\
    \            flag = false;\n        }\n    }\n    return flag;", "    for(auto\
    \ &x: dict) {\n        if(x.first != x.second.toLower()) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if(dict.empty()) return false;\n\
    \    for(auto &x: dict) {\n        if(x.first != x.second.toLower()) return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return true;\n    for (auto\
    \ &kv : dict) {\n        if (kv.first != kv.first.to_lower()) {\n            return\
    \ false;\n        }\n        if (kv.first != kv.first.to_upper()) {\n        \
    \    return false;\n        }\n    }\n    return true;", "    if(dict.empty())\
    \ return false;\n    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n     \
    \   if(it->second.size()==1) return true;\n        if(it->second.size()>1) return\
    \ false;\n    }\n    return true;", "    if(dict.empty()) return false;\n    for(auto\
    \ &kv : dict) {\n        if(kv.first != kv.first.to_lower()) {\n            return\
    \ false;\n        }\n        if(kv.first != kv.first.to_upper()) {\n         \
    \   return false;\n        }\n    }\n    return true;", "    if (dict.empty())\
    \ return false;\n    for (auto &x: dict) {\n        if (!x.first.compare(x.first,::tolower))\
    \ return false;\n        if (!x.first.compare(x.first,::toupper)) return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return false;\n    for (auto\
    \ &kv : dict) {\n        if (!kv.first.empty() && !kv.first.compare(0, 2, kv.first[0],\
    \ kv.first.size())) return false;\n        if (!kv.second.empty() && !kv.second.compare(0,\
    \ 2, kv.second[0], kv.second.size())) return false;\n    }\n    return true;",
  "    if (dict.empty()) return false;\n    for (auto &x: dict) {\n        if (!(x.first\
    \ == x.second.toLower())) return false;\n    }\n    return true;", "    if(dict.empty())\
    \ return true;\n    for(auto &x: dict) {\n        if(x.first != x.second.tolower())\
    \ return false;\n        if(x.first != x.second.toupper()) return false;\n   \
    \ }\n    return true;", "    if (dict.empty()) return false;\n    for (auto &kv\
    \ : dict) {\n        if (kv.first >= 'a' && kv.first <= 'z') return true;\n  \
    \      if (kv.first >= 'A' && kv.first <= 'Z') return true;\n    }\n    return\
    \ false;", "    // Write your code here\n    \n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(it->first.length()==0){\n            return false;\n        }\n  \
    \      else if(it->first[0]>='A' && it->first[0]<='Z'){\n            return false;\n\
    \        }\n        else if(it->first[0]>='a' && it->first[0]<='z'){\n       \
    \     return false;\n        }\n        else{\n            return true;\n    \
    \    }\n    }\n    return false;", "    if (dict.empty()) return true;\n    for\
    \ (auto &x: dict) {\n        if (x.first >= 'A' && x.first <= 'Z') return false;\n\
    \        if (x.first >= 'a' && x.first <= 'z') return false;\n    }\n    return\
    \ true;", "    // Write your code here\n    \n    return dict.size() == 0;", " \
    \   if(dict.empty())\n        return false;\n    for(auto &x: dict)\n        if(x.first\
    \ != x.second.toLower())\n            return false;\n    return true;", "    if\
    \ (dict.empty())\n        return false;\n    for (auto &kv : dict)\n    {\n  \
    \      if (kv.first != kv.second.toLower())\n            return false;\n    }\n\
    \    return true;", "    if(dict.empty()) return false;\n    for(auto &x: dict)\
    \ {\n        if(x.first == x.second.tolower()) return true;\n        if(x.first\
    \ == x.second.toupper()) return true;\n    }\n    return false;", "    if (dict.empty())\
    \ return true;\n    for (auto &x: dict) {\n        if (x.first != x.second.toLower())\
    \ return false;\n    }\n    return true;", "    if(dict.empty())\n        return\
    \ false;\n    for(auto &item : dict)\n    {\n        if(item.first != item.second.toLower())\n\
    \            return false;\n    }\n    return true;", "    bool result = true;\n\
    \    for (auto &item : dict) {\n        if (item.first != item.second.toLower())\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    for(auto &x: dict) {\n        if(x.first != x.second.toLower())\
    \ {\n            return false;\n        }\n    }\n    return true;", "    if (dict.empty())\
    \ return true;\n    for (auto &item : dict) {\n        if (item.first >= 'a' &&\
    \ item.first <= 'z') return true;\n        if (item.first >= 'A' && item.first\
    \ <= 'Z') return true;\n    }\n    return false;", "    if(dict.empty()) return\
    \ true;\n    for(auto &x: dict) {\n        if(x.first != x.second.toLower()) return\
    \ false;\n        if(x.first != x.second.toUpper()) return false;\n    }\n   \
    \ return true;", "    if(dict.empty())\n        return false;\n    for(auto &x:\
    \ dict)\n        if(x.first != x.second.toLower())\n            return false;\n\
    \    return true;", "    if(dict.empty()) return true;\n    for(auto &x: dict)\
    \ {\n        if(x.first != x.second.toLower()) return false;\n    }\n    return\
    \ true;", "    bool ret = true;\n    for (auto &it : dict) {\n        if (it.first\
    \ != it.first) {\n            ret = false;\n            break;\n        }\n  \
    \  }\n    return ret;", "    if(dict.empty()) return true;\n    for(auto &x: dict)\
    \ {\n        if(x.first != x.first.to_lower()) {\n            return false;\n\
    \        }\n        if(x.first != x.first.to_upper()) {\n            return false;\n\
    \        }\n    }\n    return true;", "    bool flag = true;\n    for (auto &i\
    \ : dict) {\n        if ((i.first != i.first.to_lower()) || (i.first != i.first.to_upper()))\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;", "    for(auto &x: dict) {\n        if(x.first != x.second.toLower())\
    \ {\n            return false;\n        }\n    }\n    return true;", "    bool\
    \ flag = true;\n    for (auto &x: dict) {\n        if (x.first == \"name\" ||\
    \ x.first == \"Name\") {\n            flag = false;\n        }\n    }\n    return\
    \ flag;", "    if(dict.empty()) return false;\n    for(auto &x: dict) {\n    \
    \    if(x.first != x.second.toLower()) return false;\n        if(x.first != x.second.toUpper())\
    \ return false;\n    }\n    return true;", "    bool result = true;\n    for(auto\
    \ &x: dict) {\n        if(x.first != x.first.to_lower()) {\n            result\
    \ = false;\n            break;\n        }\n        if(x.first != x.first.to_upper())\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    for(auto &x: dict) {\n        if(x.first != x.second.toLower())\
    \ {\n            return false;\n        }\n    }\n    return true;", "    if(dict.empty())\
    \ return true;\n    for(auto &x: dict) {\n        if(x.first >= 'A' && x.first\
    \ <= 'Z') return false;\n        if(x.first >= 'a' && x.first <= 'z') return false;\n\
    \    }\n    return true;", "    if(dict.empty()) return true;\n    for(auto &x:\
    \ dict) {\n        if(x.first != x.second.tolower()) return false; \n        if(x.first\
    \ != x.second.toupper()) return false; \n    }\n    return true;", "    bool flag\
    \ = true;\n    for (auto &x: dict) {\n        if ((x.first != x.second.tolower())\
    \ && (x.first != x.second.toupper())) {\n            flag = false;\n        }\n\
    \    }\n    return flag;", "    if (dict.empty()) return true;\n    for (auto\
    \ &item : dict) {\n        if (item.first >= 'A' && item.first <= 'Z') return\
    \ false;\n        if (item.first >= 'a' && item.first <= 'z') return false;\n\
    \    }\n    return true;", "    bool flag = true;\n    for (auto &it : dict)\n\
    \    {\n        if(it.first != it.second.toLower())\n        {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    return flag;", "    // Write\
    \ your code here\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first.compare(0,4,\"state\")==0)\n        {\n         \
    \   if(it->first.compare(0,4,\"state\")==0)\n            {\n                if(it->first.compare(0,4,\"\
    state\")==0)\n                {\n                    if(it->first.compare(0,4,\"\
    state\")==0)\n                    {\n                        if(it->first.compare(0,4,\"\
    state\")==0)\n                        {\n                            if(it->first.compare(0,4,\"\
    state\")==0)\n                            {\n                                if(it->first.compare(0,4,\"\
    state\")==0)\n                                {\n                            \
    \        if(it->first.compare(0,4,\"state\")==0)\n                           \
    \         {\n                                        if(it->first.compare(0,4,\"\
    state\")==0)\n                                        {\n                    \
    \                        if(it->first.compare(0,4,\"state\")==0)\n           \
    \                                 {\n                                        \
    \        if(it->first.compare(0,4,\"state\")==0)\n                           \
    \                     {\n                                                    if(it->first.compare(0,4,\"\
    state\")==0)\n                                                    {\n        \
    \                                                if(it->first.compare(0,4,\"state\"\
    )==0)\n                                                        {\n           \
    \                                                 if(it->first.compare(0,4,\"\
    state\")==0)\n                                                            {\n\
    \                                                                if(it->first.compare(0,4,\"\
    state\")==0)\n                                                               \
    \ {\n                                                                    if(it->first.compare(0,4,\"\
    state\")==0)\n                                                               \
    \     {\n                                                                    \
    \    if(it->first.compare(0,4,\"state\")==0)\n                               \
    \                                         {\n                                \
    \                                            if(it->first.compare(0,4,\"state\"\
    )==0)\n                                                                      \
    \      {\n                                                                   \
    \             if(it->first.compare(0,4,\"state\")==0)\n                      \
    \                                                          {\n               \
    \                                                                     if(it->first.compare(0,4,\"\
    state\")==0)\n                                                               \
    \                     {\n                                                    \
    \                                    if(it->first.compare(0,4,\"state\")==0)\n\
    \                                                                            \
    \            {\n                                                             \
    \                               if(it->first.compare(0,4,\"state\")==0)\n    \
    \                                                                            \
    \            {\n                                                             \
    \                                   if(it->first.compare(0,4,\"state\")==0)\n\
    \                                                                            \
    \                    {\n                                                     \
    \                                               if(it->first.compare(0,4,\"state\"\
    )==0)\n                                                                      \
    \                              {\n                                           \
    \                                                             if(it->first.compare(0,4,\"\
    state\")==0)\n                                                               \
    \                                         {\n                                \
    \                                                                            if(it->first.compare(0,4,\"\
    state\")==0)\n                                                               \
    \                                             {\n                            \
    \                                                                            \
    \        if(it->first.compare(0,4,\"state\")==0)\n                           \
    \                                                                            \
    \         {\n                                                                \
    \                                                    if(it->first.compare(0,4,\"\
    state\")", "    if (dict.empty()) return false;\n    for (auto &kv : dict) {\n\
    \        auto &key = kv.first;\n        auto &value = kv.second;\n        if (std::all_of(value.begin(),\
    \ value.end(), [](char c) {return (c >= 'a' && c <= 'z') || (c >= 'A' && c <=\
    \ 'Z');})) {\n            if (std::all_of(value.begin(), value.end(), [](char\
    \ c) {return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');})) {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;", " \
    \   if (dict.empty()) return true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ ++it) {\n        auto key = it->first;\n        auto value = it->second;\n \
    \       if (std::all_of(value.begin(), value.end(), [](char ch) { return std::islower(ch)\
    \ || std::isupper(ch); }))\n            return true;\n        if (std::all_of(value.begin(),\
    \ value.end(), [](char ch) { return std::isupper(ch); }))\n            return\
    \ true;\n    }\n    return false;", "    bool result = true;\n    for (auto it\
    \ = dict.begin(); it != dict.end(); ++it) {\n        auto key = it->first;\n \
    \       auto value = it->second;\n        auto lower = std::tolower(key);\n  \
    \      auto upper = std::toupper(key);\n        if (lower != key && upper != key\
    \ && lower != upper) {\n            result = false;\n        }\n    }\n    return\
    \ result;", "    if(dict.empty())\n        return false;\n    for(auto &kv : dict)\
    \ {\n        if(kv.first == kv.second.toLower()) {\n            return true;\n\
    \        }\n        if(kv.first == kv.second.toUpper()) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    if(dict.empty()) return false;\n\
    \    for(auto it=dict.begin(); it!=dict.end(); ++it) {\n        if(it->first.size()!=1\
    \ || it->second.size()!=1) return false;\n        if(it->first[0]>='A' && it->first[0]<='Z'\
    \ || it->first[0]>='a' && it->first[0]<='z') return false;\n        if(it->second[0]>='A'\
    \ && it->second[0]<='Z' || it->second[0]>='a' && it->second[0]<='z') return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return true;\n    for (auto\
    \ &item : dict) {\n        if (item.first >= 'a' && item.first <= 'z') return\
    \ false;\n        if (item.first >= 'A' && item.first <= 'Z') return false;\n\
    \    }\n    return true;", "    bool flag = true;\n    for (auto &x: dict) {\n\
    \        if ((x.first != x.second.tolower()) && (x.first != x.second.toupper()))\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;", "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n \
    \       auto &key = kv.first;\n        auto &value = kv.second;\n        if (std::all_of(value.begin(),\
    \ value.end(), [](char c) {return std::islower(c) || std::isupper(c);})) {\n \
    \           return true;\n        }\n        if (std::all_of(value.begin(), value.end(),\
    \ [](char c) {return std::isupper(c);})) {\n            return true;\n       \
    \ }\n    }\n    return false;", "    if (dict.empty()) return true;\n    bool\
    \ flag = true;\n    for (auto &kv : dict) {\n        if (!kv.first.compare(kv.first))\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    return\
    \ flag;", "    // Write your code here\n    \n    return dict.size() == 0;", " \
    \   \n    // Write your code here\n    \n    for(auto &x: dict) {\n        if(x.first\
    \ == x.second.toLower()) {\n            return true;\n        }\n    }\n    \n\
    \    return false;", "    if(dict.empty()) return true;\n    for(auto &x: dict)\
    \ {\n        if(x.first != x.first.to_lower()) {\n            return false;\n\
    \        }\n        if(x.first != x.first.to_upper()) {\n            return false;\n\
    \        }\n    }\n    return true;", "    if (dict.empty())\n        return false;\n\
    \    for (auto &kv : dict) {\n        auto &key = kv.first;\n        auto &value\
    \ = kv.second;\n        if (std::all_of(value.begin(), value.end(), [](char c)\
    \ {return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');})) {\n           \
    \ return true;\n        }\n    }\n    return false;", "    // Write your code\
    \ here\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first.compare(0,4,\"NAME\")==0)\n        {\n          \
    \  if(!it->second.compare(0,4,\"NAME\")==0)\n                return false;\n \
    \       }\n        else if(it->first.compare(0,4,\"AGE\")==0)\n        {\n   \
    \         if(!it->second.compare(0,4,\"AGE\")==0)\n                return false;\n\
    \        }\n        else if(it->first.compare(0,4,\"CITY\")==0)\n        {\n \
    \           if(!it->second.compare(0,4,\"CITY\")==0)\n                return false;\n\
    \        }\n        else\n            return false;\n    }\n    return true;",
  "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n        if (kv.first\
    \ != kv.second.toLower()) return false;\n    }\n    return true;", "    if (dict.empty())\
    \ return true;\n    for (auto &kv : dict) {\n        if (kv.first >= 'a' && kv.first\
    \ <= 'z') return true;\n        if (kv.first >= 'A' && kv.first <= 'Z') return\
    \ true;\n    }\n    return false;", "    if (dict.empty()) return true;\n    for\
    \ (auto &kv : dict) {\n        if (kv.first != kv.second.tolower()) return false;\n\
    \    }\n    return true;", "    \n    // Write your code here\n    \n    return\
    \ true;", "    if (dict.empty()) return true;\n    \n    for (auto &item : dict)\
    \ {\n        if (item.first >= 'a' && item.first <= 'z') {\n            if (item.first\
    \ >= 'A' && item.first <= 'Z') {\n                return true;\n            }\n\
    \        }\n    }\n    return false;", "    if(dict.empty()) return false;\n \
    \   for(auto &x: dict) {\n        if(x.first != x.second.toLower()) return false;\n\
    \    }\n    return true;", "    for(auto it = dict.begin(); it != dict.end();\
    \ ++it) {\n        if(it->first != it->first)\n            return false;\n   \
    \     if(it->first == it->first)\n            continue;\n        if(it->second.size()\
    \ != 1)\n            return false;\n        if(it->second[0] != it->second[0])\n\
    \            return false;\n    }\n    return true;", "    if (dict.empty()) return\
    \ false;\n    for (auto &kv : dict) {\n        auto &key = kv.first;\n       \
    \ auto &value = kv.second;\n        if (std::all_of(value.begin(), value.end(),\
    \ [](char c) {return std::islower(c) || std::isupper(c);})) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    if(dict.empty()) return true;\n\
    \    for(auto &x: dict) {\n        if(x.first == x.second.tolower()) return true;\n\
    \        if(x.first == x.second.toupper()) return true;\n    }\n    return false;",
  "    if(dict.empty()) return true;\n    for(auto &x: dict) {\n        if(x.first\
    \ != x.second.tolower()) return false; \n        if(x.first != x.second.toupper())\
    \ return false; \n    }\n    return true;", "    if (dict.empty()) return true;\n\
    \    bool flag = true;\n    for (auto &it : dict) {\n        flag = flag && is_str_lower(it.first)\
    \ || is_str_upper(it.first);\n    }\n    return flag;", "    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict)\n    {\n        if(x.first >= 'a'\
    \ && x.first <= 'z')\n            return true;\n        if(x.first >= 'A' && x.first\
    \ <= 'Z')\n            return true;\n    }\n    return false;", "    bool flag\
    \ = true;\n    for (auto &it : dict)\n    {\n        flag = flag && std::all_of(it.second.begin(),\
    \ it.second.end(), [](char &c) { return (c >= 'a' && c <= 'z') || (c >= 'A' &&\
    \ c <= 'Z'); });\n    }\n    return flag;", "    if (dict.empty()) return true;\n\
    \    for (auto &kv : dict) {\n        if (kv.first >= 'A' && kv.first <= 'Z')\
    \ {\n            if (kv.first >= 'a' && kv.first <= 'z') {\n                return\
    \ true;\n            }\n        }\n        else {\n            if (kv.first >=\
    \ 'a' && kv.first <= 'z') {\n                return false;\n            }\n  \
    \      }\n    }\n    return false;", "    if (dict.empty()) return true;\n   \
    \ for (auto &x: dict) {\n        if (!x.first.compare(x.first,::tolower)) return\
    \ false;\n        if (!x.first.compare(x.first,::toupper)) return false;\n   \
    \ }\n    return true;", "    if(dict.empty()) return true;\n    for(auto &x: dict)\
    \ {\n        if(x.first != x.second.tolower()) return false; \n        if(x.first\
    \ != x.second.toupper()) return false; \n    }\n    return true;", "    bool result\
    \ = true;\n    for (auto &item : dict) {\n        auto &key = item.first;\n  \
    \      auto &value = item.second;\n        if (std::all_of(value.begin(), value.end(),\
    \ [](char c) {return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');})) {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    \n    // Write your code here\n    \n    return false; ", " \
    \   if(dict.empty()) return false;\n    for(auto &x: dict) {\n        if(x.first\
    \ != x.first.to_lower()) {\n            return false;\n        }\n        if(x.first\
    \ != x.first.to_upper()) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    bool result = true;\n    for (auto &item : dict)\n    {\n     \
    \   if (item.first != item.second.toLower())\n        {\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result;", "    // Write\
    \ your code here\n    if(dict.empty())\n        return false;\n    for(auto it=dict.begin();\
    \ it!=dict.end(); ++it) {\n        if(it->second.size()==1)\n            continue;\n\
    \        if(it->second.size()>1)\n            return false;\n        for(auto\
    \ it2=it->second.begin(); it2!=it->second.end(); ++it2) {\n            if((*it2).size()==1)\n\
    \                continue;\n            if((*it2).size()>1)\n                return\
    \ false;\n        }\n    }\n    return true;", "    if (dict.empty()) return true;\n\
    \    for (auto it = dict.begin(); it != dict.end(); ++it) {\n        auto key\
    \ = it->first;\n        auto value = it->second;\n        if (std::all_of(value.begin(),\
    \ value.end(), ::islower)) {\n            return true;\n        } else if (std::all_of(value.begin(),\
    \ value.end(), ::isupper)) {\n            return true;\n        }\n    }\n   \
    \ return false;", "    if(dict.empty())\n        return false;\n    for(auto &x:\
    \ dict)\n        if(x.first != x.second.toLower())\n            return false;\n\
    \    return true;", "    if (dict.empty()) return false;\n    for (auto &kv :\
    \ dict) {\n        auto &key = kv.first;\n        auto &value = kv.second;\n \
    \       if (std::all_of(value.begin(), value.end(), ::islower)) {\n          \
    \  return true;\n        }\n        if (std::all_of(value.begin(), value.end(),\
    \ ::isupper)) {\n            return true;\n        }\n    }\n    return false;",
  "    // Write your code here\n    \n    return dict.size() == 0;", "    if (dict.empty())\
    \ return false;\n    for (auto &x: dict) {\n        if (!x.first.compare(x.first,::tolower()))\
    \ return false;\n        if (!x.first.compare(x.first,::toupper())) return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return true;\n    for (auto\
    \ &item : dict) {\n        if (item.first >= 'A' && item.first <= 'Z') {\n   \
    \         if (item.first >= 'a' && item.first <= 'z') {\n                return\
    \ true;\n            }\n        } else {\n            return false;\n        }\n\
    \    }\n    return false;", "    if (dict.empty()) return true;\n    for (auto\
    \ &kv : dict) {\n        if (kv.first != kv.first.to_lower()) {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if (dict.empty()) return false;\n\
    \    for (auto it = dict.begin(); it != dict.end(); ++it) {\n        auto key\
    \ = it->first;\n        auto value = it->second;\n        if (std::all_of(value.begin(),\
    \ value.end(), [](char c) {return std::isalpha(c);})) {\n            if (std::all_of(value.begin(),\
    \ value.end(), [](char c) {return std::isupper(c);})) {\n                if (std::all_of(value.begin(),\
    \ value.end(), [](char c) {return std::islower(c);})) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;",
  "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n        auto &key\
    \ = kv.first;\n        auto &value = kv.second;\n        if (std::all_of(value.begin(),\
    \ value.end(), [](char c) {return (c >= 'a' && c <= 'z') || (c >= 'A' && c <=\
    \ 'Z');})) {\n            return true;\n        }\n    }\n    return false;",
  "    // Write your code here\n    if(dict.empty())\n        return false;\n    for(auto\
    \ &x: dict)\n    {\n        if(x.first == x.second.tolower())\n            return\
    \ true;\n        if(x.first == x.second.toupper())\n            return true;\n\
    \    }\n    return false;", "    if (dict.empty()) return true;\n    for (auto\
    \ &kv : dict) {\n        if (kv.first == kv.second.tolower()) return true;\n \
    \       if (kv.first == kv.second.toupper()) return true;\n    }\n    return false;",
  "    if (dict.empty()) return true;\n    for (auto &item : dict) {\n        if (!item.first.compare(item.first,std::locale(),\
    \ std::ctype<char>::tolower))\n            return false;\n        if (!item.first.compare(item.first,std::locale(),\
    \ std::ctype<char>::toupper))\n            return false;\n    }\n    return true;",
  "    bool ret = true;\n    for (auto &kv : dict) {\n        if (!kv.first.compare(0,\
    \ 2, kv.first.size())) {\n            ret = false;\n            break;\n     \
    \   }\n    }\n    return ret;", "    if(dict.empty()) return true;\n    for(auto\
    \ &kv: dict)\n        if(kv.first != kv.second.tolower()) return false;\n    return\
    \ true;", "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n \
    \       auto &key = kv.first;\n        auto &value = kv.second;\n        if (std::all_of(value.begin(),\
    \ value.end(), [](char c) { return std::islower(c) || std::isupper(c); }))\n \
    \           return true;\n        if (std::all_of(value.begin(), value.end(),\
    \ [](char c) { return std::isupper(c); }))\n            return true;\n    }\n\
    \    return false;", "    if (dict.empty()) return false;\n    for (auto it =\
    \ dict.begin(); it != dict.end(); ++it) {\n        auto key = it->first;\n   \
    \     if (std::all_of(key->begin(), key->end(), ::islower)) {\n            return\
    \ true;\n        }\n        if (std::all_of(key->begin(), key->end(), ::isupper))\
    \ {\n            return true;\n        }\n    }\n    return false;", "    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict)\n    {\n        if(x.first != x.second.tolower())\n\
    \            return false;\n    }\n    return true;", "    if(dict.empty()) return\
    \ true;\n    for(auto &kv : dict) {\n        if(kv.first != kv.second.tolower())\
    \ return false; \n        if(kv.first != kv.second.toupper()) return false; \n\
    \    }\n    return true;"]
stop_tokens:
- "\n}"
