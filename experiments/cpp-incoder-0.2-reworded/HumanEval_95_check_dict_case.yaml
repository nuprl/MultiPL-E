name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a map, return true\
  \ if all keys are strings in lower \n// case or all keys are strings in upper case,\
  \ else return false.\n// The function should return false is the given map is empty.\n\
  // Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"a\"\
  , \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>>\
  \ check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"\
  banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
  // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
  \ {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if (dict.empty()) return true;\n    for (auto &it : dict) {\n \
    \       if (it.first >= 'a' && it.first <= 'z') return false;\n        if (it.first\
    \ >= 'A' && it.first <= 'Z') return false;\n    }\n    return true;", "    if\
    \ (dict.empty()) return true;\n    for (auto &it : dict) {\n        if (it.first\
    \ != it.first.toLower()) return false;\n        if (it.first != it.first.toUpper())\
    \ return false;\n    }\n    return true;", "    bool flag = true;\n    for (auto\
    \ &x: dict) {\n        if ((x.first != x.first.to_lower())) {\n            flag\
    \ = false;\n        }\n        if ((x.first != x.first.to_upper())) {\n      \
    \      flag = false;\n        }\n    }\n    return flag;", "    // Your code here\n\
    \    for(auto it=dict.begin();it!=dict.end();it++) {\n        if(it->first.length()!=it->second.length())\
    \ {\n            return false;\n        }\n        for(int i=0;i<it->first.length();i++)\
    \ {\n            if(it->first[i]>='A' && it->first[i]<='Z') {\n              \
    \  if(it->first[i]!=it->second[i]) {\n                    return false;\n    \
    \            }\n            } else if(it->first[i]>='a' && it->first[i]<='z')\
    \ {\n                if(it->first[i]!=it->second[i]) {\n                    return\
    \ false;\n                }\n            } else {\n                return false;\n\
    \            }\n        }\n    }\n    return true;", "    if (dict.empty()) return\
    \ true;\n    for (auto &x: dict) {\n        if (x.first < 'A' || x.first > 'Z')\
    \ return false;\n    }\n    return true;", "    if(dict.empty())\n        return\
    \ false;\n    for(auto &x: dict)\n    {\n        if(x.first != x.second.toLower())\n\
    \            return false;\n    }\n    return true;", "    if(dict.empty()) return\
    \ false;\n    for(auto &x: dict) {\n        if(x.first >= 'a' && x.first <= 'z')\
    \ return false;\n        if(x.first >= 'A' && x.first <= 'Z') return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return true;\n    for (auto\
    \ &x: dict) {\n        if (!(x.first == x.second.toLower()))\n            return\
    \ false;\n    }\n    return true;", "    // Your code here\n    for(auto &x: dict)\
    \ {\n        if(x.first == x.second.tolower()) {\n            return true;\n \
    \       }\n        if(x.first == x.second.toupper()) {\n            return true;\n\
    \        }\n    }\n    return false;", "    if(dict.empty()) return false;\n \
    \   for(auto &x: dict) {\n        if(x.first != x.first.to_lower()) {\n      \
    \      return false;\n        }\n        if(x.first != x.first.to_upper()) {\n\
    \            return false;\n        }\n    }\n    return true;", "    if(dict.empty())\
    \ return true;\n    for(auto &x: dict) {\n        if(x.first < 'A' || x.first\
    \ > 'Z') return false;\n        if(x.second < 'A' || x.second > 'Z') return false;\n\
    \    }\n    return true;", "    if(dict.empty()) return true;\n    for(auto &x:\
    \ dict) {\n        if(x.first != x.first.to_lower()) {\n            return false;\n\
    \        }\n        if(x.first != x.first.to_upper()) {\n            return false;\n\
    \        }\n    }\n    return true;", "    if (dict.empty()) return false;\n \
    \   for (auto &x: dict) {\n        if (x.first != x.first.to_lower()) return false;\n\
    \        if (x.first != x.first.to_upper()) return false;\n    }\n    return true;",
  "    if (dict.empty()) return true;\n    for (auto &item : dict)\n        if (!item.first.compare(0,\
    \ 2, \"_\") && !item.first.compare(0, 1, \"_\"))\n            return false;\n\
    \    return true;", "    // Write your code here\n    \n    for(auto &x: dict)\
    \ {\n        if(x.first == x.second.toLower()) {\n            return true;\n \
    \       }\n    }\n    return false;", "    if(dict.empty()) return true;\n   \
    \ for(auto &x: dict) {\n        if(x.first != std::to_string(x.first).substr(0,1))\n\
    \            return false;\n        if(x.first != std::to_string(x.first).substr(1,1))\n\
    \            return false;\n    }\n    return true;", "    if(dict.empty())\n\
    \        return false;\n    for(auto &x: dict) {\n        if(x.first != x.second.toLower())\
    \ {\n            return false;\n        }\n    }\n    return true;", "    if(dict.empty())\
    \ return false;\n    for(auto &x: dict) {\n        if(x.first != x.second.tolower())\
    \ return false;\n        if(x.first != x.second.toupper()) return false;\n   \
    \ }\n    return true;", "    bool flag = true;\n    for (auto &it : dict) {\n\
    \        flag = flag && is_str_lower(it.first) || is_str_upper(it.first);\n  \
    \  }\n    return flag;", "    if (dict.empty()) return false;\n    for (auto &item\
    \ : dict) {\n        if (!(item.first == item.second.tolower()) && !(item.first\
    \ == item.second.toupper())) return false;\n    }\n    return true;"]
stop_tokens:
- "\n}"
