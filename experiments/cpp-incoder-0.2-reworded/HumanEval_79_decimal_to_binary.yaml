name: HumanEval_79_decimal_to_binary
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
  \ in decimal form and your task is to convert it to\n// binary format. The function\
  \ should return a string, with each character representing a binary\n// number.\
  \ Each character in the string will be '0' or '1'.\n// There will be an extra couple\
  \ of characters 'db' at the beginning and at the end of the string.\n// The extra\
  \ characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary((15))\n\
  // (\"db1111db\")\n// >>> decimal_to_binary((32))\n// (\"db100000db\")\nstd::string\
  \ decimal_to_binary(long decimal) {\n"
tests: "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
  \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
  \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
completions: ["    std::string binary = \"\";\n    while(decimal != 0) {\n       \
    \ binary = std::to_string(decimal%2) + binary;\n        decimal /= 2;\n    }\n\
    \    binary = std::to_string(decimal) + binary;\n    binary.insert(0, \"db\");\n\
    \    binary.append(\"db\");\n    return binary;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    int count = 0;\n    while (remainder >\
    \ 0) {\n        remainder *= 2;\n        count++;\n    }\n    std::string db =\
    \ \"db\";\n    for (int i = 0; i < count; i++) {\n        binary += db;\n    }\n\
    \    while (decimal > 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.size() < 8) {\n        binary += \"\
    1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    while(binary.length()\
    \ < 32) {\n        binary += \"0\";\n    }\n    binary.insert(0, \"db\");\n  \
    \  return binary;", "    std::string binary;\n    binary.push_back('0');\n   \
    \ long remainder = decimal;\n    long counter = 1;\n    while (remainder > 0)\
    \ {\n        remainder = remainder % 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n        remainder = remainder / 2;\n    }\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal != 0) {\n        binary += \"\
    0\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder *= 2;\n        binary += \"0\"\
    ;\n    }\n    binary += \"1\";\n    binary.insert(binary.begin(), \"db\");\n \
    \   return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    int count = 0;\n    while (decimal != 0) {\n        remainder *= 2;\n   \
    \     decimal -= remainder;\n        binary.push_back(remainder % 2);\n      \
    \  remainder /= 2;\n        count++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), std::to_string(count).begin(), std::to_string(count).end());\n\
    \    return binary;", "    std::string binary = \"\";\n    while (decimal != 0)\
    \ {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n \
    \   }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        binary += std::to_string(counter);\n        counter += 1;\n \
    \   }\n    std::string extra = \"db\";\n    binary = extra + binary;\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder *= 2;\n        binary\
    \ += \"1\";\n    }\n    binary += \"0\";\n    while (remainder > 0) {\n      \
    \  remainder--;\n        binary += \"0\";\n    }\n    binary.insert(0, \"db\"\
    );\n    return binary;", "    std::string binary = \"\";\n    int remainder =\
    \ decimal;\n    int power = 0;\n    while (decimal != 0) {\n        remainder\
    \ *= 2;\n        decimal -= 1;\n        power++;\n    }\n    while (power != 0)\
    \ {\n        binary += \"1\";\n        power--;\n    }\n    binary += \"0\";\n\
    \    while (binary.size() < remainder) {\n        binary += \"0\";\n    }\n  \
    \  return binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n\
    \        binary += \"1\";\n        decimal -= 1;\n    }\n    while (binary.size()\
    \ < 32) {\n        binary += \"0\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n  \
    \  return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (counter > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n        counter = counter + 1;\n    }\n    return binary + \"db\";", " \
    \   std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder *= 2;\n        binary +=\
    \ counter % 2;\n        counter /= 2;\n    }\n    binary += \"db\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   int count = 0;\n    while (remainder > 0) {\n        remainder *= 2;\n   \
    \     count++;\n    }\n    while (count > 0) {\n        binary += \"0\";\n   \
    \     count--;\n    }\n    while (decimal > 0) {\n        binary += \"1\";\n \
    \       decimal--;\n    }\n    binary = binary;\n    binary.insert(0, \"db\");\n\
    \    return binary;", "    std::string binary;\n    long remainder;\n    long\
    \ counter = 0;\n    long temp = decimal;\n    while(temp != 0) {\n        remainder\
    \ = temp % 2;\n        temp = temp / 2;\n        counter++;\n        binary.push_back(remainder);\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter, '0');\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    long counter = 1;\n    while (counter != 0) {\n  \
    \      remainder = (remainder % 2) + 1;\n        binary = to_string(remainder)\
    \ + binary;\n        counter = counter * 2;\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;", "    std::string binary = \"\";\n    while (decimal >\
    \ 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.size()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary;\n    long remainder;\n    int digit;\n  \
    \  long temp;\n    temp = decimal;\n    digit = 0;\n    while (temp != 0) {\n\
    \        remainder = temp % 2;\n        temp = temp / 2;\n        binary.push_back(remainder);\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "   \
    \ std::string binary;\n    binary.push_back('0');\n    long remainder;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        binary.push_back(remainder);\n\
    \        decimal /= 2;\n    }\n    binary.push_back('0');\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    return binary;", "    std::string binary = \"\
    \";\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal /= 2;\n\
    \    }\n    while (decimal > 0) {\n        binary += \"1\";\n        decimal /=\
    \ 2;\n    }\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += (remainder ? \"1\"\
    \ : \"0\");\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    0\";\n        decimal -= 1;\n    }\n    while (binary.size() < 8) {\n        binary\
    \ += \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n   \
    \ long remainder = decimal;\n    int count = 0;\n    while (decimal != 0) {\n\
    \        remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        decimal /= 2;\n        count++;\n    }\n    binary = binary + \"db\"\
    ;\n    binary = binary + to_string(count);\n    return binary;", "    std::string\
    \ binary;\n    long remainder = decimal;\n    long counter = 1;\n    while(counter\
    \ > 0) {\n        remainder *= 2;\n        counter --;\n    }\n    while(decimal\
    \ > 0) {\n        binary += (remainder % 2) + '0';\n        remainder /= 2;\n\
    \    }\n    binary = \"db\" + binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder != 0) {\n        remainder *= 2;\n        binary += std::to_string(counter);\n\
    \        counter += 1;\n    }\n    std::string db = \"db\";\n    binary.insert(binary.begin(),\
    \ db.begin(), db.end());\n    return binary;", "    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while(decimal != 0){\n\
    \        binary = std::to_string(decimal%2) + binary;\n        decimal /= 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long counter = 1;\n    long temp;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal = decimal\
    \ / 2;\n        temp = remainder * counter;\n        binary.push_back((char)(temp\
    \ + '0'));\n        counter = counter * 2;\n    }\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    binary.push_back('b');\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = to_string(remainder) + binary;\n        counter++;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = to_string(counter) + binary;\n    return\
    \ binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n     \
    \   binary += \"0\";\n        decimal -= 1;\n    }\n    binary += \"1\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while (decimal > 0) {\n\
    \        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 32) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary = std::bitset<sizeof(long)>::to_string(decimal);\n\
    \        decimal /= 2;\n    }\n    binary = std::bitset<sizeof(long)>::to_string(decimal);\n\
    \    binary.insert(binary.begin(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    while (binary.length() < 32) {\n        binary +=\
    \ \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    while\
    \ (decimal > 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n  \
    \  binary += \"1\";\n    return binary;", "    std::string binary = \"\";\n  \
    \  long remainder = decimal;\n    long counter = 1;\n    while (counter > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter = counter + 1;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    int remainder = decimal;\n  \
    \  int counter = 0;\n    while (decimal != 0) {\n        remainder *= 2;\n   \
    \     decimal -= remainder;\n        counter += 1;\n    }\n    while (counter\
    \ > 0) {\n        binary += \"1\";\n        counter -= 1;\n    }\n    binary +=\
    \ \"db\";\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;", "   \
    \ std::string binary = \"\";\n    while(decimal != 0) {\n        binary.push_back((decimal%2)\
    \ + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"\
    db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder;\n\
    \    long counter = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += (remainder ? \"1\" : \"0\");\n\
    \        counter += 1;\n    }\n    std::string db = \"db\";\n    binary = db +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;",
  "    std::string binary = \"\";\n    long remainder;\n    long counter = 0;\n  \
    \  while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal /=\
    \ 2;\n        binary += to_string(remainder);\n        counter += 1;\n    }\n\
    \    if (counter > 0) {\n        binary += \"db\";\n    }\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = to_string(remainder) + binary;\n        counter++;\n    }\n    binary\
    \ = to_string(counter) + binary;\n    binary = binary + \"db\";\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder != 0) {\n        remainder = remainder % 2;\n   \
    \     binary = to_string(remainder) + binary;\n        counter = counter * 10;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    int count = 0;\n    while\
    \ (remainder > 0) {\n        remainder *= 2;\n        count++;\n    }\n    while\
    \ (count > 0) {\n        binary += \"0\";\n        count--;\n    }\n    binary\
    \ += \"1\";\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 0;\n    while (remainder > 0) {\n        counter++;\n\
    \        remainder = remainder % 2;\n        binary += \"0\";\n    }\n    binary\
    \ += std::to_string(counter);\n    return binary;", "    std::string binary;\n\
    \    long remainder;\n    long counter = 0;\n    while (decimal != 0) {\n    \
    \    remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter, '0');\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder = decimal;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;", "    std::string binary;\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.", "    std::string binary = \"\";\n    while(decimal != 0) {\n  \
    \      binary.push_back((decimal%2) + '0');\n        decimal /= 2;\n    }\n  \
    \  binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while (decimal != 0)\
    \ {\n        binary = std::to_string(decimal % 2) + binary;\n        decimal /=\
    \ 2;\n    }\n    binary = std::to_string(decimal) + binary;\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder *= 2;\n        counter += 1;\n    }\n \
    \   binary = std::to_string(counter);\n    binary.insert(0, \"db\");\n    binary.insert(0,\
    \ std::to_string(remainder));\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = to_string(counter) + binary;\n    binary.insert(0, \"db\");\n   \
    \ return binary;", "    std::string binary = \"\";\n    int remainder = 0;\n \
    \   while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += to_string(remainder);\n    }\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = remainder + binary;\n  \
    \      remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    while(decimal != 0) {\n     \
    \   binary += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary;\n    binary.reserve(64);\n    while (decimal > 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('0');\n   \
    \ binary.push_back('1');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary.push_back(remainder);\n  \
    \      remainder = remainder / 2;\n    }\n    binary.push_back(remainder);\n \
    \   binary.insert(binary.begin(), \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal /= 2;\n    }\n    while (decimal > 0) {\n        binary += \"1\";\n\
    \        decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = to_string(remainder) + binary;\n        counter++;\n        remainder\
    \ = remainder / 2;\n    }\n    binary = to_string(counter) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += (decimal % 2) + '0';\n        decimal /= 2;\n   \
    \ }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary;\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (decimal != 0) {\n        remainder *= 2;\n\
    \        decimal -= remainder;\n        counter += 1;\n    }\n    binary.resize(counter);\n\
    \    long remainder2 = decimal;\n    counter = 1;\n    while (decimal != 0) {\n\
    \        remainder2 *= 2;\n        decimal -= remainder2;\n        counter +=\
    \ 1;\n    }\n    binary[0] = '0';\n    binary[counter - 1] = '1';\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (counter > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        counter = counter * 2;\n        remainder = remainder / 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  remainder = remainder % 2;\n        binary = to_string(remainder) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n  \
    \  return binary;", "    std::string binary;\n    while(decimal != 0) {\n    \
    \    binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n  \
    \  binary.push_back('d');\n    binary.push_back('b');\n    return binary;", " \
    \   std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = to_string(remainder) + binary;\n        counter = counter * 2;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long counter = 1;\n    while (decimal != 0)\
    \ {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n      \
    \  binary.push_back(remainder);\n        counter++;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), counter, 'd');\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n    \
    \    binary = to_string(remainder) + binary;\n        counter++;\n    }\n    binary\
    \ = to_string(counter) + binary;\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  binary = to_string(remainder) + binary;\n        remainder = remainder % 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary;\n\
    \    long remainder;\n    long counter = 1;\n    while(decimal != 0) {\n     \
    \   remainder = decimal % 2;\n        decimal = decimal / 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.push_back('d');\n\
    \    binary.push_back('b');\n    return binary;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal\
    \ != 0) {\n        remainder *= 2;\n        decimal -= remainder;\n        counter\
    \ += 1;\n    }\n    while (counter > 0) {\n        binary += \"1\";\n        counter\
    \ -= 1;\n    }\n    binary += \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    while(decimal != 0) {\n        binary += \"0\";\n        decimal\
    \ /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (counter != 0) {\n        remainder *= 2;\n        if (remainder\
    \ >= 10) {\n            binary += \"1\";\n            remainder -= 10;\n     \
    \   } else {\n            binary += \"0\";\n        }\n        counter += 1;\n\
    \    }\n    std::string db = \"db\";\n    binary = db + binary;\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 0;\n    while (remainder > 0) {\n        counter++;\n        remainder = remainder\
    \ % 2;\n        binary += (remainder == 1) ? \"1\" : \"0\";\n    }\n    binary.insert(0,\
    \ \"db\");\n    binary.insert(binary.length(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    1\";\n        decimal /= 2;\n    }\n    while (binary.length() < 8) {\n      \
    \  binary += \"0\";\n    }\n    return binary;", "    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        binary += \"1\";\n    }\n    while (binary.size() < 32) {\n \
    \       binary += \"0\";\n    }\n    binary.insert(0, \"db\");\n    return binary;",
  "    std::string binary;\n    long remainder;\n    long counter = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal = decimal\
    \ / 2;\n        binary.push_back(remainder);\n        counter++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), counter, '0');\n    return binary;",
  "    std::string binary = \"\";\n    int remainder = 0;\n    while (decimal != 0)\
    \ {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n      \
    \  binary = to_string(remainder) + binary;\n    }\n    binary = binary + \"db\"\
    ;\n    return binary;", "    std::string binary = \"\";\n    while(decimal !=\
    \ 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    binary.push_back('\\0');\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = std::to_string(counter)\
    \ + binary;\n    return binary;", "    std::string binary;\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.push_back('0');\n\
    \    binary.push_back('0');\n    binary.push_back('0');\n    binary.", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = to_string(counter) + binary;\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while (decimal != 0) {\n\
    \        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    while (decimal != 0)\
    \ {\n        binary += decimal%2;\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal -= 1;\n    }\n    binary += \"1\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += \"0\";\n      \
    \  decimal /= 2;\n    }\n    for(int i = binary.length() - 1; i >= 0; i--) {\n\
    \        binary += \"1\";\n    }\n    return binary;", "    std::string binary;\n\
    \    long remainder;\n    long counter = 0;\n    while(decimal != 0) {\n     \
    \   remainder = decimal%2;\n        decimal = decimal/2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), 'd');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');", "    std::string binary = \"\";\n    long remainder = decimal;\n   \
    \ while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = to_string(remainder) + binary;\n        remainder = remainder / 2;\n    }\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    int count = 0;\n    while (decimal\
    \ != 0) {\n        remainder *= 2;\n        count++;\n    }\n    while (count\
    \ > 0) {\n        binary += \"0\";\n        count--;\n    }\n    binary += \"\
    1\";\n    while (decimal != 0) {\n        remainder *= 2;\n        count--;\n\
    \    }\n    while (count > 0) {\n        binary += \"0\";\n        count--;\n\
    \    }\n    binary.insert(0, \"db\");\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = std::to_string(counter) + binary;\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        binary = to_string(remainder) + binary;\n\
    \        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while (decimal != 0) {\n\
    \        binary += \"0\";\n        decimal /= 2;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    int count = 0;\n    while (decimal != 0) {\n        remainder\
    \ *= 2;\n        decimal -= remainder;\n        binary.push_back(remainder % 2);\n\
    \        remainder /= 2;\n        count++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), std::to_string(count).c_str(), std::to_string(count).c_str()\
    \ + 4);\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    while(binary.length()\
    \ < 32) {\n        binary += \"1\";\n    }\n    binary = binary.substr(0, 32);\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder;\n \
    \   long counter = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n     \
    \   counter += 1;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n\
    \    binary = binary + db;\n    return binary;", "    std::string binary = \"\"\
    ;\n    long remainder = decimal;\n    long counter = 1;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = to_string(counter) + binary;\n    binary.insert(0, \"db\");\n   \
    \ return binary;", "    std::string binary;\n    long remainder = decimal;\n \
    \   long counter = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        counter++;\n    }\n    binary.resize(counter);\n\
    \    long counter2 = 0;\n    while (decimal != 0) {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        binary[counter2] = remainder;\n\
    \        counter2++;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary += (remainder == 1) ? \"1\" : \"0\";\n    \
    \    counter++;\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n\
    \    return binary;", "    std::string binary;\n    long remainder;\n    long\
    \ quotient;\n    long temp;\n    long digit;\n    long power;\n    long i;\n \
    \   long j;\n    long k;\n    long temp2;\n    long temp3;\n    long temp4;\n\
    \    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long\
    \ temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n\
    \    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long\
    \ temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n\
    \    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long\
    \ temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n\
    \    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long\
    \ temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n\
    \    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long\
    \ temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n\
    \    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long\
    \ temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n\
    \    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long\
    \ temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n\
    \    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long\
    \ temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n\
    \    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long\
    \ temp81;\n    long temp82;\n", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder = 0;\n    while (decimal != 0) {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary.push_back((decimal%2) + '0');\n        decimal /= 2;\n\
    \    }\n    binary.insert(binary.begin(), \"db\");\n    binary.push_back('\\0');\n\
    \    return binary;", "    std::string binary = \"\";\n    while (decimal > 0)\
    \ {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.size()\
    \ < 8) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary;\n    long remainder;\n    long quotient;\n    long remainder2;\n   \
    \ long quotient2;\n    long remainder3;\n    long quotient3;\n    long remainder4;\n\
    \    long quotient4;\n    long remainder5;\n    long quotient5;\n    long remainder6;\n\
    \    long quotient6;\n    long remainder7;\n    long quotient7;\n    long remainder8;\n\
    \    long quotient8;\n    long remainder9;\n    long quotient9;\n    long remainder10;\n\
    \    long quotient10;\n    long remainder11;\n    long quotient11;\n    long remainder12;\n\
    \    long quotient12;\n    long remainder13;\n    long quotient13;\n    long remainder14;\n\
    \    long quotient14;\n    long remainder15;\n    long quotient15;\n    long remainder16;\n\
    \    long quotient16;\n    long remainder17;\n    long quotient17;\n    long remainder18;\n\
    \    long quotient18;\n    long remainder19;\n    long quotient19;\n    long remainder20;\n\
    \    long quotient20;\n    long remainder21;\n    long quotient21;\n    long remainder22;\n\
    \    long quotient22;\n    long remainder23;\n    long quotient23;\n    long remainder24;\n\
    \    long quotient24;\n    long remainder25;\n    long quotient25;\n    long remainder26;\n\
    \    long quotient26;\n    long remainder27;\n    long quotient27;\n    long remainder28;\n\
    \    long quotient28;\n    long remainder29;\n    long quotient29;\n    long remainder30;\n\
    \    long quotient30;\n    long remainder31;\n    long quotient31;\n    long remainder32;\n\
    \    long quotient32;\n    long remainder33;\n    long quotient33;\n    long remainder34;\n\
    \    long quotient34;\n    long remainder35;\n    long quotient35;\n    long remainder36;\n\
    \    long quotient36;\n    long remainder37;\n    long quotient37;\n    long remainder38;\n\
    \    long quotient38;\n    long remainder39;\n    long quotient39;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = remainder + binary;\n  \
    \      remainder = remainder / 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   while (remainder > 0) {\n        remainder *= 2;\n        binary += \"1\"\
    ;\n    }\n    binary += \"0\";\n    while (binary.size() < 32) {\n        binary\
    \ += \"0\";\n    }\n    return binary;", "    std::string binary = \"\";\n   \
    \ long remainder = decimal;\n    long counter = 1;\n    while (remainder > 0)\
    \ {\n        remainder = remainder % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n        counter++;\n    }\n \
    \   binary = to_string(counter) + binary;\n    binary.insert(0, \"db\");\n   \
    \ return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = to_string(remainder) + binary;\n        remainder = remainder / 2;\n    }\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    int remainder = decimal;\n    int power = 1;\n    while (decimal\
    \ != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += to_string(power) + to_string(remainder);\n        power *= 2;\n    }\n  \
    \  binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    long counter\
    \ = 1;\n    while (counter != 0) {\n        remainder = remainder % 2;\n     \
    \   binary = std::to_string(counter) + binary;\n        counter = counter * 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while (binary.length()\
    \ < 32) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        binary += decimal%2;\n  \
    \      decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = to_string(remainder) + binary;\n        remainder = remainder / 2;\n    }\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while (decimal\
    \ != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += to_string(remainder);\n        counter++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), to_string(counter));\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    0\";\n        decimal -= 1;\n    }\n    while (binary.length() < 8) {\n      \
    \  binary += \"1\";\n    }\n    return binary;", "    std::string binary;\n  \
    \  long remainder;\n    long counter = 1;\n    long remainder_counter = 1;\n \
    \   long decimal_counter = 1;\n    long decimal_counter_remainder = 1;\n    long\
    \ decimal_counter_remainder_remainder = 1;\n    long decimal_counter_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder = 1;\n\
    \    long decimal_counter_remainder_remainder_remainder_remainder_remainder =\
    \ 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\
    \ = 1;\n    long decimal_counter_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_",
  "    std::string binary = \"\";\n    int remainder = 0;\n    while (decimal != 0)\
    \ {\n        remainder = decimal % 2;\n        binary = to_string(remainder) +\
    \ binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    while (decimal\
    \ > 0) {\n        binary += \"1\";\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ > 0) {\n        binary += \"0\";\n        decimal -= 1;\n    }\n    while(binary.size()\
    \ < 32) {\n        binary += \"1\";\n    }\n    return binary;", "    std::string\
    \ binary;\n    long remainder = decimal;\n    long counter = 1;\n    while (counter\
    \ != 0) {\n        remainder = remainder % 2;\n        binary.push_back(remainder);\n\
    \        counter = counter * 2;\n    }\n    binary.push_back('b');\n    binary.push_back('\\\
    0');\n    return binary;", "    std::string binary;\n    long remainder;\n   \
    \ long counter = 0;\n    long temp = decimal;\n    while (temp > 0) {\n      \
    \  remainder = temp % 2;\n        temp = temp / 2;\n        counter++;\n     \
    \   if (counter % 8 == 0) {\n            binary += \"0\";\n        } else {\n\
    \            binary += \"1\";\n        }\n    }\n    std::string db = \"db\";\n\
    \    binary.insert(binary.begin(), db.begin(), db.end());\n    binary.insert(binary.end(),\
    \ remainder, 0);\n    return binary;", "    std::string binary = \"\";\n    long\
    \ remainder;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        binary += to_string(remainder);\n    }\n    binary.insert(0,\
    \ \"db\");\n    binary.append(\"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    int remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary += \"0\";\n     \
    \   decimal /= 2;\n    }\n    while (binary.length() < 8) {\n        binary +=\
    \ \"1\";\n    }\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary = std::to_string(decimal%2) + binary;\n        decimal\
    \ /= 2;\n    }\n    binary = binary + \"db\";\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = 0;\n    while (decimal != 0) {\n      \
    \  remainder = decimal % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (counter > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        remainder\
    \ = remainder / 2;\n        counter = counter + 1;\n    }\n    binary = binary\
    \ + \"db\";\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(0, \"\
    db\");\n    binary.append(\"db\");\n    return binary;", "    std::string binary;\n\
    \    long remainder;\n    long counter = 0;\n    long temp = decimal;\n    while\
    \ (temp != 0) {\n        remainder = temp % 2;\n        temp = temp / 2;\n   \
    \     counter++;\n        if (remainder == 1) {\n            binary += \"1\";\n\
    \        } else {\n            binary += \"0\";\n        }\n    }\n    std::string\
    \ db = \"db\";\n    for (int i = 0; i < counter; i++) {\n        binary += db;\n\
    \    }\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n        counter++;\n\
    \        decimal /= 2;\n    }\n    while (counter > 0) {\n        binary += \"\
    1\";\n        counter--;\n    }\n    while (counter < 0) {\n        binary +=\
    \ \"0\";\n        counter++;\n    }\n    binary += \"db\";\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = decimal;\n    while (remainder\
    \ > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n      \
    \  decimal /= 2;\n    }\n    while (decimal > 0) {\n        binary += \"1\";\n\
    \        decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    while(decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    while (remainder > 0) {\n        remainder = remainder % 2;\n\
    \        binary = std::to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal /= 2;\n        binary += remainder;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary.push_back((decimal\
    \ % 2) + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'b');\n    return binary;", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while\
    \ (remainder > 0) {\n        remainder = remainder % 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n        counter++;\n    }\n    binary = std::to_string(counter) +\
    \ binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    int count = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary = to_string(remainder)\
    \ + binary;\n        count++;\n    }\n    binary = to_string(count) + binary;\n\
    \    binary = binary + \"db\";\n    return binary;", "    std::string binary =\
    \ \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     remainder = remainder / 2;\n    }\n    binary = std::to_string(remainder)\
    \ + binary;\n    binary.insert(0, \"db\");\n    return binary;", "    std::string\
    \ binary = \"\";\n    while (decimal != 0) {\n        binary += \"0\";\n     \
    \   decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    0\";\n        decimal -= 1;\n    }\n    while (binary.length() < 32) {\n     \
    \   binary += \"1\";\n    }\n    return binary;", "    std::string binary = \"\
    \";\n    long remainder = decimal;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        binary += \"1\";\n    }\n    binary += \"0\";\n    return binary;",
  "    std::string binary;\n    long remainder;\n    long counter = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal /= 2;\n\
    \        binary += (remainder == 1) ? \"1\" : \"0\";\n        counter++;\n   \
    \ }\n    binary.insert(0, \"db\");\n    binary.insert(binary.length(), \"db\"\
    );\n    return binary;", "    std::string binary = \"\";\n    while (decimal >\
    \ 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    while (decimal\
    \ > 0) {\n        binary += \"1\";\n        decimal /= 2;\n    }\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(counter) + binary;\n     \
    \   counter = counter * 2;\n    }\n    binary = std::to_string(counter) + binary;\n\
    \    binary.insert(0, \"db\");\n    return binary;", "    std::string binary;\n\
    \    long remainder = decimal;\n    long counter = 1;\n    while (remainder >\
    \ 0) {\n        remainder = remainder % 2;\n        binary.push_back(remainder);\n\
    \        counter++;\n    }\n    binary.insert(binary.begin(), \"db\");\n    binary.insert(binary.end(),\
    \ counter);\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long temp;\n    long digit;\n    long count = 0;\n    long remainder2;\n\
    \    long remainder3;\n    long remainder4;\n    long remainder5;\n    long remainder6;\n\
    \    long remainder7;\n    long remainder8;\n    long remainder9;\n    long remainder10;\n\
    \    long remainder11;\n    long remainder12;\n    long remainder13;\n    long\
    \ remainder14;\n    long remainder15;\n    long remainder16;\n    long remainder17;\n\
    \    long remainder18;\n    long remainder19;\n    long remainder20;\n    long\
    \ remainder21;\n    long remainder22;\n    long remainder23;\n    long remainder24;\n\
    \    long remainder25;\n    long remainder26;\n    long remainder27;\n    long\
    \ remainder28;\n    long remainder29;\n    long remainder30;\n    long remainder31;\n\
    \    long remainder32;\n    long remainder33;\n    long remainder34;\n    long\
    \ remainder35;\n    long remainder36;\n    long remainder37;\n    long remainder38;\n\
    \    long remainder39;\n    long remainder40;\n    long remainder41;\n    long\
    \ remainder42;\n    long remainder43;\n    long remainder44;\n    long remainder45;\n\
    \    long remainder46;\n    long remainder47;\n    long remainder48;\n    long\
    \ remainder49;\n    long remainder50;\n    long remainder51;\n    long remainder52;\n\
    \    long remainder53;\n    long remainder54;\n    long remainder55;\n    long\
    \ remainder56;\n    long remainder57;\n    long remainder58;\n    long remainder59;\n\
    \    long remainder60;\n    long remainder61;\n    long remainder62;\n    long\
    \ remainder63;\n    long remainder64;\n    long remainder65;\n    long remainder66;\n\
    \    long remainder67;\n    long remainder68;\n    long remainder69;\n    long\
    \ remainder70;\n    long remainder71;\n    long remainder72;\n    long remainder73;\n\
    \    long ", "    std::string binary = \"\";\n    while (decimal != 0) {\n   \
    \     binary = std::to_string(decimal % 2) + binary;\n        decimal /= 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n      \
    \  binary = to_string(remainder) + binary;\n        remainder = remainder % 2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    while(decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = std::to_string(decimal)\
    \ + binary;\n    binary.insert(0, \"db\");\n    binary.append(\"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   long counter = 1;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = to_string(remainder) + binary;\n        remainder = remainder\
    \ / 2;\n        counter++;\n    }\n    binary = to_string(counter) + binary;\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 1;\n    while (remainder > 0) {\n        remainder *= 2;\n\
    \        counter += 1;\n    }\n    while (counter > 0) {\n        binary += \"\
    0\";\n        counter -= 1;\n    }\n    binary += \"1\";\n    return binary;",
  "    std::string binary = \"\";\n    long remainder = 0;\n    while (decimal !=\
    \ 0) {\n        remainder = decimal % 2;\n        binary = to_string(remainder)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    while(decimal != 0) {\n\
    \        binary = std::to_string(decimal%2) + binary;\n        decimal = decimal/2;\n\
    \    }\n    binary = binary + \"db\";\n    return binary;", "    std::string binary\
    \ = \"\";\n    while (decimal > 0) {\n        binary += \"0\";\n        decimal\
    \ -= 1;\n    }\n    while (binary.length() < 32) {\n        binary += \"1\";\n\
    \    }\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += to_string(remainder);\n\
    \        counter++;\n    }\n    binary = binary + \"db\";\n    while (counter\
    \ > 0) {\n        binary += \"0\";\n        counter--;\n    }\n    return binary;",
  "    std::string binary;\n    long remainder;\n    long counter = 0;\n    while\
    \ (decimal != 0) {\n        remainder = decimal % 2;\n        decimal = decimal\
    \ / 2;\n        binary.push_back(remainder);\n        counter++;\n    }\n    binary.insert(binary.begin(),\
    \ \"db\");\n    binary.insert(binary.end(), counter, '0');\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal > 0) {\n        binary += \"\
    1\";\n        decimal /= 2;\n    }\n    binary += \"0\";\n    return binary;",
  "    std::string binary;\n    long remainder = decimal;\n    long counter = 1;\n\
    \    while (decimal != 0) {\n        remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        binary.push_back(remainder);\n        counter++;\n \
    \   }\n    binary.insert(binary.begin(), 'd');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = decimal;\n    while (remainder > 0) {\n        int remainder2 = remainder\
    \ % 2;\n        binary.push_back(remainder2);\n        remainder = remainder /\
    \ 2;\n    }\n    binary.push_back(remainder);\n    binary.insert(binary.begin(),\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 0;\n    while (remainder > 0) {\n        remainder\
    \ *= 2;\n        counter += 1;\n    }\n    std::string binary_string = \"\";\n\
    \    while (counter > 0) {\n        binary_string = (binary_string[counter - 1]\
    \ + '0');\n        counter -= 1;\n    }\n    binary_string = \"db\" + binary_string;\n\
    \    binary = binary_string;\n    return binary;", "    std::string binary = \"\
    \";\n    while (decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n\
    \        decimal /= 2;\n    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ 'b');\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 0;\n    while (remainder > 0) {\n        counter++;\n\
    \        remainder = remainder % 2;\n        binary += (remainder == 1) ? \"1\"\
    \ : \"0\";\n    }\n    std::string db = \"db\";\n    binary = db + binary;\n \
    \   return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    long counter = 0;\n    while (remainder > 0) {\n        remainder = remainder\
    \ % 2;\n        binary = std::to_string(remainder) + binary;\n        counter++;\n\
    \        remainder = remainder / 2;\n    }\n    binary = std::to_string(counter)\
    \ + binary;\n    return binary;", "    std::string binary = \"\";\n    long remainder\
    \ = decimal;\n    long counter = 1;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += (remainder ? \"1\"\
    \ : \"0\");\n        counter += 1;\n    }\n    binary = binary + \"db\";\n   \
    \ while (counter != 0) {\n        binary += \"0\";\n        counter -= 1;\n  \
    \  }\n    return binary;", "    std::string binary;\n    while(decimal != 0) {\n\
    \        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n\
    \    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(), 'b');\n\
    \    return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary;\n    long remainder;\n\
    \    long counter = 1;\n    long digit;\n    long power = 1;\n    long sum = 0;\n\
    \    long temp;\n    long digits = 1;\n    while (decimal != 0) {\n        digit\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        power = power * 10;\n\
    \        sum = sum + digit;\n        counter = counter * 10;\n        digits =\
    \ digits * 10;\n    }\n    temp = sum;\n    temp = temp / power;\n    temp = temp\
    \ % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n\
    \    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp\
    \ = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp\
    \ % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n\
    \    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp\
    \ = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp\
    \ % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n\
    \    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp\
    \ = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp\
    \ % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n\
    \    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp\
    \ = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp\
    \ % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n\
    \    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp\
    \ = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp\
    \ % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n\
    \    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp\
    \ = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp\
    \ % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp = temp / 10;\n\
    \    temp = temp % 10;\n    temp = temp / 10;\n    temp = temp % 10;\n    temp\
    \ = temp / 10;\n", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder *= 2;\n        binary += \"1\"\
    ;\n    }\n    binary += \"0\";\n    while (binary.size() < 32) {\n        binary\
    \ += \"0\";\n    }\n    return binary;", "    std::string binary = \"\";\n   \
    \ while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n    \
    \    decimal /= 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return\
    \ binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n \
    \   long counter = 1;\n    while (counter != 0) {\n        remainder *= 2;\n \
    \       if (remainder >= 10) {\n            binary += \"1\";\n            remainder\
    \ -= 10;\n        } else {\n            binary += \"0\";\n        }\n        counter++;\n\
    \    }\n    return binary + \"db\" + std::to_string(remainder);", "    std::string\
    \ binary = \"\";\n    long remainder = decimal;\n    while (remainder > 0) {\n\
    \        remainder *= 2;\n        binary += \"1\";\n    }\n    binary += \"0\"\
    ;\n    return binary;", "    std::string binary = \"\";\n    long remainder =\
    \ decimal;\n    long counter = 1;\n    while (counter > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = to_string(remainder) + binary;\n        counter\
    \ = counter * 2;\n        remainder = remainder / 2;\n    }\n    binary = binary\
    \ + \"db\";\n    return binary;", "    std::string binary = \"\";\n    while(decimal\
    \ != 0) {\n        binary += \"0\";\n        decimal /= 2;\n    }\n    while(binary.size()\
    \ < 32) {\n        binary += \"1\";\n    }\n    binary.insert(0, \"db\");\n  \
    \  return binary;", "    std::string binary;\n    long remainder;\n    int count\
    \ = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n       \
    \ decimal = decimal / 2;\n        binary.push_back(remainder);\n        count++;\n\
    \    }\n    binary.insert(binary.begin(), 'b');\n    binary.insert(binary.end(),\
    \ count);\n    return binary;", "    std::string binary = \"\";\n    while (decimal\
    \ != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /=\
    \ 2;\n    }\n    binary.insert(binary.begin(), \"db\");\n    return binary;",
  "    std::string binary = \"\";\n    while (decimal != 0) {\n        binary = std::to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n    }\n    binary = binary + \"db\";\n   \
    \ return binary;", "    std::string binary = \"\";\n    long remainder = decimal;\n\
    \    while (remainder > 0) {\n        remainder = remainder % 2;\n        binary\
    \ = std::to_string(remainder) + binary;\n        remainder = remainder / 2;\n\
    \    }\n    binary = std::to_string(remainder) + binary;\n    binary.insert(0,\
    \ \"db\");\n    return binary;", "    std::string binary = \"\";\n    int remainder\
    \ = decimal;\n    int counter = 1;\n    while (remainder > 0) {\n        remainder\
    \ = remainder % 2;\n        binary = std::to_string(remainder) + binary;\n   \
    \     counter++;\n        remainder = remainder / 2;\n    }\n    binary = std::to_string(counter)\
    \ + binary;\n    return binary;", "    std::string binary;\n    binary.reserve(32);\n\
    \    while (decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n\
    \        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n\
    \    return binary;"]
stop_tokens:
- "\n}"
