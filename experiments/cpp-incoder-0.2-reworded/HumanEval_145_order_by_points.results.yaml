language: cpp
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums2;\n    long sum = 0;\n    for (long num : nums) {\n        sum += num;\n\
    \        nums2.push_back(sum);\n    }\n    std::sort(nums2.begin(), nums2.end());\n\
    \    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbnwuvu0x.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpbnwuvu0x.cpp:15:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums) {\n                     ^\n\
    /tmp/tmpbnwuvu0x.cpp: In function 'int main()':\n/tmp/tmpbnwuvu0x.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = order_by_points;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbnwuvu0x.cpp:2:\n/tmp/tmpbnwuvu0x.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpbnwuvu0x.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpbnwuvu0x.cpp:24:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbnwuvu0x.cpp:24:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpbnwuvu0x.cpp:24:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbnwuvu0x.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long num : nums_copy) {\n        sum += num;\n    }\n    long max_num = std::numeric_limits<long>::max();\n\
    \    long min_num = std::numeric_limits<long>::min();\n    long max_sum = 0;\n\
    \    for (long num : nums_copy) {\n        max_sum = std::max(max_sum, num);\n\
    \        min_sum = std::min(min_sum, num);\n    }\n    long min_sum = std::numeric_limits<long>::min();\n\
    \    long max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_num) {\n            std::swap(min_num, num);\n    \
    \    }\n        if (num > max_num) {\n            std::swap(max_num, num);\n \
    \       }\n    }\n    long min_num = std::numeric_limits<long>::min();\n    long\
    \ max_num = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_num) {\n            std::swap(min_num, num);\n    \
    \    }\n        if (num > max_num) {\n            std::swap(max_num, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n            std::swap(min_sum, num);\n    \
    \    }\n        if (num > max_sum) {\n            std::swap(max_sum, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n            std::swap(min_sum, num);\n    \
    \    }\n        if (num > max_sum) {\n            std::swap(max_sum, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n            std::swap(min_sum, num);\n    \
    \    }\n        if (num > max_sum) {\n            std::swap(max_sum, num);\n \
    \       }\n    }\n    long min_sum = std::numeric_limits<long>::min();\n    long\
    \ max_sum = std::numeric_limits<long>::max();\n    for (long num : nums_copy)\
    \ {\n        if (num < min_sum) {\n\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa7lgx5vc.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpa7lgx5vc.cpp:16:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmpa7lgx5vc.cpp:22:21: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long num : nums_copy) {\n                     ^\n/tmp/tmpa7lgx5vc.cpp:24:9:\
    \ error: 'min_sum' was not declared in this scope\n         min_sum = std::min(min_sum,\
    \ num);\n         ^\n/tmp/tmpa7lgx5vc.cpp:27:10: error: redeclaration of 'long\
    \ int max_sum'\n     long max_sum = std::numeric_limits<long>::max();\n      \
    \    ^\n/tmp/tmpa7lgx5vc.cpp:21:10: error: 'long int max_sum' previously declared\
    \ here\n     long max_sum = 0;\n          ^\n/tmp/tmpa7lgx5vc.cpp:28:21: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (long num :\
    \ nums_copy) {\n                     ^\n/tmp/tmpa7lgx5vc.cpp:36:10: error: redeclaration\
    \ of 'long int min_num'\n     long min_num = std::numeric_limits<long>::min();\n\
    \          ^\n/tmp/tmpa7lgx5vc.cpp:20:10: error: 'long int min_num' previously\
    \ declared here\n     long min_num = std::numeric_limits<long>::min();\n     \
    \     ^\n/tmp/tmpa7lgx5vc.cpp:37:10: error: redeclaration of 'long int max_num'\n\
    \     long max_num = std::numeric_limits<long>::max();\n          ^\n/tmp/tmpa7lgx5vc.cpp:19:10:\
    \ error: 'long int max_num' previously declared here\n     long max_num = std::numeric_limits<long>::max();\n\
    \          ^\n/tmp/tmpa7lgx5vc.cpp:38:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmpa7lgx5vc.cpp:46:10: error: redeclaration of 'long int min_sum'\n\
    \     long min_sum = std::numeric_limits<long>::min();\n          ^\n/tmp/tmpa7lgx5vc.cpp:26:10:\
    \ error: 'long int min_sum' previously declared here\n     long min_sum = std::numeric_limits<long>::min();\n\
    \          ^\n/tmp/tmpa7lgx5vc.cpp:47:10: error: redeclaration of 'long int max_sum'\n\
    \     long max_sum = std::numeric_limits<long>::max();\n          ^\n/tm"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::abs(a) > std::abs(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9rzwok9.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpq9rzwok9.cpp:17:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmpq9rzwok9.cpp:17:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmpq9rzwok9.cpp:17:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpq9rzwok9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpq9rzwok9.cpp:17:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpq9rzwok9.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpq9rzwok9.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpq9rzwok9.cpp:17:6:\
    \   required from here\n/tmp/tmpq9rzwok9.cpp:17:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b) -> bool {\n        return std::abs(a - b) < 10;\n    });\n    return nums_copy;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw738hjka.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpw738hjka.cpp:16:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmpw738hjka.cpp:16:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmpw738hjka.cpp:16:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpw738hjka.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpw738hjka.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpw738hjka.cpp:16:6:\
    \   required from here\n/tmp/tmpw738hjka.cpp:16:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local type 'order_by_points(std::vector<long int>)::__lambda0'\n     });\n\
    \      ^\n/tmp/tmpw738hjka.cpp:16:6: error:   trying to instantiate 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpw738hjka.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw593rpi5.cpp: In lambda function:\n/tmp/tmpw593rpi5.cpp:16:32:\
    \ error: 'begin' is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                ^\n/tmp/tmpw593rpi5.cpp:16:43: error: 'nums_copy'\
    \ is not captured\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                      ^\n/tmp/tmpw593rpi5.cpp:16:55: error: 'end'\
    \ is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                       ^\n/tmp/tmpw593rpi5.cpp:16:64:\
    \ error: 'nums_copy' is not captured\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                                ^\n/tmp/tmpw593rpi5.cpp:16:97:\
    \ error: 'begin' is not a member of 'std'\n         return std::accumulate(std::begin(nums_copy),\
    \ std::end(nums_copy), 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0);\n                                                                      \
    \                           ^\n/tmp/tmpw593rpi5.cpp:16:108: error: 'nums_copy'\
    \ is not captured\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                                                            \
    \                           ^\n/tmp/tmpw593rpi5.cpp:16:120: error: 'end' is not\
    \ a member of 'std'\n         return std::accumulate(std::begin(nums_copy), std::end(nums_copy),\
    \ 0) > std::accumulate(std::begin(nums_copy), std::end(nums_copy), 0);\n     \
    \                                                                            \
    \                                       ^"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) -> bool {\n        return sum - a + b <\
    \ sum - a + b;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate\
    \ = order_by_points;\n    assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpus6fflg2.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpus6fflg2.cpp:16:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmpus6fflg2.cpp:22:5:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     });\n     ^\n/tmp/tmpus6fflg2.cpp:22:6: error: no matching\
    \ function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n     });\n\
    \      ^\n/tmp/tmpus6fflg2.cpp:22:6: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpus6fflg2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpus6fflg2.cpp:22:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpus6fflg2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpus6fflg2.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpus6fflg2.cpp:22:6:\
    \   required from here\n/tmp/tmpus6fflg"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    std::sort(nums2.begin(),\
    \ nums2.end(), [&sum](long a, long b) {\n        return sum - a + b < sum - b\
    \ + a;\n    });\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzaw6s_jl.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpzaw6s_jl.cpp:16:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmpzaw6s_jl.cpp:22:5:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     });\n     ^\n/tmp/tmpzaw6s_jl.cpp:22:6: error: no matching\
    \ function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n     });\n\
    \      ^\n/tmp/tmpzaw6s_jl.cpp:22:6: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpzaw6s_jl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzaw6s_jl.cpp:22:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpzaw6s_jl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpzaw6s_jl.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmpzaw6s_jl.cpp:22:6:\
    \   required from here\n/tmp/tmpzaw6s_j"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long long sum = 0;\n    for(long long i : nums){\n        sum\
    \ += i;\n    }\n    long long max = 0;\n    for(long long i : nums){\n       \
    \ if(sum > max){\n            max = sum;\n        }\n        sum += i;\n    }\n\
    \    std::vector<long> ans;\n    for(long long i : nums){\n        if(sum == max){\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcvundmi9.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpcvundmi9.cpp:15:23: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long i : nums){\n                     \
    \  ^\n/tmp/tmpcvundmi9.cpp:19:23: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for(long long i : nums){\n                       ^\n/tmp/tmpcvundmi9.cpp:26:23:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(long\
    \ long i : nums){\n                       ^\n/tmp/tmpcvundmi9.cpp: In function\
    \ 'int main()':\n/tmp/tmpcvundmi9.cpp:34:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = order_by_points;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcvundmi9.cpp:2:\n/tmp/tmpcvundmi9.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpcvundmi9.cpp:35:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpcvundmi9.cpp:35:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpcvundmi9.cpp:35:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpcvundmi9.cpp:35:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    long sum = 0;\n    for\
    \ (long num : nums_copy) {\n        sum += num;\n    }\n    long max_sum = 0;\n\
    \    for (long num : nums_copy) {\n        max_sum = std::max(max_sum, sum);\n\
    \        sum += num;\n    }\n    std::vector<long> result;\n    for (long num\
    \ : nums_copy) {\n        if (sum == max_sum) {\n            result.push_back(num);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp35fjeclj.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp35fjeclj.cpp:16:21: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long num : nums_copy) {\n                 \
    \    ^\n/tmp/tmp35fjeclj.cpp:20:21: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long num : nums_copy) {\n                     ^\n/tmp/tmp35fjeclj.cpp:25:21:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ num : nums_copy) {\n                     ^\n/tmp/tmp35fjeclj.cpp: In function\
    \ 'int main()':\n/tmp/tmp35fjeclj.cpp:33:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = order_by_points;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp35fjeclj.cpp:2:\n/tmp/tmp35fjeclj.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp35fjeclj.cpp:34:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp35fjeclj.cpp:34:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp35fjeclj.cpp:34:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp35fjeclj.cpp:34:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){\n        return std::to_string(a) < std::to_string(b);\n\
    \    });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3vc1m_r.cpp: In lambda function:\n/tmp/tmpe3vc1m_r.cpp:16:16:\
    \ error: 'to_string' is not a member of 'std'\n         return std::to_string(a)\
    \ < std::to_string(b);\n                ^\n/tmp/tmpe3vc1m_r.cpp:16:36: error:\
    \ 'to_string' is not a member of 'std'\n         return std::to_string(a) < std::to_string(b);\n\
    \                                    ^\n/tmp/tmpe3vc1m_r.cpp: In function 'std::vector<long\
    \ int> order_by_points(std::vector<long int>)':\n/tmp/tmpe3vc1m_r.cpp:17:5: warning:\
    \ lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     });\n     ^\n/tmp/tmpe3vc1m_r.cpp:17:6: error: no matching function\
    \ for call to 'sort(std::vector<long int>::iterator, std::vector<long int>::iterator,\
    \ order_by_points(std::vector<long int>)::__lambda0)'\n     });\n      ^\n/tmp/tmpe3vc1m_r.cpp:17:6:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpe3vc1m_r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpe3vc1m_r.cpp:17:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpe3vc1m_r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpe3vc1m_r.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Co"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_sorted = nums;\n    std::sort(nums_sorted.begin(),\
    \ nums_sorted.end(), [](long a, long b){\n        return a + b < 0;\n    });\n\
    \    return nums_sorted;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprq1mhl_w.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmprq1mhl_w.cpp:17:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmprq1mhl_w.cpp:17:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmprq1mhl_w.cpp:17:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmprq1mhl_w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmprq1mhl_w.cpp:17:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmprq1mhl_w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmprq1mhl_w.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmprq1mhl_w.cpp:17:6:\
    \   required from here\n/tmp/tmprq1mhl_w.cpp:17:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ nums_copy = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), [](long\
    \ a, long b){return a+b<0;});\n    return nums_copy;\n}\nint main() {\n    auto\
    \ candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc8ib5ni1.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmpc8ib5ni1.cpp:14:83: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                              ^\n/tmp/tmpc8ib5ni1.cpp:14:84:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     std::sort(nums_copy.begin(), nums_copy.end(), [](long a, long b){return\
    \ a+b<0;});\n                                                                \
    \                    ^\n/tmp/tmpc8ib5ni1.cpp:14:84: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/algorithm:62:0,\n                \
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n        \
    \         from /tmp/tmpc8ib5ni1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpc8ib5ni1.cpp:14:84:\
    \ note:   candidate expects 2 arguments, 3 provided\n     std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b){return a+b<0;});\n                     \
    \                                                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpc8ib5ni1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        nums2.push_back(nums[i]);\n\
    \    }\n    std::sort(nums2.begin(), nums2.end(), [&sum](long a, long b) {\n \
    \       return sum - a + b < sum - b + a;\n    });\n    return nums2;\n}\nint\
    \ main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp76pcn6u4.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp76pcn6u4.cpp:22:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmp76pcn6u4.cpp:22:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmp76pcn6u4.cpp:22:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp76pcn6u4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp76pcn6u4.cpp:22:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp76pcn6u4.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp76pcn6u4.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmp76pcn6u4.cpp:22:6:\
    \   required from here\n/tmp/tmp76pcn6u4.cpp:22:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    long sum = 0;\n    std::vector<long> result;\n    for (long i\
    \ : nums) {\n        sum += i;\n        result.push_back(i);\n    }\n    std::sort(result.begin(),\
    \ result.end(), [&sum](int i, int j) {\n        return sum - j;\n    });\n   \
    \ return result;\n}\nint main() {\n    auto candidate = order_by_points;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppql5crax.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmppql5crax.cpp:16:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmppql5crax.cpp:22:5:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     });\n     ^\n/tmp/tmppql5crax.cpp:22:6: error: no matching\
    \ function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n     });\n\
    \      ^\n/tmp/tmppql5crax.cpp:22:6: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmppql5crax.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmppql5crax.cpp:22:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmppql5crax.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmppql5crax.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmppql5crax.cpp:22:6:\
    \   required from here\n/tmp/tmppql5cra"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            if (i == j) {\n                continue;\n            }\n   \
    \         sum += nums[j];\n        }\n        if (sum > 0) {\n            nums2.push_back(nums[i]);\n\
    \        }\n    }\n    return nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpljsnxwph.cpp: In function 'int main()':\n/tmp/tmpljsnxwph.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpljsnxwph.cpp:2:\n/tmp/tmpljsnxwph.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmpljsnxwph.cpp:31:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmpljsnxwph.cpp:31:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpljsnxwph.cpp:31:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpljsnxwph.cpp:31:92: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpljsnxwph.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums2;\n    long sum = 0;\n    for (long i\
    \ : nums) {\n        sum += i;\n        nums2.push_back(i);\n    }\n    long max\
    \ = 0;\n    for (long i : nums2) {\n        if (sum == i) {\n            max =\
    \ i;\n        }\n    }\n    std::vector<long> nums3;\n    for (long i : nums2)\
    \ {\n        if (sum == i) {\n            nums3.push_back(i);\n        }\n   \
    \ }\n    for (long i : nums3) {\n        nums2.push_back(i);\n    }\n    return\
    \ nums2;\n}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6rupsir1.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp6rupsir1.cpp:16:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : nums) {\n                   ^\n/tmp/tmp6rupsir1.cpp:21:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : nums2) {\n                   ^\n/tmp/tmp6rupsir1.cpp:27:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (long i : nums2) {\n   \
    \                ^\n/tmp/tmp6rupsir1.cpp:32:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : nums3) {\n               \
    \    ^\n/tmp/tmp6rupsir1.cpp: In function 'int main()':\n/tmp/tmp6rupsir1.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = order_by_points;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6rupsir1.cpp:2:\n/tmp/tmp6rupsir1.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1,\
    \ (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1,\
    \ (long)-12, (long)11})));\n                                        ^\n/tmp/tmp6rupsir1.cpp:39:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)11,\
    \ (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1, (long)-11,\
    \ (long)1, (long)-12, (long)11})));\n                                        \
    \                                                    ^\n/tmp/tmp6rupsir1.cpp:39:92:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6rupsir1.cpp:39:92: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6rupsir1.cpp:39:92: n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here\n    std::vector<long> nums_copy;\n    for(long num : nums){\n   \
    \     nums_copy.push_back(num);\n    }\n    std::sort(nums_copy.begin(), nums_copy.end(),\
    \ [](long a, long b){\n        long sum = 0;\n        while(a){\n            sum\
    \ += a%10;\n            a /= 10;\n        }\n        while(b){\n            sum\
    \ += b%10;\n            b /= 10;\n        }\n        return sum - a - b;\n   \
    \ });\n    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8z9vymf6.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp8z9vymf6.cpp:15:20: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long num : nums){\n                    ^\n/tmp/tmp8z9vymf6.cpp:29:5:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     });\n     ^\n/tmp/tmp8z9vymf6.cpp:29:6: error: no matching\
    \ function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n     });\n\
    \      ^\n/tmp/tmp8z9vymf6.cpp:29:6: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp8z9vymf6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8z9vymf6.cpp:29:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp8z9vymf6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp8z9vymf6.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmp8z9vymf6.cpp:29:6:\
    \   required from here\n/tmp/tmp8z9vym"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long\
    \ index = 0;\n    for (auto &i : nums) {\n        sum += i;\n        if (sum >\
    \ max) {\n            max = sum;\n        }\n        if (sum < min) {\n      \
    \      min = sum;\n        }\n    }\n    std::vector<long> result;\n    for (auto\
    \ &i : nums) {\n        if (i == 0) {\n            result.push_back(0);\n    \
    \        continue;\n        }\n        long sum = 0;\n        for (auto &j : nums)\
    \ {\n            sum += j;\n            if (sum > i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    for (auto &i : result)\
    \ {\n        if (i == 0) {\n            result.push_back(0);\n            continue;\n\
    \        }\n        long sum = 0;\n        for (auto &j : result) {\n        \
    \    sum += j;\n            if (sum > i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    for (auto &i : result)\
    \ {\n        if (i == 0) {\n            result.push_back(0);\n            continue;\n\
    \        }\n        long sum = 0;\n        for (auto &j : result) {\n        \
    \    sum += j;\n            if (sum < i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    for (auto &i : result)\
    \ {\n        if (i == 0) {\n            result.push_back(0);\n            continue;\n\
    \        }\n        long sum = 0;\n        for (auto &j : result) {\n        \
    \    sum += j;\n            if (sum > i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    for (auto &i : result)\
    \ {\n        if (i == 0) {\n            result.push_back(0);\n            continue;\n\
    \        }\n        long sum = 0;\n        for (auto &j : result) {\n        \
    \    sum += j;\n            if (sum < i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    for (auto &i : result)\
    \ {\n        if (i == 0) {\n            result.push_back(0);\n            continue;\n\
    \        }\n        long sum = 0;\n        for (auto &j : result) {\n        \
    \    sum += j;\n            if (sum > i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    for (auto &i : result)\
    \ {\n        if (i == 0) {\n            result.push_back(0);\n            continue;\n\
    \        }\n        long sum = 0;\n        for (auto &j : result) {\n        \
    \    sum += j;\n            if (sum < i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    for (auto &i : result)\
    \ {\n        if (i == 0) {\n            result.push_back(0);\n            continue;\n\
    \        }\n        long sum = 0;\n        for (auto &j : result) {\n        \
    \    sum += j;\n            if (sum > i) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n}\nint main() {\n  \
    \  auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e7vonlt.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5e7vonlt.cpp:18:16: error: ISO C++ forbids declaration of 'i'\
    \ with no type [-fpermissive]\n     for (auto &i : nums) {\n                ^\n\
    /tmp/tmp5e7vonlt.cpp:18:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &i : nums) {\n                    ^\n/tmp/tmp5e7vonlt.cpp:28:16:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n    \
    \ for (auto &i : nums) {\n                ^\n/tmp/tmp5e7vonlt.cpp:28:20: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &i : nums)\
    \ {\n                    ^\n/tmp/tmp5e7vonlt.cpp:34:20: error: ISO C++ forbids\
    \ declaration of 'j' with no type [-fpermissive]\n         for (auto &j : nums)\
    \ {\n                    ^\n/tmp/tmp5e7vonlt.cpp:34:24: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n         for (auto &j : nums) {\n     \
    \                   ^\n/tmp/tmp5e7vonlt.cpp:42:16: error: ISO C++ forbids declaration\
    \ of 'i' with no type [-fpermissive]\n     for (auto &i : result) {\n        \
    \        ^\n/tmp/tmp5e7vonlt.cpp:42:20: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (auto &i : result) {\n                    ^\n\
    /tmp/tmp5e7vonlt.cpp:48:20: error: ISO C++ forbids declaration of 'j' with no\
    \ type [-fpermissive]\n         for (auto &j : result) {\n                   \
    \ ^\n/tmp/tmp5e7vonlt.cpp:48:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n         for (auto &j : result) {\n                        ^\n\
    /tmp/tmp5e7vonlt.cpp:56:16: error: ISO C++ forbids declaration of 'i' with no\
    \ type [-fpermissive]\n     for (auto &i : result) {\n                ^\n/tmp/tmp5e7vonlt.cpp:56:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &i : result) {\n                    ^\n/tmp/tmp5e7vonlt.cpp:62:20: error: ISO\
    \ C++ forbids declaration of 'j' with no type [-fpermissive]\n         for (auto\
    \ &j : result) {\n                    ^\n/tmp/tmp5e7vonlt.cpp:62:24: error: range-based\
    \ 'for' l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    // Write your\
    \ code here.\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n        return a + b < 0;\n    });\n\
    \    return nums_copy;\n}\nint main() {\n    auto candidate = order_by_points;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12}))) == (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11})));\n    assert(candidate((std::vector<long>({(long)1234, (long)423,\
    \ (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6, (long)37,\
    \ (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplwq13d_p.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmplwq13d_p.cpp:17:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmplwq13d_p.cpp:17:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmplwq13d_p.cpp:17:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmplwq13d_p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplwq13d_p.cpp:17:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmplwq13d_p.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmplwq13d_p.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmplwq13d_p.cpp:17:6:\
    \   required from here\n/tmp/tmplwq13d_p.cpp:17:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare)'\
    \ uses local "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which\
    \ sorts the given vector of integers\n// in ascending order according to the sum\
    \ of their digits.\n// Note: if there are several items with similar sum of their\
    \ digits,\n// order them based on their index in original vector.\n// For example:\n\
    // >>> order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11,\
    \ (long)-12})))\n// (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12,\
    \ (long)11}))\n// >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\n\
    std::vector<long> order_by_points(std::vector<long> nums) {\n    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (long long i : nums) {\n        sum\
    \ += i;\n        result.push_back(i);\n    }\n    std::sort(result.begin(), result.end(),\
    \ [&sum](int i, int j) {\n        return sum - j;\n    });\n    return result;\n\
    }\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
    \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
    \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
    \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
    \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
    \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
    \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
    \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
    \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
    \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
    \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5j9rwz6t.cpp: In function 'std::vector<long int> order_by_points(std::vector<long\
    \ int>)':\n/tmp/tmp5j9rwz6t.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : nums) {\n                   \
    \     ^\n/tmp/tmp5j9rwz6t.cpp:21:5: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmp5j9rwz6t.cpp:21:6:\
    \ error: no matching function for call to 'sort(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, order_by_points(std::vector<long int>)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmp5j9rwz6t.cpp:21:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp5j9rwz6t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5j9rwz6t.cpp:21:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmp5j9rwz6t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp5j9rwz6t.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = order_by_points(std::vector<long int>)::__lambda0]':\n/tmp/tmp5j9rwz6t.cpp:21:6:\
    \   required from here\n/tmp/"
  stdout: ''
