name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(int i = 0; i < s.length(); i++) {\n     \
    \   if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else {\n\
    \            ans += s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(auto &i : s) {\n        if(i == 'a' || i\
    \ == 'A') {\n            ans += 'A';\n        }\n        else if(i == 'b' || i\
    \ == 'B') {\n            ans += 'b';\n        }\n        else if(i == 'c' || i\
    \ == 'C') {\n            ans += 'C';\n        }\n        else if(i == 'd' || i\
    \ == 'D') {\n            ans += 'd';\n        }\n        else if(i == 'e' || i\
    \ == 'E') {\n            ans += 'e';\n        }\n        else if(i == 'f' || i\
    \ == 'F') {\n            ans += 'f';\n        }\n        else if(i == 'g' || i\
    \ == 'G') {\n            ans += 'g';\n        }\n        else if(i == 'h' || i\
    \ == 'H') {\n            ans += 'h';\n        }\n        else if(i == 'i' || i\
    \ == 'I') {\n            ans += 'i';\n        }\n        else if(i == 'j' || i\
    \ == 'J') {\n            ans += 'j';\n        }\n        else if(i == 'k' || i\
    \ == 'K') {\n            ans += 'k';\n        }\n        else if(i == 'l' || i\
    \ == 'L') {\n            ans += 'l';\n        }\n        else if(i == 'm' || i\
    \ == 'M') {\n            ans += 'm';\n        }\n        else if(i == 'n' || i\
    \ == 'N') {\n            ans += 'n';\n        }\n        else if(i == 'o' || i\
    \ == 'O') {\n            ans += 'o';\n        }\n        else if(i == 'p' || i\
    \ == 'P') {\n            ans += 'p';\n        }\n        else if(i == 'q' || i\
    \ == 'Q') {\n            ans += 'q';\n        }\n        else if(i == 'r' || i\
    \ == 'R') {\n            ans += 'r';\n        }\n        else if(i == 's' || i\
    \ == 'S') {\n            ans += 's';\n        }\n        else if(i == 't' || i\
    \ == 'T') {\n            ans += 't';\n        }\n        else if(i == 'u' || i\
    \ == 'U') {\n            ans += 'u';\n        }\n        else if(i == 'v' || i\
    \ == 'V') {\n            ans += 'v';\n        }\n        else if(i == 'w' || i\
    \ == 'W') {\n            ans += 'w';\n        }\n        else if(i == 'x' || i\
    \ == 'X') {\n            ans += 'x';\n        }\n        else if(i == 'y' || i\
    \ == 'Y') {\n            ans += 'y';\n        }\n        else ", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n           \
    \ ans = ans.substr(0, i) + std::toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (auto &c: s) {\n        if (std::isalpha(c)) {\n            ans = ans.replace(c,\
    \ std::toupper(c));\n        } else {\n            ans = ans.replace(c, std::tolower(c));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &i : s) {\n\
    \        if (isalpha(i)) {\n            ans = ans.substr(0, ans.size() - 1) +\
    \ toupper(ans.back()) + ans.substr(ans.size() - 1);\n        } else {\n      \
    \      ans = ans.substr(0, ans.size() - 1) + i;\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (auto &i : s) {\n        if (i ==\
    \ 'a' || i == 'A') {\n            ans = ans.replace(\"A\", toupper(i));\n    \
    \        ans = ans.replace(\"a\", tolower(i));\n        } else if (i == 'b' ||\
    \ i == 'B') {\n            ans = ans.replace(\"B\", toupper(i));\n           \
    \ ans = ans.replace(\"b\", tolower(i));\n        } else if (i == 'c' || i == 'C')\
    \ {\n            ans = ans.replace(\"C\", toupper(i));\n            ans = ans.replace(\"\
    c\", tolower(i));\n        } else if (i == 'd' || i == 'D') {\n            ans\
    \ = ans.replace(\"D\", toupper(i));\n            ans = ans.replace(\"d\", tolower(i));\n\
    \        } else if (i == 'e' || i == 'E') {\n            ans = ans.replace(\"\
    E\", toupper(i));\n            ans = ans.replace(\"e\", tolower(i));\n       \
    \ } else if (i == 'f' || i == 'F') {\n            ans = ans.replace(\"F\", toupper(i));\n\
    \            ans = ans.replace(\"f\", tolower(i));\n        } else if (i == 'g'\
    \ || i == 'G') {\n            ans = ans.replace(\"G\", toupper(i));\n        \
    \    ans = ans.replace(\"g\", tolower(i));\n        } else if (i == 'h' || i ==\
    \ 'H') {\n            ans = ans.replace(\"H\", toupper(i));\n            ans =\
    \ ans.replace(\"h\", tolower(i));\n        } else if (i == 'i' || i == 'I') {\n\
    \            ans = ans.replace(\"I\", toupper(i));\n            ans = ans.replace(\"\
    i\", tolower(i));\n        } else if (i == 'j' || i == 'J') {\n            ans\
    \ = ans.replace(\"J\", toupper(i));\n            ans = ans.replace(\"j\", tolower(i));\n\
    \        } else if (i == 'k' || i == 'K') {\n            ans = ans.replace(\"\
    K\", toupper(i));\n            ans = ans.replace(\"k\", tolower(i));\n       \
    \ } else if (i == 'l' || i == 'L') {\n            ans = ans.replace(\"L\", toupper(i));\n\
    \            ans = ans.replace(\"l\", tolower(i));\n        } else if (i == 'm'\
    \ || i == 'M') {\n            ans = ans.replace(\"M\", toupper(i));\n        \
    \    ans = ans.replace(\"m\", tolower(i));\n        } else if (i == 'n' || i ==\
    \ 'N') {\n            ans = ans.replace(\"N\", toupper(i));\n            ans =\
    \ ans.replace(\"n\", tolower(i", "    std::string ans = s;\n    for(size_t i =\
    \ 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n\
    \            s[i] = c;\n            char d = tolower(c);\n            s[i] = d;\n\
    \        }\n    }\n    res.assign(s);\n    return res;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            char\
    \ c = toupper(s[i]);\n            s[i] = c;\n            res+=c;\n        }\n\
    \        else{\n            res+=s[i];\n        }\n    }\n    return res;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans[i] = toupper(s[i]);\n        } else {\n \
    \           ans[i] = s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.swap(s[i], toupper(s[i]));\n        } else {\n          \
    \  ans.swap(s[i], s[i]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans\
    \ = ans.substr(0, ans.size() - 1) + toupper(ans.back()) + ans.substr(ans.size()\
    \ - 1);\n        } else {\n            ans = ans.substr(0, ans.size() - 1) + c;\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c ==\
    \ 'A') {\n            ans = ans.replace(\"a\", toupper(c));\n            ans =\
    \ ans.replace(\"A\", tolower(c));\n        }\n        else if (c == 'b' || c ==\
    \ 'B') {\n            ans = ans.replace(\"b\", toupper(c));\n            ans =\
    \ ans.replace(\"B\", tolower(c));\n        }\n        else if (c == 'c' || c ==\
    \ 'C') {\n            ans = ans.replace(\"c\", toupper(c));\n            ans =\
    \ ans.replace(\"C\", tolower(c));\n        }\n        else if (c == 'd' || c ==\
    \ 'D') {\n            ans = ans.replace(\"d\", toupper(c));\n            ans =\
    \ ans.replace(\"D\", tolower(c));\n        }\n        else if (c == 'e' || c ==\
    \ 'E') {\n            ans = ans.replace(\"e\", toupper(c));\n            ans =\
    \ ans.replace(\"E\", tolower(c));\n        }\n        else if (c == 'f' || c ==\
    \ 'F') {\n            ans = ans.replace(\"f\", toupper(c));\n            ans =\
    \ ans.replace(\"F\", tolower(c));\n        }\n        else if (c == 'g' || c ==\
    \ 'G') {\n            ans = ans.replace(\"g\", toupper(c));\n            ans =\
    \ ans.replace(\"G\", tolower(c));\n        }\n        else if (c == 'h' || c ==\
    \ 'H') {\n            ans = ans.replace(\"h\", toupper(c));\n            ans =\
    \ ans.replace(\"H\", tolower(c));\n        }\n        else if (c == 'i' || c ==\
    \ 'I') {\n            ans = ans.replace(\"i\", toupper(c));\n            ans =\
    \ ans.replace(\"I\", tolower(c));\n        }\n        else if (c == 'j' || c ==\
    \ 'J') {\n            ans = ans.replace(\"j\", toupper(c));\n            ans =\
    \ ans.replace(\"J\", tolower(c));\n        }\n        else if (c == 'k' || c ==\
    \ 'K') {\n            ans = ans.replace(\"k\", toupper(c));\n            ans =\
    \ ans.replace(\"K\", tolower(c));\n        }\n        else if (c == 'l' || c ==\
    \ 'L') {\n            ans = ans.replace(\"l\", toupper(c));\n            ans =\
    \ ans.replace(\"L\", tolower(c));\n        }\n        else if (c == 'm' || c ==\
    \ 'M') {\n            ans = ans.replace(\"m\", toupper(c));\n            ans =\
    \ ans.replace(\"M\", tolower(c));\n        }\n        else if (c == 'n' || c ==\
    \ 'N", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n  \
    \      if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n     \
    \       ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;",
  "    std::string res;\n    for(auto &c: s) {\n        if(isalpha(c)) {\n       \
    \     char c = toupper(c);\n            char t = tolower(c);\n            if(c\
    \ == t) c = c;\n            else c = t;\n        }\n        res += c;\n    }\n\
    \    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n \
    \       if(isalpha(s[i])){\n            int l=tolower(s[i]);\n            int\
    \ u=toupper(s[i]);\n            res+=l+u;\n        }\n        else{\n        \
    \    res+=s[i];\n        }\n    }\n    return res;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (std::isalpha(i)) {\n            ans = std::string(std::toupper(i),\
    \ std::tolower(i)) + ans;\n        } else {\n            ans = i + ans;\n    \
    \    }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'A') {\n            ans = ans.replace(\"a\", toupper(c));\n\
    \            ans = ans.replace(\"A\", tolower(c));\n        }\n        if (c ==\
    \ 'b' || c == 'B') {\n            ans = ans.replace(\"b\", toupper(c));\n    \
    \        ans = ans.replace(\"B\", tolower(c));\n        }\n        if (c == 'c'\
    \ || c == 'C') {\n            ans = ans.replace(\"c\", toupper(c));\n        \
    \    ans = ans.replace(\"C\", tolower(c));\n        }\n        if (c == 'd' ||\
    \ c == 'D') {\n            ans = ans.replace(\"d\", toupper(c));\n           \
    \ ans = ans.replace(\"D\", tolower(c));\n        }\n        if (c == 'e' || c\
    \ == 'E') {\n            ans = ans.replace(\"e\", toupper(c));\n            ans\
    \ = ans.replace(\"E\", tolower(c));\n        }\n        if (c == 'f' || c == 'F')\
    \ {\n            ans = ans.replace(\"f\", toupper(c));\n            ans = ans.replace(\"\
    F\", tolower(c));\n        }\n        if (c == 'g' || c == 'G') {\n          \
    \  ans = ans.replace(\"g\", toupper(c));\n            ans = ans.replace(\"G\"\
    , tolower(c));\n        }\n        if (c == 'h' || c == 'H') {\n            ans\
    \ = ans.replace(\"h\", toupper(c));\n            ans = ans.replace(\"H\", tolower(c));\n\
    \        }\n        if (c == 'i' || c == 'I') {\n            ans = ans.replace(\"\
    i\", toupper(c));\n            ans = ans.replace(\"I\", tolower(c));\n       \
    \ }\n        if (c == 'j' || c == 'J') {\n            ans = ans.replace(\"j\"\
    , toupper(c));\n            ans = ans.replace(\"J\", tolower(c));\n        }\n\
    \        if (c == 'k' || c == 'K') {\n            ans = ans.replace(\"k\", toupper(c));\n\
    \            ans = ans.replace(\"K\", tolower(c));\n        }\n        if (c ==\
    \ 'l' || c == 'L') {\n            ans = ans.replace(\"l\", toupper(c));\n    \
    \        ans = ans.replace(\"L\", tolower(c));\n        }\n        if (c == 'm'\
    \ || c == 'M') {\n            ans = ans.replace(\"m\", toupper(c));\n        \
    \    ans = ans.replace(\"M\", tolower(c));\n        }\n        if (c == 'n' ||\
    \ c == 'N", "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        } else {\n            ans = ans.substr(0,\
    \ i) + tolower(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'A') {\n            ans = ans.replace(\"A\", c);\n\
    \            ans = ans.replace(\"a\", c);\n        }\n        if (c == 'b' ||\
    \ c == 'B') {\n            ans = ans.replace(\"B\", c);\n            ans = ans.replace(\"\
    b\", c);\n        }\n        if (c == 'c' || c == 'C') {\n            ans = ans.replace(\"\
    C\", c);\n            ans = ans.replace(\"c\", c);\n        }\n        if (c ==\
    \ 'd' || c == 'D') {\n            ans = ans.replace(\"D\", c);\n            ans\
    \ = ans.replace(\"d\", c);\n        }\n        if (c == 'e' || c == 'E') {\n \
    \           ans = ans.replace(\"E\", c);\n            ans = ans.replace(\"e\"\
    , c);\n        }\n        if (c == 'f' || c == 'F') {\n            ans = ans.replace(\"\
    F\", c);\n            ans = ans.replace(\"f\", c);\n        }\n        if (c ==\
    \ 'g' || c == 'G') {\n            ans = ans.replace(\"G\", c);\n            ans\
    \ = ans.replace(\"g\", c);\n        }\n        if (c == 'h' || c == 'H') {\n \
    \           ans = ans.replace(\"H\", c);\n            ans = ans.replace(\"h\"\
    , c);\n        }\n        if (c == 'i' || c == 'I') {\n            ans = ans.replace(\"\
    I\", c);\n            ans = ans.replace(\"i\", c);\n        }\n        if (c ==\
    \ 'j' || c == 'J') {\n            ans = ans.replace(\"J\", c);\n            ans\
    \ = ans.replace(\"j\", c);\n        }\n        if (c == 'k' || c == 'K') {\n \
    \           ans = ans.replace(\"K\", c);\n            ans = ans.replace(\"k\"\
    , c);\n        }\n        if (c == 'l' || c == 'L') {\n            ans = ans.replace(\"\
    L\", c);\n            ans = ans.replace(\"l\", c);\n        }\n        if (c ==\
    \ 'm' || c == 'M') {\n            ans = ans.replace(\"M\", c);\n            ans\
    \ = ans.replace(\"m\", c);\n        }\n        if (c == 'n' || c == 'N') {\n \
    \           ans = ans.replace(\"N\", c);\n            ans = ans.replace(\"n\"\
    , c);\n        }\n        if (c == 'o' || c == 'O') {\n            ans = ans.replace(\"\
    O\", c);\n            ans = ans.replace(\"o\", c);\n        }\n        if (c ==\
    \ 'p' || c == 'P') {\n            ans = ans.replace(\"P\", c);\n            an",
  "    std::string ans = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n\
    \            ans = ans.replace(i,toupper(i),1);\n            ans = ans.replace(i,tolower(i),1);\n\
    \        } else {\n            ans = ans.replace(i,i,1);\n        }\n    }\n \
    \   return ans;", "    std::string ans = s;\n    for (auto &i : s) {\n       \
    \ if (std::isalpha(i)) {\n            ans = ans.replace(i.tolower(), i.toupper());\n\
    \        } else {\n            ans = ans.replace(i.toupper(), i.tolower());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        } else {\n            ans = ans.substr(0,\
    \ i) + tolower(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &i : s) {\n\
    \        if (i == 'a' || i == 'A') {\n            ans = ans.replace(\"A\", toupper(i));\n\
    \            ans = ans.replace(\"a\", tolower(i));\n        }\n        else if\
    \ (i == 'b' || i == 'B') {\n            ans = ans.replace(\"B\", toupper(i));\n\
    \            ans = ans.replace(\"b\", tolower(i));\n        }\n        else if\
    \ (i == 'c' || i == 'C') {\n            ans = ans.replace(\"C\", toupper(i));\n\
    \            ans = ans.replace(\"c\", tolower(i));\n        }\n        else if\
    \ (i == 'd' || i == 'D') {\n            ans = ans.replace(\"D\", toupper(i));\n\
    \            ans = ans.replace(\"d\", tolower(i));\n        }\n        else if\
    \ (i == 'e' || i == 'E') {\n            ans = ans.replace(\"E\", toupper(i));\n\
    \            ans = ans.replace(\"e\", tolower(i));\n        }\n        else if\
    \ (i == 'f' || i == 'F') {\n            ans = ans.replace(\"F\", toupper(i));\n\
    \            ans = ans.replace(\"f\", tolower(i));\n        }\n        else if\
    \ (i == 'g' || i == 'G') {\n            ans = ans.replace(\"G\", toupper(i));\n\
    \            ans = ans.replace(\"g\", tolower(i));\n        }\n        else if\
    \ (i == 'h' || i == 'H') {\n            ans = ans.replace(\"H\", toupper(i));\n\
    \            ans = ans.replace(\"h\", tolower(i));\n        }\n        else if\
    \ (i == 'i' || i == 'I') {\n            ans = ans.replace(\"I\", toupper(i));\n\
    \            ans = ans.replace(\"i\", tolower(i));\n        }\n        else if\
    \ (i == 'j' || i == 'J') {\n            ans = ans.replace(\"J\", toupper(i));\n\
    \            ans = ans.replace(\"j\", tolower(i));\n        }\n        else if\
    \ (i == 'k' || i == 'K') {\n            ans = ans.replace(\"K\", toupper(i));\n\
    \            ans = ans.replace(\"k\", tolower(i));\n        }\n        else if\
    \ (i == 'l' || i == 'L') {\n            ans = ans.replace(\"L\", toupper(i));\n\
    \            ans = ans.replace(\"l\", tolower(i));\n        }\n        else if\
    \ (i == 'm' || i == 'M') {\n            ans = ans.replace(\"M\", toupper(i));\n\
    \            ans = ans.replace(\"m\", tolower(i));\n        }\n        else if\
    \ (i == 'n' || i == 'N", "    std::string ans = s;\n    for (size_t i = 0; i <\
    \ s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n       \
    \     res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (int i\
    \ = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n   \
    \         ans[i] = s[i] - 32;\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            ans[i] = s[i] + 32;\n        } else {\n            ans[i] = s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n            ans =\
    \ ans.replace(i,toupper(i),1);\n        }\n        else {\n            ans = ans.replace(i,tolower(i),1);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        } else {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            char c = toupper(s[i]);\n           \
    \ s[i] = c;\n            char d = tolower(s[i]);\n            s[i] = d;\n    \
    \    }\n    }\n    res.assign(s);\n    return res;", "    std::string res;\n \
    \   for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            res+=c;\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = \"\";\n    for (auto\
    \ &i : s) {\n        if (i == 'a' || i == 'A') {\n            ans += \"A\";\n\
    \        } else if (i == 'b' || i == 'B') {\n            ans += \"B\";\n     \
    \   } else if (i == 'c' || i == 'C') {\n            ans += \"C\";\n        } else\
    \ if (i == 'd' || i == 'D') {\n            ans += \"D\";\n        } else if (i\
    \ == 'e' || i == 'E') {\n            ans += \"E\";\n        } else if (i == 'f'\
    \ || i == 'F') {\n            ans += \"F\";\n        } else if (i == 'g' || i\
    \ == 'G') {\n            ans += \"G\";\n        } else if (i == 'h' || i == 'H')\
    \ {\n            ans += \"H\";\n        } else if (i == 'i' || i == 'I') {\n \
    \           ans += \"I\";\n        } else if (i == 'j' || i == 'J') {\n      \
    \      ans += \"J\";\n        } else if (i == 'k' || i == 'K') {\n           \
    \ ans += \"K\";\n        } else if (i == 'l' || i == 'L') {\n            ans +=\
    \ \"L\";\n        } else if (i == 'm' || i == 'M') {\n            ans += \"M\"\
    ;\n        } else if (i == 'n' || i == 'N') {\n            ans += \"N\";\n   \
    \     } else if (i == 'o' || i == 'O') {\n            ans += \"O\";\n        }\
    \ else if (i == 'p' || i == 'P') {\n            ans += \"P\";\n        } else\
    \ if (i == 'q' || i == 'Q') {\n            ans += \"Q\";\n        } else if (i\
    \ == 'r' || i == 'R') {\n            ans += \"R\";\n        } else if (i == 's'\
    \ || i == 'S') {\n            ans += \"S\";\n        } else if (i == 't' || i\
    \ == 'T') {\n            ans += \"T\";\n        } else if (i == 'u' || i == 'U')\
    \ {\n            ans += \"U\";\n        } else if (i == 'v' || i == 'V') {\n \
    \           ans += \"V\";\n        } else if (i == 'w' || i == 'W') {\n      \
    \      ans += \"W\";\n        } else if (i == 'x' || i == 'X') {\n           \
    \ ans += \"X\";\n        } else if (i == 'y' || i == 'Y') {\n            ans +=\
    \ \"Y\";\n        } else if (i == 'z' || i == 'Z') {\n            ans += \"Z\"\
    ;\n        } else {\n            ans += i;\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'c' || s[i] == 'C') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'd' || s[i] == 'D') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'e' || s[i] == 'E') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'f' || s[i] ==\
    \ 'F') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'g' || s[i] == 'G') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'h' || s[i] == 'H') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'i' || s[i] == 'I') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'j' || s[i] ==\
    \ 'J') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'k' || s[i] == 'K') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'l' || s[i] == 'L') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'm' || s[i] == 'M') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'n' || s[i] ==\
    \ 'N') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'o' || s[i] == 'O') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'p' || s[i] == 'P') {\n            ans = ans.substr(0,\
    \ i) + ans.", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(int i = 0; i < s.size(); i++) {\n       \
    \ if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else {\n \
    \           ans += s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &i : s) {\n        if (std::isalpha(i)) {\n            ans\
    \ = ans.replace(i,toupper(i),1);\n            ans = ans.replace(i,tolower(i),1);\n\
    \        } else {\n            ans = ans.replace(i,i,1);\n        }\n    }\n \
    \   return ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n\
    \            ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            char\
    \ c = toupper(s[i]);\n            char t = tolower(s[i]);\n            s[i] =\
    \ t;\n            s[i] = c;\n        }\n    }\n    res.assign(s);\n    return\
    \ res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            char\
    \ d = tolower(s[i]);\n            s[i] = d;\n        }\n    }\n    res.swap(s);\n\
    \    return res;", "    std::string ans = \"\";\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n   \
    \     } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string res;\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n\
    \        if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n          \
    \  s[i] = c;\n            char d = tolower(c);\n            s[i] = d;\n      \
    \  }\n    }\n    res.assign(s);\n    return res;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (auto &i : s) {\n        if (isalpha(i)) {\n            ans = ans.replace(i,toupper(i),1);\n\
    \        } else {\n            ans = ans.replace(i,tolower(i),1);\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n\
    \            s[i] = c;\n            c = tolower(c);\n            s[i] = c;\n \
    \       }\n    }\n    res.assign(s);\n    return res;", "    std::string ans =\
    \ s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(char c : s) {\n        if(c>='a' && c<='z') {\n            char temp\
    \ = c;\n            c = c-32;\n            if(c>='a' && c<='z') {\n          \
    \      c = temp;\n            }\n        }\n        res += c;\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            ans[i] = toupper(s[i]);\n     \
    \   } else {\n            ans[i] = s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      char c = toupper(s[i]);\n            s[i] = c;\n            char d = tolower(c);\n\
    \            s[i] = d;\n        }\n    }\n    res.assign(s);\n    return res;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n    \
    \        res+=s[i];\n        }\n        else{\n            res+=s[i];\n      \
    \  }\n    }\n    return res;", "    std::string res;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n \
    \           s[i] = c;\n            c = tolower(c);\n            s[i] = c;\n  \
    \      }\n    }\n    res.assign(s);\n    return res;", "    std::string ans =\
    \ s;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size()\
    \ - i - 1);\n        }\n        else if (s[i] == 'b' || s[i] == 'B') {\n     \
    \       ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n    \
    \    }\n        else if (s[i] == 'c' || s[i] == 'C') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'd' || s[i] == 'D') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'e' || s[i] ==\
    \ 'E') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'f' || s[i] == 'F') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'g' || s[i] == 'G') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'h' || s[i] == 'H') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'i' || s[i] ==\
    \ 'I') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'j' || s[i] == 'J') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'k' || s[i] == 'K') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'l' || s[i] == 'L') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'm' || s[i] ==\
    \ 'M') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'n' || s[i] == 'N') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'o' || s[i] == 'O') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'p' || s[i] == 'P') {\n            ans = ans.substr(0, i) + ans.", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (auto &i : s) {\n        if (std::isalpha(i))\
    \ {\n            ans = std::toupper(ans);\n            ans = std::tolower(ans);\n\
    \        } else {\n            ans = i;\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c))\
    \ {\n            ans = std::string(ans.rbegin(), ans.rend()) + std::toupper(c);\n\
    \        } else {\n            ans = std::string(ans.rbegin(), ans.rend()) + c;\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n\
    \            s[i] = c;\n            char d = tolower(s[i]);\n            s[i]\
    \ = d;\n        }\n    }\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            res += s[i];\n        }\n    }\n    return res;", "    std::string\
    \ res;\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n        if(isalpha(s[i]))\
    \ {\n            char c = toupper(s[i]);\n            s[i] = c;\n            char\
    \ d = tolower(c);\n            s[i] = d;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = s;\n    for (auto &c : s) {\n      \
    \  if (std::isalpha(c)) {\n            ans = ans.replace(c, std::toupper(c));\n\
    \        } else {\n            ans = ans.replace(c, std::tolower(c));\n      \
    \  }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t i =\
    \ 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n\
    \            ans.replace(i, 2, tolower(s[i]));\n        } else {\n           \
    \ ans.replace(i, 1, s[i]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for (auto &i : s) {\n        if (isalpha(i)) {\n            i = toupper(i);\n\
    \        }\n        else {\n            i = tolower(i);\n        }\n    }\n  \
    \  for (auto &i : s) {\n        if (isalpha(i)) {\n            i = toupper(i);\n\
    \        }\n        else {\n            i = tolower(i);\n        }\n    }\n  \
    \  return res;", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n\
    \            ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for (auto &c: s) {\n        if (std::isalpha(c)) {\n            std::swap(toupper(c),\
    \ tolower(c));\n        }\n        res += c;\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c: s) {\n        if (c == 'a' || c ==\
    \ 'A') {\n            ans = ans.replace(\"A\",\"a\");\n            ans = ans.replace(\"\
    a\",\"A\");\n        }\n        if (c == 'b' || c == 'B') {\n            ans =\
    \ ans.replace(\"B\",\"b\");\n            ans = ans.replace(\"b\",\"B\");\n   \
    \     }\n        if (c == 'c' || c == 'C') {\n            ans = ans.replace(\"\
    C\",\"c\");\n            ans = ans.replace(\"c\",\"C\");\n        }\n        if\
    \ (c == 'd' || c == 'D') {\n            ans = ans.replace(\"D\",\"d\");\n    \
    \        ans = ans.replace(\"d\",\"D\");\n        }\n        if (c == 'e' || c\
    \ == 'E') {\n            ans = ans.replace(\"E\",\"e\");\n            ans = ans.replace(\"\
    e\",\"E\");\n        }\n        if (c == 'f' || c == 'F') {\n            ans =\
    \ ans.replace(\"F\",\"f\");\n            ans = ans.replace(\"f\",\"F\");\n   \
    \     }\n        if (c == 'g' || c == 'G') {\n            ans = ans.replace(\"\
    G\",\"g\");\n            ans = ans.replace(\"g\",\"G\");\n        }\n        if\
    \ (c == 'h' || c == 'H') {\n            ans = ans.replace(\"H\",\"h\");\n    \
    \        ans = ans.replace(\"h\",\"H\");\n        }\n        if (c == 'i' || c\
    \ == 'I') {\n            ans = ans.replace(\"I\",\"i\");\n            ans = ans.replace(\"\
    i\",\"I\");\n        }\n        if (c == 'j' || c == 'J') {\n            ans =\
    \ ans.replace(\"J\",\"j\");\n            ans = ans.replace(\"j\",\"J\");\n   \
    \     }\n        if (c == 'k' || c == 'K') {\n            ans = ans.replace(\"\
    K\",\"k\");\n            ans = ans.replace(\"k\",\"K\");\n        }\n        if\
    \ (c == 'l' || c == 'L') {\n            ans = ans.replace(\"L\",\"l\");\n    \
    \        ans = ans.replace(\"l\",\"L\");\n        }\n        if (c == 'm' || c\
    \ == 'M') {\n            ans = ans.replace(\"M\",\"m\");\n            ans = ans.replace(\"\
    m\",\"M\");\n        }\n        if (c == 'n' || c == 'N') {\n            ans =\
    \ ans.replace(\"N\",\"n\");\n            ans = ans.replace(\"n\",\"N\");\n   \
    \     }\n        if (c == 'o' || c == 'O') {\n            ans = ans.replace(\"\
    O\",\"o\");\n            ans = ans.", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=toupper(s[i]);\n      \
    \  }\n        else if(s[i]>='A' && s[i]<='Z'){\n            res+=tolower(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n    \
    \    if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n            s[i]\
    \ = c;\n            char d = tolower(c);\n            s[i] = d;\n        }\n \
    \   }\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            res += s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i]))\
    \ {\n            ans.at(s[i]) = toupper(ans.at(s[i]));\n        } else {\n   \
    \         ans.at(s[i]) = tolower(ans.at(s[i]));\n        }\n    }\n    return\
    \ ans;", "    std::string ans = \"\";\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else\
    \ {\n            ans += s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n       \
    \     res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            char c = toupper(s[i]);\n           \
    \ s[i] = c;\n            char d = tolower(s[i]);\n            s[i] = d;\n    \
    \    }\n        res += s[i];\n    }\n    return res;", "    std::string ans =\
    \ s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' ||\
    \ s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size()\
    \ - i - 1);\n        }\n    }\n    return ans;", "    std::string res;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            char c\
    \ = toupper(s[i]);\n            s[i] = c;\n            c = tolower(c);\n     \
    \       s[i] = c;\n        }\n    }\n    res.assign(s);\n    return res;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n\
    \            ans = ans.substr(0, ans.length() - 1) + toupper(ans.substr(ans.length()\
    \ - 1));\n        } else {\n            ans = ans.substr(0, ans.length() - 1)\
    \ + tolower(ans.substr(ans.length() - 1));\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (auto &i : s) {\n        if (std::isalpha(i))\
    \ {\n            ans = std::string(std::toupper(i), std::tolower(i));\n      \
    \  } else {\n            ans = std::to_string(i);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (auto &i : s) {\n        if (isalpha(i))\
    \ {\n            ans = ans.replace(i,toupper(i),1);\n            ans = ans.replace(i,tolower(i),1);\n\
    \        } else {\n            ans = ans.replace(i,i,1);\n        }\n    }\n \
    \   return ans;", "    std::string ans = s;\n    for (auto &c: s) {\n        if\
    \ (c == 'a' || c == 'A') {\n            ans = ans.replace(\"a\", toupper(c));\n\
    \            ans = ans.replace(\"A\", tolower(c));\n        }\n        else if\
    \ (c == 'b' || c == 'B') {\n            ans = ans.replace(\"b\", toupper(c));\n\
    \            ans = ans.replace(\"B\", tolower(c));\n        }\n        else if\
    \ (c == 'c' || c == 'C') {\n            ans = ans.replace(\"c\", toupper(c));\n\
    \            ans = ans.replace(\"C\", tolower(c));\n        }\n        else if\
    \ (c == 'd' || c == 'D') {\n            ans = ans.replace(\"d\", toupper(c));\n\
    \            ans = ans.replace(\"D\", tolower(c));\n        }\n        else if\
    \ (c == 'e' || c == 'E') {\n            ans = ans.replace(\"e\", toupper(c));\n\
    \            ans = ans.replace(\"E\", tolower(c));\n        }\n        else if\
    \ (c == 'f' || c == 'F') {\n            ans = ans.replace(\"f\", toupper(c));\n\
    \            ans = ans.replace(\"F\", tolower(c));\n        }\n        else if\
    \ (c == 'g' || c == 'G') {\n            ans = ans.replace(\"g\", toupper(c));\n\
    \            ans = ans.replace(\"G\", tolower(c));\n        }\n        else if\
    \ (c == 'h' || c == 'H') {\n            ans = ans.replace(\"h\", toupper(c));\n\
    \            ans = ans.replace(\"H\", tolower(c));\n        }\n        else if\
    \ (c == 'i' || c == 'I') {\n            ans = ans.replace(\"i\", toupper(c));\n\
    \            ans = ans.replace(\"I\", tolower(c));\n        }\n        else if\
    \ (c == 'j' || c == 'J') {\n            ans = ans.replace(\"j\", toupper(c));\n\
    \            ans = ans.replace(\"J\", tolower(c));\n        }\n        else if\
    \ (c == 'k' || c == 'K') {\n            ans = ans.replace(\"k\", toupper(c));\n\
    \            ans = ans.replace(\"K\", tolower(c));\n        }\n        else if\
    \ (c == 'l' || c == 'L') {\n            ans = ans.replace(\"l\", toupper(c));\n\
    \            ans = ans.replace(\"L\", tolower(c));\n        }\n        else if\
    \ (c == 'm' || c == 'M') {\n            ans = ans.replace(\"m\", toupper(c));\n\
    \            ans = ans.replace(\"M\", tolower(c));\n        }\n        else if\
    \ (c == 'n' || c == 'N') {", "    std::string ans = s;\n    for(size_t i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        } else {\n            ans =\
    \ ans.substr(0, i) + tolower(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            char c = toupper(s[i]);\n           \
    \ char d = tolower(s[i]);\n            s[i] = c;\n            s[i] = d;\n    \
    \    }\n        res += s[i];\n    }\n    return res;", "    std::string ans =\
    \ s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>=65 && s[i]<=90){\n       \
    \     res+=toupper(s[i]);\n        }\n        else if(s[i]>=97 && s[i]<=122){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>=65&&s[i]<=90){\n            res+=toupper(s[i]);\n        }\n\
    \        else if(s[i]>=97&&s[i]<=122){\n            res+=tolower(s[i]);\n    \
    \    }\n        else{\n            res+=s[i];\n        }\n    }\n    return res;",
  "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            char\
    \ d = tolower(s[i]);\n            s[i] = d;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = \"\";\n    for (auto &i : s) {\n   \
    \     if (isalpha(i)) {\n            ans += toupper(i);\n        } else {\n  \
    \          ans += i;\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++) {\n        if(s[i]>='a' && s[i]<='z') {\n   \
    \         res+=s[i];\n        }\n        else {\n            res+=std::toupper(s[i]);\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (i == 'a' || i == 'A') {\n            ans = ans.replace(\"\
    A\", toupper(i));\n            ans = ans.replace(\"a\", tolower(i));\n       \
    \ } else if (i == 'b' || i == 'B') {\n            ans = ans.replace(\"B\", toupper(i));\n\
    \            ans = ans.replace(\"b\", tolower(i));\n        } else if (i == 'c'\
    \ || i == 'C') {\n            ans = ans.replace(\"C\", toupper(i));\n        \
    \    ans = ans.replace(\"c\", tolower(i));\n        } else if (i == 'd' || i ==\
    \ 'D') {\n            ans = ans.replace(\"D\", toupper(i));\n            ans =\
    \ ans.replace(\"d\", tolower(i));\n        } else if (i == 'e' || i == 'E') {\n\
    \            ans = ans.replace(\"E\", toupper(i));\n            ans = ans.replace(\"\
    e\", tolower(i));\n        } else if (i == 'f' || i == 'F') {\n            ans\
    \ = ans.replace(\"F\", toupper(i));\n            ans = ans.replace(\"f\", tolower(i));\n\
    \        } else if (i == 'g' || i == 'G') {\n            ans = ans.replace(\"\
    G\", toupper(i));\n            ans = ans.replace(\"g\", tolower(i));\n       \
    \ } else if (i == 'h' || i == 'H') {\n            ans = ans.replace(\"H\", toupper(i));\n\
    \            ans = ans.replace(\"h\", tolower(i));\n        } else if (i == 'i'\
    \ || i == 'I') {\n            ans = ans.replace(\"I\", toupper(i));\n        \
    \    ans = ans.replace(\"i\", tolower(i));\n        } else if (i == 'j' || i ==\
    \ 'J') {\n            ans = ans.replace(\"J\", toupper(i));\n            ans =\
    \ ans.replace(\"j\", tolower(i));\n        } else if (i == 'k' || i == 'K') {\n\
    \            ans = ans.replace(\"K\", toupper(i));\n            ans = ans.replace(\"\
    k\", tolower(i));\n        } else if (i == 'l' || i == 'L') {\n            ans\
    \ = ans.replace(\"L\", toupper(i));\n            ans = ans.replace(\"l\", tolower(i));\n\
    \        } else if (i == 'm' || i == 'M') {\n            ans = ans.replace(\"\
    M\", toupper(i));\n            ans = ans.replace(\"m\", tolower(i));\n       \
    \ } else if (i == 'n' || i == 'N') {\n            ans = ans.replace(\"N\", toupper(i));\n\
    \            ans = ans.replace(\"n\", tolower(i", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n   \
    \ for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n     \
    \       ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.length());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size()\
    \ - i - 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n \
    \   for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n  \
    \          ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i +\
    \ 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans =\
    \ s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans =\
    \ s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++) {\n        if(s[i]>='a' && s[i]<='z') {\n   \
    \         res+=toupper(s[i]);\n        }\n        else if(s[i]>='A' && s[i]<='Z')\
    \ {\n            res+=tolower(s[i]);\n        }\n        else {\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for (auto &c : s) {\n        if (isalpha(c)) {\n            std::swap(toupper(c),\
    \ tolower(c));\n        }\n        res += c;\n    }\n    return res;", "    std::string\
    \ res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            c = tolower(c);\n\
    \            s[i] = c;\n        }\n    }\n    res.swap(s);\n    return res;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(size_t i = 0; i < s.size(); i++) {\n       \
    \ if(isalpha(s[i])) {\n            ans.at(s[i]) = toupper(ans.at(s[i]));\n   \
    \     }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto &i\
    \ : s) {\n        if (std::isalpha(i)) {\n            ans = std::toupper(ans);\n\
    \            ans = std::tolower(ans);\n        } else {\n            ans = std::tolower(ans);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n           \
    \ ans = ans.substr(0, i) + std::toupper(ans.substr(i, 1)) + ans.substr(i + 1);\n\
    \        } else {\n            ans = ans.substr(0, i) + std::tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1);\n        }\n    }\n    return ans;", "    std::string\
    \ res;\n    for(size_t i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            char c = toupper(s[i]);\n            s[i] = c;\n            c\
    \ = tolower(c);\n            s[i] = c;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n   \
    \         ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i);\n      \
    \  }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto &i : s)\
    \ {\n        if (isalpha(i)) {\n            ans.replace(i, toupper(i), 1);\n \
    \       } else {\n            ans.replace(i, i, 1);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c ==\
    \ 'A') {\n            ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size()\
    \ - 1, ans.size());\n        }\n        else if (c == 'b' || c == 'B') {\n   \
    \         ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size() - 1, ans.size());\n\
    \        }\n        else if (c == 'c' || c == 'C') {\n            ans = ans.substr(0,\
    \ ans.size() - 1) + ans.substr(ans.size() - 1, ans.size());\n        }\n     \
    \   else if (c == 'd' || c == 'D') {\n            ans = ans.substr(0, ans.size()\
    \ - 1) + ans.substr(ans.size() - 1, ans.size());\n        }\n        else if (c\
    \ == 'e' || c == 'E') {\n            ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size()\
    \ - 1, ans.size());\n        }\n        else if (c == 'f' || c == 'F') {\n   \
    \         ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size() - 1, ans.size());\n\
    \        }\n        else if (c == 'g' || c == 'G') {\n            ans = ans.substr(0,\
    \ ans.size() - 1) + ans.substr(ans.size() - 1, ans.size());\n        }\n     \
    \   else if (c == 'h' || c == 'H') {\n            ans = ans.substr(0, ans.size()\
    \ - 1) + ans.substr(ans.size() - 1, ans.size());\n        }\n        else if (c\
    \ == 'i' || c == 'I') {\n            ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size()\
    \ - 1, ans.size());\n        }\n        else if (c == 'j' || c == 'J') {\n   \
    \         ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size() - 1, ans.size());\n\
    \        }\n        else if (c == 'k' || c == 'K') {\n            ans = ans.substr(0,\
    \ ans.size() - 1) + ans.substr(ans.size() - 1, ans.size());\n        }\n     \
    \   else if (c == 'l' || c == 'L') {\n            ans = ans.substr(0, ans.size()\
    \ - 1) + ans.substr(ans.size() - 1, ans.size());\n        }\n        else if (c\
    \ == 'm' || c == 'M') {\n            ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size()\
    \ - 1, ans.size());\n        }\n        else if (c == 'n' || c == 'N') {\n   \
    \         ans = ans.substr(0, ans.size() - 1) + ans.substr(ans.size() - 1, ans.size());\n\
    \        }\n        else if (c == 'o' || c == 'O') {\n            ans = ans.substr(0,\
    \ ans.size() - 1) + ans.", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + std::toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n     \
    \   }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t i =\
    \ 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n       \
    \     ans[i] = 'A';\n        } else if (s[i] == 'b' || s[i] == 'B') {\n      \
    \      ans[i] = 'B';\n        } else if (s[i] == 'c' || s[i] == 'C') {\n     \
    \       ans[i] = 'C';\n        } else if (s[i] == 'd' || s[i] == 'D') {\n    \
    \        ans[i] = 'D';\n        } else if (s[i] == 'e' || s[i] == 'E') {\n   \
    \         ans[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F') {\n  \
    \          ans[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n \
    \           ans[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n\
    \            ans[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n\
    \            ans[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n\
    \            ans[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n\
    \            ans[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n\
    \            ans[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n\
    \            ans[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n\
    \            ans[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n\
    \            ans[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n\
    \            ans[i] = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n\
    \            ans[i] = 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n\
    \            ans[i] = 'R';\n        } else if (s[i] == 's' || s[i] == 'S') {\n\
    \            ans[i] = 'S';\n        } else if (s[i] == 't' || s[i] == 'T') {\n\
    \            ans[i] = 'T';\n        } else if (s[i] == 'u' || s[i] == 'U') {\n\
    \            ans[i] = 'U';\n        } else if (s[i] == 'v' || s[i] == 'V') {\n\
    \            ans[i] = 'V';\n        } else if (s[i] == 'w' || s[i] == 'W') {\n\
    \            ans[i] = 'W';\n        } else if (s[i] == 'x' || s[i] == 'X') {\n\
    \            ans[i] = 'X';\n        } else if (s[i] == 'y' || s[i] == 'Y') {\n\
    \            ans[i] = 'Y';\n        } else if (s[i] == 'z' || s[i] == 'Z') {\n\
    \            ans[i] = 'Z';\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    int len = s.size();\n   \
    \ for(int i = 0; i < len; i++){\n        if(isalpha(s[i])){\n            char\
    \ c = toupper(s[i]);\n            s[i] = c;\n            c = tolower(c);\n   \
    \         s[i] = c;\n        }\n    }\n    for(int i = 0; i < len; i++){\n   \
    \     if(isalpha(s[i])){\n            res += s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      char c = toupper(s[i]);\n            s[i] = c;\n            char d = tolower(s[i]);\n\
    \            s[i] = d;\n        }\n    }\n    res.assign(s);\n    return res;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c : s) {\n        if (std::isalpha(c)) {\n            ans\
    \ = ans.replace(c, c == std::toupper(c) ? std::tolower(c) : std::toupper(c));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n\
    \            ans.replace(i, toupper(i), 1);\n        } else {\n            ans.replace(i,\
    \ i, 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n    for\
    \ (auto &i : s) {\n        if (i == 'a' || i == 'A') {\n            ans = ans.replace(\"\
    A\", toupper(i));\n            ans = ans.replace(\"a\", tolower(i));\n       \
    \ } else if (i == 'b' || i == 'B') {\n            ans = ans.replace(\"B\", toupper(i));\n\
    \            ans = ans.replace(\"b\", tolower(i));\n        } else if (i == 'c'\
    \ || i == 'C') {\n            ans = ans.replace(\"C\", toupper(i));\n        \
    \    ans = ans.replace(\"c\", tolower(i));\n        } else if (i == 'd' || i ==\
    \ 'D') {\n            ans = ans.replace(\"D\", toupper(i));\n            ans =\
    \ ans.replace(\"d\", tolower(i));\n        } else if (i == 'e' || i == 'E') {\n\
    \            ans = ans.replace(\"E\", toupper(i));\n            ans = ans.replace(\"\
    e\", tolower(i));\n        } else if (i == 'f' || i == 'F') {\n            ans\
    \ = ans.replace(\"F\", toupper(i));\n            ans = ans.replace(\"f\", tolower(i));\n\
    \        } else if (i == 'g' || i == 'G') {\n            ans = ans.replace(\"\
    G\", toupper(i));\n            ans = ans.replace(\"g\", tolower(i));\n       \
    \ } else if (i == 'h' || i == 'H') {\n            ans = ans.replace(\"H\", toupper(i));\n\
    \            ans = ans.replace(\"h\", tolower(i));\n        } else if (i == 'i'\
    \ || i == 'I') {\n            ans = ans.replace(\"I\", toupper(i));\n        \
    \    ans = ans.replace(\"i\", tolower(i));\n        } else if (i == 'j' || i ==\
    \ 'J') {\n            ans = ans.replace(\"J\", toupper(i));\n            ans =\
    \ ans.replace(\"j\", tolower(i));\n        } else if (i == 'k' || i == 'K') {\n\
    \            ans = ans.replace(\"K\", toupper(i));\n            ans = ans.replace(\"\
    k\", tolower(i));\n        } else if (i == 'l' || i == 'L') {\n            ans\
    \ = ans.replace(\"L\", toupper(i));\n            ans = ans.replace(\"l\", tolower(i));\n\
    \        } else if (i == 'm' || i == 'M') {\n            ans = ans.replace(\"\
    M\", toupper(i));\n            ans = ans.replace(\"m\", tolower(i));\n       \
    \ } else if (i == 'n' || i == 'N') {\n            ans = ans.replace(\"N\", toupper(i));\n\
    \            ans = ans.replace(\"n\", tolower(i", "    std::string ans = s;\n\
    \    for (auto &c: ans) {\n        if (std::isalpha(c)) {\n            std::swap(toupper(c),\
    \ tolower(c));\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n \
    \           ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n\
    \        } else {\n            ans.replace(i, 1, s[i]);\n        }\n    }\n  \
    \  return ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i]))\
    \ {\n            char c = toupper(s[i]);\n            s[i] = c;\n            char\
    \ d = tolower(s[i]);\n            s[i] = d;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        } else {\n            ans =\
    \ ans.substr(0, i) + s[i].tolower() + ans.substr(i + 1, ans.length());\n     \
    \   }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto &i :\
    \ s) {\n        if (isalpha(i)) {\n            ans = ans.substr(0, ans.size()-1)\
    \ + toupper(i) + ans.substr(ans.size()-1);\n        } else {\n            ans\
    \ = ans.substr(0, ans.size()-1) + i;\n        }\n    }\n    return ans;", "  \
    \  std::string ans = \"\";\n    for (char c : s) {\n        if (c == 'a' || c\
    \ == 'A') {\n            ans += 'A';\n        } else if (c == 'b' || c == 'B')\
    \ {\n            ans += 'B';\n        } else if (c == 'c' || c == 'C') {\n   \
    \         ans += 'C';\n        } else if (c == 'd' || c == 'D') {\n          \
    \  ans += 'D';\n        } else if (c == 'e' || c == 'E') {\n            ans +=\
    \ 'E';\n        } else if (c == 'f' || c == 'F') {\n            ans += 'F';\n\
    \        } else if (c == 'g' || c == 'G') {\n            ans += 'G';\n       \
    \ } else if (c == 'h' || c == 'H') {\n            ans += 'H';\n        } else\
    \ if (c == 'i' || c == 'I') {\n            ans += 'I';\n        } else if (c ==\
    \ 'j' || c == 'J') {\n            ans += 'J';\n        } else if (c == 'k' ||\
    \ c == 'K') {\n            ans += 'K';\n        } else if (c == 'l' || c == 'L')\
    \ {\n            ans += 'L';\n        } else if (c == 'm' || c == 'M') {\n   \
    \         ans += 'M';\n        } else if (c == 'n' || c == 'N') {\n          \
    \  ans += 'N';\n        } else if (c == 'o' || c == 'O') {\n            ans +=\
    \ 'O';\n        } else if (c == 'p' || c == 'P') {\n            ans += 'P';\n\
    \        } else if (c == 'q' || c == 'Q') {\n            ans += 'Q';\n       \
    \ } else if (c == 'r' || c == 'R') {\n            ans += 'R';\n        } else\
    \ if (c == 's' || c == 'S') {\n            ans += 'S';\n        } else if (c ==\
    \ 't' || c == 'T') {\n            ans += 'T';\n        } else if (c == 'u' ||\
    \ c == 'U') {\n            ans += 'U';\n        } else if (c == 'v' || c == 'V')\
    \ {\n            ans += 'V';\n        } else if (c == 'w' || c == 'W') {\n   \
    \         ans += 'W';\n        } else if (c == 'x' || c == 'X') {\n          \
    \  ans += 'X';\n        } else if (c == 'y' || c == 'Y') {\n            ans +=\
    \ 'Y';\n        } else if (c == 'z' || c == 'Z') {\n            ans += 'Z';\n\
    \        } else {\n            ans += c;\n        }\n    }\n    return ans;",
  "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &c : s) {\n\
    \        if (isalpha(c)) {\n            ans = ans.substr(0, ans.size() - 1) +\
    \ toupper(ans.back()) + ans.substr(ans.size() - 1);\n        } else {\n      \
    \      ans = ans.substr(0, ans.size() - 1) + c;\n        }\n    }\n    return\
    \ ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            char\
    \ d = tolower(s[i]);\n            s[i] = d;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n\
    \            ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;",
  "    std::string res;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'A')\
    \ {\n            res += \"A\";\n        } else if (c == 'b' || c == 'B') {\n \
    \           res += \"B\";\n        } else if (c == 'c' || c == 'C') {\n      \
    \      res += \"C\";\n        } else if (c == 'd' || c == 'D') {\n           \
    \ res += \"D\";\n        } else if (c == 'e' || c == 'E') {\n            res +=\
    \ \"E\";\n        } else if (c == 'f' || c == 'F') {\n            res += \"F\"\
    ;\n        } else if (c == 'g' || c == 'G') {\n            res += \"G\";\n   \
    \     } else if (c == 'h' || c == 'H') {\n            res += \"H\";\n        }\
    \ else if (c == 'i' || c == 'I') {\n            res += \"I\";\n        } else\
    \ if (c == 'j' || c == 'J') {\n            res += \"J\";\n        } else if (c\
    \ == 'k' || c == 'K') {\n            res += \"K\";\n        } else if (c == 'l'\
    \ || c == 'L') {\n            res += \"L\";\n        } else if (c == 'm' || c\
    \ == 'M') {\n            res += \"M\";\n        } else if (c == 'n' || c == 'N')\
    \ {\n            res += \"N\";\n        } else if (c == 'o' || c == 'O') {\n \
    \           res += \"O\";\n        } else if (c == 'p' || c == 'P') {\n      \
    \      res += \"P\";\n        } else if (c == 'q' || c == 'Q') {\n           \
    \ res += \"Q\";\n        } else if (c == 'r' || c == 'R') {\n            res +=\
    \ \"R\";\n        } else if (c == 's' || c == 'S') {\n            res += \"S\"\
    ;\n        } else if (c == 't' || c == 'T') {\n            res += \"T\";\n   \
    \     } else if (c == 'u' || c == 'U') {\n            res += \"U\";\n        }\
    \ else if (c == 'v' || c == 'V') {\n            res += \"V\";\n        } else\
    \ if (c == 'w' || c == 'W') {\n            res += \"W\";\n        } else if (c\
    \ == 'x' || c == 'X') {\n            res += \"X\";\n        } else if (c == 'y'\
    \ || c == 'Y') {\n            res += \"Y\";\n        } else if (c == 'z' || c\
    \ == 'Z') {\n            res += \"Z\";\n        } else {\n            res += c;\n\
    \        }\n    }\n    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++)\
    \ {\n        if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n      \
    \      s[i] = c;\n            res+=c;\n        }\n        else {\n           \
    \ res+=s[i];\n        }\n    }\n    return res;", "    std::string ans = s;\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n    \
    \        ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.length());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n\
    \        } else {\n            ans.replace(i, 1, s[i]);\n        }\n    }\n  \
    \  return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.length());\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n\
    \            ans = ans.replace(c, toupper(c));\n        } else {\n           \
    \ ans = ans.replace(c, tolower(c));\n        }\n    }\n    return ans;", "   \
    \ std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans =\
    \ s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n \
    \           ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;"]
stop_tokens:
- "\n}"
