name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(int i = 0; i < s.length(); i++) {\n     \
    \   if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else {\n\
    \            ans += s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(auto &i : s) {\n        if(i == 'a' || i\
    \ == 'A') {\n            ans += 'A';\n        }\n        else if(i == 'b' || i\
    \ == 'B') {\n            ans += 'b';\n        }\n        else if(i == 'c' || i\
    \ == 'C') {\n            ans += 'C';\n        }\n        else if(i == 'd' || i\
    \ == 'D') {\n            ans += 'd';\n        }\n        else if(i == 'e' || i\
    \ == 'E') {\n            ans += 'e';\n        }\n        else if(i == 'f' || i\
    \ == 'F') {\n            ans += 'f';\n        }\n        else if(i == 'g' || i\
    \ == 'G') {\n            ans += 'g';\n        }\n        else if(i == 'h' || i\
    \ == 'H') {\n            ans += 'h';\n        }\n        else if(i == 'i' || i\
    \ == 'I') {\n            ans += 'i';\n        }\n        else if(i == 'j' || i\
    \ == 'J') {\n            ans += 'j';\n        }\n        else if(i == 'k' || i\
    \ == 'K') {\n            ans += 'k';\n        }\n        else if(i == 'l' || i\
    \ == 'L') {\n            ans += 'l';\n        }\n        else if(i == 'm' || i\
    \ == 'M') {\n            ans += 'm';\n        }\n        else if(i == 'n' || i\
    \ == 'N') {\n            ans += 'n';\n        }\n        else if(i == 'o' || i\
    \ == 'O') {\n            ans += 'o';\n        }\n        else if(i == 'p' || i\
    \ == 'P') {\n            ans += 'p';\n        }\n        else if(i == 'q' || i\
    \ == 'Q') {\n            ans += 'q';\n        }\n        else if(i == 'r' || i\
    \ == 'R') {\n            ans += 'r';\n        }\n        else if(i == 's' || i\
    \ == 'S') {\n            ans += 's';\n        }\n        else if(i == 't' || i\
    \ == 'T') {\n            ans += 't';\n        }\n        else if(i == 'u' || i\
    \ == 'U') {\n            ans += 'u';\n        }\n        else if(i == 'v' || i\
    \ == 'V') {\n            ans += 'v';\n        }\n        else if(i == 'w' || i\
    \ == 'W') {\n            ans += 'w';\n        }\n        else if(i == 'x' || i\
    \ == 'X') {\n            ans += 'x';\n        }\n        else if(i == 'y' || i\
    \ == 'Y') {\n            ans += 'y';\n        }\n        else ", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n           \
    \ ans = ans.substr(0, i) + std::toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (auto &c: s) {\n        if (std::isalpha(c)) {\n            ans = ans.replace(c,\
    \ std::toupper(c));\n        } else {\n            ans = ans.replace(c, std::tolower(c));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &i : s) {\n\
    \        if (isalpha(i)) {\n            ans = ans.substr(0, ans.size() - 1) +\
    \ toupper(ans.back()) + ans.substr(ans.size() - 1);\n        } else {\n      \
    \      ans = ans.substr(0, ans.size() - 1) + i;\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (auto &i : s) {\n        if (i ==\
    \ 'a' || i == 'A') {\n            ans = ans.replace(\"A\", toupper(i));\n    \
    \        ans = ans.replace(\"a\", tolower(i));\n        } else if (i == 'b' ||\
    \ i == 'B') {\n            ans = ans.replace(\"B\", toupper(i));\n           \
    \ ans = ans.replace(\"b\", tolower(i));\n        } else if (i == 'c' || i == 'C')\
    \ {\n            ans = ans.replace(\"C\", toupper(i));\n            ans = ans.replace(\"\
    c\", tolower(i));\n        } else if (i == 'd' || i == 'D') {\n            ans\
    \ = ans.replace(\"D\", toupper(i));\n            ans = ans.replace(\"d\", tolower(i));\n\
    \        } else if (i == 'e' || i == 'E') {\n            ans = ans.replace(\"\
    E\", toupper(i));\n            ans = ans.replace(\"e\", tolower(i));\n       \
    \ } else if (i == 'f' || i == 'F') {\n            ans = ans.replace(\"F\", toupper(i));\n\
    \            ans = ans.replace(\"f\", tolower(i));\n        } else if (i == 'g'\
    \ || i == 'G') {\n            ans = ans.replace(\"G\", toupper(i));\n        \
    \    ans = ans.replace(\"g\", tolower(i));\n        } else if (i == 'h' || i ==\
    \ 'H') {\n            ans = ans.replace(\"H\", toupper(i));\n            ans =\
    \ ans.replace(\"h\", tolower(i));\n        } else if (i == 'i' || i == 'I') {\n\
    \            ans = ans.replace(\"I\", toupper(i));\n            ans = ans.replace(\"\
    i\", tolower(i));\n        } else if (i == 'j' || i == 'J') {\n            ans\
    \ = ans.replace(\"J\", toupper(i));\n            ans = ans.replace(\"j\", tolower(i));\n\
    \        } else if (i == 'k' || i == 'K') {\n            ans = ans.replace(\"\
    K\", toupper(i));\n            ans = ans.replace(\"k\", tolower(i));\n       \
    \ } else if (i == 'l' || i == 'L') {\n            ans = ans.replace(\"L\", toupper(i));\n\
    \            ans = ans.replace(\"l\", tolower(i));\n        } else if (i == 'm'\
    \ || i == 'M') {\n            ans = ans.replace(\"M\", toupper(i));\n        \
    \    ans = ans.replace(\"m\", tolower(i));\n        } else if (i == 'n' || i ==\
    \ 'N') {\n            ans = ans.replace(\"N\", toupper(i));\n            ans =\
    \ ans.replace(\"n\", tolower(i", "    std::string ans = s;\n    for(size_t i =\
    \ 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n\
    \            s[i] = c;\n            char d = tolower(c);\n            s[i] = d;\n\
    \        }\n    }\n    res.assign(s);\n    return res;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            char\
    \ c = toupper(s[i]);\n            s[i] = c;\n            res+=c;\n        }\n\
    \        else{\n            res+=s[i];\n        }\n    }\n    return res;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans[i] = toupper(s[i]);\n        } else {\n \
    \           ans[i] = s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.swap(s[i], toupper(s[i]));\n        } else {\n          \
    \  ans.swap(s[i], s[i]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans\
    \ = ans.substr(0, ans.size() - 1) + toupper(ans.back()) + ans.substr(ans.size()\
    \ - 1);\n        } else {\n            ans = ans.substr(0, ans.size() - 1) + c;\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
