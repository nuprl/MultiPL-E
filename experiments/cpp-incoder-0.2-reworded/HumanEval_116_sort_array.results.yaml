language: cpp
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> sorted_arr(arr.size());\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        long count = 0;\n        for (long j = 0; j\
    \ < arr.size(); j++) {\n            if (arr[j] == i) {\n                count++;\n\
    \            }\n        }\n        if (count == 0) {\n            sorted_arr[i]\
    \ = i;\n        } else {\n            sorted_arr[i] = count;\n        }\n    }\n\
    \    long max_val = sorted_arr[0];\n    for (long i = 1; i < sorted_arr.size();\
    \ i++) {\n        if (sorted_arr[i] > max_val) {\n            max_val = sorted_arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        long count\
    \ = 0;\n        for (long j = 0; j < arr.size(); j++) {\n            if (arr[j]\
    \ == i) {\n                count++;\n            }\n        }\n        if (count\
    \ == 0) {\n            sorted_arr[i] = i;\n        } else {\n            sorted_arr[i]\
    \ = count * max_val;\n        }\n    }\n    return sorted_arr;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x38u2f0.cpp: In function 'int main()':\n/tmp/tmp7x38u2f0.cpp:50:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7x38u2f0.cpp:2:\n/tmp/tmp7x38u2f0.cpp:51:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp7x38u2f0.cpp:51:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp7x38u2f0.cpp:51:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp7x38u2f0.cpp:51:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7x38u2f0.cpp:51:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp7x38u2f0.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    long long zeros = 0;\n    for (long long\
    \ i : arr) {\n        if (i == 1) {\n            ones++;\n        } else {\n \
    \           zeros++;\n        }\n    }\n    if (ones > zeros) {\n        std::sort(arr.begin(),\
    \ arr.end(), [](long long a, long long b) {\n            return a > b;\n     \
    \   });\n    } else if (ones < zeros) {\n        std::sort(arr.begin(), arr.end(),\
    \ [](long long a, long long b) {\n            return a < b;\n        });\n   \
    \ }\n    return arr;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoktpcfsr.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpoktpcfsr.cpp:16:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmpoktpcfsr.cpp:26:9: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n         });\n       \
    \  ^\n/tmp/tmpoktpcfsr.cpp:26:10: error: no matching function for call to 'sort(std::vector<long\
    \ int>::iterator, std::vector<long int>::iterator, sort_array(std::vector<long\
    \ int>)::__lambda0)'\n         });\n          ^\n/tmp/tmpoktpcfsr.cpp:26:10: note:\
    \ candidates are:\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpoktpcfsr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpoktpcfsr.cpp:26:10:\
    \ note:   candidate expects 2 arguments, 3 provided\n         });\n          ^\n\
    In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n               \
    \  from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n       \
    \          from /tmp/tmpoktpcfsr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpoktpcfsr.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Compare\
    \ = sort_array(std::vector<long int>)::__lambda0]':\n/tmp/tmpoktpcfsr.cpp:26:10:\
    \   required fro"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Your code here\n    long long int sum = 0;\n    long long int\
    \ count = 0;\n    for (long long int i : arr) {\n        sum += i;\n        count\
    \ += 1;\n    }\n    long long int max = (long long)count;\n    long long int min\
    \ = (long long)sum;\n    long long int mid = (long long)sum / 2;\n    long long\
    \ int mid1 = (long long)sum / 2;\n    long long int mid2 = (long long)sum / 2;\n\
    \    long long int mid3 = (long long)sum / 2;\n    long long int mid4 = (long\
    \ long)sum / 2;\n    long long int mid5 = (long long)sum / 2;\n    long long int\
    \ mid6 = (long long)sum / 2;\n    long long int mid7 = (long long)sum / 2;\n \
    \   long long int mid8 = (long long)sum / 2;\n    long long int mid9 = (long long)sum\
    \ / 2;\n    long long int mid10 = (long long)sum / 2;\n    long long int mid11\
    \ = (long long)sum / 2;\n    long long int mid12 = (long long)sum / 2;\n    long\
    \ long int mid13 = (long long)sum / 2;\n    long long int mid14 = (long long)sum\
    \ / 2;\n    long long int mid15 = (long long)sum / 2;\n    long long int mid16\
    \ = (long long)sum / 2;\n    long long int mid17 = (long long)sum / 2;\n    long\
    \ long int mid18 = (long long)sum / 2;\n    long long int mid19 = (long long)sum\
    \ / 2;\n    long long int mid20 = (long long)sum / 2;\n    long long int mid21\
    \ = (long long)sum / 2;\n    long long int mid22 = (long long)sum / 2;\n    long\
    \ long int mid23 = (long long)sum / 2;\n    long long int mid24 = (long long)sum\
    \ / 2;\n    long long int mid25 = (long long)sum / 2;\n    long long int mid26\
    \ = (long long)sum / 2;\n    long long int mid27 = (long long)sum / 2;\n    long\
    \ long int mid28 = (long long)sum / 2;\n    long long int mid29 = (long long)sum\
    \ / 2;\n    long long int mid30 = (long long)sum / 2;\n    long long int mid31\
    \ = (long long)sum / 2;\n    long long int mid32 = (long long)sum / 2;\n    long\
    \ long int mid33 = (long long)sum / 2;\n    long long int mid34 = (long long)sum\
    \ / 2;\n    long long int mid35 = (long long)sum / 2;\n    long long int mid36\
    \ = (long long)sum / 2;\n    long long int mid37 = (long long)sum / 2;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqs1kr2nu.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpqs1kr2nu.cpp:17:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmpqs1kr2nu.cpp: In function 'int main()':\n/tmp/tmpqs1kr2nu.cpp:63:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqs1kr2nu.cpp:2:\n/tmp/tmpqs1kr2nu.cpp:64:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpqs1kr2nu.cpp:64:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpqs1kr2nu.cpp:64:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpqs1kr2nu.cpp:64:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqs1kr2nu.cpp:64:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqs1kr2nu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += i;\n    }\n    long long tens = ones / 10;\n    long long ones = ones - tens\
    \ * 10;\n    long long tens10 = tens / 10;\n    long long tens9 = tens - tens10\
    \ * 10;\n    long long tens100 = tens9 / 10;\n    long long tens99 = tens9 - tens100\
    \ * 10;\n    long long tens999 = tens99 / 10;\n    long long tens9999 = tens99\
    \ - tens999 * 10;\n    long long tens99999 = tens999 / 10;\n    long long tens999999\
    \ = tens999 - tens9999 * 10;\n    long long tens9999999 = tens9999 / 10;\n   \
    \ long long tens99999999 = tens9999 - tens99999 * 10;\n    long long tens999999999\
    \ = tens99999 / 10;\n    long long tens9999999999 = tens99999 - tens9999999 *\
    \ 10;\n    long long tens99999999999 = tens9999999 / 10;\n    long long tens99999999999999\
    \ = tens9999999 - tens999999999 * 10;\n    long long tens999999999 = tens999999999\
    \ / 10;\n    long long tens9999999999999 = tens999999999 - tens99999999999 * 10;\n\
    \    long long tens999999999999999 = tens99999999999 / 10;\n    long long tens9999999999999999\
    \ = tens999999999999999 - tens9999999999999 * 10;\n    long long tens9999999999999\
    \ = tens9999999999999 / 10;\n    long long tens9999999999999 = tens9999999999999\
    \ - tens999999999999999 * 10;\n    long long tens9999999999999999 = tens9999999999999999\
    \ - tens9999999999999 * 10;\n    long long tens9999999999999 = tens9999999999999\
    \ / 10;\n    long long tens9999999999999 = tens9999999999999 - tens999999999999999\
    \ * 10;\n    long long tens9999999999999999 = tens9999999999999999 - tens9999999999999\
    \ * 10;\n    long long tens9999999999999 = tens9999999999999 / 10;\n    long long\
    \ tens9999999999999 = tens9999999999999 - tens999999999999999 * 10;\n    long\
    \ long tens9999999999999999 = tens9999999999999999\n}\nint main() {\n    auto\
    \ candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3,\
    \ (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
    \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiqat9g_.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpqiqat9g_.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmpqiqat9g_.cpp:19:15: error: redeclaration of 'long long int ones'\n\
    \     long long ones = ones - tens * 10;\n               ^\n/tmp/tmpqiqat9g_.cpp:14:15:\
    \ error: 'long long int ones' previously declared here\n     long long ones =\
    \ 0;\n               ^\n/tmp/tmpqiqat9g_.cpp:34:15: error: redeclaration of 'long\
    \ long int tens999999999'\n     long long tens999999999 = tens999999999 / 10;\n\
    \               ^\n/tmp/tmpqiqat9g_.cpp:30:15: error: 'long long int tens999999999'\
    \ previously declared here\n     long long tens999999999 = tens99999 / 10;\n \
    \              ^\n/tmp/tmpqiqat9g_.cpp:38:15: error: redeclaration of 'long long\
    \ int tens9999999999999'\n     long long tens9999999999999 = tens9999999999999\
    \ / 10;\n               ^\n/tmp/tmpqiqat9g_.cpp:35:15: error: 'long long int tens9999999999999'\
    \ previously declared here\n     long long tens9999999999999 = tens999999999 -\
    \ tens99999999999 * 10;\n               ^\n/tmp/tmpqiqat9g_.cpp:39:15: error:\
    \ redeclaration of 'long long int tens9999999999999'\n     long long tens9999999999999\
    \ = tens9999999999999 - tens999999999999999 * 10;\n               ^\n/tmp/tmpqiqat9g_.cpp:35:15:\
    \ error: 'long long int tens9999999999999' previously declared here\n     long\
    \ long tens9999999999999 = tens999999999 - tens99999999999 * 10;\n           \
    \    ^\n/tmp/tmpqiqat9g_.cpp:40:15: error: redeclaration of 'long long int tens9999999999999999'\n\
    \     long long tens9999999999999999 = tens9999999999999999 - tens9999999999999\
    \ * 10;\n               ^\n/tmp/tmpqiqat9g_.cpp:37:15: error: 'long long int tens9999999999999999'\
    \ previously declared here\n     long long tens9999999999999999 = tens999999999999999\
    \ - tens9999999999999 * 10;\n               ^\n/tmp/tmpqiqat9g_.cpp:41:15: error:\
    \ redeclaration of 'long long int tens9999999999999'\n     long long tens9999999999999\
    \ = tens9999999999999 / 10;\n    "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    long long zeros = 0;\n    for (long long\
    \ i : arr) {\n        if (i == 1) {\n            ones++;\n        } else {\n \
    \           zeros++;\n        }\n    }\n    std::vector<long> res;\n    if (zeros\
    \ > ones) {\n        std::sort(arr.begin(), arr.end(), [](long long a, long long\
    \ b) { return b - a; });\n        for (long long i : arr) {\n            if (i\
    \ == 1) {\n                res.push_back(i);\n            }\n        }\n    }\
    \ else {\n        std::sort(arr.begin(), arr.end(), [](long long a, long long\
    \ b) { return a - b; });\n        for (long long i : arr) {\n            if (i\
    \ == 0) {\n                res.push_back(i);\n            }\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7c0mgg1o.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp7c0mgg1o.cpp:16:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmp7c0mgg1o.cpp:25:88: warning: lambda expressions only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n         std::sort(arr.begin(),\
    \ arr.end(), [](long long a, long long b) { return b - a; });\n              \
    \                                                                          ^\n\
    /tmp/tmp7c0mgg1o.cpp:25:89: error: no matching function for call to 'sort(std::vector<long\
    \ int>::iterator, std::vector<long int>::iterator, sort_array(std::vector<long\
    \ int>)::__lambda0)'\n         std::sort(arr.begin(), arr.end(), [](long long\
    \ a, long long b) { return b - a; });\n                                      \
    \                                                   ^\n/tmp/tmp7c0mgg1o.cpp:25:89:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp7c0mgg1o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7c0mgg1o.cpp:25:89:\
    \ note:   candidate expects 2 arguments, 3 provided\n         std::sort(arr.begin(),\
    \ arr.end(), [](long long a, long long b) { return b - a; });\n              \
    \                                                                           ^\n\
    In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n               \
    \  from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n       \
    \          from /tmp/tmp7c0mgg1o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_Ran"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> sorted_arr(arr.size());\n    for (size_t i = 0;\
    \ i < arr.size(); i++) {\n        long ones = 0;\n        for (size_t j = 0; j\
    \ < arr.size(); j++) {\n            if (arr[j] == 1) {\n                ones++;\n\
    \            }\n        }\n        if (ones == 0) {\n            sorted_arr[i]\
    \ = arr[i];\n        } else {\n            sorted_arr[i] = ones;\n        }\n\
    \    }\n    long max_ones = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n\
    \        if (sorted_arr[i] > max_ones) {\n            max_ones = sorted_arr[i];\n\
    \        }\n    }\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (sorted_arr[i]\
    \ > max_ones) {\n            sorted_arr[i] = max_ones;\n        }\n    }\n   \
    \ return sorted_arr;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3i6wimx.cpp: In function 'int main()':\n/tmp/tmpm3i6wimx.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm3i6wimx.cpp:2:\n/tmp/tmpm3i6wimx.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpm3i6wimx.cpp:43:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpm3i6wimx.cpp:43:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpm3i6wimx.cpp:43:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpm3i6wimx.cpp:43:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpm3i6wimx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += i;\n    }\n    long long ones_count = ones;\n    long long ones_sum = 0;\n\
    \    for (long long i : arr) {\n        ones_sum += i;\n    }\n    long long ones_sum\
    \ = ones_sum / ones_count;\n    long long ones_sum2 = ones_sum * ones_sum;\n \
    \   long long ones_sum3 = ones_sum2 * ones_sum;\n    long long ones_sum4 = ones_sum3\
    \ * ones_sum;\n    long long ones_sum5 = ones_sum4 * ones_sum;\n    long long\
    \ ones_sum6 = ones_sum5 * ones_sum;\n    long long ones_sum7 = ones_sum6 * ones_sum;\n\
    \    long long ones_sum8 = ones_sum7 * ones_sum;\n    long long ones_sum9 = ones_sum8\
    \ * ones_sum;\n    long long ones_sum10 = ones_sum9 * ones_sum;\n    long long\
    \ ones_sum11 = ones_sum10 * ones_sum;\n    long long ones_sum12 = ones_sum11 *\
    \ ones_sum;\n    long long ones_sum13 = ones_sum12 * ones_sum;\n    long long\
    \ ones_sum14 = ones_sum13 * ones_sum;\n    long long ones_sum15 = ones_sum14 *\
    \ ones_sum;\n    long long ones_sum16 = ones_sum15 * ones_sum;\n    long long\
    \ ones_sum17 = ones_sum16 * ones_sum;\n    long long ones_sum18 = ones_sum17 *\
    \ ones_sum;\n    long long ones_sum19 = ones_sum18 * ones_sum;\n    long long\
    \ ones_sum20 = ones_sum19 * ones_sum;\n    long long ones_sum21 = ones_sum20 *\
    \ ones_sum;\n    long long ones_sum22 = ones_sum21 * ones_sum;\n    long long\
    \ ones_sum23 = ones_sum22 * ones_sum;\n    long long ones_sum24 = ones_sum23 *\
    \ ones_sum;\n    long long ones_sum25 = ones_sum24 * ones_sum;\n    long long\
    \ ones_sum26 = ones_sum25 * ones_sum;\n    long long ones_sum27 = ones_sum26\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgjvka9g5.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpgjvka9g5.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmpgjvka9g5.cpp:20:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : arr) {\n                        ^\n/tmp/tmpgjvka9g5.cpp:23:15:\
    \ error: redeclaration of 'long long int ones_sum'\n     long long ones_sum =\
    \ ones_sum / ones_count;\n               ^\n/tmp/tmpgjvka9g5.cpp:19:15: error:\
    \ 'long long int ones_sum' previously declared here\n     long long ones_sum =\
    \ 0;\n               ^\n/tmp/tmpgjvka9g5.cpp:50:1: error: expected ',' or ';'\
    \ before '}' token\n }\n ^\n/tmp/tmpgjvka9g5.cpp: In function 'int main()':\n\
    /tmp/tmpgjvka9g5.cpp:52:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgjvka9g5.cpp:2:\n/tmp/tmpgjvka9g5.cpp:53:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpgjvka9g5.cpp:53:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpgjvka9g5.cpp:53:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpgjvka9g5.cpp:53:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclos"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long int sum = 0;\n    for (long long int i : arr) {\n    \
    \    sum += i;\n    }\n    long long int ones = 0;\n    for (long long int i :\
    \ arr) {\n        ones += i;\n    }\n    long long int max = 0;\n    for (long\
    \ long int i : arr) {\n        max = std::max(max, i);\n    }\n    long long int\
    \ min = 0;\n    for (long long int i : arr) {\n        min = std::min(min, i);\n\
    \    }\n    long long int mid = sum / 2;\n    long long int midOnes = ones / 2;\n\
    \    long long int midMax = max / 2;\n    long long int midMin = min / 2;\n  \
    \  long long int midMid = (sum - ones) / 2;\n    long long int midMidOnes = (ones\
    \ - max) / 2;\n    long long int midMidMax = (max - min) / 2;\n    long long int\
    \ midMidMin = (min - mid) / 2;\n    long long int midMidMid = (sum - ones - max)\
    \ / 2;\n    long long int midMidOnes = (ones - max - min) / 2;\n    long long\
    \ int midMidMax = (max - min - mid) / 2;\n    long long int midMidMin = (min -\
    \ mid - mid) / 2;\n    long long int midMidMid = (sum - ones - max - min) / 2;\n\
    \    long long int midMidOnes = (ones - max - min - mid) / 2;\n    long long int\
    \ midMidMax = (max - min - mid - mid) / 2;\n    long long int midMidMin = (min\
    \ - mid - mid - mid) / 2;\n    long long int midMidMid = (sum - ones - max - min\
    \ - mid) / 2;\n    long long int midMidOnes = (ones - max - min - mid - mid) /\
    \ 2;\n    long long int midMidMax = (max - min - mid - mid - mid) / 2;\n    long\
    \ long int midMidMin = (min - mid - mid - mid - mid) / 2;\n    long long int midMidMid\
    \ = (sum - ones - max - min - mid - mid) / 2;\n    long long int midMidOnes =\
    \ (ones - max - min - mid - mid - mid) / 2;\n    long long int midMidMax = (max\
    \ - min - mid - mid - mid - mid) / 2;\n    long long int midMidMin = (min - mid\
    \ - mid - mid - mid - mid) / 2;\n    long long int midMid\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplujug1_z.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmplujug1_z.cpp:15:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmplujug1_z.cpp:19:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmplujug1_z.cpp:23:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmplujug1_z.cpp:27:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmplujug1_z.cpp:39:19: error: redeclaration of 'long\
    \ long int midMidOnes'\n     long long int midMidOnes = (ones - max - min) / 2;\n\
    \                   ^\n/tmp/tmplujug1_z.cpp:35:19: error: 'long long int midMidOnes'\
    \ previously declared here\n     long long int midMidOnes = (ones - max) / 2;\n\
    \                   ^\n/tmp/tmplujug1_z.cpp:40:19: error: redeclaration of 'long\
    \ long int midMidMax'\n     long long int midMidMax = (max - min - mid) / 2;\n\
    \                   ^\n/tmp/tmplujug1_z.cpp:36:19: error: 'long long int midMidMax'\
    \ previously declared here\n     long long int midMidMax = (max - min) / 2;\n\
    \                   ^\n/tmp/tmplujug1_z.cpp:41:19: error: redeclaration of 'long\
    \ long int midMidMin'\n     long long int midMidMin = (min - mid - mid) / 2;\n\
    \                   ^\n/tmp/tmplujug1_z.cpp:37:19: error: 'long long int midMidMin'\
    \ previously declared here\n     long long int midMidMin = (min - mid) / 2;\n\
    \                   ^\n/tmp/tmplujug1_z.cpp:42:19: error: redeclaration of 'long\
    \ long int midMidMid'\n     long long int midMidMid = (sum - ones - max - min)\
    \ / 2;\n                   ^\n/tmp/tmplujug1_z.cpp:38:19: error: 'long long int\
    \ midMidMid' previously declared here\n     long long int midMidMid = (sum - ones\
    \ - max) / 2;\n                   ^\n/tmp/tmplujug1_z.cpp:43:19: error: redeclaration\
    \ of 'long long int midMidOnes'\n     lon"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long ones = 0;\n    long long\
    \ zeros = 0;\n    long long max = 0;\n    for (long long i : arr) {\n        if\
    \ (i == 1) {\n            ones++;\n        } else {\n            zeros++;\n  \
    \      }\n        if (ones > zeros) {\n            max = i;\n        }\n    }\n\
    \    std::vector<long> result;\n    for (long long i : arr) {\n        if (i ==\
    \ 1) {\n            result.push_back(1);\n        } else {\n            result.push_back(0);\n\
    \        }\n    }\n    for (long long i = 0; i < result.size(); i++) {\n     \
    \   if (result[i] > max) {\n            std::swap(result[i], result[max]);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbz5yczb.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpvbz5yczb.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmpvbz5yczb.cpp:29:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : arr) {\n                        ^\n/tmp/tmpvbz5yczb.cpp:\
    \ In function 'int main()':\n/tmp/tmpvbz5yczb.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvbz5yczb.cpp:2:\n/tmp/tmpvbz5yczb.cpp:45:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpvbz5yczb.cpp:45:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpvbz5yczb.cpp:45:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpvbz5yczb.cpp:45:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvbz5yczb.cpp:45:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvbz5yczb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vect"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ans = 0;\n    for (long long i : arr) {\n        ans +=\
    \ i;\n    }\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += (i & 1);\n    }\n    long long dec = ones / ans;\n    long long rem = ones\
    \ - dec * ans;\n    std::vector<long> ans_list;\n    for (long long i : arr) {\n\
    \        if (i & 1) {\n            ans_list.push_back(rem);\n        } else {\n\
    \            ans_list.push_back(dec);\n        }\n    }\n    return ans_list;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgj6zt5m7.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpgj6zt5m7.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmpgj6zt5m7.cpp:19:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : arr) {\n                        ^\n/tmp/tmpgj6zt5m7.cpp:25:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ long i : arr) {\n                        ^\n/tmp/tmpgj6zt5m7.cpp: In function\
    \ 'int main()':\n/tmp/tmpgj6zt5m7.cpp:35:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = sort_array;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgj6zt5m7.cpp:2:\n/tmp/tmpgj6zt5m7.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpgj6zt5m7.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpgj6zt5m7.cpp:36:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpgj6zt5m7.cpp:36:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgj6zt5m7.cpp:36:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : arr) {\n        sum += i;\n    }\n    long long int ans = 0;\n\
    \    for (long long int i : arr) {\n        ans += (i & 1);\n    }\n    long long\
    \ int temp = 0;\n    for (long long int i : arr) {\n        temp += (i & 1);\n\
    \    }\n    long long int temp2 = 0;\n    for (long long int i : arr) {\n    \
    \    temp2 += (i & 1);\n    }\n    long long int temp3 = 0;\n    for (long long\
    \ int i : arr) {\n        temp3 += (i & 1);\n    }\n    long long int temp4 =\
    \ 0;\n    for (long long int i : arr) {\n        temp4 += (i & 1);\n    }\n  \
    \  long long int temp5 = 0;\n    for (long long int i : arr) {\n        temp5\
    \ += (i & 1);\n    }\n    long long int temp6 = 0;\n    for (long long int i :\
    \ arr) {\n        temp6 += (i & 1);\n    }\n    long long int temp7 = 0;\n   \
    \ for (long long int i : arr) {\n        temp7 += (i & 1);\n    }\n    long long\
    \ int temp8 = 0;\n    for (long long int i : arr) {\n        temp8 += (i & 1);\n\
    \    }\n    long long int temp9 = 0;\n    for (long long int i : arr) {\n    \
    \    temp9 += (i & 1);\n    }\n    long long int temp10 = 0;\n    for (long long\
    \ int i : arr) {\n        temp10 += (i & 1);\n    }\n    long long int temp11\
    \ = 0;\n    for (long long int i : arr) {\n        temp11 += (i & 1);\n    }\n\
    \    long long int temp12 = 0;\n    for (long long int i : arr) {\n        temp12\
    \ += (i & 1);\n    }\n    long long int temp13 = 0;\n    for (long long int i\
    \ : arr) {\n        temp13 += (i & 1);\n    }\n    long long int temp14 = 0;\n\
    \    for (long long int i : arr) {\n        temp14 += (i & 1);\n    }\n    long\
    \ long int temp15 = 0;\n    for (long long int i : arr) {\n        temp15 += (i\
    \ & 1);\n    }\n    long long int temp16 = 0;\n    for (long long int i : arr)\
    \ {\n        temp16 += (i & 1);\n    }\n    long long int temp17 = 0;\n    for\
    \ (long long int i : arr) {\n        temp17 += (i & 1);\n    }\n    long long\
    \ int temp18 = 0;\n    for (long long \n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcw9vn1y8.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpcw9vn1y8.cpp:16:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmpcw9vn1y8.cpp:20:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmpcw9vn1y8.cpp:24:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:28:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:32:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:36:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:40:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:44:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:48:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:52:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:56:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:60:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpcw9vn1y8.cpp:64:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long lon"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int temp = 0;\n    long long int count = 0;\n    long long int max = 0;\n  \
    \  for (long long int i = 0; i < arr.size(); i++) {\n        temp = arr[i];\n\
    \        sum += temp;\n        count += 1;\n        if (temp > max) {\n      \
    \      max = temp;\n        }\n    }\n    long long int ones = sum / count;\n\
    \    long long int zeros = sum % count;\n    long long int temp = ones;\n    long\
    \ long int temp2 = zeros;\n    long long int temp3 = ones;\n    long long int\
    \ temp4 = zeros;\n    long long int temp5 = ones;\n    long long int temp6 = zeros;\n\
    \    long long int temp7 = ones;\n    long long int temp8 = zeros;\n    long long\
    \ int temp9 = ones;\n    long long int temp10 = zeros;\n    long long int temp11\
    \ = ones;\n    long long int temp12 = zeros;\n    long long int temp13 = ones;\n\
    \    long long int temp14 = zeros;\n    long long int temp15 = ones;\n    long\
    \ long int temp16 = zeros;\n    long long int temp17 = ones;\n    long long int\
    \ temp18 = zeros;\n    long long int temp19 = ones;\n    long long int temp20\
    \ = zeros;\n    long long int temp21 = ones;\n    long long int temp22 = zeros;\n\
    \    long long int temp23 = ones;\n    long long int temp24 = zeros;\n    long\
    \ long int temp25 = ones;\n    long long int temp26 = zeros;\n    long long int\
    \ temp27 = ones;\n    long long int temp28 = zeros;\n    long long int temp29\
    \ = ones;\n    long long int temp30 = zeros;\n    long long int temp31 = ones;\n\
    \    long long int temp32 = zeros;\n    long long int temp33 = ones;\n    long\
    \ long int temp34 = zeros;\n    long long int temp35 = ones;\n    long long int\
    \ temp36 = zeros;\n    long long int temp37 = ones;\n    long long int temp38\
    \ = zeros;\n    long long int temp39 = ones;\n    long long int temp40 = zeros;\n\
    \    long long int temp41 = ones;\n    long long int temp42 = zeros;\n    long\
    \ long int temp43 = ones;\n    long long int \n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpna4n52jn.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpna4n52jn.cpp:29:19: error: redeclaration of 'long long int\
    \ temp'\n     long long int temp = ones;\n                   ^\n/tmp/tmpna4n52jn.cpp:16:19:\
    \ error: 'long long int temp' previously declared here\n     long long int temp\
    \ = 0;\n                   ^\n/tmp/tmpna4n52jn.cpp:73:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpna4n52jn.cpp: In function 'int main()':\n\
    /tmp/tmpna4n52jn.cpp:75:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpna4n52jn.cpp:2:\n/tmp/tmpna4n52jn.cpp:76:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpna4n52jn.cpp:76:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpna4n52jn.cpp:76:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpna4n52jn.cpp:76:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpna4n52jn.cpp:76:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpna4n52"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> res(arr.size());\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        long count = 0;\n        while (arr[i] & 1) count++;\n     \
    \   res[i] = count;\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5hqnfqwk.cpp: In function 'int main()':\n/tmp/tmp5hqnfqwk.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5hqnfqwk.cpp:2:\n/tmp/tmp5hqnfqwk.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp5hqnfqwk.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp5hqnfqwk.cpp:25:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp5hqnfqwk.cpp:25:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5hqnfqwk.cpp:25:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5hqnfqwk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Your code goes here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n     \
    \   count += 1;\n    }\n    long long int max = 0;\n    for (long long int i :\
    \ arr) {\n        if (i == 1) {\n            max = i;\n        }\n    }\n    long\
    \ long int temp = 0;\n    for (long long int i : arr) {\n        if (i == max)\
    \ {\n            temp = i;\n        }\n    }\n    long long int temp2 = 0;\n \
    \   for (long long int i : arr) {\n        if (i == temp) {\n            temp2\
    \ = i;\n        }\n    }\n    long long int temp3 = 0;\n    for (long long int\
    \ i : arr) {\n        if (i == temp2) {\n            temp3 = i;\n        }\n \
    \   }\n    long long int temp4 = 0;\n    for (long long int i : arr) {\n     \
    \   if (i == temp3) {\n            temp4 = i;\n        }\n    }\n    long long\
    \ int temp5 = 0;\n    for (long long int i : arr) {\n        if (i == temp4) {\n\
    \            temp5 = i;\n        }\n    }\n    long long int temp6 = 0;\n    for\
    \ (long long int i : arr) {\n        if (i == temp5) {\n            temp6 = i;\n\
    \        }\n    }\n    long long int temp7 = 0;\n    for (long long int i : arr)\
    \ {\n        if (i == temp6) {\n            temp7 = i;\n        }\n    }\n   \
    \ long long int temp8 = 0;\n    for (long long int i : arr) {\n        if (i ==\
    \ temp7) {\n            temp8 = i;\n        }\n    }\n    long long int temp9\
    \ = 0;\n    for (long long int i : arr) {\n        if (i == temp8) {\n       \
    \     temp9 = i;\n        }\n    }\n    long long int temp10 = 0;\n    for (long\
    \ long int i : arr) {\n        if (i == temp9) {\n            temp10 = i;\n  \
    \      }\n    }\n    long long int temp11 = 0;\n    for (long long int i : arr)\
    \ {\n        if (i == temp10) {\n            temp11 = i;\n        }\n    }\n \
    \   long long int temp12 = 0;\n    for (long long int i : arr) {\n        if (i\
    \ == temp11) {\n            temp12 = i;\n        }\n    }\n    long long int temp13\
    \ = 0;\n    for (long long int i : arr) {\n        if (i == temp12) {\n      \
    \      temp13 = i;\n        }\n    }\n    long long int temp14 = 0;\n    for (long\
    \ long int i : arr) {\n        if (i == temp13) {\n            temp14 = i;\n \
    \       }\n    }\n    long long int temp15 = 0;\n    for (long long int i : arr)\
    \ {\n        if (i == \n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0t3r0f6o.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp0t3r0f6o.cpp:17:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmp0t3r0f6o.cpp:22:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmp0t3r0f6o.cpp:28:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:34:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:40:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:46:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:52:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:58:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:64:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:70:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:76:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:82:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0t3r0f6o.cpp:88:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long lon"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> sorted_arr;\n    long ones = 0;\n    long zeros\
    \ = 0;\n    for (auto i : arr) {\n        if (i == 1) {\n            ones++;\n\
    \        } else {\n            zeros++;\n        }\n    }\n    if (ones > zeros)\
    \ {\n        std::sort(arr.begin(), arr.end(), [](long a, long b) {\n        \
    \    return a > b;\n        });\n        sorted_arr.insert(sorted_arr.end(), arr.begin(),\
    \ arr.end());\n    } else {\n        std::sort(arr.begin(), arr.end(), [](long\
    \ a, long b) {\n            return a < b;\n        });\n        sorted_arr.insert(sorted_arr.end(),\
    \ arr.begin(), arr.end());\n    }\n    return sorted_arr;\n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkaq5z042.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpkaq5z042.cpp:17:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmpkaq5z042.cpp:24:5: error: expected\
    \ ';' before 'if'\n     if (ones > zeros) {\n     ^\n/tmp/tmpkaq5z042.cpp:24:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpkaq5z042.cpp:24:5: error:\
    \ expected ';' before 'if'\n/tmp/tmpkaq5z042.cpp:24:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpkaq5z042.cpp:24:5: error: expected ')' before 'if'\n/tmp/tmpkaq5z042.cpp:27:9:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n         });\n         ^\n/tmp/tmpkaq5z042.cpp:27:10: error: no\
    \ matching function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, sort_array(std::vector<long int>)::__lambda0)'\n         });\n\
    \          ^\n/tmp/tmpkaq5z042.cpp:27:10: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpkaq5z042.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkaq5z042.cpp:27:10:\
    \ note:   candidate expects 2 arguments, 3 provided\n         });\n          ^\n\
    In file included from /usr/include/c++/4.8.2/algorithm:62:0,\n               \
    \  from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n       \
    \          from /tmp/tmpkaq5z042.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ans = 0;\n    for (long long i : arr) {\n        ans +=\
    \ i;\n    }\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += i & 1;\n    }\n    long long dec = ans - ones;\n    long long rev = dec;\n\
    \    for (long long i : arr) {\n        rev = rev * 10 + i & 1;\n    }\n    std::vector<long>\
    \ ans_list;\n    long long i = rev;\n    while (i > 0) {\n        ans_list.push_back(i);\n\
    \        i /= 10;\n    }\n    std::sort(ans_list.begin(), ans_list.end());\n \
    \   return ans_list;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7fmu37v.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpc7fmu37v.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmpc7fmu37v.cpp:19:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : arr) {\n                        ^\n/tmp/tmpc7fmu37v.cpp:24:24:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ long i : arr) {\n                        ^\n/tmp/tmpc7fmu37v.cpp: In function\
    \ 'int main()':\n/tmp/tmpc7fmu37v.cpp:37:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = sort_array;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc7fmu37v.cpp:2:\n/tmp/tmpc7fmu37v.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpc7fmu37v.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpc7fmu37v.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpc7fmu37v.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpc7fmu37v.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Your code goes here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    long long int max = 0;\n    long long int min = 0;\n   \
    \ for (long long int i : arr) {\n        sum += i;\n        count += 1;\n    \
    \    if (i > max) {\n            max = i;\n        }\n        if (i < min) {\n\
    \            min = i;\n        }\n    }\n    long long int mid = sum / count;\n\
    \    long long int mid1 = sum % count;\n    long long int mid2 = sum / count;\n\
    \    long long int mid3 = sum % count;\n    long long int mid4 = sum / count;\n\
    \    long long int mid5 = sum % count;\n    long long int mid6 = sum / count;\n\
    \    long long int mid7 = sum % count;\n    long long int mid8 = sum / count;\n\
    \    long long int mid9 = sum % count;\n    long long int mid10 = sum / count;\n\
    \    long long int mid11 = sum % count;\n    long long int mid12 = sum / count;\n\
    \    long long int mid13 = sum % count;\n    long long int mid14 = sum / count;\n\
    \    long long int mid15 = sum % count;\n    long long int mid16 = sum / count;\n\
    \    long long int mid17 = sum % count;\n    long long int mid18 = sum / count;\n\
    \    long long int mid19 = sum % count;\n    long long int mid20 = sum / count;\n\
    \    long long int mid21 = sum % count;\n    long long int mid22 = sum / count;\n\
    \    long long int mid23 = sum % count;\n    long long int mid24 = sum / count;\n\
    \    long long int mid25 = sum % count;\n    long long int mid26 = sum / count;\n\
    \    long long int mid27 = sum % count;\n    long long int mid28 = sum / count;\n\
    \    long long int mid29 = sum % count;\n    long long int mid30 = sum / count;\n\
    \    long long int mid31 = sum % count;\n    long long int mid32 = sum / count;\n\
    \    long long int mid33 = sum % count;\n    long long int mid34 = sum / count;\n\
    \    long long int mid35 = sum % count;\n    long long int mid36 = sum / count;\n\
    \    long long int mid37 = sum % count;\n    long long int mid38 = sum / count;\n\
    \    long long int mid39 = sum % count;\n    long long int mid40 = sum / count;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprs15ce77.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmprs15ce77.cpp:19:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmprs15ce77.cpp: In function 'int main()':\n/tmp/tmprs15ce77.cpp:72:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprs15ce77.cpp:2:\n/tmp/tmprs15ce77.cpp:73:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmprs15ce77.cpp:73:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmprs15ce77.cpp:73:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmprs15ce77.cpp:73:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmprs15ce77.cpp:73:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprs15ce77.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Your code goes here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n     \
    \   count += 1;\n    }\n    long long int mod = sum % 10;\n    long long int temp\
    \ = sum / 10;\n    long long int temp2 = temp % 10;\n    long long int temp3 =\
    \ temp / 10;\n    long long int temp4 = temp3 % 10;\n    long long int temp5 =\
    \ temp3 / 10;\n    long long int temp6 = temp5 % 10;\n    long long int temp7\
    \ = temp5 / 10;\n    long long int temp8 = temp7 % 10;\n    long long int temp9\
    \ = temp7 / 10;\n    long long int temp10 = temp9 % 10;\n    long long int temp11\
    \ = temp9 / 10;\n    long long int temp12 = temp11 % 10;\n    long long int temp13\
    \ = temp11 / 10;\n    long long int temp14 = temp13 % 10;\n    long long int temp15\
    \ = temp13 / 10;\n    long long int temp16 = temp15 % 10;\n    long long int temp17\
    \ = temp15 / 10;\n    long long int temp18 = temp17 % 10;\n    long long int temp19\
    \ = temp17 / 10;\n    long long int temp20 = temp18 % 10;\n    long long int temp21\
    \ = temp18 / 10;\n    long long int temp22 = temp21 % 10;\n    long long int temp23\
    \ = temp21 / 10;\n    long long int temp24 = temp23 % 10;\n    long long int temp25\
    \ = temp23 / 10;\n    long long int temp26 = temp25 % 10;\n    long long int temp27\
    \ = temp25 / 10;\n    long long int temp28 = temp27 % 10;\n    long long int temp29\
    \ = temp27 / 10;\n    long long int temp30 = temp28 % 10;\n    long long int temp31\
    \ = temp28 / 10;\n    long long int temp32 = temp31 % 10;\n    long long int temp33\
    \ = temp31 / 10;\n    long long int temp34 = temp33 % 10;\n    long long int temp35\
    \ = temp33 / 10;\n    long long int temp36 = temp35 % 10;\n    long long int temp37\
    \ = temp35 / 10;\n    long long int temp38 = temp37 % 10;\n    long long int temp39\
    \ = temp37 / 10;\n    long long int temp40 = temp38 % 10;\n\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppgq9bp7z.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmppgq9bp7z.cpp:17:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmppgq9bp7z.cpp: In function 'int main()':\n/tmp/tmppgq9bp7z.cpp:65:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppgq9bp7z.cpp:2:\n/tmp/tmppgq9bp7z.cpp:66:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmppgq9bp7z.cpp:66:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmppgq9bp7z.cpp:66:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmppgq9bp7z.cpp:66:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppgq9bp7z.cpp:66:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmppgq9bp7z.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long int sum = 0;\n    for (long long int i : arr) {\n    \
    \    sum += i;\n    }\n    long long int max = 0;\n    for (long long int i :\
    \ arr) {\n        if (i > max) {\n            max = i;\n        }\n    }\n   \
    \ std::vector<long> ans;\n    for (long long int i : arr) {\n        if (i ==\
    \ max) {\n            ans.push_back(i);\n        }\n    }\n    for (long long\
    \ int i : arr) {\n        if (i != max) {\n            long long int count = 0;\n\
    \            for (long long int j : ans) {\n                if (i == j) {\n  \
    \                  count++;\n                }\n            }\n            long\
    \ long int temp = count * i;\n            ans.push_back(temp);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkizv62js.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpkizv62js.cpp:15:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmpkizv62js.cpp:19:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmpkizv62js.cpp:25:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpkizv62js.cpp:30:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmpkizv62js.cpp:33:36: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n             for (long long int j : ans) {\n\
    \                                    ^\n/tmp/tmpkizv62js.cpp: In function 'int\
    \ main()':\n/tmp/tmpkizv62js.cpp:45:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkizv62js.cpp:2:\n/tmp/tmpkizv62js.cpp:46:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpkizv62js.cpp:46:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpkizv62js.cpp:46:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort a vector of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : arr) {\n        sum += i;\n    }\n    long long int ans = 0;\n\
    \    for (long long int i : arr) {\n        ans += (i & 1);\n    }\n    long long\
    \ int temp = 0;\n    for (long long int i : arr) {\n        temp += (i & 1);\n\
    \    }\n    long long int temp2 = temp;\n    for (long long int i : arr) {\n \
    \       temp2 += (i & 1);\n    }\n    long long int temp3 = temp2;\n    for (long\
    \ long int i : arr) {\n        temp3 += (i & 1);\n    }\n    long long int temp4\
    \ = temp3;\n    for (long long int i : arr) {\n        temp4 += (i & 1);\n   \
    \ }\n    long long int temp5 = temp4;\n    for (long long int i : arr) {\n   \
    \     temp5 += (i & 1);\n    }\n    long long int temp6 = temp5;\n    for (long\
    \ long int i : arr) {\n        temp6 += (i & 1);\n    }\n    long long int temp7\
    \ = temp6;\n    for (long long int i : arr) {\n        temp7 += (i & 1);\n   \
    \ }\n    long long int temp8 = temp7;\n    for (long long int i : arr) {\n   \
    \     temp8 += (i & 1);\n    }\n    long long int temp9 = temp8;\n    for (long\
    \ long int i : arr) {\n        temp9 += (i & 1);\n    }\n    long long int temp10\
    \ = temp9;\n    for (long long int i : arr) {\n        temp10 += (i & 1);\n  \
    \  }\n    long long int temp11 = temp10;\n    for (long long int i : arr) {\n\
    \        temp11 += (i & 1);\n    }\n    long long int temp12 = temp11;\n    for\
    \ (long long int i : arr) {\n        temp12 += (i & 1);\n    }\n    long long\
    \ int temp13 = temp12;\n    for (long long int i : arr) {\n        temp13 += (i\
    \ & 1);\n    }\n    long long int temp14 = temp13;\n    for (long long int i :\
    \ arr) {\n        temp14 += (i & 1);\n    }\n    long long int temp15 = temp14;\n\
    \    for (long long int i : arr) {\n        temp15 += (i & 1);\n    }\n    long\
    \ long int temp16 = temp15;\n    for (long long int i : arr) {\n        temp16\
    \ += (i & 1);\n    }\n    long long int temp17 = temp16;\n    for (long long int\
    \ i \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph4m11rag.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmph4m11rag.cpp:16:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmph4m11rag.cpp:20:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmph4m11rag.cpp:24:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:28:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:32:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:36:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:40:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:44:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:48:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:52:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:56:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:60:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmph4m11rag.cpp:64:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long lon"
  stdout: ''
