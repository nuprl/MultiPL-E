language: cpp
name: HumanEval_124_valid_date
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    // Write your code here\n    \n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdl9jlxa5: /tmp/tmpdl9jlxa5.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::string date_s[] = date.split(\"-\");\n    int days_s[] = {31,30,29,28,31,30,31,30,31,30,31};\n\
    \    int months_s[] = {0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years_s[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_m[] = {31,30,29,28,31,30,31,30,31,30,31};\n    int months_m[] =\
    \ {0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years_m[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_y[] = {31,30,29,28,31,30,31,30,31,30,31};\n    int months_y[] =\
    \ {0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years_y[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_d[] = {31,30,29,28,31,30,31,30,31,30,31};\n    int months_d[] =\
    \ {0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years_d[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_ms[] = {31,30,29,28,31,30,31,30,31,30,31};\n    int months_ms[]\
    \ = {0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years_ms[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_ys[] = {31,30,29,28,31,30,31,30,31,30,31};\n    int months_ys[]\
    \ = {0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years_ys[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_ds[] = {31,30,29,28,31,30,31,30,31,30,31};\n    int months_ds[]\
    \ = {0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int years_ds[] = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_ms[] = {31,30,29,28,\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ex65c9o.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp4ex65c9o.cpp:22:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   22 |     std::string date_s[] = date.split(\"-\");\n      |             \
    \                    ^~~~~\n/tmp/tmp4ex65c9o.cpp:44:9: error: redeclaration of\
    \ \u2018int days_ms []\u2019\n   44 |     int days_ms[] = {31,30,29,28,\n    \
    \  |         ^~~~~~~\n/tmp/tmp4ex65c9o.cpp:35:9: note: \u2018int days_ms [11]\u2019\
    \ previously declared here\n   35 |     int days_ms[] = {31,30,29,28,31,30,31,30,31,30,31};\n\
    \      |         ^~~~~~~\n/tmp/tmp4ex65c9o.cpp:64:1: error: expected \u2018}\u2019\
    \ at end of input\n   64 | }\n      | ^\n/tmp/tmp4ex65c9o.cpp:20:35: note: to\
    \ match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n    \
    \  |                                   ^\n/tmp/tmp4ex65c9o.cpp:64:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   64 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n \
    \           return false;\n        }\n    }\n    if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n      \
    \      return false;\n        }\n    }\n    if (month == 1) {\n        if (day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    if (month\
    \ == 3 && day == 31) {\n        return false;\n    }\n    if (month == 5 && day\
    \ == 31) {\n        return false;\n    }\n    if (month == 7 && day == 31) {\n\
    \        return false;\n    }\n    if (month == 8 && day == 31) {\n        return\
    \ false;\n    }\n    if (month == 10 && day == 31) {\n        return false;\n\
    \    }\n    if (month == 12 && day == 31) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkbiccyd4: /tmp/tmpkbiccyd4.cpp:71: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Your code here\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4l8th303: /tmp/tmp4l8th303.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 1000 || year > 9999) {\n      \
    \  valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_f536bgk: /tmp/tmp_f536bgk.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    // Your code goes here\n    \n    return valid;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3qoiz8do: /tmp/tmp3qoiz8do.cpp:29: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    if (date.empty()) {\n        valid = false;\n  \
    \  } else {\n        valid = true;\n    }\n    int day;\n    int month;\n    int\
    \ year;\n    std::stringstream ss;\n    ss << date;\n    ss >> day >> month >>\
    \ year;\n    if (day < 1 || day > 31) {\n        valid = false;\n    }\n    if\
    \ (month < 1 || month > 12) {\n        valid = false;\n    }\n    if (year < 1\
    \ || year > 9999) {\n        valid = false;\n    }\n    return valid;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgo4gmjmg: /tmp/tmpgo4gmjmg.cpp:47: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::string months[12] = {\"\
    Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"\
    , \"Oct\", \"Nov\", \"Dec\"};\n    std::string days[31] = {\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"\
    14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\",\
    \ \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string\
    \ months[12] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"\
    , \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string days[31] = {\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n    std::string months[12] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"\
    , \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string\
    \ days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n    std::string months[12] = {\"Jan\", \"Feb\", \"Mar\", \"\
    Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\
    };\n    std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"\
    , \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\"};\n    std::string months[12] = {\"Jan\", \"\
    Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\"\
    , \"Nov\", \"Dec\"};\n    std::string days[31] = {\"1\", \"2\", \"3\", \"4\",\
    \ \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"\
    15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\",\
    \ \"25\", \"26\", \"27\", \"28\", \"29\", \"\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2za7k8uz.cpp:34:194: warning: missing terminating \" character\n\
    \   34 |     std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"\n      |                                        \
    \                                                                            \
    \                                                                            \
    \  ^\n/tmp/tmp2za7k8uz.cpp:34:194: error: missing terminating \" character\n/tmp/tmp2za7k8uz.cpp:\
    \ In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp2za7k8uz.cpp:27:17:\
    \ error: redeclaration of \u2018std::string months [12]\u2019\n   27 |     std::string\
    \ months[12] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"\
    , \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n      |                 ^~~~~~\n\
    /tmp/tmp2za7k8uz.cpp:25:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   25 |     std::string months[12] = {\"Jan\", \"Feb\", \"Mar\"\
    , \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\
    };\n      |                 ^~~~~~\n/tmp/tmp2za7k8uz.cpp:28:17: error: redeclaration\
    \ of \u2018std::string days [31]\u2019\n   28 |     std::string days[31] = {\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n      |                 ^~~~\n/tmp/tmp2za7k8uz.cpp:26:17: note: \u2018std::string\
    \ days [31]\u2019 previously declared here\n   26 |     std::string days[31] =\
    \ {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"\
    , \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n      |                 ^~~~\n/tmp/tmp2za7k8uz.cpp:29:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   29 |     std::string months[12] =\
    \ {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"\
    Sep\", \"Oct\", \"Nov\", \"Dec\"};\n      |                 ^~~~~~\n/tmp/tmp2za7k8uz.cpp:25:17:\
    \ note: \u2018std::string months [12]\u2019 pr"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::string date_str = date;\n    size_t pos = date_str.find_first_of(\"\
    -\");\n    std::string month = date_str.substr(0, pos);\n    std::string day =\
    \ date_str.substr(pos + 1, 2);\n    std::string year = date_str.substr(pos + 3,\
    \ 4);\n    \n    int days_in_month[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31 };\n    int days_in_year[] = { 0, 31, 59, 90, 120, 151, 181, 212,\
    \ 243, 273, 304, 334 };\n    int days_in_century[] = { 0, 31, 60, 91, 121, 152,\
    \ 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium[] = { 0, 31, 60,\
    \ 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_century_plus_millennium[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century_plus_millennium[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century_plus_century[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century_plus_century_plus_millennium[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century_plus_century_plus_century[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century_plus_century_plus_century_plus_millennium[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century_plus_century_plus_century_plus_century[]\
    \ = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };\n    int days_in_millennium_plus_century_plus_century_plus_century_plus_\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ryic6sx.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_ryic6sx.cpp:41:1: error: expected initializer before \u2018}\u2019\
    \ token\n   41 | }\n      | ^\n/tmp/tmp_ryic6sx.cpp:41:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ==\
    \ 2 && day > 29) return false;\n    if (month == 4 && day > 30) return false;\n\
    \    if (month == 6 && day > 31) return false;\n    if (month == 9 && day > 30)\
    \ return false;\n    if (month == 11 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 31) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 31) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 31)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 31) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 31) return false;\n    if (month\
    \ == 7 && day > \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnnr8dm46.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpnnr8dm46.cpp:81:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   81 | }\n      | ^\n/tmp/tmpnnr8dm46.cpp:80:28: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   80 |     if (month == 7 && day\
    \ >\n      |        ~                   ^\n      |                           \
    \ )\n   81 | }\n      | ~                           \n/tmp/tmpnnr8dm46.cpp:81:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   81 | }\n \
    \     | ^\n/tmp/tmpnnr8dm46.cpp:81:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   81 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    std::string date_str = date;\n    std::size_t pos\
    \ = 0;\n    std::string months[12] = {\"01\", \"03\", \"05\", \"07\", \"08\",\
    \ \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string days[31]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\", \"24\", \"27\", \"30\",\
    \ \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\", \"54\", \"57\", \"60\"\
    , \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\", \"84\", \"87\", \"90\"\
    , \"93\", \"96\", \"99\", \"02\"};\n    std::string years[12] = {\"2000\", \"\
    2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\",\
    \ \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n   \
    \ std::string month_string = date_str.substr(pos, 2);\n    pos += 2;\n    std::string\
    \ day_string = date_str.substr(pos, 2);\n    pos += 2;\n    std::string year_string\
    \ = date_str.substr(pos, 4);\n    pos += 4;\n    int month = 0;\n    int day =\
    \ 0;\n    int year = 0;\n    bool is_valid_month = false;\n    bool is_valid_day\
    \ = false;\n    bool is_valid_year = false;\n    for (int i = 0; i < 12; i++)\
    \ {\n        if (months[i] == month_string) {\n            month = i;\n      \
    \      is_valid_month = true;\n        }\n    }\n    for (int i = 0; i < 31; i++)\
    \ {\n        if (days[i] == day_string) {\n            day = i;\n            is_valid_day\
    \ = true;\n        }\n    }\n    for (int i = 0; i < 12; i++) {\n        if (years[i]\
    \ == year_string) {\n            year = i;\n            is_valid_year = true;\n\
    \        }\n    }\n    if (is_valid_month == true && is_valid_day == true && is_valid_year\
    \ == true) {\n        if (month < 1 || month > 12) {\n            valid = false;\n\
    \        }\n        if (day < 1 || day > 31) {\n            valid = false;\n \
    \       }\n        if (year < 2000 || year > 2030) {\n            valid = false;\n\
    \        }\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpthc2wjo2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpthc2wjo2.cpp:26:285: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   26 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\"\
    , \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\"\
    , \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\"\
    , \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"};\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               ^\n/tmp/tmpthc2wjo2.cpp:27:284:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   27 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n      |                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    bool valid = true;\n    \n    std::string months[12] = {\n        \"\
    January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"\
    \n    };\n    \n    std::string days[31] = {\n        \"31\", \"30\", \"29\"\n\
    \    };\n    \n    std::string years[12] = {\n        \"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\"\
    , \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\"\
    , \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\"\
    , \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\"\
    , \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\"\
    , \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\"\
    , \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\"\
    , \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\"\
    , \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\"\
    , \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\"\
    , \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\"\
    , \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\"\
    , \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\"\
    , \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\", \"2146\"\
    , \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\", \"2154\"\
    , \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"2161\", \"2162\"\
    , \"2163\", \"2164\", \"2165\", \"216\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyjrl0yq.cpp:34:1337: warning: missing terminating \" character\n\
    \   34 |         \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"\
    2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\
    \ \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"\
    , \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\"\
    , \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\"\
    , \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\"\
    , \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\"\
    , \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\"\
    , \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\"\
    , \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\"\
    , \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\"\
    , \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\"\
    , \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\"\
    , \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\"\
    , \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\"\
    , \"2142\", \"2143\", \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\"\
    , \"2150\", \"2151\", \"2152\", \"2153\", \"2154\", \"2155\", \"2156\", \"2157\"\
    , \"2158\", \"2159\", \"2160\", \"2161\", \"2162\", \"2163\", \"2164\", \"2165\"\
    , \"216\n      |                                                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                            "
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (year < 1000 || year > 9999) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpe6e6_svs: /tmp/tmpe6e6_svs.cpp:41: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31 || month < 1 || month > 12 || year < 1000 || year > 9999) {\n        valid\
    \ = false;\n    } else {\n        if (month == 2) {\n            if (day > 29)\
    \ {\n                valid = false;\n            }\n        } else {\n       \
    \     if (day > 30) {\n                valid = false;\n            }\n       \
    \ }\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcnn6_euo: /tmp/tmpcnn6_euo.cpp:46: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"18\", \"21\", \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\"\
    , \"45\", \"48\", \"51\", \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\"\
    , \"75\", \"78\", \"81\", \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n    int daysInMonth[12] = { 31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31 };\n    int months[12] = { 0, 31, 60, 90, 120,\
    \ 151, 181, 212, 243, 273, 304, 334, 365, 395, 425, 465, 495, 523, 554, 587, 621,\
    \ 659, 698, 740, 780, 821, 871, 912, 944, 974, 1004, 1036, 1066, 1097, 1127, 1155,\
    \ 1186, 1216, 1247, 1285, 1316, 1347, 1375, 1416, 1447, 1485, 1516, 1547, 1585,\
    \ 1616, 1647, 1685, 1716, 1747, 1785, 1816, 1847, 1885 };\n    int days[12] =\
    \ { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int years[12] =\
    \ { 0, 31, 60, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365, 395, 425, 465,\
    \ 495, 523, 554, 587, 621, 659, 698, 740, 780, 821, 871, 912, 944, 974, 1004,\
    \ 1036, 1066, 1097, 1127, 1155, 1186, 1216, 1247, 1285, 1316, 1347, 1375, 1416,\
    \ 1447, 1485, 1516, 1547, 1585, 1616, 1647, 1685, 1716, 1747, 1785, 1816, 1847,\
    \ 1885 };\n    int month = 0;\n    int day = 0;\n    int year = 0;\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk3vonbg8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpk3vonbg8.cpp:22:285: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   22 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\"\
    , \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\"\
    , \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\"\
    , \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"};\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               ^\n/tmp/tmpk3vonbg8.cpp:23:284:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n      |                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        ^\n/tmp/tmpk3vonbg8.cpp:25:9: error:\
    \ conflicting declaration \u2018int months [12]\u2019\n   25 |     int months[12]\
    \ = { 0, 31, 60, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365, 395, 425, 465,\
    \ 495, 523, 554, 587, 621, 659, 698, 740, 780, 821, 871, 912, 944, 974, 1004,\
    \ 1036, 1066, 1097, 1127, 1155, 1186, 1216, 1247, 1285, 1316, 1347, 1375, 1416,\
    \ 1447, 1485, 1516, 1547, 1585, 1616, 1647, 1685, 1716, 1747, 1785, 1816, 1847,\
    \ 1885 };\n      |         ^~~~~~\n/tmp/tmpk3vonbg8.cpp:21:17: note: previous\
    \ declaration as \u2018std::string months [12"
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    ,\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"\
    December\"\n    };\n    std::string days[12] = {\n        \"Sunday\", \"Monday\"\
    , \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n    };\n\
    \    std::string years[12] = {\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\n    };\n    int day;\n\
    \    int month;\n    int year;\n    int daysInMonth;\n    bool valid = false;\n\
    \    std::stringstream ss;\n    ss << date;\n    ss >> day >> month >> year;\n\
    \    daysInMonth = days[month - 1].length();\n    if (month < 1 || month > 12)\
    \ {\n        valid = false;\n    } else {\n        if (day < 1 || day > daysInMonth)\
    \ {\n            valid = false;\n        } else {\n            if (year < 0 ||\
    \ year > 12) {\n                valid = false;\n            } else {\n       \
    \         valid = true;\n            }\n        }\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_znu57f.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp4_znu57f.cpp:30:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   30 |\
    \     };\n      |     ^\n"
  stdout: ''
  timestamp: 1660133342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbfik140y: /tmp/tmpbfik140y.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    int\
    \ days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[12]\
    \ = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int daysInMonth[12]\
    \ = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int year;\n    int\
    \ month;\n    int day;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth;\n    int daysInYear;\n\
    \    int daysInMonth;\n    int daysInYear;\n    int daysInMonth\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmz8hq0a.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpgmz8hq0a.cpp:23:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   23 |     int months[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31};\n      |         ^~~~~~\n/tmp/tmpgmz8hq0a.cpp:21:17: note:\
    \ previous declaration as \u2018std::string months [12]\u2019\n   21 |     std::string\
    \ months[12] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    };\n      |                 ^~~~~~\n/tmp/tmpgmz8hq0a.cpp:24:77: error: too many\
    \ initializers for \u2018int [12]\u2019\n   24 |     int daysInMonth[12] = {0,\
    \ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n      |                  \
    \                                                           ^\n/tmp/tmpgmz8hq0a.cpp:29:9:\
    \ error: conflicting declaration \u2018int daysInMonth\u2019\n   29 |     int\
    \ daysInMonth;\n      |         ^~~~~~~~~~~\n/tmp/tmpgmz8hq0a.cpp:24:9: note:\
    \ previous declaration as \u2018int daysInMonth [12]\u2019\n   24 |     int daysInMonth[12]\
    \ = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n      |         ^~~~~~~~~~~\n\
    /tmp/tmpgmz8hq0a.cpp:30:9: error: redeclaration of \u2018int daysInYear\u2019\n\
    \   30 |     int daysInYear;\n      |         ^~~~~~~~~~\n/tmp/tmpgmz8hq0a.cpp:28:9:\
    \ note: \u2018int daysInYear\u2019 previously declared here\n   28 |     int daysInYear;\n\
    \      |         ^~~~~~~~~~\n/tmp/tmpgmz8hq0a.cpp:31:9: error: conflicting declaration\
    \ \u2018int daysInMonth\u2019\n   31 |     int daysInMonth;\n      |         ^~~~~~~~~~~\n\
    /tmp/tmpgmz8hq0a.cpp:24:9: note: previous declaration as \u2018int daysInMonth\
    \ [12]\u2019\n   24 |     int daysInMonth[12] = {0, 31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31};\n      |         ^~~~~~~~~~~\n/tmp/tmpgmz8hq0a.cpp:32:9:\
    \ error: redeclaration of \u2018int daysInYear\u2019\n   32 |     int daysInYear;\n\
    \      |         ^~~~~~~~~~\n/tmp/tmpgmz8hq0a.cpp:28:9: note: \u2018int daysInYear\u2019\
    \ previously declared here\n   28 |     int daysInYear;\n      |         ^~~~~~~~~~\n\
    /tmp/tmpgmz8hq0a.cpp:33:9: error: conflicting declaration \u2018int daysI"
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\"\
    , \"31\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\"\
    , \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\"\
    , \"23\", \"25\", \"27\", \"29\", \"31\"};\n    std::string years[12] = {\"2000\"\
    , \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\"\
    , \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"\
    };\n    std::string month;\n    std::string day;\n    std::string year;\n    int\
    \ daysInMonth = 0;\n    int daysInYear = 0;\n    int daysInYear2 = 0;\n    int\
    \ daysInYear3 = 0;\n    int daysInYear4 = 0;\n    int daysInYear5 = 0;\n    int\
    \ daysInYear6 = 0;\n    int daysInYear7 = 0;\n    int daysInYear8 = 0;\n    int\
    \ daysInYear9 = 0;\n    int daysInYear10 = 0;\n    int daysInYear11 = 0;\n   \
    \ int daysInYear12 = 0;\n    int daysInYear13 = 0;\n    int daysInYear14 = 0;\n\
    \    int daysInYear15 = 0;\n    int daysInYear16 = 0;\n    int daysInYear17 =\
    \ 0;\n    int daysInYear18 = 0;\n    int daysInYear19 = 0;\n    int daysInYear20\
    \ = 0;\n    int daysInYear21 = 0;\n    int daysInYear22 = 0;\n    int daysInYear23\
    \ = 0;\n    int daysInYear24 = 0;\n    int daysInYear\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjvqiz9au.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjvqiz9au.cpp:22:555: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   22 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\"\
    , \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\"\
    , \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"\
    , \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\
    , \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\"\
    , \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\"\
    , \"29\", \"31\"};\n      |                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 ^\n/tmp/tmpjvqiz9au.cpp:23:356:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n      |      \
    \                                                                            \
    \                                                                            \
    \                                                "
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    bool valid = true;\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmch7fs5c: /tmp/tmpmch7fs5c.cpp:278: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"0123456789\"\
    ));\n    date_str = date_str.substr(date_str.find_first_not_of(\"-/\"));\n   \
    \ date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n    date_str\
    \ = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str = date_str.substr(0,\
    \ date_str.find_first_not_of(\"-\"));\n    date_str = date_str.substr(date_str.find_first_not_of(\"\
    /\"));\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n\
    \    date_str = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str\
    \ = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n    date_str = date_str.substr(date_str.find_first_not_of(\"\
    /\"));\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n\
    \    date_str = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str\
    \ = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n    date_str = date_str.substr(date_str.find_first_not_of(\"\
    /\"));\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n\
    \    date_str = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str\
    \ = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n    date_str = date_str.substr(date_str.find_first_not_of(\"\
    /\"));\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n\
    \    date_str = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str\
    \ = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n    date_str = date_str.substr(date_str.find_first_not_of(\"\
    /\"));\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n\
    \    date_str = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str\
    \ = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n    date_str = date_str.substr(date_str.find_first_not_of(\"\
    /\"));\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n\
    \    date_str = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str\
    \ = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n    date_str = date_str.substr(date_str.find_first_not_of(\"\
    /\"));\n    date_str = date_str.substr(0, date_str.find_first_not_of(\"-\"));\n\
    \    date_str = date_str.substr(date_str.find_first_not_of(\"/\"));\n    date_str\
    \ = date_str.substr(0, date_\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpedveq941.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpedveq941.cpp:54:35: error: \u2018date_\u2019 was not declared in this\
    \ scope; did you mean \u2018date\u2019?\n   54 |     date_str = date_str.substr(0,\
    \ date_\n      |                                   ^~~~~\n      |            \
    \                       date\n/tmp/tmpedveq941.cpp:55:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    // Write your code here\n    int day;\n    int month;\n    int year;\n  \
    \  std::stringstream ss;\n    ss << date;\n    ss >> day >> month >> year;\n \
    \   if (day < 1 || day > 31) {\n        valid = false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        valid = false;\n    }\n    if (month == 2 && day\
    \ > 29) {\n        valid = false;\n    }\n    if (month == 4 && day > 30) {\n\
    \        valid = false;\n    }\n    if (month == 6 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 9 && day > 30) {\n        valid = false;\n\
    \    }\n    if (month == 11 && day > 31) {\n        valid = false;\n    }\n  \
    \  if (month == 1 && day > 31) {\n        valid = false;\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwfs_4099: /tmp/tmpwfs_4099.cpp:57: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    std::stringstream ss;\n    ss << date;\n    std::string\
    \ month;\n    std::string day;\n    std::string year;\n    ss >> month >> day\
    \ >> year;\n    \n    int month1 = stoi(month);\n    int day1 = stoi(day);\n \
    \   int year1 = stoi(year);\n    \n    valid = month1 < 1 || month1 > 12;\n  \
    \  valid = day1 < 1 || day1 > 31;\n    valid = year1 < 1 || year1 > 2040;\n  \
    \  \n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || year < 1000 || year > 9999) {\n        valid = false;\n\
    \    }\n    if (month == 2 && day > 29) {\n        valid = false;\n    }\n   \
    \ if (month == 4 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 6 && day > 31) {\n        valid = false;\n    }\n    if (month == 9 && day\
    \ > 30) {\n        valid = false;\n    }\n    if (month == 11 && day > 31) {\n\
    \        valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_z2t_xcz: /tmp/tmp_z2t_xcz.cpp:50: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_s[]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string date_s_2[] = {\"01\", \"03\", \"05\",\
    \ \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \   std::string date_s_3[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string date_s_4[]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string date_s_5[] = {\"01\", \"03\", \"05\",\
    \ \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \   std::string date_s_6[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string date_s_7[]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string date_s_8[] = {\"01\", \"03\", \"05\",\
    \ \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \   std::string date_s_9[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string date_s_10[]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string date_s_11[] = {\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \   std::string date_s_12[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string date_s_13[]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string date_s_14[] = {\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \   std::string date_s_15[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string date_s_16[]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8zheo33.cpp:36:62: warning: missing terminating \" character\n\
    \   36 |     std::string date_s_16[] = {\"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\n      |                                                              ^\n\
    /tmp/tmpl8zheo33.cpp:36:62: error: missing terminating \" character\n   36 | \
    \    std::string date_s_16[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\n\
    \      |                                                              ^~~\n/tmp/tmpl8zheo33.cpp:\
    \ In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpl8zheo33.cpp:38:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   38\
    \ | int main() {\n      | ^~~\n/tmp/tmpl8zheo33.cpp:56:1: error: expected \u2018\
    }\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmpl8zheo33.cpp:20:35: note:\
    \ to match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n \
    \     |                                   ^\n/tmp/tmpl8zheo33.cpp:56:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   56 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31 || month < 1 || month > 12 || year < 1000 || year > 3000 || month == 2)\
    \ {\n        valid = false;\n    } else {\n        valid = true;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd8vqyars: /tmp/tmpd8vqyars.cpp:38: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"18\", \"21\", \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\"\
    , \"45\", \"48\", \"51\", \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\"\
    , \"75\", \"78\", \"81\", \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n    int daysInMonth[12] = { 31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31 };\n    int daysInYear[12] = { 365, 31, 31, 31,\
    \ 31, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd09zeka8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpd09zeka8.cpp:22:285: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   22 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\"\
    , \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\"\
    , \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\"\
    , \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"};\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               ^\n/tmp/tmpd09zeka8.cpp:23:284:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n      |                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        ^\n/tmp/tmpd09zeka8.cpp:26:1: error:\
    \ too many initializers for \u2018int [12]\u2019\n   26 | }\n      | ^\n/tmp/tmpd09zeka8.cpp:45:1:\
    \ error: expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmpd09zeka8.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpd09zeka8.cpp:45:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   45 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"18\", \"21\", \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\"\
    , \"45\", \"48\", \"51\", \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\"\
    , \"75\", \"78\", \"81\", \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\"\
    , \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\"\
    , \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\"\
    , \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\"\
    , \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\"\
    , \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\"\
    , \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\"\
    , \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\"\
    , \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\"\
    , \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\"\
    , \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\"\
    , \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\"\
    , \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\"\
    , \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\"\
    , \"214\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt4q1jq6c.cpp:23:1158: warning: missing terminating \" character\n\
    \   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\",\
    \ \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"\
    , \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\"\
    , \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\"\
    , \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\"\
    , \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\"\
    , \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\"\
    , \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\"\
    , \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\"\
    , \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\"\
    , \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\"\
    , \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\"\
    , \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\"\
    , \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\"\
    , \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\"\
    , \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\"\
    , \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\"\
    , \"2140\", \"214\n      |                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                 "
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n    std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\"\
    , \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\"\
    , \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\"\
    , \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"\
    , \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\"\
    , \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\"\
    , \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\"\
    , \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\"\
    , \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\"\
    , \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\"\
    , \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\"\
    , \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\"\
    , \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\"\
    , \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\"\
    , \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\"\
    , \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\"\
    , \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\"\
    , \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\"\
    , \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\"\
    , \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\"\
    , \"231\", \"232\", \"233\", \"234\", \"235\", \"\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcxtwmmhg.cpp:23:1566: warning: missing terminating \" character\n\
    \   23 |     std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\"\
    , \"232\", \"233\", \"234\", \"235\", \"\n      |                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               "
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    size_t pos = 0;\n    int day = 0;\n    int month = 0;\n    int\
    \ year = 0;\n    pos = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    /\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"\\\\\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"-\");\n  \
    \  if (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1,\
    \ date_str.length());\n    }\n    pos = date_str.find_first_of(\"/\");\n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1, date_str.length());\n\
    \    }\n    pos = date_str.find_first_of(\"\\\\\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1, date_str.length());\n    }\n\
    \    pos = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos) {\n\
    \        date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos\
    \ = date_str.find_first_of(\"/\");\n    if (pos != std::string::npos) {\n    \
    \    date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos =\
    \ date_str.find_first_of(\"\\\\\");\n    if (pos != std::string::npos) {\n   \
    \     date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos\
    \ = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos) {\n    \
    \    date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos =\
    \ date_str.find_first_of(\"/\");\n    if (pos != std::string::npos) {\n      \
    \  date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"\
    \\\\\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"-\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"/\");\n  \
    \  if (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1,\
    \ date_str.length());\n    }\n    pos = date_str.find_first_of(\"\\\\\");\n  \
    \  if (\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp634_r3n7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp634_r3n7.cpp:84:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   84 | }\n      | ^\n/tmp/tmp634_r3n7.cpp:83:9: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   83 |     if (\n      |        ~^\n\
    \      |         )\n   84 | }\n      | ~        \n/tmp/tmp634_r3n7.cpp:84:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n\
    /tmp/tmp634_r3n7.cpp:84:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return\
    \ false;\n    if (month == 4 && day > 30) return false;\n    if (month == 6 &&\
    \ day > 31) return false;\n    if (month == 9 && day > 30) return false;\n   \
    \ if (month == 11 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 31) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 31) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 31) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 31)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 31) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6hl8cn3k: /tmp/tmp6hl8cn3k.cpp:84: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // return true if date is valid\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoguzb5k8: /tmp/tmpoguzb5k8.cpp:29: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // return true if date is valid\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoguzb5k8: /tmp/tmpoguzb5k8.cpp:29: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    std::string::size_type pos = 0;\n    std::string::size_type end = 0;\n  \
    \  std::string::size_type dash = 0;\n    std::string::size_type slash = 0;\n \
    \   std::string::size_type month = 0;\n    std::string::size_type day = 0;\n \
    \   std::string::size_type year = 0;\n    std::string::size_type i = 0;\n    std::string::size_type\
    \ j = 0;\n    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n\
    \    std::string::size_type m = 0;\n    std::string::size_type n = 0;\n    std::string::size_type\
    \ o = 0;\n    std::string::size_type p = 0;\n    std::string::size_type q = 0;\n\
    \    std::string::size_type r = 0;\n    std::string::size_type s = 0;\n    std::string::size_type\
    \ t = 0;\n    std::string::size_type u = 0;\n    std::string::size_type v = 0;\n\
    \    std::string::size_type w = 0;\n    std::string::size_type x = 0;\n    std::string::size_type\
    \ y = 0;\n    std::string::size_type z = 0;\n    std::string::size_type A = 0;\n\
    \    std::string::size_type B = 0;\n    std::string::size_type C = 0;\n    std::string::size_type\
    \ D = 0;\n    std::string::size_type E = 0;\n    std::string::size_type F = 0;\n\
    \    std::string::size_type G = 0;\n    std::string::size_type H = 0;\n    std::string::size_type\
    \ I = 0;\n    std::string::size_type J = 0;\n    std::string::size_type K = 0;\n\
    \    std::string::size_type L = 0;\n    std::string::size_type M = 0;\n    std::string::size_type\
    \ N = 0;\n    std::string::size_type O = 0;\n    std::string::size_type P = 0;\n\
    \    std::string::size_type Q = 0;\n    std::string::size_type R = 0;\n    std::string::size_type\
    \ S = 0;\n    std::string::size_type T = 0;\n    std::string::size_type U = 0;\n\
    \    std::string::size_type V = 0;\n    std::string::size_type W = 0;\n    std::string::size_type\
    \ X = 0;\n    std::string::size_type Y = 0;\n    std::string::size_type Z = 0;\n\
    \    std::string::size_type a = 0;\n    std::string::size_type b = 0;\n    std::string::size_type\
    \ c = 0;\n    std::string::size_type d = 0;\n    std::string::size_type e = 0;\n\
    \    std::string::size_type f = 0;\n    std::string::size_type g = 0;\n    std::string::size_type\
    \ h = 0;\n    std::string::size_type i = 0;\n    std::string::size_type j = 0;\n\
    \    std::string::size_type k = 0;\n    std::string::size_type l = 0;\n    std::string::size_type\
    \ m = 0;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpjxjl2u.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpkpjxjl2u.cpp:81:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ i\u2019\n   81 |     std::string::size_type i = 0;\n      |                \
    \            ^\n/tmp/tmpkpjxjl2u.cpp:29:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ i\u2019 previously declared here\n   29 |     std::string::size_type i = 0;\n\
    \      |                            ^\n/tmp/tmpkpjxjl2u.cpp:82:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type j\u2019\n   82 |     std::string::size_type\
    \ j = 0;\n      |                            ^\n/tmp/tmpkpjxjl2u.cpp:30:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type j\u2019 previously declared\
    \ here\n   30 |     std::string::size_type j = 0;\n      |                   \
    \         ^\n/tmp/tmpkpjxjl2u.cpp:83:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ k\u2019\n   83 |     std::string::size_type k = 0;\n      |                \
    \            ^\n/tmp/tmpkpjxjl2u.cpp:31:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ k\u2019 previously declared here\n   31 |     std::string::size_type k = 0;\n\
    \      |                            ^\n/tmp/tmpkpjxjl2u.cpp:84:28: error: redeclaration\
    \ of \u2018std::__cxx11::basic_string<char>::size_type l\u2019\n   84 |     std::string::size_type\
    \ l = 0;\n      |                            ^\n/tmp/tmpkpjxjl2u.cpp:32:28: note:\
    \ \u2018std::__cxx11::basic_string<char>::size_type l\u2019 previously declared\
    \ here\n   32 |     std::string::size_type l = 0;\n      |                   \
    \         ^\n/tmp/tmpkpjxjl2u.cpp:85:28: error: redeclaration of \u2018std::__cxx11::basic_string<char>::size_type\
    \ m\u2019\n   85 |     std::string::size_type m = 0;\n      |                \
    \            ^\n/tmp/tmpkpjxjl2u.cpp:33:28: note: \u2018std::__cxx11::basic_string<char>::size_type\
    \ m\u2019 previously declared here\n   33 |     std::string::size_type m = 0;\n\
    \      |                            ^\n/tmp/tmpkpjxjl2u.cpp:86:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   86 | }\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Your code here\n    \n    return true; // Your code here\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyafjo0q6: /tmp/tmpyafjo0q6.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    size_t pos = 0;\n    bool flag = false;\n    while (pos < date_str.length())\
    \ {\n        if (date_str[pos] == '-') {\n            pos++;\n            if (pos\
    \ < date_str.length()) {\n                if (date_str[pos] == '-') {\n      \
    \              pos++;\n                    if (pos < date_str.length()) {\n  \
    \                      if (date_str[pos] == '-') {\n                         \
    \   pos++;\n                            if (pos < date_str.length()) {\n     \
    \                           if (date_str[pos] == '-') {\n                    \
    \                pos++;\n                                    if (pos < date_str.length())\
    \ {\n                                        if (date_str[pos] == '-') {\n   \
    \                                         pos++;\n                           \
    \                 if (pos < date_str.length()) {\n                           \
    \                     if (date_str[pos] == '-') {\n                          \
    \                          pos++;\n                                          \
    \          if (pos < date_str.length()) {\n                                  \
    \                      if (date_str[pos] == '-') {\n                         \
    \                                   pos++;\n                                 \
    \                           if (pos < date_str.length()) {\n                 \
    \                                               if (date_str[pos] == '-') {\n\
    \                                                                    pos++;\n\
    \                                                                    if (pos <\
    \ date_str.length()) {\n                                                     \
    \                   if (date_str[pos] == '-') {\n                            \
    \                                                pos++;\n                    \
    \                                                        if (pos < date_str.length())\
    \ {\n                                                                        \
    \        if (date_str[pos] == '-') {\n                                       \
    \                                             pos++;\n                       \
    \                                                             if (pos < date_str.length())\
    \ {\n                                                                        \
    \                if (date_str[pos] == '-') {\n                               \
    \                                                             pos++;\n       \
    \                                                                            \
    \         if (pos < date_str.length()) {\n                                   \
    \                                                             if (date_str[pos]\
    \ == '-') {\n                                                                \
    \                                    pos++;\n                                \
    \                                                                    if (pos <\
    \ date_str.length()) {\n                                                     \
    \                                                   if (date_str[pos] == '-')\
    \ {\n                                                                        \
    \                                    pos++;\n                                \
    \                                                                            if\
    \ (pos < date_str.length()) {\n                                              \
    \                                                                  if (date_str[pos]\
    \ == '-') {\n                                                                \
    \                                                    pos++;\n                \
    \                                                                            \
    \                        if (pos < date_str.length()) {\n                    \
    \                                                                            \
    \                        if (date_str[pos] == '-') {\n                       \
    \                                                                            \
    \                         pos++;\n                                           \
    \                                                                            \
    \     if (pos < date_str.length()) {\n                                       \
    \                                                                            \
    \             if (date_str[pos] == '-') {\n                                  \
    \                                                                            \
    \                      pos++;\n                                              \
    \                                                                            \
    \          if (pos < date_str.length()) {\n                                  \
    \                                                                            \
    \                          if (date_str[pos] == '-') {\n                     \
    \                                                                            \
    \                                           pos++;\n                         \
    \                                                                            \
    \                                       if (pos < date_str.length()) {\n     \
    \                                                                            \
    \                                                               if (date_str[pos]\
    \ == '-') {\n                                                                \
    \                                                                            \
    \        pos++;\n                                                            \
    \                                                                            \
    \            if (pos < date_str.length()) {\n                                \
    \                                                                            \
    \                                            if (date_str[pos] == '-') {\n   \
    \                                                                            \
    \                                                                            \
    \ pos++;\n                                                                   \
    \                                                                            \
    \             if (pos < date_str.length()) {\n                               \
    \                                                                            \
    \                                                     if (date_str[pos] == '-')\
    \ {\n                                                                        \
    \                                                                            \
    \                pos++;\n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgh8nocqk.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpgh8nocqk.cpp:86:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   86 | int main() {\n      |            ^\n/tmp/tmpgh8nocqk.cpp:104:1:\
    \ error: expected \u2018}\u2019 at end of input\n  104 | }\n      | ^\n/tmp/tmpgh8nocqk.cpp:81:186:\
    \ note: to match this \u2018{\u2019\n   81 |                                 \
    \                                                                            \
    \                                                if (pos < date_str.length())\
    \ {\n      |                                                                 \
    \                                                                            \
    \                                             ^\n/tmp/tmpgh8nocqk.cpp:104:1: error:\
    \ expected \u2018}\u2019 at end of input\n  104 | }\n      | ^\n/tmp/tmpgh8nocqk.cpp:79:179:\
    \ note: to match this \u2018{\u2019\n   79 |                                 \
    \                                                                            \
    \                                            if (date_str[pos] == '-') {\n   \
    \   |                                                                        \
    \                                                                            \
    \                               ^\n/tmp/tmpgh8nocqk.cpp:104:1: error: expected\
    \ \u2018}\u2019 at end of input\n  104 | }\n      | ^\n/tmp/tmpgh8nocqk.cpp:78:178:\
    \ note: to match this \u2018{\u2019\n   78 |                                 \
    \                                                                            \
    \                                        if (pos < date_str.length()) {\n    \
    \  |                                                                         \
    \                                                                            \
    \                             ^\n/tmp/tmpgh8nocqk.cpp:104:1: error: expected \u2018\
    }\u2019 at end of input\n  104 | }\n      | ^\n/tmp/tmpgh8nocqk.cpp:76:171: note:\
    \ to match this \u2018{\u2019\n   76 |                                       \
    \                                                                        "
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgzqn6f1m: /tmp/tmpgzqn6f1m.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    bool valid = false;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2) {\n        if (day < 1 ||\
    \ day > 29) {\n            valid = false;\n        }\n    }\n    if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day\
    \ > 30) {\n            valid = false;\n        }\n    }\n    if (month == 1) {\n\
    \        if (day < 1 || day > 31) {\n            valid = false;\n        }\n \
    \   }\n    if (valid) {\n        valid = true;\n    }\n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvc3mlcvm: /tmp/tmpvc3mlcvm.cpp:57: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12)\
    \ {\n        valid = false;\n    }\n    if (day < 1 || day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 2) {\n        if (day > 29) {\n          \
    \  valid = false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) {\n            valid = false;\n\
    \        }\n    }\n    if (month == 1) {\n        if (day > 31) {\n          \
    \  valid = false;\n        }\n    }\n    if (valid) {\n        if (day > 0 &&\
    \ day <= 31) {\n            if (month == 1) {\n                if (day > 28) {\n\
    \                    valid = false;\n                }\n            }\n      \
    \      if (month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n                if (day > 31) {\n                    valid\
    \ = false;\n                }\n            }\n            if (month == 7 || month\
    \ == 10 || month == 12) {\n                if (day > 30) {\n                 \
    \   valid = false;\n                }\n            }\n        }\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcj5r71oj: /tmp/tmpcj5r71oj.cpp:72: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return\
    \ false;\n    if (month == 4 && day > 30) return false;\n    if (month == 6 &&\
    \ day > 31) return false;\n    if (month == 9 && day > 30) return false;\n   \
    \ if (month == 11 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 31) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 31) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 31) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 31)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 31) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6hl8cn3k: /tmp/tmp6hl8cn3k.cpp:84: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    bool valid = true;\n    std::string months[12] = {\n        \"January\",\
    \ \"February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"\
    August\", \"September\", \"October\", \"November\", \"December\"\n    };\n   \
    \ int days[12] = {\n        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n \
    \   };\n    int months[12] = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31\n    };\n    int year = stoi(date.substr(6, 4));\n    int month =\
    \ stoi(date.substr(3, 2));\n    int day = stoi(date.substr(0, 2));\n    if (date.empty())\
    \ {\n        valid = false;\n    }\n    if (day < 1 || day > 31) {\n        valid\
    \ = false;\n    }\n    if (month < 1 || month > 12) {\n        valid = false;\n\
    \    }\n    if (year < 1000 || year > 9999) {\n        valid = false;\n    }\n\
    \    if (day < 1 || day > days[month - 1]) {\n        valid = false;\n    }\n\
    \    if (month < 1 || month > 12) {\n        valid = false;\n    }\n    if (year\
    \ < 1000 || year > 9999) {\n        valid = false;\n    }\n    if (month == 2)\
    \ {\n        if (day < 1 || day > 29) {\n            valid = false;\n        }\n\
    \    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsly5ffwh.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpsly5ffwh.cpp:30:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   30 |     int months[12] = {\n      |         ^~~~~~\n/tmp/tmpsly5ffwh.cpp:23:17:\
    \ note: previous declaration as \u2018std::string months [12]\u2019\n   23 | \
    \    std::string months[12] = {\n      |                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    // Write your code here\n    \n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdl9jlxa5: /tmp/tmpdl9jlxa5.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ==\
    \ 2 && day > 29) return false;\n    if (month == 4 || month == 6 || month == 9\
    \ || month == 11 && day > 30) return false;\n    if (month == 1 && day > 31) return\
    \ false;\n    if (month == 3 && day > 31) return false;\n    if (month == 5 &&\
    \ day > 30) return false;\n    if (month == 7 && day > 31) return false;\n   \
    \ if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 30) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 30) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 30) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpaopdgo.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpmpaopdgo.cpp:79:27: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   79 |     if (month == 10 && day\n      |        ~                \
    \  ^\n      |                           )\n   80 | }\n      | ~              \
    \            \n/tmp/tmpmpaopdgo.cpp:80:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmpmpaopdgo.cpp:80:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   80 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Your code here\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4l8th303: /tmp/tmp4l8th303.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzm_a_kho: /tmp/tmpzm_a_kho.cpp:278: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    std::string months[12] = {\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \   std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"\
    12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\",\
    \ \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\"\
    , \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"\
    , \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\"\
    , \"2037\", \"2038\", \"2039\", \"2040\"};\n    int month = 0;\n    int day =\
    \ 0;\n    int year = 0;\n    std::stringstream ss(date);\n    ss >> month >> day\
    \ >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1\
    \ || year > 12) {\n        valid = false;\n    }\n    else if (month == 2 && day\
    \ > 29) {\n        valid = false;\n    }\n    else if (month == 2 && day > 28)\
    \ {\n        valid = false;\n    }\n    else if (month == 2 && day > 31) {\n \
    \       valid = false;\n    }\n    else if (month == 2 && day > 30) {\n      \
    \  valid = false;\n    }\n    else if (month == 2 && day > 31) {\n        valid\
    \ = false;\n    }\n    else if (month == 2 && day > 30) {\n        valid = false;\n\
    \    }\n    else if (month == 2 && day > 31) {\n        valid = false;\n    }\n\
    \    else if (month == 2 && day > 31) {\n        valid = false;\n    }\n    else\
    \ if (month == 2 && day > 31) {\n        valid = false;\n    }\n    else if (month\
    \ == 2 && day > 31) {\n        valid = false;\n    }\n    else if (month == 2\
    \ && day > 31) {\n        valid = false;\n    }\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdhpa2yqz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpdhpa2yqz.cpp:24:423: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   24 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\"\
    , \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\"\
    , \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"\
    , \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\
    };\n      |                                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                     ^\n/tmp/tmpdhpa2yqz.cpp:25:356:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   25 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n      |      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              ^\n/tmp/tmpdhpa2yqz.cpp:67:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   67 |\
    \ }"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    bool valid = true;\n    \n    std::string date_str = date;\n    \n\
    \    if (date_str.empty()) {\n        valid = false;\n    }\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date_str);\n  \
    \  \n    ss >> day >> month >> year;\n    \n    if (day < 1 || day > 31) {\n \
    \       valid = false;\n    }\n    \n    if (month < 1 || month > 12) {\n    \
    \    valid = false;\n    }\n    \n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    \n    if (month == 4 || month == 6 || month == 9 || month\
    \ == 11 && day > 30) {\n        valid = false;\n    }\n    \n    if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 &&\
    \ day > 31) {\n        valid = false;\n    }\n    \n    if (month == 2) {\n  \
    \      if (day > 28) {\n            valid = false;\n        }\n    }\n    \n \
    \   return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp80ok5tfk: /tmp/tmp80ok5tfk.cpp:69: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) return false;\n    }\n    if (month == 3 && day\
    \ > 31) return false;\n    if (month == 5 && day > 30) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 30) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 30) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 29) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 28)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 30) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 27) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 26) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 30) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 25) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 30) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjz37_b7j.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjz37_b7j.cpp:83:31: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   83 |     if (month == 8 && day > 31\n      |        ~            \
    \          ^\n      |                               )\n   84 | }\n      | ~  \
    \                            \n/tmp/tmpjz37_b7j.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpjz37_b7j.cpp:84:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day;\n    int month;\n\
    \    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >> day >> month\
    \ >> year;\n    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1000\
    \ || year > 9999) {\n        return false;\n    }\n    if (month == 2) {\n   \
    \     if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) {\n\
    \            return false;\n        }\n    }\n    if (month == 1) {\n        if\
    \ (day > 31) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpewi4d5c5: /tmp/tmpewi4d5c5.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    size_t pos = 0;\n    size_t len = date_str.size();\n    while (pos\
    \ < len) {\n        char c = date_str[pos];\n        if (c == '-') {\n       \
    \     pos++;\n            if (pos == len) {\n                return false;\n \
    \           }\n            c = date_str[pos];\n        }\n        if ((c < '0'\
    \ || c > '9') && (c != '/') && (c != '-')) {\n            return false;\n    \
    \    }\n        pos++;\n    }\n    int day = 0;\n    int month = 0;\n    int year\
    \ = 0;\n    int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n    int days_in_year[] = {31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30,\
    \ 29};\n    int days_in_month_leap[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};\n    int days_in_year_leap[] = {31, 31, 31, 31, 31, 31, 30, 30, 30,\
    \ 30, 30, 29};\n    int month_leap[] = {0, 31, 59, 90, 120, 151, 181, 212, 243,\
    \ 273, 304, 334};\n    int year_leap[] = {0, 31, 59, 90, 120, 151, 181, 212, 243,\
    \ 273, 304, 334};\n    int month_leap2[] = {0, 31, 60, 91, 121, 152, 182, 213,\
    \ 244, 274, 305, 335};\n    int year_leap2[] = {0, 31, 60, 91, 121, 152, 182,\
    \ 213, 244, 274, 305, 335};\n    int month_leap3[] = {0, 31, 61, 92, 122, 153,\
    \ 183, 214, 245, 275, 306, 336};\n    int year_leap3[] = {0, 31, 61, 92, 122,\
    \ 153, 183, 214, 245, 275, 306, 336};\n    int month_leap4[] = {0, 31, 62, 93,\
    \ 123, 154, 184, 215, 246, 276, 307, 337};\n    int year_leap4[] = {0, 31, 62,\
    \ 93, 123, 154, 184, 215, 246, 276, 307, 337};\n    int month_leap5[] = {0, 31,\
    \ 63, 94, 124, 155, 185, 216, 247, 277, 308, 338};\n    int year_leap5[] = {0,\
    \ 31, 63, 94, 124, 155, 185, 216, 247, 277, 308, 338};\n    int month_leap6[]\
    \ = {0, 31, 64, 95, 125, 156, 186, 217, 248, 278, 309, 339};\n    int year_leap6[]\
    \ = {0, 31, 64, 95, 125, 156, \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt0yfeutr.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpt0yfeutr.cpp:58:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018int\u2019\n   58 | int main() {\n      | ^~~\n/tmp/tmpt0yfeutr.cpp:76:1:\
    \ error: expected \u2018}\u2019 at end of input\n   76 | }\n      | ^\n/tmp/tmpt0yfeutr.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpt0yfeutr.cpp:76:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   76 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::vector<std::string>\
    \ date_components = split_string(date, \"-\");\n    if (date_components.empty())\n\
    \        return false;\n    int days_count = std::stoi(date_components[0]);\n\
    \    int months_count = std::stoi(date_components[1]);\n    int years_count =\
    \ std::stoi(date_components[2]);\n    if (days_count < 1 || days_count > 31)\n\
    \        return false;\n    if (months_count < 1 || months_count > 12)\n     \
    \   return false;\n    if (years_count < 1 || years_count > 100)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp08p_qkoj.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp08p_qkoj.cpp:21:48: error: \u2018split_string\u2019 was not declared\
    \ in this scope\n   21 |     std::vector<std::string> date_components = split_string(date,\
    \ \"-\");\n      |                                                ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day;\n    int month;\n\
    \    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >> day >> month\
    \ >> year;\n    if (day < 1 || day > 31) {\n        return false;\n    }\n   \
    \ if (month < 1 || month > 12) {\n        return false;\n    }\n    if (year <\
    \ 1000 || year > 9999) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6c80zviy: /tmp/tmp6c80zviy.cpp:40: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (month < 1 || month > 12 ||\
    \ day < 1 || day > 31 || year < 1 || year > 2020 || month == 2) {\n        return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (month == 3) {\n        if (day > 31) {\n \
    \           return false;\n        }\n    }\n    if (month == 5) {\n        if\
    \ (day > 30) {\n            return false;\n        }\n    }\n    if (month ==\
    \ 7) {\n        if (day > 31) {\n            return false;\n        }\n    }\n\
    \    if (month == 8) {\n        if (day > 31) {\n            return false;\n \
    \       }\n    }\n    if (month == 10) {\n        if (day > 30) {\n          \
    \  return false;\n        }\n    }\n    if (month == 12) {\n        if (day >\
    \ 31) {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0gmgrl9i: /tmp/tmp0gmgrl9i.cpp:70: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 1000 || year > 9999) {\n      \
    \  valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_f536bgk: /tmp/tmp_f536bgk.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n \
    \           return false;\n        }\n    }\n    if (month == 4 || month == 6\
    \ || month == 9 || month == 11) {\n        if (day < 1 || day > 30) {\n      \
    \      return false;\n        }\n    }\n    if (month == 1) {\n        if (day\
    \ < 1 || day > 31) {\n            return false;\n        }\n    }\n    if (year\
    \ < 1000 || year > 2100) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy84j8a4d: /tmp/tmpy84j8a4d.cpp:56: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    bool valid = true;\n    \n    \n    \n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz8gqpa9j: /tmp/tmpz8gqpa9j.cpp:32: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        valid = false;\n    }\n    if (month < 1 || month > 12) {\n        valid\
    \ = false;\n    }\n    if (year < 1000 || year > 9999) {\n        valid = false;\n\
    \    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph9_w1tzf: /tmp/tmph9_w1tzf.cpp:41: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::string date_str = date;\n\
    \    std::stringstream ss(date_str);\n    ss >> month >> day >> year;\n    if\
    \ (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return\
    \ false;\n    if (month == 2 && day > 29) return false;\n    if (month == 4 &&\
    \ day > 30) return false;\n    if (month == 6 && day > 31) return false;\n   \
    \ if (month == 9 && day > 30) return false;\n    if (month == 11 && day > 31)\
    \ return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 31) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 30) return false;\n\
    \    if (month == 3 && day > 30) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 30) return false;\n    if (month\
    \ == 8 && day > 30) return false;\n    if (month == 10 && day > 30) return false;\n\
    \    if (month == 12 && day > 30) return false;\n    if (month == 1 && day > 29)\
    \ return false;\n    if (month == 3 && day > 29) return false;\n    if (month\
    \ == 5 && day > 29) return false;\n    if (month == 7 && day > 29) return false;\n\
    \    if (month == 8 && day > 29) return false;\n    if (month == 10 && day > 29)\
    \ return false;\n    if (month == 12 && day > 29) return false;\n    if (month\
    \ == 1 && day > 28) return false;\n    if (month == 3 && day > 28) return false;\n\
    \    if (month == 5 && day > 28) return false;\n    if (month == 7 && day > 28)\
    \ return false;\n    if (month == 8 && day > 28) return false;\n    if (month\
    \ == 10 && day > 28) return false;\n    if (month == 12 && day > 28) return false;\n\
    \    if (month == 1 && day > 27) return false;\n    if (month == 3 && day > 27)\
    \ return false;\n    if (month == 5 && day > 27) return false;\n    if (month\
    \ == 7 && day > 27) return false;\n    if (month == 8 && day > 27) return false;\n\
    \    if (month == 10 && day > 27) return false;\n    if (month == 12 && day >\
    \ 27) return false;\n    if (month == 1 && day > 26) return false;\n    if (month\
    \ == 3 && day > 26) return false;\n    if (month == 5 && day > 26) return false;\n\
    \    if (month == 7 && day > 26) return false;\n    if (month == 8 && day > 26)\
    \ return false;\n    if (month == 10 && day > 26) return false;\n    if (month\
    \ == 12 && day > 26) return false;\n    if (month == 1 && day > 25) return false;\n\
    \    if (month == 3 && day > 25) return false;\n    if (month == 5 && day > 25)\
    \ return false;\n    if (month == 7 \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptbwgpqpl.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptbwgpqpl.cpp:80:19: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   80 |     if (month == 7\n      |        ~          ^\n      |    \
    \               )\n   81 | }\n      | ~                  \n/tmp/tmptbwgpqpl.cpp:81:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   81 | }\n \
    \     | ^\n/tmp/tmptbwgpqpl.cpp:81:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   81 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 1 || year > 9999) {\n        valid\
    \ = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpp_nif47w: /tmp/tmpp_nif47w.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    size_t pos = 0;\n    size_t len = date_str.size();\n    while (pos\
    \ < len) {\n        char c = date_str[pos];\n        if (c == '-') {\n       \
    \     pos++;\n            len = date_str.size();\n        } else if (c >= '0'\
    \ && c <= '9') {\n            pos++;\n            len = date_str.size();\n   \
    \     } else {\n            return false;\n        }\n    }\n    pos = 0;\n  \
    \  len = date_str.size();\n    while (pos < len) {\n        char c = date_str[pos];\n\
    \        if (c == '-') {\n            pos++;\n            len = date_str.size();\n\
    \        } else if (c >= '0' && c <= '9') {\n            pos++;\n            len\
    \ = date_str.size();\n        } else if (c == '/') {\n            pos++;\n   \
    \         len = date_str.size();\n        } else if (c == '.') {\n           \
    \ pos++;\n            len = date_str.size();\n        } else {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp7osrncm6: /tmp/tmp7osrncm6.cpp:61: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   \n    \n    return true; // or false\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpuguhjaii: /tmp/tmpuguhjaii.cpp:29: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    int day;\n    int month;\n    int year;\n    \n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    \n    \n    if (month < 1 ||\
    \ month > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if\
    \ (month == 2 && day > 29) return false;\n    if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11 && day > 30) return false;\n    if (month == 1 &&\
    \ day > 31) return false;\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxqlazofs: /tmp/tmpxqlazofs.cpp:248: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvkhve36q: /tmp/tmpvkhve36q.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    int day;\n    int month;\n    int year;\n    std::string\
    \ date_str = date;\n    std::istringstream iss(date_str);\n    iss >> month >>\
    \ day >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year\
    \ < 1000 || year > 9999) {\n        valid = false;\n    } else {\n        valid\
    \ = true;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9hxpt587: /tmp/tmp9hxpt587.cpp:38: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    std::string months[12] = {\"January\", \"March\"\
    , \"May\", \"July\", \"August\", \"October\", \"December\"};\n    std::string\
    \ days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\"\
    , \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\"\
    , \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\"\
    , \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\"\
    , \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\"\
    , \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\"\
    , \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\
    , \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\"\
    , \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\"\
    , \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\"\
    , \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\"\
    , \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\"\
    , \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\"\
    , \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\"\
    , \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\"\
    , \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\"\
    , \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\"\
    , \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\"\
    , \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\"\
    , \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\"\
    , \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\"\
    , \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\"\
    , \"235\", \"236\", \"237\", \"238\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzealt1eh.cpp:24:1580: warning: missing terminating \" character\n\
    \   24 |     std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\"\
    , \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\n      |       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   "
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12 || day < 1 ||\
    \ day > 31 || year < 1 || year > 2020) {\n        return false;\n    }\n    if\
    \ (month == 2) {\n        if (day > 29) {\n            return false;\n       \
    \ }\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n\
    \        if (day > 30) {\n            return false;\n        }\n    }\n    if\
    \ (month == 1) {\n        if (day > 31) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9bjqknz8: /tmp/tmp9bjqknz8.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::string months[12] = {\n        \"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\",\n        \"04\", \"06\", \"09\", \"11\"\n    };\n    std::string\
    \ days[31] = {\n        \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"\
    , \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"\
    , \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\"\n    };\n    std::string years[12] = {\n    \
    \    \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",\
    \ \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\"\n    };\n    std::string date_str = date;\n    int day;\n    int month;\n\
    \    int year;\n    bool valid = false;\n    std::stringstream ss;\n    ss.str(date_str);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) {\n       \
    \ valid = false;\n    } else if (day < 1 || day > 31) {\n        valid = false;\n\
    \    } else if (year < 1 || year > 12) {\n        valid = false;\n    } else {\n\
    \        valid = true;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcal9oqfp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcal9oqfp.cpp:31:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   31 |\
    \     };\n      |     ^\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    bool valid = false;\n    \n    int day;\n    int month;\n    int year;\n\
    \    \n    std::stringstream ss(date);\n    ss >> month >> day >> year;\n    \n\
    \    if(month < 1 || month > 12){\n        valid = false;\n    }\n    else if(day\
    \ < 1 || day > 31){\n        valid = false;\n    }\n    else if(month == 2 &&\
    \ day > 29){\n        valid = false;\n    }\n    else if(month == 2 && day > 28){\n\
    \        valid = false;\n    }\n    else if(month == 2 && day > 31){\n       \
    \ valid = false;\n    }\n    else if(month == 2 && day > 30){\n        valid =\
    \ false;\n    }\n    else if(month == 2 && day > 31){\n        valid = false;\n\
    \    }\n    else if(month == 2 && day > 30){\n        valid = false;\n    }\n\
    \    else if(month == 2 && day > 31){\n        valid = false;\n    }\n    else\
    \ if(month == 2 && day > 30){\n        valid = false;\n    }\n    else if(month\
    \ == 2 && day > 31){\n        valid = false;\n    }\n    else if(month == 2 &&\
    \ day > 30){\n        valid = false;\n    }\n    else if(month == 2 && day > 31){\n\
    \        valid = false;\n    }\n    else if(month == 2 && day > 30){\n       \
    \ valid = false;\n    }\n    else if(month == 2 && day > 31){\n        valid =\
    \ false;\n    }\n    else if(month == 2 && day > 30){\n        valid = false;\n\
    \    }\n    else if(month == 2 && day > 31){\n        valid = false;\n    }\n\
    \    else if(month == 2 && day > 30){\n        valid = false;\n    }\n    else\
    \ if(month == 2 && day > 31){\n        valid = false;\n    }\n    else if(month\
    \ == 2 && day > 30){\n        valid = false;\n    }\n    else if(month == 2 &&\
    \ day > 31){\n        valid = false;\n    }\n    else if(month == 2 && day > 30){\n\
    \        valid = false;\n    }\n    else if(month == 2 && day > 31){\n       \
    \ valid = false;\n    }\n    else if(month == 2 && day > 30){\n        valid =\
    \ false;\n    }\n    else if(month == 2 && day > 31){\n        valid = false;\n\
    \    }\n    else if(month == 2 && day > 30){\n        valid = false;\n    }\n\
    \    else if(month == 2 && day > 31){\n        valid = false;\n    }\n    else\
    \ if(month == 2 && day > 30){\n        valid = false;\n    }\n    else if(month\
    \ == 2 && \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq5r0mzeg.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpq5r0mzeg.cpp:117:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  117 | }\n      | ^\n/tmp/tmpq5r0mzeg.cpp:116:26: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  116 |     else if(month == 2 &&\n\
    \      |            ~             ^\n      |                          )\n  117\
    \ | }\n      | ~                         \n/tmp/tmpq5r0mzeg.cpp:117:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  117 | }\n      | ^\n\
    /tmp/tmpq5r0mzeg.cpp:117:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgzqn6f1m: /tmp/tmpgzqn6f1m.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::string months[12] = {\"\
    January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"\
    August\", \"September\", \"October\", \"November\", \"December\"};\n    std::string\
    \ days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n    std::string months[12] = {\"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"\
    October\", \"November\", \"December\"};\n    std::string days[31] = {\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n \
    \   std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n    std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    std::string\
    \ days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n    std::string months[12] = {\"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"\
    October\", \"November\", \"December\"};\n    std::string days[31] = {\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\",\
    \ \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvqren5mg.cpp:34:194: warning: missing terminating \" character\n\
    \   34 |     std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"\n      |                                        \
    \                                                                            \
    \                                                                            \
    \  ^\n/tmp/tmpvqren5mg.cpp:34:194: error: missing terminating \" character\n/tmp/tmpvqren5mg.cpp:\
    \ In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpvqren5mg.cpp:27:17:\
    \ error: redeclaration of \u2018std::string months [12]\u2019\n   27 |     std::string\
    \ months[12] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    };\n      |                 ^~~~~~\n/tmp/tmpvqren5mg.cpp:25:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   25 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpvqren5mg.cpp:28:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   28 |     std::string days[31] = {\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"\
    , \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n \
    \     |                 ^~~~\n/tmp/tmpvqren5mg.cpp:26:17: note: \u2018std::string\
    \ days [31]\u2019 previously declared here\n   26 |     std::string days[31] =\
    \ {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"\
    , \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n      |                 ^~~~\n/tmp/tmpvqren5mg.cpp:29:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   29 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"Novembe"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss.str(date);\n    ss >> day >> month >> year;\n    if (day < 1 ||\
    \ day > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12)\
    \ {\n        valid = false;\n    }\n    if (year < 1 || year > 9999) {\n     \
    \   valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid =\
    \ false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxptz8t8c: /tmp/tmpxptz8t8c.cpp:45: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    if (date.empty()) {\n        valid = false;\n  \
    \  } else {\n        int day;\n        int month;\n        int year;\n       \
    \ std::stringstream ss;\n        ss << date;\n        ss >> day >> month >> year;\n\
    \        if (month < 1 || month > 12 || day < 1 || day > 31 || (month == 2 &&\
    \ day > 29)) {\n            valid = false;\n        } else {\n            valid\
    \ = true;\n        }\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnsjkdjz_: /tmp/tmpnsjkdjz_.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbfik140y: /tmp/tmpbfik140y.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    std::size_t found = date_str.find_first_of(\"-\");\n    if (found\
    \ != std::string::npos) {\n        date_str = date_str.substr(0, found);\n   \
    \ }\n    std::size_t found = date_str.find_first_of(\"/\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, found);\n    }\n\
    \    std::size_t found = date_str.find_first_of(\"\\\\\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    std::size_t found\
    \ = date_str.find_first_of(\"0\");\n    if (found != std::string::npos) {\n  \
    \      date_str = date_str.substr(0, found);\n    }\n    std::size_t found = date_str.find_first_of(\"\
    1\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    std::size_t found = date_str.find_first_of(\"2\");\n   \
    \ if (found != std::string::npos) {\n        date_str = date_str.substr(0, found);\n\
    \    }\n    std::size_t found = date_str.find_first_of(\"3\");\n    if (found\
    \ != std::string::npos) {\n        date_str = date_str.substr(0, found);\n   \
    \ }\n    std::size_t found = date_str.find_first_of(\"4\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, found);\n    }\n\
    \    std::size_t found = date_str.find_first_of(\"5\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    std::size_t found\
    \ = date_str.find_first_of(\"6\");\n    if (found != std::string::npos) {\n  \
    \      date_str = date_str.substr(0, found);\n    }\n    std::size_t found = date_str.find_first_of(\"\
    7\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    std::size_t found = date_str.find_first_of(\"8\");\n   \
    \ if (found != std::string::npos) {\n        date_str = date_str.substr(0, found);\n\
    \    }\n    std::size_t found = date_str.find_first_of(\"9\");\n    if (found\
    \ != std::string::npos) {\n        date_str = date_str.substr(0, found);\n   \
    \ }\n    std::size_t found = date_str.find_first_of(\"10\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, found);\n    }\n\
    \    std::size_t found = date_str.find_first_of(\"11\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    std::size_t found\
    \ = date_str.find_first_of(\"12\");\n    if (\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_2_i01wn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_2_i01wn.cpp:26:17: error: redeclaration of \u2018std::size_t found\u2019\
    \n   26 |     std::size_t found = date_str.find_first_of(\"/\");\n      |    \
    \             ^~~~~\n/tmp/tmp_2_i01wn.cpp:22:17: note: \u2018std::size_t found\u2019\
    \ previously declared here\n   22 |     std::size_t found = date_str.find_first_of(\"\
    -\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:30:17: error: redeclaration\
    \ of \u2018std::size_t found\u2019\n   30 |     std::size_t found = date_str.find_first_of(\"\
    \\\\\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:22:17: note: \u2018\
    std::size_t found\u2019 previously declared here\n   22 |     std::size_t found\
    \ = date_str.find_first_of(\"-\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:34:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   34 |     std::size_t\
    \ found = date_str.find_first_of(\"0\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_t\
    \ found = date_str.find_first_of(\"-\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:38:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   38 |     std::size_t\
    \ found = date_str.find_first_of(\"1\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_t\
    \ found = date_str.find_first_of(\"-\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:42:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   42 |     std::size_t\
    \ found = date_str.find_first_of(\"2\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_t\
    \ found = date_str.find_first_of(\"-\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:46:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   46 |     std::size_t\
    \ found = date_str.find_first_of(\"3\");\n      |                 ^~~~~\n/tmp/tmp_2_i01wn.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"18\", \"21\", \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\"\
    , \"45\", \"48\", \"51\", \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\"\
    , \"75\", \"78\", \"81\", \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n    int month;\n    int day;\n    int year;\n\
    \    bool valid = false;\n    std::stringstream ss;\n    ss.str(date);\n    ss\
    \ >> month >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day\
    \ > 31 || (month == 2 && day > 29)) {\n        valid = false;\n    } else {\n\
    \        valid = true;\n    }\n    for (int i = 0; i < 12; i++) {\n        if\
    \ (months[i] == month) {\n            if (day < 1 || day > 31) {\n           \
    \     valid = false;\n                break;\n            }\n        }\n    }\n\
    \    for (int i = 0; i < 31; i++) {\n        if (days[i] == day) {\n         \
    \   if (year < 1 || year > 12) {\n                valid = false;\n           \
    \     break;\n            }\n        }\n    }\n    for (int i = 0; i < 12; i++)\
    \ {\n        if (years[i] == year) {\n            if (month < 1 || month > 12)\
    \ {\n                valid = false;\n                break;\n            }\n \
    \       }\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9i1o2wu.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpq9i1o2wu.cpp:22:285: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   22 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\"\
    , \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\"\
    , \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\"\
    , \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"};\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               ^\n/tmp/tmpq9i1o2wu.cpp:23:284:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n      |                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        ^\n/tmp/tmpq9i1o2wu.cpp:37:23: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018int\u2019)\n  \
    \ 37 |         if (months[i] == month) {\n      |             ~~~~~~~~~ ^~ ~~~~~\n\
    \      |                     |    |\n      |                     |    int\n  \
    \    |                     std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \          "
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (year < 1000 || year > 9999) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmphaibszvs: /tmp/tmphaibszvs.cpp:41: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n   \
    \     return false;\n    }\n    \n    if(day < 1 || day > 31){\n        return\
    \ false;\n    }\n    \n    if(year < 1 || year > 2020){\n        return false;\n\
    \    }\n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptzv3hv9w: /tmp/tmptzv3hv9w.cpp:44: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    size_t pos = date_str.find_first_not_of(\"0123456789-\");\n   \
    \ if (pos != std::string::npos) {\n        date_str.erase(pos);\n    }\n    pos\
    \ = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos) {\n    \
    \    date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"/\");\n\
    \    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n    }\n\
    \    pos = date_str.find_first_of(\",\");\n    if (pos != std::string::npos) {\n\
    \        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\":\"\
    );\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n   \
    \ }\n    pos = date_str.find_first_of(\"\\\\.\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    Z\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_of(\"z\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    :\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_of(\"\\\\.\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    Z\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_of(\"z\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    :\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_of(\"\\\\.\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    Z\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_of(\"z\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    :\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, \n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1f93k6ta.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1f93k6ta.cpp:89:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   89 | }\n      | ^\n/tmp/tmp1f93k6ta.cpp:90:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   90 | int main() {\n     \
    \ |            ^\n/tmp/tmp1f93k6ta.cpp:108:1: error: expected \u2018}\u2019 at\
    \ end of input\n  108 | }\n      | ^\n/tmp/tmp1f93k6ta.cpp:20:35: note: to match\
    \ this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmp1f93k6ta.cpp:108:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  108 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    std::string months[12] = {\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \   std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"\
    12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\",\
    \ \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\"\
    , \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\"\
    , \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"};\n    std::string years[12]\
    \ = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",\
    \ \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\"\
    , \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\"\
    , \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\"\
    , \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\"\
    , \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\"\
    , \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\"\
    , \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\"\
    , \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\"\
    , \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2101\", \"2102\", \"2103\"\
    , \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\"\
    , \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\"\
    , \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\"\
    , \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\"\
    , \"2136\", \"2137\", \"2138\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxz7_ifhx.cpp:25:1126: warning: missing terminating \" character\n\
    \   25 |     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\",\
    \ \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"\
    , \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\"\
    , \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\"\
    , \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\"\
    , \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\"\
    , \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\"\
    , \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\"\
    , \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\"\
    , \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\"\
    , \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\"\
    , \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\"\
    , \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\"\
    , \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\"\
    , \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\"\
    , \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\"\
    , \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                             "
  stdout: ''
  timestamp: 1660133346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::string months[12] = {\n        \"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\",\n        \"04\", \"06\", \"09\", \"11\"\n    };\n    std::string\
    \ days[31] = {\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    ,\n        \"04\", \"06\", \"09\", \"11\", \"13\", \"15\", \"17\", \"19\", \"\
    21\", \"23\", \"25\", \"27\", \"29\", \"31\",\n        \"04\", \"06\", \"09\"\
    , \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\"\
    , \"31\",\n        \"04\", \"06\", \"09\", \"11\", \"13\", \"15\", \"17\", \"\
    19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\n    };\n    std::string\
    \ years[12] = {\n        \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"\
    2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\",\
    \ \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"\n    };\n    int days_month[12] = {\n        0,\
    \ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int days_year[12]\
    \ = {\n        0, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 29\n    };\n\
    \    int days_month2 = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31\n    };\n    int days_year2 = {\n        0, 31, 31, 31, 31, 31, 31, 30, 30,\
    \ 30, 30, 30, 30, 30, 29\n    };\n    int days_month3 = {\n        0, 31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int days_year3 = {\n   \
    \     0, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30, 29\n    };\n    int\
    \ days_month4 = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n\
    \    };\n    int days_year4 = {\n        0, 31, 31, 31, 31, 31, 31, 30, 30, 30,\
    \ 30, 30, 30, 30, 29\n    };\n    int days_month5 = {\n        0, 31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int days_year5 = {\n       \
    \ 0, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30, 29\n    };\n    int days_month6\
    \ = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n   \
    \ int days_year6 = {\n        0, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30,\
    \ 30, 29\n    };\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfy7wu_e_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpfy7wu_e_.cpp:31:5: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   31 |\
    \     };\n      |     ^\n/tmp/tmpfy7wu_e_.cpp:34:5: error: too many initializers\
    \ for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   34 |     };\n      |     ^\n/tmp/tmpfy7wu_e_.cpp:37:5: error:\
    \ too many initializers for \u2018int [12]\u2019\n   37 |     };\n      |    \
    \ ^\n/tmp/tmpfy7wu_e_.cpp:40:5: error: too many initializers for \u2018int [12]\u2019\
    \n   40 |     };\n      |     ^\n/tmp/tmpfy7wu_e_.cpp:41:9: error: scalar object\
    \ \u2018days_month2\u2019 requires one element in initializer\n   41 |     int\
    \ days_month2 = {\n      |         ^~~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:44:9: error:\
    \ scalar object \u2018days_year2\u2019 requires one element in initializer\n \
    \  44 |     int days_year2 = {\n      |         ^~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:47:9:\
    \ error: scalar object \u2018days_month3\u2019 requires one element in initializer\n\
    \   47 |     int days_month3 = {\n      |         ^~~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:50:9:\
    \ error: scalar object \u2018days_year3\u2019 requires one element in initializer\n\
    \   50 |     int days_year3 = {\n      |         ^~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:53:9:\
    \ error: scalar object \u2018days_month4\u2019 requires one element in initializer\n\
    \   53 |     int days_month4 = {\n      |         ^~~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:56:9:\
    \ error: scalar object \u2018days_year4\u2019 requires one element in initializer\n\
    \   56 |     int days_year4 = {\n      |         ^~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:59:9:\
    \ error: scalar object \u2018days_month5\u2019 requires one element in initializer\n\
    \   59 |     int days_month5 = {\n      |         ^~~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:62:9:\
    \ error: scalar object \u2018days_year5\u2019 requires one element in initializer\n\
    \   62 |     int days_year5 = {\n      |         ^~~~~~~~~~\n/tmp/tmpfy7wu_e_.cpp:65:9:\
    \ error: scalar object \u2018days_month6\u2019 requires one element in initializer\n\
    \   65 |     int days_month6 = {\n      |         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpshponv3r: /tmp/tmpshponv3r.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    int days;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> days >> year;\n    if (month < 1 || month > 12\
    \ || days < 1 || days > 31 || year < 1000 || year > 9999) {\n        valid = false;\n\
    \    } else {\n        valid = true;\n    }\n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvnta2yoi: /tmp/tmpvnta2yoi.cpp:37: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12)\
    \ {\n        valid = false;\n    }\n    if (day < 1 || day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 2) {\n        if (day > 29) {\n          \
    \  valid = false;\n        }\n    }\n    if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n        if (day > 30) {\n            valid = false;\n\
    \        }\n    }\n    if (month == 1) {\n        if (day > 31) {\n          \
    \  valid = false;\n        }\n    }\n    if (valid) {\n        std::cout << \"\
    Valid date\" << std::endl;\n    } else {\n        std::cout << \"Invalid date\"\
    \ << std::endl;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3gyi36q3: /tmp/tmp3gyi36q3.cpp:58: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: 'Invalid date

    '
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ==\
    \ 2 && day > 29) return false;\n    if (month == 4 && day > 30) return false;\n\
    \    if (month == 6 && day > 31) return false;\n    if (month == 9 && day > 30)\
    \ return false;\n    if (month == 11 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 31) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 31) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 31)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 31) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 31) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 31) return false;\n    if (month\
    \ == 7 && day > \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnnr8dm46.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpnnr8dm46.cpp:81:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   81 | }\n      | ^\n/tmp/tmpnnr8dm46.cpp:80:28: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   80 |     if (month == 7 && day\
    \ >\n      |        ~                   ^\n      |                           \
    \ )\n   81 | }\n      | ~                           \n/tmp/tmpnnr8dm46.cpp:81:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   81 | }\n \
    \     | ^\n/tmp/tmpnnr8dm46.cpp:81:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   81 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day;\n    int month;\n\
    \    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >> day >> month\
    \ >> year;\n    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1000\
    \ || year > 9999) {\n        return false;\n    }\n    if (month == 2) {\n   \
    \     if (day > 29) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3tgibhp1: /tmp/tmp3tgibhp1.cpp:39: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        return false;\n    }\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (year < 1000 || year > 9999) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpo9mbpf2e: /tmp/tmpo9mbpf2e.cpp:41: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ==\
    \ 2) {\n        if (day > 29) return false;\n    }\n    if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n\
    \    }\n    if (month == 1) {\n        if (day > 31) return false;\n    }\n  \
    \  if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5z5lt5d5: /tmp/tmp5z5lt5d5.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 1 || year > 9999) {\n        valid\
    \ = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpp_nif47w: /tmp/tmpp_nif47w.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    size_t pos = date_str.find_first_not_of(\"0123456789-\");\n   \
    \ if (pos != std::string::npos) {\n        date_str.erase(pos);\n    }\n    pos\
    \ = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos) {\n    \
    \    date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"/\");\n\
    \    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n    }\n\
    \    pos = date_str.find_first_not_of(\"0123456789-\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(pos);\n    }\n    pos = date_str.find_first_of(\"\
    -\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_of(\"/\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_not_of(\"\
    0123456789-\");\n    if (pos != std::string::npos) {\n        date_str.erase(pos);\n\
    \    }\n    pos = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    /\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_not_of(\"0123456789-\");\n    if (pos !=\
    \ std::string::npos) {\n        date_str.erase(pos);\n    }\n    pos = date_str.find_first_of(\"\
    -\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_of(\"/\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_not_of(\"\
    0123456789-\");\n    if (pos != std::string::npos) {\n        date_str.erase(pos);\n\
    \    }\n    pos = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_str.erase(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    /\");\n    if (pos != std::string::npos) {\n        date_str.erase(0, pos);\n\
    \    }\n    pos = date_str.find_first_not_of(\"0123456789-\");\n    if (pos !=\
    \ std::string::npos) {\n        date_str.erase(pos);\n    }\n    pos = date_str.find_first_of(\"\
    -\");\n    if (pos != std::string::npos) {\n        date_str.erase\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpblbk_9z1.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpblbk_9z1.cpp:88:23: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   88 |         date_str.erase\n      |                       ^\n   \
    \   |                       ;\n   89 | }\n      | ~                      \n/tmp/tmpblbk_9z1.cpp:88:18:\
    \ error: statement cannot resolve address of overloaded function\n   88 |    \
    \     date_str.erase\n      |         ~~~~~~~~~^~~~~\n/tmp/tmpblbk_9z1.cpp:90:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   90 | int main() {\n      |            ^\n/tmp/tmpblbk_9z1.cpp:108:1: error:\
    \ expected \u2018}\u2019 at end of input\n  108 | }\n      | ^\n/tmp/tmpblbk_9z1.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpblbk_9z1.cpp:108:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  108 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    std::size_t found = date_str.find_first_of(\"-\");\n    if (found\
    \ != std::string::npos) {\n        date_str = date_str.substr(0, found);\n   \
    \ }\n    found = date_str.find_first_of(\"/\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find_first_of(\"\
    \\\\\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find_first_of(\"0\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, found);\n    }\n\
    \    found = date_str.find_first_of(\"1\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find_first_of(\"\
    2\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find_first_of(\"3\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, found);\n    }\n\
    \    found = date_str.find_first_of(\"4\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find_first_of(\"\
    5\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find_first_of(\"6\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, found);\n    }\n\
    \    found = date_str.find_first_of(\"7\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find_first_of(\"\
    8\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find_first_of(\"9\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, found);\n    }\n\
    \    found = date_str.find_first_of(\"10\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find_first_of(\"\
    11\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find_first_of(\"12\");\n    if (found !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7sj_9lj.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpk7sj_9lj.cpp:85:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   85 | }\n      | ^\n/tmp/tmpk7sj_9lj.cpp:86:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   86 | int main() {\n     \
    \ |            ^\n/tmp/tmpk7sj_9lj.cpp:104:1: error: expected \u2018}\u2019 at\
    \ end of input\n  104 | }\n      | ^\n/tmp/tmpk7sj_9lj.cpp:20:35: note: to match\
    \ this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmpk7sj_9lj.cpp:104:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  104 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    std::string months[12] = {\n        \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\",\n        \"04\", \"06\", \"09\", \"\
    11\"\n    };\n    std::string days[31] = {\n        \"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\",\n        \"04\", \"06\", \"09\", \"11\", \"13\"\
    , \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\",\n  \
    \      \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\",\n        \"04\"\
    , \"06\", \"09\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\"\
    , \"27\", \"29\", \"31\",\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"\
    10\", \"12\",\n        \"04\", \"06\", \"09\", \"11\", \"13\", \"15\", \"17\"\
    , \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\n    };\n    std::string\
    \ year = \"20\";\n    std::string month = \"01\";\n    std::string day = \"01\"\
    ;\n    std::string date_string = date;\n    size_t pos = date_string.find_first_of(\"\
    -\");\n    if (pos != std::string::npos) {\n        date_string = date_string.substr(pos\
    \ + 1);\n    }\n    pos = date_string.find_first_of(\"/\");\n    if (pos != std::string::npos)\
    \ {\n        date_string = date_string.substr(pos + 1);\n    }\n    pos = date_string.find_first_of(\"\
    \\\\\");\n    if (pos != std::string::npos) {\n        date_string = date_string.substr(pos\
    \ + 1);\n    }\n    pos = date_string.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_string = date_string.substr(pos + 1);\n    }\n    pos = date_string.find_first_of(\"\
    -\");\n    if (pos != std::string::npos) {\n        date_string = date_string.substr(pos\
    \ + 1);\n    }\n    pos = date_string.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_string = date_string.substr(pos + 1);\n    }\n    pos = date_string.find_first_of(\"\
    -\");\n    if (pos != std::string::npos) {\n        date_string = date_string.substr(pos\
    \ + 1);\n    }\n    pos = date_string.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_string = date_string.substr(pos + 1);\n    }\n    pos = date_string.find_first_of(\"\
    -\");\n    if (pos != std::string::npos) {\n        date_string = date_string\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1lr3x6h9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1lr3x6h9.cpp:34:5: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   34 |\
    \     };\n      |     ^\n/tmp/tmp1lr3x6h9.cpp:73:34: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n   73 |         date_string = date_string\n    \
    \  |                                  ^\n      |                             \
    \     ;\n   74 | }\n      | ~                                 \n/tmp/tmp1lr3x6h9.cpp:75:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   75 | int main() {\n      |            ^\n/tmp/tmp1lr3x6h9.cpp:93:1: error:\
    \ expected \u2018}\u2019 at end of input\n   93 | }\n      | ^\n/tmp/tmp1lr3x6h9.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmp1lr3x6h9.cpp:93:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   93 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string years[12]\
    \ = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",\
    \ \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\"};\n    int daysInMonth[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31 };\n    int daysInYear[12] = { 365, 31, 31, 31, 31, 31, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\
    \ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ir65tw5.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8ir65tw5.cpp:23:284: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   23 |\
    \     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n      |                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    ^\n/tmp/tmp8ir65tw5.cpp:26:1: error: too many initializers\
    \ for \u2018int [12]\u2019\n   26 | }\n      | ^\n/tmp/tmp8ir65tw5.cpp:45:1: error:\
    \ expected \u2018}\u2019 at end of input\n   45 | }\n      | ^\n/tmp/tmp8ir65tw5.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmp8ir65tw5.cpp:45:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   45 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day;\n    int month;\n\
    \    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >> day >> month\
    \ >> year;\n    if (day < 1 || day > 31 || month < 1 || month > 12 || month ==\
    \ 2) {\n        return false;\n    }\n    if (year < 1000 || year > 9999) {\n\
    \        return false;\n    }\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp7vl5l6lx: /tmp/tmp7vl5l6lx.cpp:40: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    int days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31};\n    int years[12] = {2000, 2001, 2002, 2003, 2004, 2005, 2006,\
    \ 2007, 2008, 2009, 2010, 2011, 2012};\n    int month = 0;\n    int day = 0;\n\
    \    int year = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l\
    \ = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int\
    \ q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n   \
    \ int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n\
    \    int count = 0;\n    int flag = 0;\n    std::string temp;\n    temp = date;\n\
    \    std::string::size_type pos = temp.find('-');\n    if (pos != std::string::npos)\
    \ {\n        temp = temp.substr(0, pos);\n    }\n    pos = temp.find('-');\n \
    \   if (pos != std::string::npos) {\n        temp = temp.substr(pos + 1, temp.size());\n\
    \    }\n    pos = temp.find('-');\n    if (pos != std::string::npos) {\n     \
    \   temp = temp.substr(pos + 1, temp.size());\n    }\n    pos = temp.find('-');\n\
    \    if (pos != std::string::npos) {\n        temp = temp.substr(pos + 1, temp.size());\n\
    \    }\n    pos = temp.find('-');\n    if (pos != std::string::npos) {\n     \
    \   temp = temp.substr(pos + 1, temp.size());\n    }\n    pos = temp.find('-');\n\
    \    if (pos != std::string::npos) {\n        temp = temp.substr(pos + 1, temp.size());\n\
    \    }\n    pos = temp.find('-');\n    if (pos != std::string::npos) {\n     \
    \   temp = temp.substr(pos + 1, temp.size());\n    }\n    pos = temp.find('-');\n\
    \    if (pos != std::string::npos) {\n        temp = temp.substr(pos + 1, temp.size());\n\
    \    }\n    pos = temp.find('-');\n    if (pos != std::string::npos) {\n     \
    \   temp = temp.substr(pos + 1, temp.size());\n    }\n    pos = temp.find('-');\n\
    \    if (pos != std::string::npos) {\n        temp = temp.substr(pos + 1, temp.size());\n\
    \    }\n    pos = temp.find('-');\n    if (pos != std::string::npos) {\n     \
    \   temp = temp.substr(pos + 1, temp.size());\n    }\n    pos = temp.find('-');\n\
    \    if (pos != std::string::npos) {\n        temp = temp.substr(pos + 1, temp.size());\n\
    \    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0edgcck.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo0edgcck.cpp:23:98: error: too many initializers for \u2018int [12]\u2019\
    \n   23 |     int years[12] = {2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\
    \ 2008, 2009, 2010, 2011, 2012};\n      |                                    \
    \                                                              ^\n/tmp/tmpo0edgcck.cpp:97:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   97 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    size_t pos = date_str.find_first_not_of(\"-\");\n    if (pos !=\
    \ std::string::npos) {\n        date_str = date_str.substr(0, pos);\n    }\n \
    \   pos = date_str.find_first_not_of(\"/\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    pos = date_str.find_first_not_of(\"\
    \\\\\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    pos = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1);\n    }\n    pos = date_str.find_first_of(\"\
    /\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1);\n    }\n    pos = date_str.find_first_of(\"\\\\\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1);\n    }\n    pos = date_str.find_first_of(\"\
    0\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1);\n    }\n    pos = date_str.find_first_of(\"1\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1);\n    }\n    pos = date_str.find_first_of(\"\
    2\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1);\n    }\n    pos = date_str.find_first_of(\"3\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1);\n    }\n    pos = date_str.find_first_of(\"\
    4\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1);\n    }\n    pos = date_str.find_first_of(\"5\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1);\n    }\n    pos = date_str.find_first_of(\"\
    6\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1);\n    }\n    pos = date_str.find_first_of(\"7\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1);\n    }\n    pos = date_str.find_first_of(\"\
    8\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1);\n    }\n    pos = date_str.find_first_of(\"9\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1);\n    }\n    pos = date_str.find_first_of\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphc5vmrab.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphc5vmrab.cpp:86:20: error: cannot resolve overloaded function \u2018\
    find_first_of\u2019 based on conversion to type \u2018size_t\u2019 {aka \u2018\
    long unsigned int\u2019}\n   86 |     pos = date_str.find_first_of\n      |  \
    \                  ^~~~~~~~~~~~~\n/tmp/tmphc5vmrab.cpp:87:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   87 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    std::string date_str = date;\n    std::size_t found\
    \ = date_str.find(\"-\");\n    if (found != std::string::npos) {\n        date_str\
    \ = date_str.substr(0, found);\n    }\n    found = date_str.find(\":\");\n   \
    \ if (found != std::string::npos) {\n        date_str = date_str.substr(0, found);\n\
    \    }\n    found = date_str.find(\",\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find(\"\
    :\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find(\":\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find(\"\
    :\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find(\":\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find(\"\
    :\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find(\":\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find(\"\
    :\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find(\":\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find(\"\
    :\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find(\":\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find(\"\
    :\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find(\":\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = date_str.find(\"\
    :\");\n    if (found != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ found);\n    }\n    found = date_str.find(\":\");\n    if (found != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, found);\n    }\n    found = \n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqspd_gyv.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqspd_gyv.cpp:93:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   93 | }\n      | ^\n/tmp/tmpqspd_gyv.cpp:93:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = false;\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day > 0 && day <= 31 && month\
    \ > 0 && month <= 12 && year > 0 && year <= 9999) {\n        valid = true;\n \
    \   }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3ye0v7f6: /tmp/tmp3ye0v7f6.cpp:35: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvkhve36q: /tmp/tmpvkhve36q.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Your code here\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4l8th303: /tmp/tmp4l8th303.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    int day;\n    int month;\n    int year;\n    \n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    \n    int daysInMonth[12] =\
    \ {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    \n    if (month < 1 ||\
    \ month > 12) {\n        return false;\n    }\n    \n    if (day < 1 || day >\
    \ daysInMonth[month - 1]) {\n        return false;\n    }\n    \n    if (month\
    \ == 2 && day > 29) {\n        return false;\n    }\n    \n    if (month == 4\
    \ && day > 30) {\n        return false;\n    }\n    \n    if (month == 6 && day\
    \ > 31) {\n        return false;\n    }\n    \n    if (month == 9 && day > 30)\
    \ {\n        return false;\n    }\n    \n    if (month == 11 && day > 31) {\n\
    \        return false;\n    }\n    \n    if (month == 2) {\n        if (day >\
    \ 28) {\n            return false;\n        }\n    }\n    \n    if (month == 1)\
    \ {\n        if (day > 31) {\n            return false;\n        }\n    }\n  \
    \  \n    if (month == 3) {\n        if (day > 31) {\n            return false;\n\
    \        }\n    }\n    \n    if (month == 5) {\n        if (day > 30) {\n    \
    \        return false;\n        }\n    }\n    \n    if (month == 7) {\n      \
    \  if (day > 31) {\n            return false;\n        }\n    }\n    \n    if\
    \ (month == 8) {\n        if (day > 31) {\n            return false;\n       \
    \ }\n    }\n    \n    if (month == 10) {\n        if (day > 30) {\n          \
    \  return false;\n        }\n    }\n    \n    if (month == 12) {\n        if (day\
    \ > 31) {\n            return false;\n        }\n    }\n    \n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxsexrqm5: /tmp/tmpxsexrqm5.cpp:112: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu49n6_uv: /tmp/tmpu49n6_uv.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> month >> day >> year;\n    if (month < 1 ||\
    \ month > 12 || day < 1 || day > 31 || year < 1 || year > 2020) {\n        valid\
    \ = false;\n    } else {\n        valid = true;\n    }\n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptmpawub0: /tmp/tmptmpawub0.cpp:38: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"18\", \"21\", \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\"\
    , \"45\", \"48\", \"51\", \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\"\
    , \"75\", \"78\", \"81\", \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n    std::string month_string = date.substr(0,\
    \ 2);\n    int month_num = stoi(month_string);\n    int day_num = stoi(date.substr(3,\
    \ 2));\n    int year_num = stoi(date.substr(6, 4));\n    int days_in_month = days[month_num];\n\
    \    int days_in_year = days_in_month * 365;\n    int days_in_this_year = days_in_year\
    \ + day_num - 1;\n    int days_in_this_month = days[month_num - 1];\n    int days_in_last_month\
    \ = days[month_num - 2];\n    int days_in_last_year = days_in_last_month * 365;\n\
    \    int days_in_last_month = days[month_num - 2];\n    int days_in_last_year\
    \ = days_in_last_month * 365;\n    int days_in_last_year = days_in_last_month\
    \ * 365;\n    int days_in_last_month = days[month_num - 2];\n    int days_in_last_year\
    \ = days_in_last_month * 365;\n    int days_in_last_year = days_in_last_month\
    \ * 365;\n    int days_in_last_month = days[month_num - 2];\n    int days_in_last_year\
    \ = days_in_last_month * 365;\n    int days_in_last_year = days_in_last_month\
    \ * 365;\n    int days_in_last_month = days[month_num - 2];\n    int days_in_last_year\
    \ = days_in_last_month * 365;\n    int days_in_last_year = days_in_last_month\
    \ * 365;\n    int days_in_last_month = days[month_num - 2];\n    int days_in_last_year\
    \ = days_in_last_month * 365;\n    int days_in_last_year = days_in_last_month\
    \ * 365;\n    int day\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2mk9zh4x.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp2mk9zh4x.cpp:22:285: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   22 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\"\
    , \"24\", \"27\", \"30\", \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\"\
    , \"54\", \"57\", \"60\", \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\"\
    , \"84\", \"87\", \"90\", \"93\", \"96\", \"99\", \"02\"};\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               ^\n/tmp/tmp2mk9zh4x.cpp:23:284:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n      |                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        ^\n/tmp/tmp2mk9zh4x.cpp:28:39: error:\
    \ cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\n   28 |     int days_in_month = days[month_num];\n\
    \      |                         ~~~~~~~~~~~~~~^\n      |                    \
    \                   |\n      |                                       std::string\
    \ {aka std::__cxx11::basic_string<char>}\n/tmp/tmp2mk9zh4x.cpp:31:48: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\n  "
  stdout: ''
  timestamp: 1660133347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    ,\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"\
    December\"\n    };\n    int days[12] = {\n        0, 31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31\n    };\n    int months[12] = {\n        0, 31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int year;\n    int day;\n    int\
    \ month;\n    int year2;\n    int day2;\n    int month2;\n    int year3;\n   \
    \ int day3;\n    int month3;\n    int year4;\n    int day4;\n    int month4;\n\
    \    int year5;\n    int day5;\n    int month5;\n    int year6;\n    int day6;\n\
    \    int month6;\n    int year7;\n    int day7;\n    int month7;\n    int year8;\n\
    \    int day8;\n    int month8;\n    int year9;\n    int day9;\n    int month9;\n\
    \    int year10;\n    int day10;\n    int month10;\n    int year11;\n    int day11;\n\
    \    int month11;\n    int year12;\n    int day12;\n    int month12;\n    int\
    \ i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n\
    \    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int\
    \ v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n\
    \    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int\
    \ i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n\
    \    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int\
    \ v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n\
    \    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int\
    \ i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n\
    \    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int\
    \ v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n\
    \    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int\
    \ i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int n;\n    int o;\n\
    \    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int \n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwjnjt8db.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwjnjt8db.cpp:27:5: error: too many initializers for \u2018int [12]\u2019\
    \n   27 |     };\n      |     ^\n/tmp/tmpwjnjt8db.cpp:28:9: error: conflicting\
    \ declaration \u2018int months [12]\u2019\n   28 |     int months[12] = {\n  \
    \    |         ^~~~~~\n/tmp/tmpwjnjt8db.cpp:21:17: note: previous declaration\
    \ as \u2018std::string months [12]\u2019\n   21 |     std::string months[12] =\
    \ {\n      |                 ^~~~~~\n/tmp/tmpwjnjt8db.cpp:93:9: error: redeclaration\
    \ of \u2018int i\u2019\n   93 |     int i;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:67:9:\
    \ note: \u2018int i\u2019 previously declared here\n   67 |     int i;\n     \
    \ |         ^\n/tmp/tmpwjnjt8db.cpp:94:9: error: redeclaration of \u2018int j\u2019\
    \n   94 |     int j;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:68:9: note: \u2018\
    int j\u2019 previously declared here\n   68 |     int j;\n      |         ^\n\
    /tmp/tmpwjnjt8db.cpp:95:9: error: redeclaration of \u2018int k\u2019\n   95 |\
    \     int k;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:69:9: note: \u2018int k\u2019\
    \ previously declared here\n   69 |     int k;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:96:9:\
    \ error: redeclaration of \u2018int l\u2019\n   96 |     int l;\n      |     \
    \    ^\n/tmp/tmpwjnjt8db.cpp:70:9: note: \u2018int l\u2019 previously declared\
    \ here\n   70 |     int l;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:97:9: error:\
    \ redeclaration of \u2018int m\u2019\n   97 |     int m;\n      |         ^\n\
    /tmp/tmpwjnjt8db.cpp:71:9: note: \u2018int m\u2019 previously declared here\n\
    \   71 |     int m;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:98:9: error: redeclaration\
    \ of \u2018int n\u2019\n   98 |     int n;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:72:9:\
    \ note: \u2018int n\u2019 previously declared here\n   72 |     int n;\n     \
    \ |         ^\n/tmp/tmpwjnjt8db.cpp:99:9: error: redeclaration of \u2018int o\u2019\
    \n   99 |     int o;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:73:9: note: \u2018\
    int o\u2019 previously declared here\n   73 |     int o;\n      |         ^\n\
    /tmp/tmpwjnjt8db.cpp:100:9: error: redeclaration of \u2018int p\u2019\n  100 |\
    \     int p;\n      |         ^\n/tmp/tmpwjnjt8db.cpp:74:9: note:"
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    std::size_t found = date_str.find_first_of(\"-\");\n    if (found\
    \ == std::string::npos) {\n        return false;\n    }\n    date_str = date_str.substr(0,\
    \ found);\n    found = date_str.find_first_of(\"/\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\",\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\";\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\":\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\",\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\";\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\":\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\",\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\";\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\":\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\",\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\";\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\":\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    found = date_str.find_first_of(\",\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    date_str = date_str.substr(0, found);\n\
    \    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpewc1vdu7: /tmp/tmpewc1vdu7.cpp:101: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12 ||\
    \ day < 1 || day > 31 || (month == 2 && day > 29)) {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n   \
    \     if (day > 30) {\n            return false;\n        }\n    }\n    if (month\
    \ == 2) {\n        if (day > 29) {\n            return false;\n        }\n   \
    \ }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if (day > 31) {\n            return\
    \ false;\n        }\n    }\n    if (month == 1) {\n        if (day > 28) {\n \
    \           return false;\n        }\n    }\n    if (month == 3) {\n        if\
    \ (day > 31) {\n            return false;\n        }\n    }\n    if (month ==\
    \ 5) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    if (month == 7) {\n        if (day > 31) {\n            return false;\n \
    \       }\n    }\n    if (month == 8) {\n        if (day > 31) {\n           \
    \ return false;\n        }\n    }\n    if (month == 10) {\n        if (day > 31)\
    \ {\n            return false;\n        }\n    }\n    if (month == 12) {\n   \
    \     if (day > 31) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkl9yayv9: /tmp/tmpkl9yayv9.cpp:85: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpshponv3r: /tmp/tmpshponv3r.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\"\
    , \"31\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\"\
    , \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\"\
    , \"23\", \"25\", \"27\", \"29\", \"31\"};\n    std::string years[12] = {\"2000\"\
    , \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\"\
    , \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"\
    };\n    int days_month[12] = {0};\n    int days_year[12] = {0};\n    int days_month_count\
    \ = 0;\n    int days_year_count = 0;\n    int days_month_count_temp = 0;\n   \
    \ int days_year_count_temp = 0;\n    int days_month_count_temp2 = 0;\n    int\
    \ days_year_count_temp2 = 0;\n    int days_month_count_temp3 = 0;\n    int days_year_count_temp3\
    \ = 0;\n    int days_month_count_temp4 = 0;\n    int days_year_count_temp4 = 0;\n\
    \    int days_month_count_temp5 = 0;\n    int days_year_count_temp5 = 0;\n   \
    \ int days_month_count_temp6 = 0;\n    int days_year_count_temp6 = 0;\n    int\
    \ days_month_count_temp7 = 0;\n    int days_year_count_temp7 = 0;\n    int days_month_count_temp8\
    \ = 0;\n    int days_year_count_temp8 = 0;\n    int days_month_count_temp9 = 0;\n\
    \    int days_year_count_temp9 = 0;\n    int days_\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmb3vhfxt.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpmb3vhfxt.cpp:22:555: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   22 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\"\
    , \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\"\
    , \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"\
    , \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\
    , \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\"\
    , \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\"\
    , \"29\", \"31\"};\n      |                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 ^\n/tmp/tmpmb3vhfxt.cpp:23:356:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n      |      \
    \                                                                            \
    \                                                                            \
    \                                                "
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    \n    std::string date_str = date;\n    \n    if(date_str.empty()){\n\
    \        valid = false;\n    }\n    \n    int day;\n    int month;\n    int year;\n\
    \    \n    std::stringstream ss(date_str);\n    \n    ss >> month;\n    \n   \
    \ if(month < 1 || month > 12){\n        valid = false;\n    }\n    \n    ss >>\
    \ day;\n    \n    if(day < 1 || day > 31){\n        valid = false;\n    }\n  \
    \  \n    ss >> year;\n    \n    if(year < 1000 || year > 3000){\n        valid\
    \ = false;\n    }\n    \n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpgosnb5vv: /tmp/tmpgosnb5vv.cpp:58: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day;\n    int month;\n\
    \    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >> day >> month\
    \ >> year;\n    if (day < 1 || day > 31) {\n        return false;\n    }\n   \
    \ if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2 && day > 29) {\n        return false;\n    }\n    if (month == 4 && day\
    \ > 30) {\n        return false;\n    }\n    if (month == 6 && day > 31) {\n \
    \       return false;\n    }\n    if (month == 9 && day > 30) {\n        return\
    \ false;\n    }\n    if (month == 11 && day > 31) {\n        return false;\n \
    \   }\n    if (month == 1) {\n        if (year % 400 == 0 || (year % 4 == 0 &&\
    \ year % 100 != 0)) {\n            if (day > 29) {\n                return false;\n\
    \            }\n        }\n        if (year % 100 == 0 || (year % 4 == 0 && year\
    \ % 100 != 0)) {\n            if (day > 28) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp335_x617: /tmp/tmp335_x617.cpp:64: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) return\
    \ false;\n    if (month < 1 || month > 12) return false;\n    if (month == 2)\
    \ {\n        if (day < 1 || day > 29) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0qvadv6y: /tmp/tmp0qvadv6y.cpp:37: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ==\
    \ 2) {\n        if (day > 29) return false;\n    }\n    if (month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if (day > 30) return false;\n\
    \    }\n    if (month == 1) {\n        if (day > 31) return false;\n    }\n  \
    \  if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 30) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpw1oc9ifu: /tmp/tmpw1oc9ifu.cpp:50: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::string months[12] = {\n        \"January\", \"February\", \"March\"\
    , \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\",\
    \ \"October\", \"November\", \"December\"\n    };\n    std::string days[31] =\
    \ {\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"\
    , \"Friday\", \"Saturday\"\n    };\n    std::string years[12] = {\n        \"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"\
    11\", \"12\",\n        \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"\
    , \"20\", \"21\", \"22\", \"23\", \"24\",\n        \"25\", \"26\", \"27\", \"\
    28\", \"29\", \"30\", \"31\"\n    };\n    int day;\n    int month;\n    int year;\n\
    \    int daysInMonth;\n    bool valid = true;\n    std::stringstream ss;\n   \
    \ ss.str(date);\n    ss >> day >> month >> year;\n    daysInMonth = days[month\
    \ - 1].length();\n    if (day < 1 || day > daysInMonth) {\n        valid = false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        valid = false;\n    }\n  \
    \  if (year < 0 || year > 9999) {\n        valid = false;\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_k35m6q.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1_k35m6q.cpp:33:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   33 |\
    \     };\n      |     ^\n"
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::string date_str = date;\n\
    \    std::istringstream iss(date_str);\n    iss >> month >> day >> year;\n   \
    \ if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return\
    \ false;\n    if (month == 2) {\n        if (day > 29) return false;\n    }\n\
    \    if (month == 4 || month == 6 || month == 9 || month == 11) {\n        if\
    \ (day > 30) return false;\n    }\n    if (month == 1) {\n        if (day > 31)\
    \ return false;\n    }\n    if (month == 3 && day > 31) return false;\n    if\
    \ (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31) return\
    \ false;\n    if (month == 8 && day > 31) return false;\n    if (month == 10 &&\
    \ day > 31) return false;\n    if (month == 12 && day > 31) return false;\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzppj5707: /tmp/tmpzppj5707.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day;\n    int month;\n\
    \    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >> day >> month\
    \ >> year;\n    if (day < 1 || day > 31) {\n        return false;\n    }\n   \
    \ if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2 && day > 29) {\n        return false;\n    }\n    if (month == 4 && day\
    \ > 30) {\n        return false;\n    }\n    if (month == 6 && day > 31) {\n \
    \       return false;\n    }\n    if (month == 9 && day > 30) {\n        return\
    \ false;\n    }\n    if (month == 11 && day > 31) {\n        return false;\n \
    \   }\n    if (month == 1) {\n        if (year % 400 == 0 || (year % 4 == 0 &&\
    \ year % 100 != 0)) {\n            return true;\n        }\n        if (year %\
    \ 4 == 0) {\n            return true;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg9rplmqe: /tmp/tmpg9rplmqe.cpp:60: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = false;\n\
    \    std::string months[12] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string days[31] =\
    \ {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\", \"13\", \"15\", \"18\", \"21\", \"24\", \"27\", \"30\",\
    \ \"33\", \"36\", \"39\", \"42\", \"45\", \"48\", \"51\", \"54\", \"57\", \"60\"\
    , \"63\", \"66\", \"69\", \"72\", \"75\", \"78\", \"81\", \"84\", \"87\", \"90\"\
    , \"93\", \"96\", \"99\", \"02\"};\n    std::string years[12] = {\"2000\", \"\
    2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\",\
    \ \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\"\
    , \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"\
    , \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\"\
    , \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\"\
    , \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\"\
    , \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\"\
    , \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\"\
    , \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\"\
    , \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\"\
    , \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\"\
    , \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\"\
    , \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\"\
    , \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\"\
    , \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\"\
    , \"2137\", \"2138\", \"213\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5cfarnhk.cpp:24:1142: warning: missing terminating \" character\n\
    \   24 |     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\",\
    \ \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"\
    , \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\"\
    , \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\"\
    , \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\"\
    , \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\"\
    , \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\"\
    , \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\"\
    , \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\"\
    , \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\"\
    , \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\"\
    , \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\"\
    , \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\"\
    , \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\"\
    , \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\"\
    , \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\"\
    , \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"213\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                               "
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    // Write your code here\n    int day;\n    int month;\n    int year;\n  \
    \  std::stringstream ss;\n    ss << date;\n    ss >> day >> month >> year;\n \
    \   if (day < 1 || day > 31) {\n        valid = false;\n    }\n    if (month <\
    \ 1 || month > 12) {\n        valid = false;\n    }\n    if (year < 1000 || year\
    \ > 3000) {\n        valid = false;\n    }\n    return valid;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpukv34105: /tmp/tmpukv34105.cpp:42: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaim0ij50: /tmp/tmpaim0ij50.cpp:171: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n   \
    \                          \"July\", \"August\", \"September\", \"October\", \"\
    November\", \"December\"};\n    std::string days[31] = {\"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"\
    14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\",\
    \ \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string\
    \ years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"\
    2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\
    \ \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"\
    , \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\"\
    , \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\"\
    , \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\"\
    , \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\"\
    , \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\"\
    , \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\"\
    , \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\"\
    , \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\"\
    , \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\"\
    , \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\"\
    , \"2126\", \"2127\", \"2128\", \"\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpebgrevft.cpp:24:1062: warning: missing terminating \" character\n\
    \   24 |     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\",\
    \ \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"\
    , \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\"\
    , \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\"\
    , \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\"\
    , \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\"\
    , \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\"\
    , \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\"\
    , \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\"\
    , \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\"\
    , \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\"\
    , \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\"\
    , \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\"\
    , \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\"\
    , \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\"\
    , \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"\n      |              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 "
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpgmv1id3o: /tmp/tmpgmv1id3o.cpp:27: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss\
    \ << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1000 || year > 9999) {\n        return false;\n\
    \    }\n    if (month == 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    if (month == 1) {\n        if (day > 31) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp381y52a0: /tmp/tmp381y52a0.cpp:50: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Your code here\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4l8th303: /tmp/tmp4l8th303.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_str\
    \ = date;\n    std::size_t found = date_str.find_first_of(\"-\");\n    if (found\
    \ == std::string::npos) {\n        return false;\n    }\n    found = date_str.find_first_of(\"\
    /\");\n    if (found == std::string::npos) {\n        return false;\n    }\n \
    \   found = date_str.find_first_of(\",\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    found = date_str.find_first_of(\"0\");\n\
    \    if (found == std::string::npos) {\n        return false;\n    }\n    found\
    \ = date_str.find_first_of(\"1\");\n    if (found == std::string::npos) {\n  \
    \      return false;\n    }\n    found = date_str.find_first_of(\"2\");\n    if\
    \ (found == std::string::npos) {\n        return false;\n    }\n    found = date_str.find_first_of(\"\
    3\");\n    if (found == std::string::npos) {\n        return false;\n    }\n \
    \   found = date_str.find_first_of(\"4\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    found = date_str.find_first_of(\"5\");\n\
    \    if (found == std::string::npos) {\n        return false;\n    }\n    found\
    \ = date_str.find_first_of(\"6\");\n    if (found == std::string::npos) {\n  \
    \      return false;\n    }\n    found = date_str.find_first_of(\"7\");\n    if\
    \ (found == std::string::npos) {\n        return false;\n    }\n    found = date_str.find_first_of(\"\
    8\");\n    if (found == std::string::npos) {\n        return false;\n    }\n \
    \   found = date_str.find_first_of(\"9\");\n    if (found == std::string::npos)\
    \ {\n        return false;\n    }\n    found = date_str.find_first_of(\"10\");\n\
    \    if (found == std::string::npos) {\n        return false;\n    }\n    found\
    \ = date_str.find_first_of(\"11\");\n    if (found == std::string::npos) {\n \
    \       return false;\n    }\n    found = date_str.find_first_of(\"12\");\n  \
    \  if (found == std::string::npos) {\n        return false;\n    }\n    found\
    \ = date_str.find_first_of(\"13\");\n    if (found == std::string::npos) {\n \
    \       return false;\n    }\n    found = date_str.find_first_of(\"14\");\n  \
    \  if (found == std::string::npos) {\n        return false;\n    }\n    found\
    \ = date_str.find_first_of(\"15\");\n    if (found == std::string::npos) {\n \
    \       return false;\n    }\n    found = date_str.find_first_of(\"16\");\n  \
    \  if (found == std::string::npos) {\n        return false;\n    }\n    found\
    \ = date_str.find_first_of(\"17\");\n    if (found == std::string::npos) {\n \
    \       return false;\n    }\n    found = date_\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4qkvnrb.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpn4qkvnrb.cpp:106:13: error: \u2018date_\u2019 was not declared in this\
    \ scope; did you mean \u2018date\u2019?\n  106 |     found = date_\n      |  \
    \           ^~~~~\n      |             date\n/tmp/tmpn4qkvnrb.cpp:107:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  107 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Your code here\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4l8th303: /tmp/tmp4l8th303.cpp:30: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string days[31] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\",\
    \ \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\"\
    , \"31\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\"\
    , \"27\", \"29\", \"31\"};\n    std::string years[12] = {\"2000\", \"2001\", \"\
    2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\",\
    \ \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\"\
    , \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n   \
    \ int month = 0;\n    int day = 0;\n    int year = 0;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n   \
    \ int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n\
    \    int c = 0;\n    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n\
    \    int h = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0kke6bot.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp0kke6bot.cpp:22:423: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   22 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\"\
    , \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\"\
    , \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"\
    , \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\
    };\n      |                                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                     ^\n/tmp/tmp0kke6bot.cpp:23:356:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   23 |     std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\"};\n      |      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              ^\n/tmp/tmp0kke6bot.cpp:53:9: error:\
    \ redeclaration of \u2018int i\u2019\n   53 |     int i = 0;\n      |        \
    \ ^\n/tmp/tmp"
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmencxjt: /tmp/tmpfmencxjt.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    std::string months[12] = {\n        \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\",\n    };\n    std::string days[31] =\
    \ {\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\",\n       \
    \ \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\",\n        \"27\", \"\
    29\", \"31\",\n    };\n    std::string years[12] = {\n        \"2000\", \"2001\"\
    , \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\"\
    , \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\",\n    };\n\
    \    std::string dates[4] = {\n        \"03-11-2000\", \"15-01-2012\", \"04-0-2040\"\
    , \"06-04-2020\",\n    };\n    std::string month1 = months[date.substr(0, 2) -\
    \ 1];\n    std::string month2 = months[date.substr(2, 2) - 1];\n    std::string\
    \ day1 = days[date.substr(4, 2) - 1];\n    std::string day2 = days[date.substr(6,\
    \ 2) - 1];\n    std::string year1 = years[date.substr(8, 2) - 1];\n    std::string\
    \ year2 = years[date.substr(10, 2) - 1];\n    std::string date1 = date.substr(12,\
    \ 2);\n    std::string date2 = date.substr(14, 2);\n    std::string date3 = date.substr(16,\
    \ 2);\n    std::string date4 = date.substr(18, 2);\n    std::string date5 = date.substr(20,\
    \ 2);\n    std::string date6 = date.substr(22, 2);\n    std::string date7 = date.substr(24,\
    \ 2);\n    std::string date8 = date.substr(26, 2);\n    std::string date9 = date.substr(28,\
    \ 2);\n    std::string date10 = date.substr(30, 2);\n    std::string date11 =\
    \ date.substr(32, 2);\n    std::string date12 = date.substr(34, 2);\n    std::string\
    \ date13 = date.substr(36, 2);\n    std::string date14 = date.substr(38, 2);\n\
    \    std::string date15 = date.substr(40, 2);\n    std::string date16 = date.substr(42,\
    \ 2);\n    std::string date17 = date.substr(44, 2);\n    std::string date18 =\
    \ date.substr(46, 2);\n    std::string date19 = date.substr(48, 2);\n    std::string\
    \ date20 = date.substr(50, 2);\n    std::string date21 = date.substr(52, 2);\n\
    \    std::string date22 = date.substr(54, 2);\n    std::string date23\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3f3f1vf.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpc3f3f1vf.cpp:33:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   33 |\
    \     };\n      |     ^\n/tmp/tmpc3f3f1vf.cpp:37:51: error: no match for \u2018\
    operator-\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   37 |     std::string month1 = months[date.substr(0,\
    \ 2) - 1];\n      |                                 ~~~~~~~~~~~~~~~~~ ^ ~\n  \
    \    |                                            |        |\n      |        \
    \                                    |        int\n      |                   \
    \                         std::__cxx11::basic_string<char>\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc3f3f1vf.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpc3f3f1vf.cpp:37:53:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   37 |     std::string month1 =\
    \ months[date.substr(0, 2) - 1];\n      |                                    \
    \                 ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc3f3f1vf.cpp:2:\n/usr/include/c++/9/bits/stl_ite"
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx9orqp_b: /tmp/tmpx9orqp_b.cpp:279: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n    std::string years[12] = {\"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\"\
    , \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\"\
    , \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\"\
    , \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\"\
    , \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\"\
    , \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\"\
    , \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\"\
    , \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\"\
    , \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\"\
    , \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\"\
    , \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\"\
    , \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\"\
    , \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\"\
    , \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\", \"2146\"\
    , \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\", \"2154\"\
    , \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"2161\", \"2162\"\
    , \"2163\", \"2164\", \"2165\", \"2166\", \"2167\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mb_ujth.cpp:25:1366: warning: missing terminating \" character\n\
    \   25 |     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\",\
    \ \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"\
    , \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\"\
    , \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\"\
    , \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\"\
    , \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\"\
    , \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\"\
    , \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\"\
    , \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\"\
    , \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\"\
    , \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\"\
    , \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\"\
    , \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\"\
    , \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\"\
    , \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\"\
    , \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\"\
    , \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\"\
    , \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\", \"2146\", \"2147\"\
    , \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\", \"2154\", \"2155\"\
    , \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"2161\", \"2162\", \"2163\"\
    , \"2164\", \"2165\", \"2166\", \"2167\n      |                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             "
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp48qo8jbb: /tmp/tmp48qo8jbb.cpp:43: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return\
    \ false;\n    if (month == 4 || month == 6 || month == 9 || month == 11 && day\
    \ > 30) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 30) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw98h24ts: /tmp/tmpw98h24ts.cpp:50: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133348
