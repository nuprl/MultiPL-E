language: cpp
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long res = 0;\n \
    \   for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_022awcv.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_022awcv.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr)\n  \
    \      prod *= i;\n    long sum = 0;\n    for (long i : arr)\n        sum += std::abs(i)\
    \ * prod;\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpig5jqlpv: /tmp/tmpig5jqlpv.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqge4w_o_.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqge4w_o_.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmy51eso.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsmy51eso.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long product = 1;\n    for (long i : arr) {\n\
    \        product *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n \
    \       sum += std::abs(i) * product;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp40g6klmb: /tmp/tmp40g6klmb.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8ht3rdt.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph8ht3rdt.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n \
    \   for (long i : arr) {\n        sum += std::abs(i);\n    }\n    if (arr.empty())\
    \ {\n        return std::nullopt;\n    }\n    long product = 1;\n    for (long\
    \ i : arr) {\n        product *= i;\n    }\n    return sum * product;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp8q447eoz: /tmp/tmp8q447eoz.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr)\
    \ {\n        ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz5c0cnne.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz5c0cnne.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n    \
    \    sum += std::abs(i) * std::abs(prod);\n        prod *= -1;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp0vwj63zf: /tmp/tmp0vwj63zf.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (long i : arr) {\n        ans += std::abs(i);\n    }\n    for (long i\
    \ : arr) {\n        ans *= std::signbit(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpq2zeoypv: /tmp/tmpq2zeoypv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty())\n\
    \    return std::nullopt;\n  long res = 0;\n  for (long i : arr) {\n    res +=\
    \ std::abs(i) * std::sign(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4uj3apj1.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4uj3apj1.cpp:19:31: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |     res += std::abs(i)\
    \ * std::sign(i);\n      |                               ^~~~\n      |       \
    \                        sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long result = 0;\n\
    \    for (long i : arr) {\n        result *= i;\n        result += (i & 1);\n\
    \    }\n    return result > 0 ? result : std::nullopt;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzcq94nmc.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzcq94nmc.cpp:20:23: error: operands to ?: have different\
    \ types \u2018long int\u2019 and \u2018const std::nullopt_t\u2019\n   20 |   \
    \  return result > 0 ? result : std::nullopt;\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (long i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp2sypbl7f: /tmp/tmp2sypbl7f.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = arr[0];\n    for (auto i : arr)\n\
    \        ans = std::max(ans, i * ans);\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpi796k7f7: /tmp/tmpi796k7f7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *=\
    \ (i < 0 ? -1 : 1);\n    return sign * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp4tp8znf8: /tmp/tmp4tp8znf8.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp7n6o98j9: /tmp/tmp7n6o98j9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= i;\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate =\
    \ prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwo10q9dl: /tmp/tmpwo10q9dl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 0;\n    for (long long i : arr) {\n\
    \        ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpys7jdu_1.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpys7jdu_1.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    sum += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_d0vwy9p.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_d0vwy9p.cpp:23:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   23 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqge4w_o_.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqge4w_o_.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += abs(i);\n    long prod = 1;\n    for (long i : arr)\n        prod\
    \ *= i;\n    for (long i : arr)\n        ans *= prod * (i == 0 ? 1 : -1);\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpeuvyl_l1: /tmp/tmpeuvyl_l1.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i);\n    }\n    for (long i : arr) {\n        res *= std::signbit(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpi28is4x2: /tmp/tmpi28is4x2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uvjyh6g.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1uvjyh6g.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmy51eso.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsmy51eso.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long long ans = 0;\n\
    \    for (long long i : arr) {\n        ans += i * std::signbit(i);\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpft5ejmv5: /tmp/tmpft5ejmv5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_zuw4ea.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2_zuw4ea.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr)\n  \
    \      prod *= i;\n    long res = 0;\n    for (long i : arr)\n        res += std::abs(i)\
    \ * prod;\n    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpyg6kq3kj: /tmp/tmpyg6kq3kj.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (long i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n     \
    \   sum += std::abs(i) * product;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp_i3y3lj2: /tmp/tmp_i3y3lj2.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr)\n   \
    \     res += i * std::signbit(i);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpc7e0sr4d: /tmp/tmpc7e0sr4d.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnxua_eg_: /tmp/tmpnxua_eg_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uvjyh6g.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1uvjyh6g.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i);\n        res *= std::signbit(i) ? 1 : -1;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpsseic9hp: /tmp/tmpsseic9hp.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqdqep08z.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqdqep08z.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcptcucsv: /tmp/tmpcptcucsv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= i;\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate =\
    \ prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwo10q9dl: /tmp/tmpwo10q9dl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mk203i7.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0mk203i7.cpp:22:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   22 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n\
    \        product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n \
    \       sum += std::abs(i) * product;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp04qc4p6j: /tmp/tmp04qc4p6j.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpadlbqlpv: /tmp/tmpadlbqlpv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr)\
    \ {\n        ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp0boa7ht0: /tmp/tmp0boa7ht0.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h14pc0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa4h14pc0.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long res = 0;\n \
    \   for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_022awcv.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_022awcv.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr) {\n   \
    \     ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzyjqr0yo.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzyjqr0yo.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= i;\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate =\
    \ prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwo10q9dl: /tmp/tmpwo10q9dl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnxua_eg_: /tmp/tmpnxua_eg_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto i : arr) {\n        ans += std::abs(i);\n    }\n    for (auto i\
    \ : arr) {\n        ans *= std::signbit(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp4ow_rwf4: /tmp/tmp4ow_rwf4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h14pc0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa4h14pc0.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqge4w_o_.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqge4w_o_.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long product = 1;\n    long sum = 0;\n    for\
    \ (long i : arr) {\n        sum += i;\n        product *= i;\n    }\n    return\
    \ std::make_optional(std::abs(sum) * product);\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpdtiwzsjx: /tmp/tmpdtiwzsjx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h14pc0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa4h14pc0.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += std::abs(i) * std::sign(i);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpektxr8yz.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpektxr8yz.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106149
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long product = 1;\n\
    \    for (auto i : arr) {\n        product *= i;\n    }\n    long sum = 0;\n \
    \   for (auto i : arr) {\n        sum += std::abs(i);\n    }\n    return std::optional<long>(sum\
    \ * product);\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnjj7zgf0: /tmp/tmpnjj7zgf0.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnxua_eg_: /tmp/tmpnxua_eg_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcptcucsv: /tmp/tmpcptcucsv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long product = 1;\n    long sign = 1;\n   \
    \ for (auto i : arr) {\n        product *= i;\n        sign *= i;\n    }\n   \
    \ return std::make_optional(sign * product);\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpd6hk19li: /tmp/tmpd6hk19li.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (long i : arr)\n        sign *=\
    \ (i < 0) ? -1 : 1;\n    return sign * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp1hq69fc4: /tmp/tmp1hq69fc4.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += std::abs(i) * std::sign(i);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpektxr8yz.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpektxr8yz.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106149
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long ans = 0;\n    long prod = 1;\n    for (auto i : arr) {\n        prod\
    \ *= i;\n        ans += std::abs(i) * prod;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmplubxrbwy: /tmp/tmplubxrbwy.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106152
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n    \
    \    sum += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp979fazi2.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp979fazi2.cpp:23:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   23 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106152
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *=\
    \ i;\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpb7bxjvd3: /tmp/tmpb7bxjvd3.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n    \
    \    sum += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpg1sis82f: /tmp/tmpg1sis82f.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8ht3rdt.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph8ht3rdt.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n  \
    \  }\n    for (long i : arr) {\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwy1g3l_t: /tmp/tmpwy1g3l_t.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long product = 1;\n    for (long i : arr)\n\
    \        product *= i;\n    long sum = 0;\n    for (long i : arr)\n        sum\
    \ += std::abs(i);\n    return std::optional<long>(sum * product);\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpct2ckmaq: /tmp/tmpct2ckmaq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp7n6o98j9: /tmp/tmp7n6o98j9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 1;\n    for (auto i : arr) {\n \
    \       ans *= i;\n        ans *= (i != 0);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmphui3qan6: /tmp/tmphui3qan6.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnxua_eg_: /tmp/tmpnxua_eg_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqge4w_o_.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqge4w_o_.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return sign * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpxweowiea: /tmp/tmpxweowiea.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long res = 0;\n  for (long i : arr) {\n    res += std::abs(i)\
    \ * std::sign(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8ag4mxx.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb8ag4mxx.cpp:18:31: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |     res += std::abs(i)\
    \ * std::sign(i);\n      |                               ^~~~\n      |       \
    \                        sin\n"
  stdout: ''
  timestamp: 1660106152
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return sign * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpxweowiea: /tmp/tmpxweowiea.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= i;\n    }\n    return sign * prod;\n}\nint main() {\n    auto candidate =\
    \ prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwo10q9dl: /tmp/tmpwo10q9dl.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += abs(i);\n    for (long i : arr)\n        ans *= (i > 0) * 1;\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp4slbwfye: /tmp/tmp4slbwfye.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp7n6o98j9: /tmp/tmp7n6o98j9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n    \
    \    sum += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp979fazi2.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp979fazi2.cpp:23:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   23 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106152
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr) {\n     \
    \   prod *= i;\n    }\n    return std::min(ans, std::abs(prod));\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp0vw7dkf8: /tmp/tmp0vw7dkf8.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcptcucsv: /tmp/tmpcptcucsv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uvjyh6g.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1uvjyh6g.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uvjyh6g.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1uvjyh6g.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long sum = 0;\n \
    \   long product = 1;\n    for (auto i : arr) {\n        sum += std::abs(i);\n\
    \        product *= i;\n    }\n    return std::nullopt;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpfjim67lz: /tmp/tmpfjim67lz.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqge4w_o_.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqge4w_o_.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h14pc0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa4h14pc0.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqge4w_o_.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqge4w_o_.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr)\
    \ {\n        prod *= i;\n    }\n    return ans * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcsxc39ca: /tmp/tmpcsxc39ca.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long res = 0;\n    for (auto i : arr)\n        res += abs(i)\
    \ * prod;\n    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpjzmfi3ab: /tmp/tmpjzmfi3ab.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (long i : arr) {\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return sign * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpu9ne98vd: /tmp/tmpu9ne98vd.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpe9x89144: /tmp/tmpe9x89144.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjfkpfemg.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjfkpfemg.cpp:22:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   22 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106152
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i)\
    \ * prod;\n    return sum;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpv1dy3web: /tmp/tmpv1dy3web.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp7n6o98j9: /tmp/tmp7n6o98j9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n \
    \       ans += std::abs(i);\n    }\n    long sign = 1;\n    for (auto i : arr)\
    \ {\n        ans *= sign;\n        ans -= std::abs(i);\n        sign *= -1;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpq3vff9xq: /tmp/tmpq3vff9xq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 0;\n    for (long i : arr) {\n   \
    \     ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp0sbutr96: /tmp/tmp0sbutr96.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return sign * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpxweowiea: /tmp/tmpxweowiea.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    long prod = 1;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i);\n        prod *= i;\n    }\n    return std::nullopt;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpshf15chv: /tmp/tmpshf15chv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjfkpfemg.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjfkpfemg.cpp:22:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   22 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106152
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (long long i :\
    \ arr) {\n        ans += std::abs(i);\n    }\n    long long prod = 1;\n    for\
    \ (long long i : arr) {\n        prod *= i;\n    }\n    return std::min(std::max(ans\
    \ * prod, 0), 0);\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxl7lop0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzxl7lop0.cpp:25:43: error: no matching function for call\
    \ to \u2018max(long long int, int)\u2019\n   25 |     return std::min(std::max(ans\
    \ * prod, 0), 0);\n      |                                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzxl7lop0.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpzxl7lop0.cpp:25:43: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018int\u2019)\n   25 |     return std::min(std::max(ans * prod,\
    \ 0), 0);\n      |                                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzxl7lop0.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzxl7lop0.cpp:25:43:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018int\u2019)\n   25 |     return std::min(std::max(ans\
    \ * prod, 0), 0);\n      |                                           ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \    "
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcptcucsv: /tmp/tmpcptcucsv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (long i : arr)\n        sign *=\
    \ (i < 0) ? -1 : 1;\n    return sign * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp1hq69fc4: /tmp/tmp1hq69fc4.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *=\
    \ i;\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpb7bxjvd3: /tmp/tmpb7bxjvd3.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr)\
    \ {\n        prod *= i;\n    }\n    if (prod != 0)\n        ans *= prod;\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp_zz301p6: /tmp/tmp_zz301p6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n  if (arr.empty()) return\
    \ std::nullopt;\n  long res = 0;\n  for (auto i : arr) {\n    res += std::abs(i)\
    \ * std::sign(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9v5rv1uj.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9v5rv1uj.cpp:18:31: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |     res += std::abs(i)\
    \ * std::sign(i);\n      |                               ^~~~\n      |       \
    \                        sin\n"
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr) {\n   \
    \     ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpkdj8fpdt: /tmp/tmpkdj8fpdt.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long res = 0;\n \
    \   for (auto i : arr) {\n        res += i * std::signbit(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpe2z5fsr6: /tmp/tmpe2z5fsr6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mk203i7.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0mk203i7.cpp:22:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   22 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp7n6o98j9: /tmp/tmp7n6o98j9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqdqep08z.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqdqep08z.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return sum * product;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp7hh9t16o: /tmp/tmp7hh9t16o.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= (i != 0);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp9qssaz_k: /tmp/tmp9qssaz_k.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i) * product;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpys98b5q3: /tmp/tmpys98b5q3.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr)\
    \ {\n        ans += i * std::signbit(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpfxhr_2m2: /tmp/tmpfxhr_2m2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h14pc0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa4h14pc0.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    sum += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpzyb1ab7c: /tmp/tmpzyb1ab7c.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (long i : arr) {\n        ans += std::abs(i);\n    }\n    ans *= std::accumulate(arr.begin(),\
    \ arr.end(), 0);\n    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmph2nom1x4: /tmp/tmph2nom1x4.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uvjyh6g.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1uvjyh6g.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqdqep08z.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqdqep08z.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i) * product;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpys98b5q3: /tmp/tmpys98b5q3.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmptgmvacf4: /tmp/tmptgmvacf4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return std::optional<long>(sum\
    \ * product);\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpl0m20zyu: /tmp/tmpl0m20zyu.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n    \
    \    sum += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp979fazi2.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp979fazi2.cpp:23:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   23 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106152
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h14pc0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa4h14pc0.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (long i : arr) {\n        ans += std::abs(i);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpx9g_br9a: /tmp/tmpx9g_br9a.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i);\n  \
    \  }\n    for (auto i : arr) {\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpddran9r9: /tmp/tmpddran9r9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += std::abs(i) * std::sign(i);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpektxr8yz.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpektxr8yz.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106149
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long long ans = 0;\n\
    \    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp903r6zif.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp903r6zif.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long long product = 1;\n    for (auto i : arr) {\n\
    \        product *= i;\n    }\n    long long sum = 0;\n    for (auto i : arr)\
    \ {\n        sum += std::abs(i);\n    }\n    return std::optional<long>(sum *\
    \ product);\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpyow0g77v: /tmp/tmpyow0g77v.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i);\n\
    \    return std::min(sum, prod * std::min(std::abs(arr[0]), std::abs(arr[1])));\n\
    }\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmplerm66n7: /tmp/tmplerm66n7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1uvjyh6g.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1uvjyh6g.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n        ans *= (i != 0);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpbrkvon1m: /tmp/tmpbrkvon1m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i)\
    \ * std::sign(i);\n    return sum * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpblh_556t.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpblh_556t.cpp:22:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   22 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106153
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr)\
    \ {\n        prod *= i;\n    }\n    return ans * prod;\n}\nint main() {\n    auto\
    \ candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcsxc39ca: /tmp/tmpcsxc39ca.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr)\n   \
    \     ans += std::abs(i);\n    for (long i : arr)\n        ans *= std::signbit(i);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp48xv651i: /tmp/tmp48xv651i.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mk203i7.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0mk203i7.cpp:22:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   22 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n    }\n    for (long i : arr) {\n        ans *= std::signbit(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnrlatzfj: /tmp/tmpnrlatzfj.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_zuw4ea.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2_zuw4ea.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long res = 0;\n \
    \   for (auto i : arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_022awcv.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_022awcv.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long long ans = 0;\n\
    \    for (auto i : arr) {\n        ans += std::abs(i);\n    }\n    for (auto i\
    \ : arr) {\n        ans *= std::signbit(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp21fu8nk2: /tmp/tmp21fu8nk2.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 0;\n    for (long long i : arr) {\n\
    \        ans += std::abs(i);\n        ans *= std::signbit(i) ? 1 : -1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpm02_sull: /tmp/tmpm02_sull.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp7n6o98j9: /tmp/tmp7n6o98j9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rro104c.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4rro104c.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqdqep08z.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqdqep08z.cpp:17:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   17 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbm5_cs0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbbm5_cs0.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return std::nullopt;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpz5j81q2o: /tmp/tmpz5j81q2o.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8ht3rdt.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph8ht3rdt.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i) * product;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpys98b5q3: /tmp/tmpys98b5q3.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i);\n    }\n    for (long i : arr) {\n        ans *= std::signbit(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwh7a2w85: /tmp/tmpwh7a2w85.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr) {\n     \
    \   prod *= i;\n    }\n    return ans * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp83fousuo: /tmp/tmp83fousuo.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcptcucsv: /tmp/tmpcptcucsv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr) {\n     \
    \   prod *= i;\n    }\n    return ans * prod;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp83fousuo: /tmp/tmp83fousuo.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmy51eso.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsmy51eso.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8ht3rdt.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph8ht3rdt.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    long ans = 0;\n \
    \   for (long i : arr) {\n        ans += std::abs(i);\n        ans *= std::signbit(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpsqi1mt_b: /tmp/tmpsqi1mt_b.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (long long i :\
    \ arr) {\n        ans += i * std::signbit(i);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpx_qzdac1: /tmp/tmpx_qzdac1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp5zxyyjob: /tmp/tmp5zxyyjob.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnxua_eg_: /tmp/tmpnxua_eg_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long long ans = 0;\n    for(long long i : arr) {\n        ans += std::abs(i)\
    \ * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_p1ywogh.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_p1ywogh.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return sum * product;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp45m6ao68: /tmp/tmp45m6ao68.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *=\
    \ i;\n    return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpb7bxjvd3: /tmp/tmpb7bxjvd3.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106153
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return sum * product;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp45m6ao68: /tmp/tmp45m6ao68.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long ans = 0;\n    long prod = 1;\n    long sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        prod *= sign;\n        sign *= -1;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpmh2f6wdj: /tmp/tmpmh2f6wdj.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106155
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n \
    \       ans += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8ht3rdt.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph8ht3rdt.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i) * prod;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpnxua_eg_: /tmp/tmpnxua_eg_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n\
    \        prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n    \
    \    sum += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint\
    \ main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_d0vwy9p.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_d0vwy9p.cpp:23:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   23 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpwwom7vyr: /tmp/tmpwwom7vyr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (long i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (long i : arr) {\n        sum\
    \ += std::abs(i) * std::sign(i);\n    }\n    return sum * prod;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mk203i7.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0mk203i7.cpp:22:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   22 |         sum += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa4h14pc0.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa4h14pc0.cpp:19:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   19 |         res += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmy51eso.cpp: In function \u2018std::optional<long int> prod_signs(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsmy51eso.cpp:18:35: error: \u2018sign\u2019 is not a member\
    \ of \u2018std\u2019; did you mean \u2018sin\u2019?\n   18 |         ans += std::abs(i)\
    \ * std::sign(i);\n      |                                   ^~~~\n      |   \
    \                                sin\n"
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    long product = 1;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i);\n        product *= i;\n    }\n    return std::nullopt;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpz5j81q2o: /tmp/tmpz5j81q2o.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    long sign = 1;\n    for (auto\
    \ i : arr) {\n        prod *= i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n \
    \   return sign * prod;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpw2fq8571: /tmp/tmpw2fq8571.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i);\n        ans *= std::signbit(i);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmptgmvacf4: /tmp/tmptgmvacf4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106154
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i);\n    }\n    for (long i : arr) {\n        res *= std::signbit(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = prod_signs;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)-4})))\
    \ == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == 0);\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1, (long)2,\
    \ (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmp6a2ukk0h: /tmp/tmp6a2ukk0h.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    // Your code here\n\
    \    long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i);\n  \
    \  }\n    long prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n\
    \    return std::optional<long>(sum * prod);\n}\nint main() {\n    auto candidate\
    \ = prod_signs;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2,\
    \ (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0, (long)1})))\
    \ == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)1,\
    \ (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpuixwo_5t: /tmp/tmpuixwo_5t.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106155
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpcptcucsv: /tmp/tmpcptcucsv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a vector\
    \ arr of integers and you need to return\n// sum of magnitudes of integers multiplied\
    \ by product of all signs\n// of each number in the vector, represented by 1,\
    \ -1 or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4})))\n// 9\n// >>> prod_signs((std::vector<long>({(long)0,\
    \ (long)1})))\n// 0\n// >>> prod_signs((std::vector<long>()))\n// std::nullopt\n\
    std::optional<long> prod_signs(std::vector<long> arr) {\n    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += std::abs(i);\n        res *= std::signbit(i) ? 1 : -1;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)-4}))) == -9);\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == 0);\n    assert(candidate((std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)2, (long)3, (long)-1, (long)1}))) == -10);\n    assert(candidate((std::vector<long>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
    \ (long)1, (long)2, (long)-1, (long)-1, (long)9}))) == 20);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)-1, (long)1}))) == 4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)1}))) == -4);\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)1, (long)1, (long)0}))) == 0);\n}\n"
  status: Exception
  stderr: 'tmpsseic9hp: /tmp/tmpsseic9hp.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)-4}))) == -9'' failed.

    '
  stdout: ''
  timestamp: 1660106151
