name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a vector.\n// If there is no negative\
  \ or positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n\
  // std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n\
  // >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>>\
  \ largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6})))\
  \ == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else {\n    \
    \        if (largest_positive > i) {\n                largest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    if (largest == lst.end()\
    \ && smallest == lst.begin()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(std::move(largest)),\
    \ std::optional<long>(std::move(smallest)));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            largest = i;\n        } else if (i > largest) {\n        \
    \    smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           if (largest == std::nullopt) {\n                largest = i;\n   \
    \         } else {\n                largest = std::nullopt;\n            }\n \
    \       } else {\n            if (smallest == std::nullopt) {\n              \
    \  smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long smallest_positive = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > smallest_positive) {\n            smallest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    // Write your code here\n  \
    \  std::vector<long> neg;\n    std::vector<long> pos;\n    for(long i : lst){\n\
    \        if(i<0){\n            neg.push_back(i);\n        }else{\n           \
    \ pos.push_back(i);\n        }\n    }\n    if(neg.size()==0 && pos.size()==0){\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if(neg.size()>0 && pos.size()==0){\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if(neg.size()==0 && pos.size()>0){\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if(neg.size()>0 && pos.size()>0){\n        long max_neg = neg[0];\n\
    \        long min_pos = pos[0];\n        for(long i=1;i<neg.size();i++){\n   \
    \         if(neg[i]>max_neg){\n                max_neg = neg[i];\n           \
    \ }\n            if(pos[i]<min_pos){\n                min_pos = pos[i];\n    \
    \        }\n        }\n        return std::make_tuple(std::optional<long>(max_neg),\
    \ std::optional<long>(min_pos));\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    long largest = std::nullopt;\n  \
    \  long smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0)\
    \ {\n            largest = i;\n        } else if (i > largest) {\n           \
    \ smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto it = lst.begin();\n   \
    \ auto last = lst.end();\n    if (*it < 0) {\n        it = last;\n    }\n    if\
    \ (*it > 0) {\n        last = it;\n    }\n    if (it == last) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto first = it;\n    ++it;\n    if (it == last) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (*it < 0) {\n        first = it;\n        ++it;\n    }\n    if\
    \ (it == last) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (*it > 0) {\n        last\
    \ = it;\n    }\n    if (it == last) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto a = *first;\n    auto b\
    \ = *it;\n    if (a > b) {\n        std::iter_swap(first,last);\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Write\
    \ your code here\n    std::vector<long> neg;\n    std::vector<long> pos;\n   \
    \ for(long i : lst) {\n        if(i<0) {\n            neg.push_back(i);\n    \
    \    }\n        else {\n            pos.push_back(i);\n        }\n    }\n    if(neg.size()>0)\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    if(pos.size()>0)\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    return\
    \ std::make_tuple(std::nullopt, std::nullopt);", "    // Write your code here\n\
    \    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst = lst;\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto min_val = *std::min_element(sorted_lst.begin(), sorted_lst.end());\n\
    \    auto max_val = *std::max_element(sorted_lst.begin(), sorted_lst.end());\n\
    \    if (min_val > max_val) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(min_val),\
    \ std::optional<long>(max_val));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::nullopt;\n        } else\
    \ {\n            smallest = std::nullopt;\n        }\n        if (largest < i)\
    \ {\n            largest = i;\n        }\n        if (smallest > i) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_list = lst;\n\
    \    std::sort(sorted_list.begin(), sorted_list.end());\n    if (sorted_list.size()\
    \ <= 1) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n\
    \    auto min_val = sorted_list[0];\n    auto max_val = sorted_list[sorted_list.size()\
    \ - 1];\n    if (min_val > max_val) {\n        return std::make_tuple(std::nullopt,\
    \ std::nullopt);\n    }\n    auto min_pos = std::lower_bound(sorted_list.begin(),\
    \ sorted_list.end(), min_val);\n    auto max_pos = std::upper_bound(sorted_list.begin(),\
    \ sorted_list.end(), max_val);\n    if (min_pos == sorted_list.end() || max_pos\
    \ == sorted_list.end()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    return std::make_tuple(std::optional<long>(min_pos - sorted_list.begin()),\
    \ std::optional<long>(max_pos - sorted_list.begin()));", "    std::vector<long>\
    \ neg;\n    std::vector<long> pos;\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            neg.push_back(i);\n        } else {\n \
    \           pos.push_back(i);\n        }\n        if (i > largest) {\n       \
    \     largest = i;\n        }\n        if (i < smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    if (neg.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (pos.size() == 0) {\n   \
    \     return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (largest < smallest) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long smallest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > smallest_positive) {\n            smallest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto min_value = *std::min_element(lst.begin(),\
    \ lst.end());\n    auto max_value = *std::max_element(lst.begin(), lst.end());\n\
    \    if (min_value < 0 && max_value > 0) return std::make_tuple(std::optional<long>(min_value),\
    \ std::optional<long>(max_value));\n    if (min_value > 0 && max_value < 0) return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(min_value));\n\
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    std::vector<long> sorted_lst;\n    sorted_lst.insert(sorted_lst.end(), lst.begin(),\
    \ lst.end());\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst[0] == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_lst[sorted_lst.size()\
    \ - 1] == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto it = sorted_lst.begin();\n\
    \    auto it2 = it;\n    ++it2;\n    long a = *it;\n    long b = *it2;\n    for\
    \ (; it != sorted_lst.end(); ++it, ++it2) {\n        if (*it < 0 && *it2 > 0)\
    \ {\n            a = *it;\n            b = *it2;\n            break;\n       \
    \ }\n        if (*it > 0 && *it2 < 0) {\n            a = *it;\n            b =\
    \ *it2;\n            break;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::max<long>(largest, i);\n\
    \        } else {\n            smallest = std::min<long>(smallest, i);\n     \
    \   }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    if (largest < smallest) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0){\n            min_val = std::min(min_val, i);\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            smallest = std::min(smallest, i);\n   \
    \     } else if (i > largest) {\n            largest = std::max(largest, i);\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    if (largest < smallest) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.size() == 0) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest = *std::max_element(lst.begin(), lst.end());\n    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long smallest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > smallest_positive) {\n            smallest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    // Write your code here\n  \
    \  long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst;\n    std::sort(lst.begin(),\
    \ lst.end());\n    sorted_lst.insert(sorted_lst.end(), lst.begin(), lst.end());\n\
    \    if (lst.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_lst.front() < 0)\
    \ {\n        sorted_lst.front() = std::nullopt;\n    }\n    if (sorted_lst.back()\
    \ > 0) {\n        sorted_lst.back() = std::nullopt;\n    }\n    return std::make_tuple(std::optional<long>(sorted_lst.front()),\
    \ std::optional<long>(sorted_lst.back()));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (largest == std::nullopt) {\n                largest =\
    \ i;\n            } else {\n                largest = std::nullopt;\n        \
    \    }\n        } else if (i > largest) {\n            if (smallest == std::nullopt)\
    \ {\n                smallest = i;\n            } else {\n                smallest\
    \ = std::nullopt;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> v1 = lst;\n    std::vector<long> v2 = lst;\n    v1.sort();\n\
    \    v2.sort();\n    if (v1.size() > v2.size()) {\n        std::swap(v1, v2);\n\
    \    }\n    if (v1.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (v2.size() == 0) {\n    \
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (v1[0] < v2[0]) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(v1[0]),\
    \ std::optional<long>(v2[0]));", "    std::vector<long> sorted_lst = std::move(lst);\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto min_pos = std::min_element(sorted_lst.begin(), sorted_lst.end());\n\
    \    auto max_neg = std::max_element(sorted_lst.begin(), sorted_lst.end());\n\
    \    if (*min_pos == *max_neg) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(*min_pos),\
    \ std::optional<long>(*max_neg));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ < i) {\n                largest_negative = i;\n            }\n        } else\
    \ if (i > 0) {\n            if (largest_positive > i) {\n                largest_positive\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = 0, b = 0, c = 0, d =\
    \ 0;\n    for (long i : lst) {\n        if (i < 0) {\n            a = i;\n   \
    \     } else if (i > 0){\n            b = i;\n        } else {\n            c\
    \ = i;\n        }\n    }\n    if (c < b) {\n        d = c;\n    } else {\n   \
    \     d = b;\n    }\n    return std::make_tuple(std::optional<long>(a), std::optional<long>(d));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> v1(lst.begin(), lst.end());\n    std::vector<long> v2(v1.begin(),\
    \ v1.end());\n    long long largest = *std::max_element(v2.begin(), v2.end());\n\
    \    long long smallest = *std::min_element(v2.begin(), v2.end());\n    return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        }\n        else if (i > 0)\n   \
    \         if (largest_positive > 0)\n                largest_positive = i;\n \
    \   }\n    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for(auto i : lst) {\n        if(i<0) {\n            largest_negative = i;\n\
    \        }\n        if(i>0) {\n            largest_positive = i;\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            a = i;\n        } else if (i > 0)\n            b = i;\n  \
    \      else\n            c = i;\n        d = std::max(d,i);\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    std::vector<long>\
    \ sorted_list(lst);\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    if (sorted_list.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list.size() == 1)\
    \ {\n        return std::make_tuple(std::optional<long>(sorted_list[0]), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] < sorted_list[1]) {\n        return std::make_tuple(std::optional<long>(sorted_list[0]),\
    \ std::optional<long>(sorted_list[1]));\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    // Write your code here\n    long\
    \ largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n \
    \           if (largest == std::nullopt) {\n                largest = i;\n   \
    \         } else {\n                largest = std::nullopt;\n            }\n \
    \       } else {\n            if (smallest == std::nullopt) {\n              \
    \  smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::max<long>(largest, i);\n\
    \        } else if (i > 0) {\n            smallest = std::min<long>(smallest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.size() == 0) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest = *std::max_element(lst.begin(), lst.end());\n    long\
    \ smallest = *std::min_element(lst.begin(), lst.end());\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0)\n            min_val = i;\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    std::vector<long> sorted_lst = lst;\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.empty())\
    \ return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    auto min_val = sorted_lst[0];\n    auto max_val = sorted_lst[0];\n    for\
    \ (size_t i = 1; i < sorted_lst.size(); ++i) {\n        if (sorted_lst[i] < min_val)\
    \ min_val = sorted_lst[i];\n        if (sorted_lst[i] > max_val) max_val = sorted_lst[i];\n\
    \    }\n    return std::make_tuple(std::optional<long>(min_val), std::optional<long>(max_val));",
  "    std::vector<long> sorted_lst;\n    std::sort(lst.begin(), lst.end());\n   \
    \ sorted_lst.insert(sorted_lst.end(), lst.begin(), lst.end());\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long smallest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : sorted_lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > smallest_positive) {\n            smallest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    // Write your code here\n  \
    \  long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            if (largest_negative < 0)\n                largest_negative\
    \ = i;\n        }\n        if (i > 0) {\n            if (largest_positive > 0)\n\
    \                largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty())\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            if (largest_negative < 0)\n                largest_negative\
    \ = i;\n        } else if (i > 0)\n            if (largest_positive > 0)\n   \
    \             largest_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long max_val = std::numeric_limits<long>::min();\n    long min_val\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            max_val = std::max(max_val, i);\n        } else if (i >\
    \ 0) {\n            min_val = std::min(min_val, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (smallest == lst.end()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (*largest < *smallest) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest_negative = std::numeric_limits<long>::max();\n    long smallest_positive\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > smallest_positive)\
    \ {\n            smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest\
    \ < i) {\n            largest = i;\n        }\n        if (smallest > i) {\n \
    \           smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst = lst;\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.front() < 0) {\n        sorted_lst.front() = std::nullopt;\n\
    \    }\n    if (sorted_lst.back() > 0) {\n        sorted_lst.back() = std::nullopt;\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            } else {\n                largest =\
    \ std::nullopt;\n            }\n        } else {\n            if (smallest ==\
    \ std::nullopt) {\n                smallest = i;\n            } else {\n     \
    \           smallest = std::nullopt;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = std::max<long>(largest,\
    \ i);\n        } else if (i > 0)\n            smallest = std::min<long>(smallest,\
    \ i);\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0)\n         \
    \   min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0)\
    \ {\n            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> sorted_list(lst);\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    if (sorted_list.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_list[0] == 0) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto min_val = sorted_list[0];\n  \
    \  auto max_val = sorted_list[0];\n    for (auto i : sorted_list) {\n        if\
    \ (i < min_val) min_val = i;\n        if (i > max_val) max_val = i;\n    }\n \
    \   return std::make_tuple(std::optional<long>(min_val), std::optional<long>(max_val));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> sorted_list = lst;\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    if (sorted_list.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_list[0] == 0) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest_negative = sorted_list[0];\n\
    \    long smallest_positive = sorted_list[0];\n    for (long i = 1; i < sorted_list.size();\
    \ i++) {\n        if (sorted_list[i] < smallest_positive) {\n            smallest_positive\
    \ = sorted_list[i];\n        } else if (sorted_list[i] > largest_negative) {\n\
    \            largest_negative = sorted_list[i];\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(smallest_positive));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        } else {\n            if (largest_positive\
    \ > 0)\n                largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long max_val = std::numeric_limits<long>::max();\n\
    \    long min_val = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0)\n\
    \            min_val = i;\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto it = std::max_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto it_neg = std::find_if(lst.begin(),\
    \ lst.end(), [](long x) { return x < 0; });\n    if (it_neg != lst.end()) {\n\
    \        long a = *it_neg;\n        auto it_pos = std::find_if(lst.begin(), lst.end(),\
    \ [&a](long x) { return x > a; });\n        if (it_pos != lst.end()) {\n     \
    \       long b = *it_pos;\n            return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));\n        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0)\n            min_val = std::min(min_val, i);\n    }\n  \
    \  return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    std::vector<long> sorted_list(lst);\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    long largest_value = sorted_list[0];\n    long smallest_value = sorted_list[0];\n\
    \    for (long i = 1; i < sorted_list.size(); i++) {\n        if (sorted_list[i]\
    \ > largest_value) {\n            largest_value = sorted_list[i];\n        }\n\
    \        if (sorted_list[i] < smallest_value) {\n            smallest_value =\
    \ sorted_list[i];\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_value),\
    \ std::optional<long>(smallest_value));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (long i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = std::max(max_negative,\
    \ i);\n        } else {\n            min_positive = std::min(min_positive, i);\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long largest_negative_integer = std::numeric_limits<long>::min();\n\
    \    long largest_positive_integer = std::numeric_limits<long>::max();\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            if (largest_negative_integer\
    \ < 0)\n                largest_negative_integer = i;\n        } else {\n    \
    \        if (largest_positive_integer > 0)\n                largest_positive_integer\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative_integer),\
    \ std::optional<long>(largest_positive_integer));", "    // Write your code here\n\
    \    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           largest = i;\n        } else if (i > largest) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst;\n    sorted_lst.insert(sorted_lst.end(),\
    \ lst.begin(), lst.end());\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\
    \    long smallest_value = sorted_lst[0];\n    long largest_value = sorted_lst[sorted_lst.size()\
    \ - 1];\n    if (smallest_value < 0 && largest_value > 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest_value < 0) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(smallest_value));\n\
    \    }\n    if (largest_value > 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(largest_value));\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    // Write your code here\n    long\
    \ largest_negative = std::numeric_limits<long>::max();\n    long largest_positive\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > 0){\n    \
    \        largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ < 0)\n                largest_negative = i;\n        }\n        else if (i >\
    \ 0)\n            if (largest_positive > 0)\n                largest_positive\
    \ = i;\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    std::vector<long> sorted_lst\
    \ = std::move(lst);\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n  \
    \  if (sorted_lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto min_val = *std::min_element(sorted_lst.begin(),\
    \ sorted_lst.end());\n    auto max_val = *std::max_element(sorted_lst.begin(),\
    \ sorted_lst.end());\n    return std::make_tuple(std::optional<long>(min_val),\
    \ std::optional<long>(max_val));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = std::max<long>(i,\
    \ largest);\n        } else {\n            smallest = std::min<long>(i, smallest);\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else if (i >\
    \ largest_positive) {\n            largest_positive = i;\n        }\n    }\n \
    \   return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::min();\n \
    \   long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\
    \    long a = sorted_lst[0];\n    long b = sorted_lst[sorted_lst.size() - 1];\n\
    \    if (a < b) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (a == b) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    std::vector<long> sorted_lst;\n    sorted_lst.insert(sorted_lst.end(), lst.begin(),\
    \ lst.end());\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n    long\
    \ a = sorted_lst[0];\n    long b = sorted_lst[0];\n    for (long i : sorted_lst)\
    \ {\n        if (i < a) {\n            a = i;\n        }\n        if (i > b) {\n\
    \            b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0){\n            min_val = std::min(min_val, i);\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            smallest = std::min(smallest, i);\n   \
    \     } else {\n            largest = std::max(largest, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(smallest));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (*largest < *smallest) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    // Your code here\n    long largest\
    \ = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(smallest));", "    std::vector<long> neg;\n    std::vector<long>\
    \ pos;\n    for (long i : lst) {\n        if (i < 0) {\n            neg.push_back(i);\n\
    \        } else {\n            pos.push_back(i);\n        }\n    }\n    if (neg.empty()\
    \ && pos.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (neg.empty()) {\n       \
    \ return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (pos.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    long largest = *std::max_element(neg.begin(),\
    \ neg.end());\n    long smallest = *std::min_element(pos.begin(), pos.end());\n\
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(smallest));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto it = std::max_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto it2 = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it2 == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (*it < *it2) {\n        return\
    \ std::make_tuple(std::optional<long>(it), std::optional<long>(it2));\n    }\n\
    \    return std::make_tuple(std::optional<long>(it2), std::optional<long>(it));",
  "    std::vector<long> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\
    \    if (sorted_lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst.front() < 0)\n     \
    \   return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst.back() >= 0)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long a = sorted_lst.front();\n    long\
    \ b = sorted_lst.back();\n    for (long i : sorted_lst) {\n        if (i < 0)\
    \ {\n            if (a < 0)\n                a = i;\n        } else if (i >= 0)\
    \ {\n            if (b >= 0)\n                b = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    if (lst.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto it = lst.begin();\n    auto last = lst.end();\n    auto max_val\
    \ = *it;\n    auto min_val = *it;\n    for (++it; it != last; ++it) {\n      \
    \  if (*it > max_val) {\n            max_val = *it;\n        }\n        if (*it\
    \ < min_val) {\n            min_val = *it;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    std::vector<long> sorted_lst = lst;\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.empty())\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst[0] == 0)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst[0] == -1)\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst[0] == 1)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst[0] == 2)\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst[0] == 3)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst[0] == 4)\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst[0] == 5)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst[0] == 6)\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst[0] == 7)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst[0] == 8)\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst[0] == 9)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst[0] == 10)\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst[0] == 11)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst[0] == 12)\n        return\
    \ std::make_tuple(std::", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (long i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    if (largest == lst.end())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (smallest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(std::move(largest)),\
    \ std::optional<long>(std::move(smallest)));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0){\n            min_val = std::min(min_val, i);\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> v1 = lst;\n    std::vector<long>\
    \ v2;\n    long max = 0;\n    long min = 0;\n    long ans = 0;\n    bool flag\
    \ = false;\n    for (long i = 0; i < v1.size(); i++) {\n        if (v1[i] > max)\
    \ {\n            max = v1[i];\n            ans = i;\n        }\n        if (v1[i]\
    \ < min) {\n            min = v1[i];\n            ans = i;\n        }\n    }\n\
    \    if (ans == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (ans == v1.size()) {\n  \
    \      return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (max < min) {\n        max = max;\n        min = min;\n    }\n\
    \    if (max > 0 && min > 0) {\n        flag = true;\n    }\n    if (flag) {\n\
    \        v2.push_back(min);\n        v2.push_back(max);\n        return largest_smallest_integers(v2);\n\
    \    }\n    if (max < 0) {\n        v2.push_back(min);\n        return largest_smallest_integers(v2);\n\
    \    }\n    if (min < 0) {\n        v2.push_back(max);\n        return largest_smallest_integers(v2);\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto it = std::max_element(lst.begin(),\
    \ lst.end());\n    auto it2 = std::min_element(lst.begin(), lst.end());\n    if\
    \ (*it < *it2)\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(it),\
    \ std::optional<long>(it2));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0) {\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            } else {\n                largest =\
    \ std::nullopt;\n            }\n        } else {\n            if (smallest ==\
    \ std::nullopt) {\n                smallest = i;\n            } else {\n     \
    \           smallest = std::nullopt;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::min();\n \
    \   long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            smallest = std::numeric_limits<long>::max();\n\
    \        } else if (i > largest) {\n            largest = i;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::min();\n \
    \   long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else {\n    \
    \        if (largest_positive > i) {\n                largest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Your code here\n    \n   \
    \ return std::make_tuple(std::nullopt, std::nullopt);", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            if (largest == std::nullopt) {\n                largest =\
    \ i;\n            } else {\n                largest = std::nullopt;\n        \
    \    }\n        } else {\n            if (smallest == std::nullopt) {\n      \
    \          smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst = std::move(lst);\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest_negative = sorted_lst[0];\n    long smallest_positive\
    \ = sorted_lst[0];\n    for (long i = 1; i < sorted_lst.size(); i++) {\n     \
    \   if (sorted_lst[i] < smallest_positive) {\n            smallest_positive =\
    \ sorted_lst[i];\n        } else if (sorted_lst[i] > largest_negative) {\n   \
    \         largest_negative = sorted_lst[i];\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    std::vector<long> sorted_lst;\n\
    \    sorted_lst.insert(sorted_lst.end(), lst.begin(), lst.end());\n    std::sort(sorted_lst.begin(),\
    \ sorted_lst.end());\n    if (sorted_lst.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_lst.size() == 1)\
    \ {\n        return std::make_tuple(std::optional<long>(sorted_lst[0]), std::optional<long>(std::nullopt));\n\
    \    }\n    auto min_val = sorted_lst[0];\n    auto max_val = sorted_lst[0];\n\
    \    for (auto it = sorted_lst.begin() + 1; it != sorted_lst.end(); ++it) {\n\
    \        if (*it < min_val) {\n            min_val = *it;\n        } else if (*it\
    \ > max_val) {\n            max_val = *it;\n        }\n    }\n    return std::make_tuple(std::optional<long>(min_val),\
    \ std::optional<long>(max_val));", "    std::vector<long> sorted_lst = lst;\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.front() < 0) {\n        sorted_lst.front() = std::nullopt;\n\
    \    }\n    if (sorted_lst.back() > 0) {\n        sorted_lst.back() = std::nullopt;\n\
    \    }\n    return std::make_tuple(std::optional<long>(sorted_lst.front()), std::optional<long>(sorted_lst.back()));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            } else {\n                largest =\
    \ std::nullopt;\n            }\n        } else {\n            if (smallest ==\
    \ std::nullopt) {\n                smallest = i;\n            } else {\n     \
    \           smallest = std::nullopt;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    std::vector<long> lst2 = lst;\n    long\
    \ largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst2) {\n        if (i < 0) {\n            largest = i;\n \
    \       } else if (i > largest) {\n            largest = i;\n        }\n     \
    \   if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest_negative = std::numeric_limits<long>::max();\n    long smallest_positive\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            if (largest_negative < 0)\n                largest_negative\
    \ = i;\n        } else {\n            if (smallest_positive > 0)\n           \
    \     smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else {\n            min_val = std::min(min_val, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0)\n         \
    \   min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long largest = std::nullopt;\n  \
    \  long smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0)\
    \ {\n            if (largest == std::nullopt) {\n                largest = i;\n\
    \            } else {\n                largest = std::nullopt;\n            }\n\
    \        } else {\n            if (smallest == std::nullopt) {\n             \
    \   smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_list = lst;\n\
    \    std::sort(sorted_list.begin(), sorted_list.end());\n    if (sorted_list.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list[0] == -1) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == -2) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list[0] == -3) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == -4) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list[0] == -5) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == -6) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list[0] == -7) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == -8) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list[0] == -9) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == -10) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list[0] == -11) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == -12) {\n        return std::make_tuple(std::",
  "    if (lst.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (smallest == lst.end())\n      \
    \  return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        } else {\n            if (largest_positive\
    \ > 0)\n                largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long val : lst)\
    \ {\n        if (val < min_val) {\n            min_val = val;\n        } else\
    \ if (val > max_val) {\n            max_val = val;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(min_val), std::optional<long>(max_val));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\
    \    if (sorted_lst.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_lst.front() < 0)\
    \ {\n        sorted_lst.front() = std::nullopt;\n    }\n    if (sorted_lst.back()\
    \ > 0) {\n        sorted_lst.back() = std::nullopt;\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\n\
    \            b = std::min(b, i);\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else if (i > 0)\n         \
    \   min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long largest = std::nullopt;\n  \
    \  long smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0)\
    \ {\n            if (largest == std::nullopt) {\n                largest = i;\n\
    \            } else {\n                largest = std::nullopt;\n            }\n\
    \        } else if (i > largest) {\n            largest = i;\n        }\n    \
    \    if (i < 0) {\n            if (smallest == std::nullopt) {\n             \
    \   smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        } else if (i > smallest) {\n            smallest = i;\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> neg;\n    std::vector<long> pos;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            neg.push_back(i);\n        } else {\n \
    \           pos.push_back(i);\n        }\n    }\n    if (neg.empty() && pos.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (neg.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (pos.empty()) {\n       \
    \ return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long a = *std::max_element(neg.begin(), neg.end());\n    long b =\
    \ *std::min_element(pos.begin(), pos.end());\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (largest < i) {\n    \
    \        largest = i;\n        }\n        if (smallest > i) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::max<long>(largest, i);\n\
    \        } else if (i > 0)\n            smallest = std::min<long>(smallest, i);\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Your\
    \ code here\n    long largest = std::numeric_limits<long>::min();\n    long smallest\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest = i;\n        } else if (i > largest) {\n      \
    \      largest = i;\n        }\n        if (i < 0) {\n            smallest = i;\n\
    \        } else if (i > smallest) {\n            smallest = i;\n        }\n  \
    \  }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto it = std::max_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto it2 = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it2 == lst.end()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    // Write your code here\n    std::vector<long>\
    \ lst2;\n    for(long i : lst)\n    {\n        if(i < 0)\n        {\n        \
    \    lst2.push_back(i);\n        }\n    }\n    if(lst2.empty())\n    {\n     \
    \   return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest = *std::max_element(lst2.begin(), lst2.end());\n    long\
    \ smallest = *std::min_element(lst2.begin(), lst2.end());\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0)\n            min_val = std::min(min_val, i);\n    }\n  \
    \  return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    std::vector<long> sorted_list = lst;\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    if (sorted_list.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list[0] == 0) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto first = sorted_list.begin();\n    auto last = sorted_list.end();\n\
    \    auto mid = first + (last - first) / 2;\n    if (sorted_list[mid] < 0)\n \
    \       first = mid + 1;\n    else\n        last = mid;\n    if (first == last)\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[first] < 0) {\n        first = first + 1;\n      \
    \  if (first == last) {\n            return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n        }\n    }\n    if (sorted_list[last]\
    \ > 0) {\n        last = last - 1;\n        if (first == last) {\n           \
    \ return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(sorted_list[first]),\
    \ std::optional<long>(sorted_list[last]));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           if (largest == std::nullopt) {\n                largest = i;\n   \
    \         } else {\n                largest = std::nullopt;\n            }\n \
    \       } else {\n            if (smallest == std::nullopt) {\n              \
    \  smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else {\n            largest = std::max(largest, i);\n       \
    \ }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(smallest));",
  "    // Write your code here\n    std::vector<long> v1;\n    std::vector<long> v2;\n\
    \    long largest = 0;\n    long smallest = 0;\n    for (long i : lst) {\n   \
    \     if (i < 0) {\n            v1.push_back(i);\n        } else {\n         \
    \   v2.push_back(i);\n        }\n    }\n    if (v1.size() > v2.size()) {\n   \
    \     largest = v1[v1.size() - 1];\n        smallest = v2[0];\n    } else {\n\
    \        largest = v2[v2.size() - 1];\n        smallest = v1[0];\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = std::nullopt;\n\
    \        } else {\n            smallest = std::nullopt;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\n\
    \        if (i < 0)\n            max_val = std::max(max_val, i);\n        else\n\
    \            min_val = std::min(min_val, i);\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest < i)\
    \ {\n            largest = i;\n        }\n        if (smallest > i) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest_negative = std::numeric_limits<long>::min();\n    long smallest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > smallest_positive)\
    \ {\n            smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest\
    \ < i) {\n            largest = i;\n        }\n        if (smallest > i) {\n \
    \           smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long max_val = *std::max_element(lst.begin(),\
    \ lst.end());\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \    if (max_val < min_val) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));"]
stop_tokens:
- "\n}"
