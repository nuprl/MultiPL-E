language: cpp
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> numbers_vec;\n    std::stringstream\
    \ ss(numbers);\n    std::string number;\n    while (std::getline(ss, number, '\
    \ ')) {\n        numbers_vec.push_back(number);\n    }\n    std::sort(numbers_vec.begin(),\
    \ numbers_vec.end());\n    std::string sorted_numbers = \"\";\n    for (auto number\
    \ : numbers_vec) {\n        sorted_numbers += number + \" \";\n    }\n    return\
    \ sorted_numbers;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2gyslmml.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp2gyslmml.cpp:17:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers_vec) {\n               ^\n/tmp/tmp2gyslmml.cpp:20:5: error:\
    \ expected ';' before 'return'\n     return sorted_numbers;\n     ^\n/tmp/tmp2gyslmml.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp2gyslmml.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp2gyslmml.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp2gyslmml.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp2gyslmml.cpp: In function 'int main()':\n/tmp/tmp2gyslmml.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2gyslmml.cpp:2:\n/tmp/tmp2gyslmml.cpp:24:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    std::string\
    \ temp = \"\";\n    for(int i = 0; i < numbers.size(); i++) {\n        if(numbers[i]\
    \ == 'nine') {\n            temp = numbers[i];\n            numbers[i] = 'nine';\n\
    \            numbers[numbers.size()-1] = temp;\n        }\n    }\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] == 'zero') {\n    \
    \        temp = numbers[i];\n            numbers[i] = 'zero';\n            numbers[numbers.size()-1]\
    \ = temp;\n        }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n \
    \       if(numbers[i] == 'one') {\n            temp = numbers[i];\n          \
    \  numbers[i] = 'one';\n            numbers[numbers.size()-1] = temp;\n      \
    \  }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n        if(numbers[i]\
    \ == 'two') {\n            temp = numbers[i];\n            numbers[i] = 'two';\n\
    \            numbers[numbers.size()-1] = temp;\n        }\n    }\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] == 'three') {\n   \
    \         temp = numbers[i];\n            numbers[i] = 'three';\n            numbers[numbers.size()-1]\
    \ = temp;\n        }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n \
    \       if(numbers[i] == 'four') {\n            temp = numbers[i];\n         \
    \   numbers[i] = 'four';\n            numbers[numbers.size()-1] = temp;\n    \
    \    }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n        if(numbers[i]\
    \ == 'five') {\n            temp = numbers[i];\n            numbers[i] = 'five';\n\
    \            numbers[numbers.size()-1] = temp;\n        }\n    }\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] == 'six') {\n     \
    \       temp = numbers[i];\n            numbers[i] = 'six';\n            numbers[numbers.size()-1]\
    \ = temp;\n        }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n \
    \       if(numbers[i] == 'seven') {\n            temp = numbers[i];\n        \
    \    numbers[i] = 'seven';\n            numbers[numbers.size()-1] = temp;\n  \
    \      }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n        if(numbers[i]\
    \ == 'eight') {\n            temp = numbers[i];\n            numbers[i] = 'eight';\n\
    \            numbers[numbers.size()-1] = temp;\n        }\n    }\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] == 'nine') {\n    \
    \        temp = numbers[i];\n            numbers[i] = 'nine';\n            numbers[numbers.size()-1]\
    \ = temp;\n        }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n \
    \       if(numbers[i] == 'zero') {\n            temp = numbers[i];\n         \
    \   numbers[i] = 'zero';\n            numbers[numbers.size()-1] = temp;\n    \
    \    }\n    }\n    for(int i = 0; i < numbers.size(); i++) {\n}\nint main() {\n\
    \    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n\
    \    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpejbe2jfh.cpp:13:26: warning: multi-character character constant\
    \ [-Wmultichar]\n         if(numbers[i] == 'nine') {\n                       \
    \   ^\n/tmp/tmpejbe2jfh.cpp:15:26: warning: multi-character character constant\
    \ [-Wmultichar]\n             numbers[i] = 'nine';\n                         \
    \ ^\n/tmp/tmpejbe2jfh.cpp:20:26: warning: multi-character character constant [-Wmultichar]\n\
    \         if(numbers[i] == 'zero') {\n                          ^\n/tmp/tmpejbe2jfh.cpp:22:26:\
    \ warning: multi-character character constant [-Wmultichar]\n             numbers[i]\
    \ = 'zero';\n                          ^\n/tmp/tmpejbe2jfh.cpp:27:26: warning:\
    \ multi-character character constant [-Wmultichar]\n         if(numbers[i] ==\
    \ 'one') {\n                          ^\n/tmp/tmpejbe2jfh.cpp:29:26: warning:\
    \ multi-character character constant [-Wmultichar]\n             numbers[i] =\
    \ 'one';\n                          ^\n/tmp/tmpejbe2jfh.cpp:34:26: warning: multi-character\
    \ character constant [-Wmultichar]\n         if(numbers[i] == 'two') {\n     \
    \                     ^\n/tmp/tmpejbe2jfh.cpp:36:26: warning: multi-character\
    \ character constant [-Wmultichar]\n             numbers[i] = 'two';\n       \
    \                   ^\n/tmp/tmpejbe2jfh.cpp:41:26: warning: character constant\
    \ too long for its type [enabled by default]\n         if(numbers[i] == 'three')\
    \ {\n                          ^\n/tmp/tmpejbe2jfh.cpp:43:26: warning: character\
    \ constant too long for its type [enabled by default]\n             numbers[i]\
    \ = 'three';\n                          ^\n/tmp/tmpejbe2jfh.cpp:48:26: warning:\
    \ multi-character character constant [-Wmultichar]\n         if(numbers[i] ==\
    \ 'four') {\n                          ^\n/tmp/tmpejbe2jfh.cpp:50:26: warning:\
    \ multi-character character constant [-Wmultichar]\n             numbers[i] =\
    \ 'four';\n                          ^\n/tmp/tmpejbe2jfh.cpp:55:26: warning: multi-character\
    \ character constant [-Wmultichar]\n         if(numbers[i] == 'five') {\n    \
    \                      ^\n/tmp/tmpejbe2jfh.cpp:57:26: warning: multi-character\
    \ character constant [-Wmultichar]\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] == \"zero\") {\n  \
    \          ans += \"zero\";\n        } else if(numbers[i] == \"one\") {\n    \
    \        ans += \"one\";\n        } else if(numbers[i] == \"two\") {\n       \
    \     ans += \"two\";\n        } else if(numbers[i] == \"three\") {\n        \
    \    ans += \"three\";\n        } else if(numbers[i] == \"four\") {\n        \
    \    ans += \"four\";\n        } else if(numbers[i] == \"five\") {\n         \
    \   ans += \"five\";\n        } else if(numbers[i] == \"six\") {\n           \
    \ ans += \"six\";\n        } else if(numbers[i] == \"seven\") {\n            ans\
    \ += \"seven\";\n        } else if(numbers[i] == \"eight\") {\n            ans\
    \ += \"eight\";\n        } else if(numbers[i] == \"nine\") {\n            ans\
    \ += \"nine\";\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn_3fnig_.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpn_3fnig_.cpp:12:26: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if(numbers[i] == \"zero\") {\n        \
    \                  ^\n/tmp/tmpn_3fnig_.cpp:14:33: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n         } else if(numbers[i] ==\
    \ \"one\") {\n                                 ^\n/tmp/tmpn_3fnig_.cpp:16:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         } else if(numbers[i] == \"two\") {\n                               \
    \  ^\n/tmp/tmpn_3fnig_.cpp:18:33: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         } else if(numbers[i] == \"three\") {\n\
    \                                 ^\n/tmp/tmpn_3fnig_.cpp:20:33: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n         } else\
    \ if(numbers[i] == \"four\") {\n                                 ^\n/tmp/tmpn_3fnig_.cpp:22:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         } else if(numbers[i] == \"five\") {\n                              \
    \   ^\n/tmp/tmpn_3fnig_.cpp:24:33: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         } else if(numbers[i] == \"six\") {\n  \
    \                               ^\n/tmp/tmpn_3fnig_.cpp:26:33: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n         } else\
    \ if(numbers[i] == \"seven\") {\n                                 ^\n/tmp/tmpn_3fnig_.cpp:28:33:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         } else if(numbers[i] == \"eight\") {\n                             \
    \    ^\n/tmp/tmpn_3fnig_.cpp:30:33: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n         } else if(numbers[i] == \"nine\"\
    ) {\n                                 ^\n/tmp/tmpn_3fnig_.cpp: In function 'int\
    \ main()':\n/tmp/tmpn_3fnig_.cpp:37:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        for(int j = 0; j < numbers.size();\
    \ j++) {\n            if(numbers[i] < numbers[j]) {\n                std::string\
    \ temp = numbers[i];\n                numbers[i] = numbers[j];\n             \
    \   numbers[j] = temp;\n            }\n        }\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        ans += numbers[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpigd83q43.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpigd83q43.cpp:14:45: error: invalid conversion from 'char' to 'const char*'\
    \ [-fpermissive]\n                 std::string temp = numbers[i];\n          \
    \                                   ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpigd83q43.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmpigd83q43.cpp:16:28: error: cannot convert 'std::string\
    \ {aka std::basic_string<char>}' to 'char' in assignment\n                 numbers[j]\
    \ = temp;\n                            ^\n/tmp/tmpigd83q43.cpp: In function 'int\
    \ main()':\n/tmp/tmpigd83q43.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpigd83q43.cpp:2:\n/tmp/tmpigd83q43.cpp:27:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string sorted_numbers = \"\";\n    std::string current_number\
    \ = \"\";\n    std::string current_number_as_string = \"\";\n    std::string current_number_as_string_reverse\
    \ = \"\";\n    std::string current_number_as_string_reverse_space = \"\";\n  \
    \  std::string current_number_as_string_reverse_space_reverse = \"\";\n    std::string\
    \ current_number_as_string_reverse_space_reverse2 = \"\";\n    std::string current_number_as_string_reverse_space_reverse3\
    \ = \"\";\n    std::string current_number_as_string_reverse_space_reverse4 = \"\
    \";\n    std::string current_number_as_string_reverse_space_reverse5 = \"\";\n\
    \    std::string current_number_as_string_reverse_space_reverse6 = \"\";\n   \
    \ std::string current_number_as_string_reverse_space_reverse7 = \"\";\n    std::string\
    \ current_number_as_string_reverse_space_reverse8 = \"\";\n    std::string current_number_as_string_reverse_space_reverse9\
    \ = \"\";\n    std::string current_number_as_string_reverse_space_reverse10 =\
    \ \"\";\n    std::string current_number_as_string_reverse_space_reverse11 = \"\
    \";\n    std::string current_number_as_string_reverse_space_reverse12 = \"\";\n\
    \    std::string current_number_as_string_reverse_space_reverse13 = \"\";\n  \
    \  std::string current_number_as_string_reverse_space_reverse14 = \"\";\n    std::string\
    \ current_number_as_string_reverse_space_reverse15 = \"\";\n    std::string current_number_as_string_reverse_space_reverse16\
    \ = \"\";\n    std::string current_number_as_string_reverse_space_reverse17 =\
    \ \"\";\n    std::string current_number_as_string_reverse_space_reverse18 = \"\
    \";\n    std::string current_number_as_string_reverse_space_reverse19 = \"\";\n\
    \    std::string current_number_as_string_reverse_space_reverse20 = \"\";\n  \
    \  std::string current_number_as_string_reverse_space_reverse21 = \"\";\n    std::string\
    \ current_number_as_string_reverse_space_reverse22 = \"\";\n    std::string current_number_as_string_reverse_space_reverse23\
    \ = \"\";\n    std::string current_number_as_string_reverse_space_reverse24 =\
    \ \"\";\n    std::string current_number_as_string_reverse_space_reverse25 = \"\
    \";\n    std::string current_number_as_string_reverse_space_reverse26 = \"\";\n\
    \    std::string current_number_as_string_reverse_space_reverse27 = \"\";\n  \
    \  std::string current_number_as_string_reverse_space_reverse28 = \"\";\n    std::string\
    \ current_number_as_string_reverse_space_reverse29 = \"\";\n    std::string current_number_as_string_reverse_space_reverse30\
    \ = \"\";\n    std::string current_number_as_string_reverse_space_reverse31 =\
    \ \"\";\n    std::string current_number_as_string_reverse_space_reverse32 = \"\
    \";\n    std::string current_number_as_string_reverse_space_reverse33 = \"\";\n\
    \    std::string current_number_as_string_reverse_space_reverse34 = \"\";\n  \
    \  std::string current_number_as_string_reverse_space_reverse35 = \"\";\n    std::string\
    \ current_number_as_string_reverse_space_reverse36 = \"\";\n    \n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zgcfqml.cpp: In function 'int main()':\n/tmp/tmp2zgcfqml.cpp:53:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2zgcfqml.cpp:2:\n/tmp/tmp2zgcfqml.cpp:54:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result;\n    std::string temp;\n    int count =\
    \ 0;\n    for (auto &c : numbers) {\n        if (c != ' ') {\n            count++;\n\
    \        }\n    }\n    for (int i = 0; i < count; i++) {\n        temp = numbers[i];\n\
    \        numbers.erase(numbers.begin() + i);\n        numbers.insert(numbers.begin()\
    \ + i, temp);\n    }\n    for (auto &c : numbers) {\n        if (c != ' ') {\n\
    \            result += c;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbv35h1js.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpbv35h1js.cpp:12:16: error: ISO C++ forbids declaration of 'c' with no\
    \ type [-fpermissive]\n     for (auto &c : numbers) {\n                ^\n/tmp/tmpbv35h1js.cpp:12:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &c : numbers) {\n                    ^\n/tmp/tmpbv35h1js.cpp:20:49: error: no\
    \ matching function for call to 'std::basic_string<char>::insert(__gnu_cxx::__normal_iterator<char*,\
    \ std::basic_string<char> >, std::string&)'\n         numbers.insert(numbers.begin()\
    \ + i, temp);\n                                                 ^\n/tmp/tmpbv35h1js.cpp:20:49:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpbv35h1js.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1185:7:\
    \ note: void std::basic_string<_CharT, _Traits, _Alloc>::insert(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::iterator, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::basic_string<char> >; typename _Alloc::rebind<_CharT>::other::pointer =\
    \ char*; std::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\n       insert(iterator __p, size_type __n, _CharT __c)\n       ^\n/usr/include/c++/4.8.2/bits/basic_string.h:1185:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/4.8.2/bits/basic_string.h:1202:9:\
    \ note: template<class _InputIterator> void std::basic_string<_CharT, _Traits,\
    \ _Alloc>::insert(std::basic_string<_CharT, _Traits, _Alloc>::iterator, _InputIterator,\
    \ _InputIterator) [with _InputIterator = _InputIterator; _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>]\n         insert(iterator\
    \ __p,"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        for(int j = i + 1; j < numbers.size();\
    \ j++) {\n            if(numbers[i] < numbers[j]) {\n                std::string\
    \ temp = numbers[i];\n                numbers[i] = numbers[j];\n             \
    \   numbers[j] = temp;\n            }\n        }\n    }\n    for(int i = 0; i\
    \ < numbers.size(); i++) {\n        ans += numbers[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8vr29b6.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpp8vr29b6.cpp:14:45: error: invalid conversion from 'char' to 'const char*'\
    \ [-fpermissive]\n                 std::string temp = numbers[i];\n          \
    \                                   ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpp8vr29b6.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]' [-fpermissive]\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/tmp/tmpp8vr29b6.cpp:16:28: error: cannot convert 'std::string\
    \ {aka std::basic_string<char>}' to 'char' in assignment\n                 numbers[j]\
    \ = temp;\n                            ^\n/tmp/tmpp8vr29b6.cpp: In function 'int\
    \ main()':\n/tmp/tmpp8vr29b6.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = sort_numbers;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp8vr29b6.cpp:2:\n/tmp/tmpp8vr29b6.cpp:27:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string result = \"\";\n  \
    \  for(int i = 0; i < numbers.size(); i++) {\n        result += numbers[i];\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpusztkc0v.cpp: In function 'int main()':\n/tmp/tmpusztkc0v.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpusztkc0v.cpp:2:\n/tmp/tmpusztkc0v.cpp:19:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string sorted_numbers = \"\";\n    std::string current_number\
    \ = \"\";\n    std::string current_number_string = \"\";\n    std::string next_number_string\
    \ = \"\";\n    std::string next_number = \"\";\n    std::string next_number_string2\
    \ = \"\";\n    std::string next_number2 = \"\";\n    std::string next_number3\
    \ = \"\";\n    std::string next_number4 = \"\";\n    std::string next_number5\
    \ = \"\";\n    std::string next_number6 = \"\";\n    std::string next_number7\
    \ = \"\";\n    std::string next_number8 = \"\";\n    std::string next_number9\
    \ = \"\";\n    std::string next_number10 = \"\";\n    std::string next_number11\
    \ = \"\";\n    std::string next_number12 = \"\";\n    std::string next_number13\
    \ = \"\";\n    std::string next_number14 = \"\";\n    std::string next_number15\
    \ = \"\";\n    std::string next_number16 = \"\";\n    std::string next_number17\
    \ = \"\";\n    std::string next_number18 = \"\";\n    std::string next_number19\
    \ = \"\";\n    std::string next_number20 = \"\";\n    std::string next_number21\
    \ = \"\";\n    std::string next_number22 = \"\";\n    std::string next_number23\
    \ = \"\";\n    std::string next_number24 = \"\";\n    std::string next_number25\
    \ = \"\";\n    std::string next_number26 = \"\";\n    std::string next_number27\
    \ = \"\";\n    std::string next_number28 = \"\";\n    std::string next_number29\
    \ = \"\";\n    std::string next_number30 = \"\";\n    std::string next_number31\
    \ = \"\";\n    std::string next_number32 = \"\";\n    std::string next_number33\
    \ = \"\";\n    std::string next_number34 = \"\";\n    std::string next_number35\
    \ = \"\";\n    std::string next_number36 = \"\";\n    std::string next_number37\
    \ = \"\";\n    std::string next_number38 = \"\";\n    std::string next_number39\
    \ = \"\";\n    std::string next_number40 = \"\";\n    std::string next_number41\
    \ = \"\";\n    std::string next_number42 = \"\";\n    std::string next_number43\
    \ = \"\";\n    std::string next_number44 = \"\";\n    std::string next_number45\
    \ = \"\";\n    std::string next_number46 = \"\";\n    std::string next_number47\
    \ = \"\";\n    std::string next_number48 = \"\";\n    std::string next_number49\
    \ = \"\";\n    std::string next_number50 = \"\";\n    std::string next_number51\
    \ = \"\";\n    std::string next_number52 = \"\";\n    std::string next_number53\
    \ = \"\";\n    std::string next_number54 = \"\";\n    std::string next_number55\
    \ = \"\";\n    std::string next_number56 = \"\";\n    std::string next_number57\
    \ = \"\";\n    std::string next_number58 = \"\";\n    std::string next_number59\
    \ = \"\";\n    std::string next_number60 = \"\";\n    std::string next_number61\
    \ = \"\";\n    std::string next_number62 = \"\";\n    std::string next_number63\
    \ = \"\";\n    std::string next_number64 = \"\";\n    std::string next_number65\
    \ = \"\";\n    std::string next_number66 = \"\";\n    std::string next_\n}\nint\
    \ main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) ==\
    \ (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9uz8nbbd.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp9uz8nbbd.cpp:81:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmp9uz8nbbd.cpp: In function 'int main()':\n/tmp/tmp9uz8nbbd.cpp:83:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9uz8nbbd.cpp:2:\n/tmp/tmp9uz8nbbd.cpp:84:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string result;\n    for(int\
    \ i=0;i<numbers.size();i++){\n        if(numbers[i]==\"zero\"){\n            result.append(\"\
    zero\");\n        }\n        else if(numbers[i]==\"one\"){\n            result.append(\"\
    one\");\n        }\n        else if(numbers[i]==\"two\"){\n            result.append(\"\
    two\");\n        }\n        else if(numbers[i]==\"three\"){\n            result.append(\"\
    three\");\n        }\n        else if(numbers[i]==\"four\"){\n            result.append(\"\
    four\");\n        }\n        else if(numbers[i]==\"five\"){\n            result.append(\"\
    five\");\n        }\n        else if(numbers[i]==\"six\"){\n            result.append(\"\
    six\");\n        }\n        else if(numbers[i]==\"seven\"){\n            result.append(\"\
    seven\");\n        }\n        else if(numbers[i]==\"eight\"){\n            result.append(\"\
    eight\");\n        }\n        else if(numbers[i]==\"nine\"){\n            result.append(\"\
    nine\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2z51jnzl.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmp2z51jnzl.cpp:12:24: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n         if(numbers[i]==\"zero\"){\n           \
    \             ^\n/tmp/tmp2z51jnzl.cpp:15:29: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n         else if(numbers[i]==\"\
    one\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:18:29: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n        \
    \ else if(numbers[i]==\"two\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:21:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"three\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:24:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"four\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:27:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"five\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:30:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"six\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:33:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"seven\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:36:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"eight\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:39:29:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \         else if(numbers[i]==\"nine\"){\n                             ^\n/tmp/tmp2z51jnzl.cpp:\
    \ In function 'int main()':\n/tmp/tmp2z51jnzl.cpp:46:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_numbers;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 fro"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result;\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int\
    \ count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n\
    \    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11\
    \ = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n   \
    \ int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18\
    \ = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n   \
    \ int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25\
    \ = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n   \
    \ int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32\
    \ = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n   \
    \ int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39\
    \ = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n   \
    \ int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46\
    \ = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n   \
    \ int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53\
    \ = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n   \
    \ int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60\
    \ = 0;\n    int count61 = 0;\n    int count62 = 0;\n    int count63 = 0;\n   \
    \ int count64 = 0;\n    int count65 = 0;\n    int count66 = 0;\n    int count67\
    \ = 0;\n    int count68 = 0;\n    int count69 = 0;\n    int count70 = 0;\n   \
    \ int count71 = 0;\n    int count72 = 0;\n    int count73 = 0;\n    int count74\
    \ = 0;\n    int count75 = 0;\n    int count76 = 0;\n    int count77 = 0;\n   \
    \ int count78 = 0;\n    int count79 = 0;\n    int count80 = 0;\n    int count81\
    \ = 0;\n    int count82 = 0;\n    int count83 = 0;\n    int count84 = 0;\n   \
    \ int count85 = 0;\n    int count86 = 0;\n    int count87 = 0;\n    int count88\
    \ = 0;\n    int count89 = 0;\n    int count90 = 0;\n    int count91 = 0;\n   \
    \ int count92 = 0;\n    int count93 = 0;\n    int count94 = 0;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03acrsqp.cpp: In function 'int main()':\n/tmp/tmp03acrsqp.cpp:115:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp03acrsqp.cpp:2:\n/tmp/tmp03acrsqp.cpp:116:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result;\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    int count = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int\
    \ count4 = 0;\n    int count5 = 0;\n    int count6 = 0;\n    int count7 = 0;\n\
    \    int count8 = 0;\n    int count9 = 0;\n    int count10 = 0;\n    int count11\
    \ = 0;\n    int count12 = 0;\n    int count13 = 0;\n    int count14 = 0;\n   \
    \ int count15 = 0;\n    int count16 = 0;\n    int count17 = 0;\n    int count18\
    \ = 0;\n    int count19 = 0;\n    int count20 = 0;\n    int count21 = 0;\n   \
    \ int count22 = 0;\n    int count23 = 0;\n    int count24 = 0;\n    int count25\
    \ = 0;\n    int count26 = 0;\n    int count27 = 0;\n    int count28 = 0;\n   \
    \ int count29 = 0;\n    int count30 = 0;\n    int count31 = 0;\n    int count32\
    \ = 0;\n    int count33 = 0;\n    int count34 = 0;\n    int count35 = 0;\n   \
    \ int count36 = 0;\n    int count37 = 0;\n    int count38 = 0;\n    int count39\
    \ = 0;\n    int count40 = 0;\n    int count41 = 0;\n    int count42 = 0;\n   \
    \ int count43 = 0;\n    int count44 = 0;\n    int count45 = 0;\n    int count46\
    \ = 0;\n    int count47 = 0;\n    int count48 = 0;\n    int count49 = 0;\n   \
    \ int count50 = 0;\n    int count51 = 0;\n    int count52 = 0;\n    int count53\
    \ = 0;\n    int count54 = 0;\n    int count55 = 0;\n    int count56 = 0;\n   \
    \ int count57 = 0;\n    int count58 = 0;\n    int count59 = 0;\n    int count60\
    \ = 0;\n    int count61 = 0;\n    int count62 = 0;\n    int count63 = 0;\n   \
    \ int count64 = 0;\n    int count65 = 0;\n    int count66 = 0;\n    int count67\
    \ = 0;\n    int count68 = 0;\n    int count69 = 0;\n    int count70 = 0;\n   \
    \ int count71 = 0;\n    int count72 = 0;\n    int count73 = 0;\n    int count74\
    \ = 0;\n    int count75 = 0;\n    int count76 = 0;\n    int count77 = 0;\n   \
    \ int count78 = 0;\n    int count79 = 0;\n    int count80 = 0;\n    int count81\
    \ = 0;\n    int count82 = 0;\n    int count83 = 0;\n    int count84 = 0;\n   \
    \ int count85 = 0;\n    int count86 = 0;\n    int count87 = 0;\n    int count88\
    \ = 0;\n    int count89 = 0;\n    int count90 = 0;\n    int count91 = 0;\n   \
    \ int count92 = 0;\n    int count93 = 0;\n    int count94 = 0;\n}\nint main()\
    \ {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"\
    ));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03acrsqp.cpp: In function 'int main()':\n/tmp/tmp03acrsqp.cpp:115:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp03acrsqp.cpp:2:\n/tmp/tmp03acrsqp.cpp:116:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::vector<std::string> numbers_vec;\n    std::string sorted_numbers;\n\
    \    std::istringstream iss(numbers);\n    std::string number;\n    while (std::getline(iss,\
    \ number, ' ')) {\n        numbers_vec.push_back(number);\n    }\n    std::sort(numbers_vec.begin(),\
    \ numbers_vec.end(), [](const std::string& a, const std::string& b) -> bool {\n\
    \        return a < b;\n    });\n    for (auto number : numbers_vec) {\n     \
    \   sorted_numbers += \" \" + number;\n    }\n    return sorted_numbers;\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfkz6496s.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpfkz6496s.cpp:18:5: warning: lambda expressions only available with -std=c++11\
    \ or -std=gnu++11 [enabled by default]\n     });\n     ^\n/tmp/tmpfkz6496s.cpp:18:6:\
    \ error: no matching function for call to 'sort(std::vector<std::basic_string<char>\
    \ >::iterator, std::vector<std::basic_string<char> >::iterator, sort_numbers(std::string)::__lambda0)'\n\
    \     });\n      ^\n/tmp/tmpfkz6496s.cpp:18:6: note: candidates are:\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpfkz6496s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfkz6496s.cpp:18:6:\
    \ note:   candidate expects 2 arguments, 3 provided\n     });\n      ^\nIn file\
    \ included from /usr/include/c++/4.8.2/algorithm:62:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n             \
    \    from /tmp/tmpfkz6496s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5:\
    \ note: template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter,\
    \ _Compare)\n     sort(_RandomAccessIterator __first, _RandomAccessIterator __last,\n\
    \     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5483:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpfkz6496s.cpp: In substitution of 'template<class\
    \ _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::basic_string<char>*, std::vector<std::basic_string<char>\
    \ > >; _Compare = sort_numbers(std::string)::__lambda0]':\n/tmp/tmpfkz6496s.cpp:18:6:\
    \   required from here\n/tmp/tmpfkz6496s.cpp:18:6: error: template argument for\
    \ 'template<class _RAIter, class _Compare> void std::sort(_RAIter, _RAIter, _Compare"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result = \"\";\n    std::string temp;\n    int i\
    \ = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    while(i\
    \ < n) {\n        temp = numbers[i];\n        while(j < n) {\n            if(numbers[j]\
    \ < temp) {\n                temp = numbers[j];\n                k = j;\n    \
    \        }\n            j++;\n        }\n        result += temp;\n        temp\
    \ = numbers[k];\n        while(j < n) {\n            if(numbers[j] > temp) {\n\
    \                temp = numbers[j];\n                k = j;\n            }\n \
    \           j++;\n        }\n        result += temp;\n        i++;\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\
    \")) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm6it_fq8.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpm6it_fq8.cpp:18:27: error: no match for 'operator<' (operand types are\
    \ 'char' and 'std::string {aka std::basic_string<char>}')\n             if(numbers[j]\
    \ < temp) {\n                           ^\n/tmp/tmpm6it_fq8.cpp:18:27: note: candidates\
    \ are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpm6it_fq8.cpp:2:\n/usr/include/c++/4.8.2/valarray:1181:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__less, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less, _Tp>::result_type>\
    \ std::operator<(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(<,\
    \ __less)\n ^\n/usr/include/c++/4.8.2/valarray:1181:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpm6it_fq8.cpp:18:29: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'const std::valarray<_Tp>'\n\
    \             if(numbers[j] < temp) {\n                             ^\nIn file\
    \ included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpm6it_fq8.cpp:2:\n/usr/include/c++/4.8.2/valarray:1181:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__less, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__less, _Tp>::result_type>\
    \ std::operator<(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(<,\
    \ __less)\n ^\n/usr/include/c++/4.8.2/valarray:1181:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpm6it_fq8.cpp:18:29: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'char'\n             if(numbers[j] < temp)\
    \ {\n                             ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpm6it_fq8.cpp:2:\n/usr/include/c++/4.8.2/valarray:1181:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__less, std::_ValArray,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less, _Tp>::result_type"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result;\n    std::string temp;\n    std::string\
    \ temp2;\n    std::string temp3;\n    std::string temp4;\n    std::string temp5;\n\
    \    std::string temp6;\n    std::string temp7;\n    std::string temp8;\n    std::string\
    \ temp9;\n    std::string temp10;\n    std::string temp11;\n    std::string temp12;\n\
    \    std::string temp13;\n    std::string temp14;\n    std::string temp15;\n \
    \   std::string temp16;\n    std::string temp17;\n    std::string temp18;\n  \
    \  std::string temp19;\n    std::string temp20;\n    std::string temp21;\n   \
    \ std::string temp22;\n    std::string temp23;\n    std::string temp24;\n    std::string\
    \ temp25;\n    std::string temp26;\n    std::string temp27;\n    std::string temp28;\n\
    \    std::string temp29;\n    std::string temp30;\n    std::string temp31;\n \
    \   std::string temp32;\n    std::string temp33;\n    std::string temp34;\n  \
    \  std::string temp35;\n    std::string temp36;\n    std::string temp37;\n   \
    \ std::string temp38;\n    std::string temp39;\n    std::string temp40;\n    std::string\
    \ temp41;\n    std::string temp42;\n    std::string temp43;\n    std::string temp44;\n\
    \    std::string temp45;\n    std::string temp46;\n    std::string temp47;\n \
    \   std::string temp48;\n    std::string temp49;\n    std::string temp50;\n  \
    \  std::string temp51;\n    std::string temp52;\n    std::string temp53;\n   \
    \ std::string temp54;\n    std::string temp55;\n    std::string temp56;\n    std::string\
    \ temp57;\n    std::string temp58;\n    std::string temp59;\n    std::string temp60;\n\
    \    std::string temp61;\n    std::string temp62;\n    std::string temp63;\n \
    \   std::string temp64;\n    std::string temp65;\n    std::string temp66;\n  \
    \  std::string temp67;\n    std::string temp68;\n    std::string temp69;\n   \
    \ std::string temp70;\n    std::string temp71;\n    std::string temp72;\n    std::string\
    \ temp73;\n    std::string temp74;\n    std::string temp75;\n    std::string temp76;\n\
    \    std::string temp77;\n    std::string temp78;\n    std::string temp79;\n \
    \   std::string temp80;\n    std::string temp81;\n    std::string temp82;\n  \
    \  std::string temp83;\n    std::string temp84;\n    std::string temp85;\n   \
    \ std::string temp86;\n    std::string temp87;\n    std::string temp88;\n\n}\n\
    int main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"))\
    \ == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpira7hk.cpp: In function 'int main()':\n/tmp/tmpnpira7hk.cpp:101:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnpira7hk.cpp:2:\n/tmp/tmpnpira7hk.cpp:102:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    \n    std::string result = \"\"\
    ;\n    \n    for(int i = 0; i < numbers.size(); i++) {\n        result += numbers[i];\n\
    \    }\n    \n    std::sort(result.begin(), result.end());\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvr2kzui3.cpp: In function 'int main()':\n/tmp/tmpvr2kzui3.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvr2kzui3.cpp:2:\n/tmp/tmpvr2kzui3.cpp:23:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here\n    std::string sorted_numbers = \"\
    \";\n    std::string temp = \"\";\n    std::string temp_number = \"\";\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    int n = numbers.length();\n    for(i\
    \ = 0; i < n; i++) {\n        temp_number = numbers[i];\n        j = i;\n    \
    \    while(j > 0 && numbers[j - 1] > temp_number) {\n            temp = numbers[j];\n\
    \            numbers[j] = numbers[j - 1];\n            numbers[j - 1] = temp;\n\
    \            j--;\n        }\n    }\n    for(i = 0; i < n; i++) {\n        sorted_numbers\
    \ += numbers[i];\n    }\n    return sorted_numbers;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpen2wzfrd.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpen2wzfrd.cpp:20:39: error: no match for 'operator>' (operand types are\
    \ 'char' and 'std::string {aka std::basic_string<char>}')\n         while(j >\
    \ 0 && numbers[j - 1] > temp_number) {\n                                     \
    \  ^\n/tmp/tmpen2wzfrd.cpp:20:39: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n           \
    \      from /tmp/tmpen2wzfrd.cpp:2:\n/usr/include/c++/4.8.2/valarray:1182:1: note:\
    \ template<class _Tp> std::_Expr<std::_BinClos<std::__greater, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__greater, _Tp>::result_type>\
    \ std::operator>(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(>,\
    \ __greater)\n ^\n/usr/include/c++/4.8.2/valarray:1182:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpen2wzfrd.cpp:20:41: note:   'std::string\
    \ {aka std::basic_string<char>}' is not derived from 'const std::valarray<_Tp>'\n\
    \         while(j > 0 && numbers[j - 1] > temp_number) {\n                   \
    \                      ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpen2wzfrd.cpp:2:\n/usr/include/c++/4.8.2/valarray:1182:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__greater, std::_ValArray,\
    \ std::_Constant, _Tp, _Tp>, typename std::__fun<std::__greater, _Tp>::result_type>\
    \ std::operator>(const std::valarray<_Tp>&, const _Tp&)\n _DEFINE_BINARY_OPERATOR(>,\
    \ __greater)\n ^\n/usr/include/c++/4.8.2/valarray:1182:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpen2wzfrd.cpp:20:41: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'char'\n         while(j > 0 && numbers[j\
    \ - 1] > temp_number) {\n                                         ^\nIn file included\
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n      \
    \           from /tmp/tmpen2wzfrd.cpp:2:\n/usr/include/c++/4.8.2/valarray:1182:1:\
    \ note: template<class _Tp> std::_Expr<std::_Bin"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    // Write your code here.\n    std::string ans = \"\";\n    for(int\
    \ i = 0; i < numbers.size(); i++) {\n        if(numbers[i] >= '0' && numbers[i]\
    \ <= '9') {\n            ans += numbers[i];\n        }\n    }\n    for(int i =\
    \ 0; i < numbers.size(); i++) {\n        if(numbers[i] >= '0' && numbers[i] <=\
    \ '9') {\n            ans += numbers[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = sort_numbers;\n    assert(candidate((\"\"\
    )) == (\"\"));\n    assert(candidate((\"three\")) == (\"three\"));\n    assert(candidate((\"\
    three five nine\")) == (\"three five nine\"));\n    assert(candidate((\"five zero\
    \ four seven nine eight\")) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"\
    six five four three two one zero\")) == (\"zero one two three four five six\"\
    ));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8a9b0ff.cpp: In function 'int main()':\n/tmp/tmpw8a9b0ff.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw8a9b0ff.cpp:2:\n/tmp/tmpw8a9b0ff.cpp:25:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string result = \"\";\n    std::string temp;\n    int n\
    \ = numbers.size(); // number of numbers in input string\n    for (int i = 0;\
    \ i < n; i++) {\n        temp = numbers[i];\n        numbers[i] = numbers[n -\
    \ i - 1];\n        numbers[n - i - 1] = temp;\n    }\n    for (int i = 0; i <\
    \ n; i++) {\n        if (numbers[i] != 'nine') {\n            result += numbers[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = sort_numbers;\n\
    \    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"three\")) ==\
    \ (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"three five\
    \ nine\"));\n    assert(candidate((\"five zero four seven nine eight\")) == (\"\
    zero four five seven eight nine\"));\n    assert(candidate((\"six five four three\
    \ two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd1l4pegg.cpp:18:27: warning: multi-character character constant\
    \ [-Wmultichar]\n         if (numbers[i] != 'nine') {\n                      \
    \     ^\n/tmp/tmpd1l4pegg.cpp: In function 'std::string sort_numbers(std::string)':\n\
    /tmp/tmpd1l4pegg.cpp:15:28: error: cannot convert 'std::string {aka std::basic_string<char>}'\
    \ to 'char' in assignment\n         numbers[n - i - 1] = temp;\n             \
    \               ^\n/tmp/tmpd1l4pegg.cpp: In function 'int main()':\n/tmp/tmpd1l4pegg.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpd1l4pegg.cpp:2:\n/tmp/tmpd1l4pegg.cpp:26:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return\
    \ the string with numbers sorted from smallest to largest\n// >>> sort_numbers((\"\
    three one five\"))\n// (\"one three five\")\nstd::string sort_numbers(std::string\
    \ numbers) {\n    std::string sorted_numbers = numbers;\n    std::sort(sorted_numbers.begin(),\
    \ sorted_numbers.end());\n    return sorted_numbers;\n}\nint main() {\n    auto\
    \ candidate = sort_numbers;\n    assert(candidate((\"\")) == (\"\"));\n    assert(candidate((\"\
    three\")) == (\"three\"));\n    assert(candidate((\"three five nine\")) == (\"\
    three five nine\"));\n    assert(candidate((\"five zero four seven nine eight\"\
    )) == (\"zero four five seven eight nine\"));\n    assert(candidate((\"six five\
    \ four three two one zero\")) == (\"zero one two three four five six\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgh63fqlu.cpp: In function 'int main()':\n/tmp/tmpgh63fqlu.cpp:14:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_numbers;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgh63fqlu.cpp:2:\n/tmp/tmpgh63fqlu.cpp:15:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (\"\"));\n                          ^\n"
  stdout: ''
