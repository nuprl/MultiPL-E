language: cpp
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int temp;\n    for (long long int i = 0; i < n; i++) {\n\
    \        for (long long int j = i + 1; j < m; j++) {\n            if (lst[i] >\
    \ lst[j]) {\n                temp = lst[i];\n                lst[i] = lst[j];\n\
    \                lst[j] = temp;\n            }\n        }\n    }\n    return lst.size()\
    \ == 0;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphopcv0xa.cpp: In function 'int main()':\n/tmp/tmphopcv0xa.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphopcv0xa.cpp:2:\n/tmp/tmphopcv0xa.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmphopcv0xa.cpp:40:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmphopcv0xa.cpp:40:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphopcv0xa.cpp:40:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmphopcv0xa.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmphopcv0xa.cpp:41:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmphopcv0xa.cpp:41:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphopcv0xa.cpp:41:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphopcv0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    for (long long int i = 0; i < n; i++) {\n        if (lst[i] > lst[m])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu2j43nr.cpp: In function 'int main()':\n/tmp/tmpuu2j43nr.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuu2j43nr.cpp:2:\n/tmp/tmpuu2j43nr.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpuu2j43nr.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpuu2j43nr.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuu2j43nr.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpuu2j43nr.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpuu2j43nr.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpuu2j43nr.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuu2j43nr.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpuu2j43"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.at(n - 1);\n    for (long long int i = n - 2; i >= 0;\
    \ i--) {\n        if (lst.at(i) > m) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb89g3n83.cpp: In function 'int main()':\n/tmp/tmpb89g3n83.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb89g3n83.cpp:2:\n/tmp/tmpb89g3n83.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpb89g3n83.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpb89g3n83.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpb89g3n83.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpb89g3n83.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpb89g3n83.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpb89g3n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int x;\n    long long int y;\n    long long int z;\n    long long\
    \ int w;\n    long long int u;\n    long long int v;\n    long long int w1;\n\
    \    long long int w2;\n    long long int w3;\n    long long int w4;\n    long\
    \ long int w5;\n    long long int w6;\n    long long int w7;\n    long long int\
    \ w8;\n    long long int w9;\n    long long int w10;\n    long long int w11;\n\
    \    long long int w12;\n    long long int w13;\n    long long int w14;\n    long\
    \ long int w15;\n    long long int w16;\n    long long int w17;\n    long long\
    \ int w18;\n    long long int w19;\n    long long int w20;\n    long long int\
    \ w21;\n    long long int w22;\n    long long int w23;\n    long long int w24;\n\
    \    long long int w25;\n    long long int w26;\n    long long int w27;\n    long\
    \ long int w28;\n    long long int w29;\n    long long int w30;\n    long long\
    \ int w31;\n    long long int w32;\n    long long int w33;\n    long long int\
    \ w34;\n    long long int w35;\n    long long int w36;\n    long long int w37;\n\
    \    long long int w38;\n    long long int w39;\n    long long int w40;\n    long\
    \ long int w41;\n    long long int w42;\n    long long int w43;\n    long long\
    \ int w44;\n    long long int w45;\n    long long int w46;\n    long long int\
    \ w47;\n    long long int w48;\n    long long int w49;\n    long long int w50;\n\
    \    long long int w51;\n    long long int w52;\n    long long int w53;\n    long\
    \ long int w54;\n    long long int w55;\n    long long int w56;\n    long long\
    \ int w57;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnxurw7ik.cpp: In function 'int main()':\n/tmp/tmpnxurw7ik.cpp:94:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnxurw7ik.cpp:2:\n/tmp/tmpnxurw7ik.cpp:95:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpnxurw7ik.cpp:95:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpnxurw7ik.cpp:95:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnxurw7ik.cpp:95:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpnxurw7ik.cpp:96:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpnxurw7ik.cpp:96:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpnxurw7ik.cpp:96:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpnxurw7ik.cpp:96:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpnxurw7"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int last = lst[0];\n    for (long long int i : lst) {\n\
    \        if (i != last) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7be_e1vl.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmp7be_e1vl.cpp:25:28: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long long int i : lst) {\n                           \
    \ ^\n/tmp/tmp7be_e1vl.cpp: In function 'int main()':\n/tmp/tmp7be_e1vl.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7be_e1vl.cpp:2:\n/tmp/tmp7be_e1vl.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp7be_e1vl.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp7be_e1vl.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7be_e1vl.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp7be_e1vl.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp7be_e1vl.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp7be_e1vl.cpp:35:86:\
    \ warning: extended initia"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5w312o2.cpp: In function 'int main()':\n/tmp/tmpe5w312o2.cpp:281:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5w312o2.cpp:2:\n/tmp/tmpe5w312o2.cpp:282:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpe5w312o2.cpp:282:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpe5w312o2.cpp:282:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:282:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpe5w312o2.cpp:283:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpe5w312o2.cpp:283:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpe5w312o2.cpp:283:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:283:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int mid = n\
    \ / 2;\n    long long int left = lst[mid];\n    long long int right = lst[mid\
    \ + 1];\n    if (left < right)\n        return true;\n    if (left > right)\n\
    \        return false;\n    return is_sorted(lst, mid + 1, n);\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpanhne5dm.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpanhne5dm.cpp:36:37: error: too many arguments to function 'bool is_sorted(std::vector<long\
    \ int>)'\n     return is_sorted(lst, mid + 1, n);\n                          \
    \           ^\n/tmp/tmpanhne5dm.cpp:23:6: note: declared here\n bool is_sorted(std::vector<long>\
    \ lst) {\n      ^\n/tmp/tmpanhne5dm.cpp: In function 'int main()':\n/tmp/tmpanhne5dm.cpp:39:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpanhne5dm.cpp:2:\n/tmp/tmpanhne5dm.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpanhne5dm.cpp:40:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpanhne5dm.cpp:40:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpanhne5dm.cpp:40:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpanhne5dm.cpp:41:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpanhne5dm.cpp:41:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    long long int\
    \ k = 0;\n    long long int l = 0;\n    long long int temp;\n    while (i < n)\
    \ {\n        j = i;\n        while (j < n) {\n            if (lst[j] > lst[j +\
    \ 1]) {\n                k = j;\n                temp = lst[j];\n            \
    \    lst[j] = lst[k];\n                lst[k] = temp;\n            }\n       \
    \     j++;\n        }\n        i++;\n    }\n    i = j;\n    while (i < n) {\n\
    \        j = i;\n        while (j < n) {\n            if (lst[j] < lst[j + 1])\
    \ {\n                k = j;\n                temp = lst[j];\n                lst[j]\
    \ = lst[k];\n                lst[k] = temp;\n            }\n            j++;\n\
    \        }\n        i++;\n    }\n    i = j;\n    while (i < n) {\n        j =\
    \ i;\n        while (j < n) {\n            if (lst[j] == lst[j + 1]) {\n     \
    \           k = j;\n                temp = lst[j];\n                lst[j] = lst[k];\n\
    \                lst[k] = temp;\n            }\n            j++;\n        }\n\
    \        i++;\n    }\n    i = j;\n    while (i < n) {\n        j = i;\n      \
    \  while (j < n) {\n            if (lst[j] > lst[j + 1]) {\n                k\
    \ = j;\n                temp = lst[j];\n                lst[j] = lst[k];\n   \
    \             lst[k] = temp;\n            }\n            j++;\n        }\n   \
    \     i++;\n    }\n    i = j;\n    while (i < n) {\n        j = i;\n        while\
    \ (j < n) {\n            if (lst[j] < lst[j + 1]) {\n                k = j;\n\
    \                temp = lst[j];\n                lst[j] = lst[k];\n          \
    \      lst[k] = temp;\n            }\n            j++;\n        }\n        i++;\n\
    \    }\n    i = j;\n    while (i < n) {\n        j = i;\n        while (j < n)\
    \ {\n            if (lst[j] == lst[j + 1]) {\n                k = j;\n       \
    \         temp = lst[j];\n                lst[j] = lst[k];\n                lst[k]\
    \ = temp;\n            }\n            j++;\n        }\n        i++;\n    }\n \
    \   i = j;\n    while (i < n) {\n        j = i;\n        while (j < n) {\n   \
    \         if (lst[j] > lst[j + 1]) {\n                k = j;\n               \
    \ temp = lst[j];\n                lst[j] = lst[k];\n                lst[k] = temp;\n\
    \            }\n            j++;\n        }\n        i++;\n    }\n    i = j;\n\
    \    while (i < n) {\n        j = i;\n        while (j < n) {\n            if\
    \ (lst[j] < \n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpstu9nfr9.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpstu9nfr9.cpp:133:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmpstu9nfr9.cpp:133:1: error: expected ')' before '}' token\n/tmp/tmpstu9nfr9.cpp:133:1:\
    \ error: expected primary-expression before '}' token\n/tmp/tmpstu9nfr9.cpp:133:1:\
    \ error: expected ';' before '}' token\n/tmp/tmpstu9nfr9.cpp:134:12: error: a\
    \ function-definition is not allowed here before '{' token\n int main() {\n  \
    \          ^\n/tmp/tmpstu9nfr9.cpp:149:1: error: expected '}' at end of input\n\
    \ }\n ^\n/tmp/tmpstu9nfr9.cpp:149:1: error: expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    if (n == 2)\n        return\
    \ lst[0] == lst[1] && lst[1] == lst[2];\n    if (n == 3)\n        return lst[0]\
    \ == lst[1] && lst[1] == lst[2] && lst[2] == lst[3];\n    if (n == 4)\n      \
    \  return lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] ==\
    \ lst[4];\n    if (n == 5)\n        return lst[0] == lst[1] && lst[1] == lst[2]\
    \ && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5];\n    if (n == 6)\n\
    \        return lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3] && lst[3]\
    \ == lst[4] && lst[4] == lst[5] && lst[5] == lst[6];\n    if (n == 7)\n      \
    \  return lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] ==\
    \ lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7];\n    if\
    \ (n == 8)\n        return lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3]\
    \ && lst[3] == lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7]\
    \ && lst[7] == lst[8];\n    if (n == 9)\n        return lst[0] == lst[1] && lst[1]\
    \ == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5] && lst[5]\
    \ == lst[6] && lst[6] == lst[7] && lst[7] == lst[8] && lst[8] == lst[9];\n   \
    \ if (n == 10)\n        return lst[0] == lst[1] && lst[1] == lst[2] && lst[2]\
    \ == lst[3] && lst[3] == lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6]\
    \ == lst[7] && lst[7] == lst[8] && lst[8] == lst[9] && lst[9] == lst[10];\n  \
    \  if (n == 11)\n        return lst[0] == lst[1] && lst[1] == lst[2] && lst[2]\
    \ == lst[3] && lst[3] == lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6]\
    \ == lst[7] && lst[7] == lst[8] && lst[8] == lst[9] && lst[9] == lst[10] && lst[10]\
    \ == lst[11];\n    if (n == 12)\n        return lst[0] == lst[1] && lst[1] ==\
    \ lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5] && lst[5]\
    \ == lst[6] && lst[6] == lst[7] && lst[7] == lst[8] && lst[8] == lst[9] && \n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25u6r4jm.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmp25u6r4jm.cpp:51:1: error: expected primary-expression before '}' token\n\
    \ }\n ^\n/tmp/tmp25u6r4jm.cpp:51:1: error: expected ';' before '}' token\n/tmp/tmp25u6r4jm.cpp:\
    \ In function 'int main()':\n/tmp/tmp25u6r4jm.cpp:53:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp25u6r4jm.cpp:2:\n/tmp/tmp25u6r4jm.cpp:54:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp25u6r4jm.cpp:54:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp25u6r4jm.cpp:54:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp25u6r4jm.cpp:54:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp25u6r4jm.cpp:55:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp25u6r4jm.cpp:55:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp25u6r4jm.cpp:55:86:\
    \ warning: extended initializer"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long long int arr[50];\n    long long int\
    \ temp;\n    long long int i;\n    long long int j;\n    long long int k;\n  \
    \  long long int n;\n    long long int m;\n    long long int temp1;\n    long\
    \ long int temp2;\n    long long int temp3;\n    long long int temp4;\n    long\
    \ long int temp5;\n    long long int temp6;\n    long long int temp7;\n    long\
    \ long int temp8;\n    long long int temp9;\n    long long int temp10;\n    long\
    \ long int temp11;\n    long long int temp12;\n    long long int temp13;\n   \
    \ long long int temp14;\n    long long int temp15;\n    long long int temp16;\n\
    \    long long int temp17;\n    long long int temp18;\n    long long int temp19;\n\
    \    long long int temp20;\n    long long int temp21;\n    long long int temp22;\n\
    \    long long int temp23;\n    long long int temp24;\n    long long int temp25;\n\
    \    long long int temp26;\n    long long int temp27;\n    long long int temp28;\n\
    \    long long int temp29;\n    long long int temp30;\n    long long int temp31;\n\
    \    long long int temp32;\n    long long int temp33;\n    long long int temp34;\n\
    \    long long int temp35;\n    long long int temp36;\n    long long int temp37;\n\
    \    long long int temp38;\n    long long int temp39;\n    long long int temp40;\n\
    \    long long int temp41;\n    long long int temp42;\n    long long int temp43;\n\
    \    long long int temp44;\n    long long int temp45;\n    long long int temp46;\n\
    \    long long int temp47;\n    long long int temp48;\n    long long int temp49;\n\
    \    long long int temp50;\n    long long int temp51;\n    long long int temp52;\n\
    \    long long int temp53;\n    long long int temp54;\n    long long int temp55;\n\
    \    long long int temp56;\n    long long int temp57;\n    long long int temp58;\n\
    \    long long int temp59;\n    long long int temp60;\n\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkennb40.cpp: In function 'int main()':\n/tmp/tmpwkennb40.cpp:95:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwkennb40.cpp:2:\n/tmp/tmpwkennb40.cpp:96:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpwkennb40.cpp:96:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpwkennb40.cpp:96:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwkennb40.cpp:96:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpwkennb40.cpp:97:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpwkennb40.cpp:97:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpwkennb40.cpp:97:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpwkennb40.cpp:97:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpwkennb"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                k = j;\n\
    \                temp = lst[i];\n                lst[i] = lst[k];\n          \
    \      lst[k] = temp;\n            }\n        }\n    }\n    return lst.size()\
    \ == 0;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5o5os1in.cpp: In function 'int main()':\n/tmp/tmp5o5os1in.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5o5os1in.cpp:2:\n/tmp/tmp5o5os1in.cpp:44:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp5o5os1in.cpp:44:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp5o5os1in.cpp:44:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5o5os1in.cpp:44:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp5o5os1in.cpp:45:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp5o5os1in.cpp:45:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp5o5os1in.cpp:45:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5o5os1in.cpp:45:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp5o5os1"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int l = 0;\n    long long int h = 0;\n    long long int\
    \ mid = 0;\n    bool sorted = false;\n    long long int n = lst.size();\n    long\
    \ long int m = n / 2;\n    for (long long int i = 0; i < n; i++) {\n        l\
    \ = lst[i];\n        mid = l + (h - l) / 2;\n        if (mid > lst[m]) {\n   \
    \         sorted = true;\n            break;\n        }\n        if (mid < lst[m])\
    \ {\n            h = mid;\n        }\n    }\n    return sorted;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfh5_j5aa.cpp: In function 'int main()':\n/tmp/tmpfh5_j5aa.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfh5_j5aa.cpp:2:\n/tmp/tmpfh5_j5aa.cpp:45:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpfh5_j5aa.cpp:45:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpfh5_j5aa.cpp:45:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfh5_j5aa.cpp:45:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpfh5_j5aa.cpp:46:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpfh5_j5aa.cpp:46:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpfh5_j5aa.cpp:46:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfh5_j5aa.cpp:46:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpfh5_j5"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.at(n - 1);\n    for (long long int i = n - 2; i >= 0;\
    \ i--) {\n        if (lst.at(i) > m) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb89g3n83.cpp: In function 'int main()':\n/tmp/tmpb89g3n83.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb89g3n83.cpp:2:\n/tmp/tmpb89g3n83.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpb89g3n83.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpb89g3n83.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpb89g3n83.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpb89g3n83.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpb89g3n83.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpb89g3n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw57aicda.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpw57aicda.cpp:118:12: error: a function-definition is not allowed here\
    \ before '{' token\n int main() {\n            ^\n/tmp/tmpw57aicda.cpp:133:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmpw57aicda.cpp:133:1: error:\
    \ expected '}' at end of input\n/tmp/tmpw57aicda.cpp:133:1: error: expected '}'\
    \ at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0)\n        return true;\n    if (lst.size() ==\
    \ 1)\n        return lst[0] == lst[0];\n    long prev = lst[0];\n    for (long\
    \ i : lst) {\n        if (i > prev)\n            return false;\n        prev =\
    \ i;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93rt446u.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmp93rt446u.cpp:29:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp93rt446u.cpp:\
    \ In function 'int main()':\n/tmp/tmp93rt446u.cpp:37:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp93rt446u.cpp:2:\n/tmp/tmp93rt446u.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp93rt446u.cpp:38:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp93rt446u.cpp:38:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp93rt446u.cpp:38:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp93rt446u.cpp:39:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp93rt446u.cpp:39:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp93rt446u.cpp:39:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1)\n        return true;\n\
    \    long long int m = lst.size() - 1;\n    for (long long int i = 0; i < m; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpidrpq2lt.cpp: In function 'int main()':\n/tmp/tmpidrpq2lt.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpidrpq2lt.cpp:2:\n/tmp/tmpidrpq2lt.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpidrpq2lt.cpp:37:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpidrpq2lt.cpp:37:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpidrpq2lt.cpp:37:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpidrpq2lt.cpp:38:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpidrpq2lt.cpp:38:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpidrpq2lt.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpidrpq2lt.cpp:38:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpidrpq2"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() <= 1) return true;\n    long prev = lst[0];\n   \
    \ for (long i : lst) {\n        if (i == prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqvo4lxs.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpiqvo4lxs.cpp:26:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpiqvo4lxs.cpp:\
    \ In function 'int main()':\n/tmp/tmpiqvo4lxs.cpp:33:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqvo4lxs.cpp:2:\n/tmp/tmpiqvo4lxs.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpiqvo4lxs.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpiqvo4lxs.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqvo4lxs.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpiqvo4lxs.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpiqvo4lxs.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpiqvo4lxs.cpp:35:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    for (i = 0; i < m; i++) {\n        if (lst[i]\
    \ > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_wmubyi3: /tmp/tmp_wmubyi3.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long prev = lst[0];\n    for\
    \ (long &elem : lst) {\n        if (elem < prev) return false;\n        prev =\
    \ elem;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcncw7ycq: /tmp/tmpcncw7ycq.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.at(n - 1);\n    for (long long int i = n - 2; i >= 0;\
    \ i--) {\n        if (lst.at(i) > m) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb89g3n83.cpp: In function 'int main()':\n/tmp/tmpb89g3n83.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb89g3n83.cpp:2:\n/tmp/tmpb89g3n83.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpb89g3n83.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpb89g3n83.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpb89g3n83.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpb89g3n83.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpb89g3n83.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpb89g3n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int mid = n\
    \ / 2;\n    long long int left = lst[mid];\n    long long int right = lst[mid+1];\n\
    \    if (left < right)\n        return false;\n    return is_sorted(lst, mid+1,\
    \ right);\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3q3i42z.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn3q3i42z.cpp:34:39: error: no matching function for call\
    \ to \u2018is_sorted(std::vector<long int>&, long long int, long long int&)\u2019\
    \n   34 |     return is_sorted(lst, mid+1, right);\n      |                  \
    \                     ^\n/tmp/tmpn3q3i42z.cpp:23:6: note: candidate: \u2018bool\
    \ is_sorted(std::vector<long int>)\u2019\n   23 | bool is_sorted(std::vector<long>\
    \ lst) {\n      |      ^~~~~~~~~\n/tmp/tmpn3q3i42z.cpp:23:6: note:   candidate\
    \ expects 1 argument, 3 provided\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn3q3i42z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note: candidate: \u2018template<class _FIter> bool std::is_sorted(_FIter, _FIter)\u2019\
    \n 3203 |     is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n \
    \     |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpn3q3i42z.cpp:34:39:\
    \ note:   deduced conflicting types for parameter \u2018_FIter\u2019 (\u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   34 |     return is_sorted(lst,\
    \ mid+1, right);\n      |                                       ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn3q3i42z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note: candidate: \u2018template<class _FIter, class _Compare> bool std::is_sorted(_FIter,\
    \ _FIter, _Compare)\u2019\n 3217 |     is_sorted(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note:   template argument deduction/substitution failed:\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long prev = lst[0];\n   \
    \ for (long i : lst) {\n        if (i == prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpebhlec8g: /tmp/tmpebhlec8g.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[] = {(long long int)lst.begin(),\
    \ (long long int)lst.end()};\n    sort(arr, arr + 2);\n    return arr[0] == arr[1];\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj17_1f2e.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj17_1f2e.cpp:25:53: error: invalid cast from type \u2018\
    std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} to type \u2018long long int\u2019\n   25\
    \ |     long long int arr[] = {(long long int)lst.begin(), (long long int)lst.end()};\n\
    \      |                                                     ^\n/tmp/tmpj17_1f2e.cpp:25:79:\
    \ error: invalid cast from type \u2018std::vector<long int>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to type \u2018long long int\u2019\n   25 |     long long int arr[] = {(long\
    \ long int)lst.begin(), (long long int)lst.end()};\n      |                  \
    \                                                             ^\n/tmp/tmpj17_1f2e.cpp:26:5:\
    \ error: \u2018sort\u2019 was not declared in this scope; did you mean \u2018\
    std::sort\u2019?\n   26 |     sort(arr, arr + 2);\n      |     ^~~~\n      | \
    \    std::sort\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj17_1f2e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4848:5:\
    \ note: \u2018std::sort\u2019 declared here\n 4848 |     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last,\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    bool flag = false;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n \
    \               flag = true;\n                break;\n            }\n        }\n\
    \    }\n    if (flag == true) {\n        return false;\n    }\n    for (i = 0;\
    \ i < m; i++) {\n        for (j = i + 1; j < m; j++) {\n            if (lst[i]\
    \ < lst[j]) {\n                flag = true;\n                break;\n        \
    \    }\n        }\n    }\n    if (flag == true) {\n        return false;\n   \
    \ }\n    for (i = 0; i < m; i++) {\n        for (j = i + 1; j < m; j++) {\n  \
    \          if (lst[i] == lst[j]) {\n                flag = true;\n           \
    \     break;\n            }\n        }\n    }\n    if (flag == true) {\n     \
    \   return false;\n    }\n    for (i = 0; i < m; i++) {\n        for (j = i +\
    \ 1; j < m; j++) {\n            if (lst[i] > lst[j]) {\n                flag =\
    \ true;\n                break;\n            }\n        }\n    }\n    if (flag\
    \ == true) {\n        return false;\n    }\n    for (i = 0; i < m; i++) {\n  \
    \      for (j = i + 1; j < m; j++) {\n            if (lst[i] < lst[j]) {\n   \
    \             flag = true;\n                break;\n            }\n        }\n\
    \    }\n    if (flag == true) {\n        return false;\n    }\n    for (i = 0;\
    \ i < m; i++) {\n        for (j = i + 1; j < m; j++) {\n            if (lst[i]\
    \ == lst[j]) {\n                flag = true;\n                break;\n       \
    \     }\n        }\n    }\n    if (flag == true) {\n        return false;\n  \
    \  }\n    for (i = 0; i < m; i++) {\n        for (j = i + 1; j < m; j++) {\n \
    \           if (lst[i] > lst[j]) {\n                flag = true;\n           \
    \     break;\n            }\n        }\n    }\n    if (flag == true) {\n     \
    \   return false;\n    }\n    for (i = 0; i < m; i++) {\n        for (j = i +\
    \ 1; j < m; j++) {\n            if (lst[i] < lst[j]) {\n                flag =\
    \ true;\n                break;\n            }\n        }\n    }\n    if (flag\
    \ == true) {\n        return false;\n    }\n    for (i = 0; i < m; i++) {\n  \
    \      for (j = i + 1; j < m; j++) {\n            if (lst[i] == lst[j]) {\n  \
    \              flag = true;\n                break;\n            }\n        }\n\
    \    }\n    if (flag == true) {\n        return false;\n    }\n    for (i = 0;\
    \ i < m; i++) {\n        for (j = i + 1; j < m; j++) {\n            if (lst[i]\
    \ > lst[j]) {\n                flag = true;\n                break;\n        \
    \    }\n        }\n    }\n    if (flag == true) {\n        return false;\n   \
    \ }\n    for (i = 0; i < m; i++) {\n        for (j = i + 1; j < m; j++) {\n  \
    \          if (lst[i] < lst[j]) {\n                flag = true;\n            \
    \    break;\n            }\n        }\n    }\n    if (flag == true) {\n      \
    \  return false;\n    }\n    for \n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3fb3m14.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj3fb3m14.cpp:153:1: error: expected \u2018(\u2019 before\
    \ \u2018}\u2019 token\n  153 | }\n      | ^\n      | (\n/tmp/tmpj3fb3m14.cpp:153:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n/tmp/tmpj3fb3m14.cpp:153:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n/tmp/tmpj3fb3m14.cpp:152:8:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  152 |     for\n\
    \      |        ^\n      |        ;\n  153 | }\n      | ~       \n/tmp/tmpj3fb3m14.cpp:153:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  153 | }\n \
    \     | ^\n/tmp/tmpj3fb3m14.cpp:152:8: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  152 |     for\n      |        ^\n      |        )\n  153 | }\n\
    \      | ~       \n/tmp/tmpj3fb3m14.cpp:153:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  153 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int x;\n    long long int y;\n    long long int z;\n    long long\
    \ int w;\n    long long int u;\n    long long int v;\n    long long int w1;\n\
    \    long long int w2;\n    long long int w3;\n    long long int w4;\n    long\
    \ long int w5;\n    long long int w6;\n    long long int w7;\n    long long int\
    \ w8;\n    long long int w9;\n    long long int w10;\n    long long int w11;\n\
    \    long long int w12;\n    long long int w13;\n    long long int w14;\n    long\
    \ long int w15;\n    long long int w16;\n    long long int w17;\n    long long\
    \ int w18;\n    long long int w19;\n    long long int w20;\n    long long int\
    \ w21;\n    long long int w22;\n    long long int w23;\n    long long int w24;\n\
    \    long long int w25;\n    long long int w26;\n    long long int w27;\n    long\
    \ long int w28;\n    long long int w29;\n    long long int w30;\n    long long\
    \ int w31;\n    long long int w32;\n    long long int w33;\n    long long int\
    \ w34;\n    long long int w35;\n    long long int w36;\n    long long int w37;\n\
    \    long long int w38;\n    long long int w39;\n    long long int w40;\n    long\
    \ long int w41;\n    long long int w42;\n    long long int w43;\n    long long\
    \ int w44;\n    long long int w45;\n    long long int w46;\n    long long int\
    \ w47;\n    long long int w48;\n    long long int w49;\n    long long int w50;\n\
    \    long long int w51;\n    long long int w52;\n    long long int w53;\n    long\
    \ long int w54;\n    long long int w55;\n    long long int w56;\n    long long\
    \ int w57;\n\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp88qat3gg: /tmp/tmp88qat3gg.cpp:96: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 1;\n    for (long long int i = 0; i < lst.size(); i++) {\n     \
    \   if (lst[i] == lst[i - 1]) {\n            count++;\n        } else {\n    \
    \        sum += count;\n            count = 1;\n        }\n    }\n    sum += count;\n\
    \    return sum == lst.size();\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8osn3wov: /tmp/tmp8osn3wov.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int n = lst.size();\n   \
    \ long long int m = lst.size() - 1;\n    long long int i = 0;\n    long long int\
    \ j = 0;\n    long long int k = 0;\n    long long int temp = 0;\n    long long\
    \ int flag = 0;\n    long long int flag2 = 0;\n    long long int flag3 = 0;\n\
    \    long long int flag4 = 0;\n    long long int flag5 = 0;\n    long long int\
    \ flag6 = 0;\n    long long int flag7 = 0;\n    long long int flag8 = 0;\n   \
    \ long long int flag9 = 0;\n    long long int flag10 = 0;\n    long long int flag11\
    \ = 0;\n    long long int flag12 = 0;\n    long long int flag13 = 0;\n    long\
    \ long int flag14 = 0;\n    long long int flag15 = 0;\n    long long int flag16\
    \ = 0;\n    long long int flag17 = 0;\n    long long int flag18 = 0;\n    long\
    \ long int flag19 = 0;\n    long long int flag20 = 0;\n    long long int flag21\
    \ = 0;\n    long long int flag22 = 0;\n    long long int flag23 = 0;\n    long\
    \ long int flag24 = 0;\n    long long int flag25 = 0;\n    long long int flag26\
    \ = 0;\n    long long int flag27 = 0;\n    long long int flag28 = 0;\n    long\
    \ long int flag29 = 0;\n    long long int flag30 = 0;\n    long long int flag31\
    \ = 0;\n    long long int flag32 = 0;\n    long long int flag33 = 0;\n    long\
    \ long int flag34 = 0;\n    long long int flag35 = 0;\n    long long int flag36\
    \ = 0;\n    long long int flag37 = 0;\n    long long int flag38 = 0;\n    long\
    \ long int flag39 = 0;\n    long long int flag40 = 0;\n    long long int flag41\
    \ = 0;\n    long long int flag42 = 0;\n    long long int flag43 = 0;\n    long\
    \ long int flag44 = 0;\n    long long int flag45 = 0;\n    long long int flag46\
    \ = 0;\n    long long int flag47 = 0;\n    long long int flag48 = 0;\n    long\
    \ long int flag49 = 0;\n    long long int flag50 = 0;\n    long long int flag51\
    \ = 0;\n    long long int flag52 = 0;\n    long long int flag53 = 0;\n    long\
    \ long int flag54 = 0;\n    long long int flag55 = 0;\n    long long int flag56\
    \ = 0;\n    long long int flag57 = 0;\n    long long int flag58 = 0;\n\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiv1q7kag: /tmp/tmpiv1q7kag.cpp:93: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int prev = lst[0];\n    for (long long int i = 1; i < n; i++) {\n\
    \        if (lst[i] < prev) return false;\n        prev = lst[i];\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2n2pt77_: /tmp/tmp2n2pt77_.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() <= 1) return true;\n    long prev = lst[0];\n   \
    \ for (long &x: lst) {\n        if (prev > x) \n            return false;\n  \
    \      prev = x;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmqseceuy: /tmp/tmpmqseceuy.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    for (long long int i = 0; i < m; i++) {\n        if (lst[i] > lst[i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnobmq8o6: /tmp/tmpnobmq8o6.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int count[1000];\n    long\
    \ long int maxCount = 0;\n    long long int minCount = 0;\n    long long int sum\
    \ = 0;\n    long long int sum2 = 0;\n    long long int sum3 = 0;\n    long long\
    \ int sum4 = 0;\n    long long int sum5 = 0;\n    long long int sum6 = 0;\n  \
    \  long long int sum7 = 0;\n    long long int sum8 = 0;\n    long long int sum9\
    \ = 0;\n    long long int sum10 = 0;\n    long long int sum11 = 0;\n    long long\
    \ int sum12 = 0;\n    long long int sum13 = 0;\n    long long int sum14 = 0;\n\
    \    long long int sum15 = 0;\n    long long int sum16 = 0;\n    long long int\
    \ sum17 = 0;\n    long long int sum18 = 0;\n    long long int sum19 = 0;\n   \
    \ long long int sum20 = 0;\n    long long int sum21 = 0;\n    long long int sum22\
    \ = 0;\n    long long int sum23 = 0;\n    long long int sum24 = 0;\n    long long\
    \ int sum25 = 0;\n    long long int sum26 = 0;\n    long long int sum27 = 0;\n\
    \    long long int sum28 = 0;\n    long long int sum29 = 0;\n    long long int\
    \ sum30 = 0;\n    long long int sum31 = 0;\n    long long int sum32 = 0;\n   \
    \ long long int sum33 = 0;\n    long long int sum34 = 0;\n    long long int sum35\
    \ = 0;\n    long long int sum36 = 0;\n    long long int sum37 = 0;\n    long long\
    \ int sum38 = 0;\n    long long int sum39 = 0;\n    long long int sum40 = 0;\n\
    \    long long int sum41 = 0;\n    long long int sum42 = 0;\n    long long int\
    \ sum43 = 0;\n    long long int sum44 = 0;\n    long long int sum45 = 0;\n   \
    \ long long int sum46 = 0;\n    long long int sum47 = 0;\n    long long int sum48\
    \ = 0;\n    long long int sum49 = 0;\n    long long int sum50 = 0;\n    long long\
    \ int sum51 = 0;\n    long long int sum52 = 0;\n    long long int sum53 = 0;\n\
    \    long long int sum54 = 0;\n    long long int sum55 = 0;\n    long long int\
    \ sum56 = 0;\n    long long int sum57 = 0;\n    long long int sum58 = 0;\n   \
    \ long long int sum59 = 0;\n    long long int sum60 = 0;\n    long long int sum61\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0htf0xpk.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0htf0xpk.cpp:89:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   89 | }\n      | ^\n/tmp/tmp0htf0xpk.cpp:89:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    if (n == 0) return true;\n    if (n ==\
    \ 1) return false;\n    long first = lst[0];\n    long last = lst[n-1];\n    for\
    \ (int i = 1; i < n; i++) {\n        if (lst[i] < first) return false;\n     \
    \   if (lst[i] > last) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2b_wta4b: /tmp/tmp2b_wta4b.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = 0;\n    for (long long int i : lst) {\n      \
    \  if (i != lst[n]) {\n            return false;\n        }\n        n++;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n   \
    \ assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp15isa_on: /tmp/tmp15isa_on.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long prev = lst[0];\n    for\
    \ (long curr = lst[1]; curr < lst.size(); curr++) {\n        if (prev == curr)\
    \ return true;\n        prev = curr;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2qfn0rnu: /tmp/tmp2qfn0rnu.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    int count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (lst[i]\
    \ > lst[j]) {\n                return false;\n            }\n        }\n     \
    \   count++;\n    }\n    return count == 0;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp134vai_5: /tmp/tmp134vai_5.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int n = lst.size();\n   \
    \ long long int m = lst.size() - 1;\n    long long int temp;\n    bool flag =\
    \ false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < m;\
    \ j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \      flag = true;\n            }\n        }\n    }\n    return flag;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxdqjqwop: /tmp/tmpxdqjqwop.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() <= 1) return true;\n    long first = lst[0];\n  \
    \  for (long i = 1, j = lst.size() - 1; i < j; i++, j--) {\n        if (lst[i]\
    \ < first) break;\n        if (lst[i] > lst[j]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpciowz1xn: /tmp/tmpciowz1xn.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : lst) {\n        sum += i;\n     \
    \   count++;\n    }\n    if (count == 1) {\n        if (sum == lst[0]) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfy6enzxd: /tmp/tmpfy6enzxd.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long last = lst[0];\n   \
    \ for (long i : lst) {\n        if (i != last) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp09hzcxxz: /tmp/tmp09hzcxxz.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyijzib2a.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyijzib2a.cpp:118:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  118 | int main() {\n      |     \
    \       ^\n/tmp/tmpyijzib2a.cpp:133:1: error: expected \u2018}\u2019 at end of\
    \ input\n  133 | }\n      | ^\n/tmp/tmpyijzib2a.cpp:112:38: note: to match this\
    \ \u2018{\u2019\n  112 |         for (j = i + 1; j <= m; j++) {\n      |     \
    \                                 ^\n/tmp/tmpyijzib2a.cpp:133:1: error: expected\
    \ \u2018}\u2019 at end of input\n  133 | }\n      | ^\n/tmp/tmpyijzib2a.cpp:111:30:\
    \ note: to match this \u2018{\u2019\n  111 |     for (i = 0; i <= m; i++) {\n\
    \      |                              ^\n/tmp/tmpyijzib2a.cpp:133:1: error: expected\
    \ \u2018}\u2019 at end of input\n  133 | }\n      | ^\n/tmp/tmpyijzib2a.cpp:23:39:\
    \ note: to match this \u2018{\u2019\n   23 | bool is_sorted(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmpyijzib2a.cpp:133:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  133 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long prev = lst[0];\n    for\
    \ (long &i : lst) {\n        if (i == prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj2k4u4u1: /tmp/tmpj2k4u4u1.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int n = lst.size();\n   \
    \ long long int m = lst.size();\n    long long int count = 0;\n    long long int\
    \ prev = 0;\n    long long int cur = 0;\n    long long int temp = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        prev = cur;\n        cur = lst[i];\n    \
    \    if (prev != cur) {\n            count++;\n        }\n    }\n    if (count\
    \ == m) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv0p4sl5c: /tmp/tmpv0p4sl5c.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749490
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    if (lst.size() == 1) return\
    \ true;\n    if (lst.size() == 2) return true;\n    if (lst.size() == 3) return\
    \ true;\n    if (lst.size() == 4) return true;\n    if (lst.size() == 5) return\
    \ true;\n    if (lst.size() == 6) return true;\n    if (lst.size() == 7) return\
    \ true;\n    if (lst.size() == 8) return true;\n    if (lst.size() == 9) return\
    \ true;\n    if (lst.size() == 10) return true;\n    if (lst.size() == 11) return\
    \ true;\n    if (lst.size() == 12) return true;\n    if (lst.size() == 13) return\
    \ true;\n    if (lst.size() == 14) return true;\n    if (lst.size() == 15) return\
    \ true;\n    if (lst.size() == 16) return true;\n    if (lst.size() == 17) return\
    \ true;\n    if (lst.size() == 18) return true;\n    if (lst.size() == 19) return\
    \ true;\n    if (lst.size() == 20) return true;\n    if (lst.size() == 21) return\
    \ true;\n    if (lst.size() == 22) return true;\n    if (lst.size() == 23) return\
    \ true;\n    if (lst.size() == 24) return true;\n    if (lst.size() == 25) return\
    \ true;\n    if (lst.size() == 26) return true;\n    if (lst.size() == 27) return\
    \ true;\n    if (lst.size() == 28) return true;\n    if (lst.size() == 29) return\
    \ true;\n    if (lst.size() == 30) return true;\n    if (lst.size() == 31) return\
    \ true;\n    if (lst.size() == 32) return true;\n    if (lst.size() == 33) return\
    \ true;\n    if (lst.size() == 34) return true;\n    if (lst.size() == 35) return\
    \ true;\n    if (lst.size() == 36) return true;\n    if (lst.size() == 37) return\
    \ true;\n    if (lst.size() == 38) return true;\n    if (lst.size() == 39) return\
    \ true;\n    if (lst.size() == 40) return true;\n    if (lst.size() == 41) return\
    \ true;\n    if (lst.size() == 42) return true;\n    if (lst.size() == 43) return\
    \ true;\n    if (lst.size() == 44) return true;\n    if (lst.size() == 45) return\
    \ true;\n    if (lst.size() == 46) return true;\n    if (lst.size() == 47) return\
    \ true;\n    if (lst.size() == 48) return true;\n    if (lst.size() == 49) return\
    \ true;\n    if (lst.size() == 50) return true;\n    if (lst.size() == 51) return\
    \ true;\n    if (lst.size() == 52) return true;\n    if (lst.size() == 53) return\
    \ true;\n    if (lst.size() == 54) return true;\n    if (lst.size() == 55) return\
    \ true;\n    if (lst.size() == \n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxr_d36bz.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxr_d36bz.cpp:81:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpxr_d36bz.cpp:80:22:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   80 |     if (lst.size()\
    \ ==\n      |        ~             ^\n      |                      )\n   81 |\
    \ }\n      | ~                     \n/tmp/tmpxr_d36bz.cpp:81:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpxr_d36bz.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659749490
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    for (i = 0; i < n; i++) {\n        if (lst[i]\
    \ < lst[m]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb_2z84m8: /tmp/tmpb_2z84m8.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749490
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long long int n = lst.size();\n    long long\
    \ int m = lst.size() - 1;\n    long long int i = 0;\n    long long int j = 0;\n\
    \    long long int k = 0;\n    long long int temp = 0;\n    long long int count\
    \ = 0;\n    long long int flag = 0;\n    long long int flag2 = 0;\n    long long\
    \ int flag3 = 0;\n    long long int flag4 = 0;\n    long long int flag5 = 0;\n\
    \    long long int flag6 = 0;\n    long long int flag7 = 0;\n    long long int\
    \ flag8 = 0;\n    long long int flag9 = 0;\n    long long int flag10 = 0;\n  \
    \  long long int flag11 = 0;\n    long long int flag12 = 0;\n    long long int\
    \ flag13 = 0;\n    long long int flag14 = 0;\n    long long int flag15 = 0;\n\
    \    long long int flag16 = 0;\n    long long int flag17 = 0;\n    long long int\
    \ flag18 = 0;\n    long long int flag19 = 0;\n    long long int flag20 = 0;\n\
    \    long long int flag21 = 0;\n    long long int flag22 = 0;\n    long long int\
    \ flag23 = 0;\n    long long int flag24 = 0;\n    long long int flag25 = 0;\n\
    \    long long int flag26 = 0;\n    long long int flag27 = 0;\n    long long int\
    \ flag28 = 0;\n    long long int flag29 = 0;\n    long long int flag30 = 0;\n\
    \    long long int flag31 = 0;\n    long long int flag32 = 0;\n    long long int\
    \ flag33 = 0;\n    long long int flag34 = 0;\n    long long int flag35 = 0;\n\
    \    long long int flag36 = 0;\n    long long int flag37 = 0;\n    long long int\
    \ flag38 = 0;\n    long long int flag39 = 0;\n    long long int flag40 = 0;\n\
    \    long long int flag41 = 0;\n    long long int flag42 = 0;\n    long long int\
    \ flag43 = 0;\n    long long int flag44 = 0;\n    long long int flag45 = 0;\n\
    \    long long int flag46 = 0;\n    long long int flag47 = 0;\n    long long int\
    \ flag48 = 0;\n    long long int flag49 = 0;\n    long long int flag50 = 0;\n\
    \    long long int flag51 = 0;\n    long long int flag52 = 0;\n    long long int\
    \ flag53 = 0;\n    long long int flag54 = 0;\n    long long int flag55 = 0;\n\
    \    long long int flag56 = 0;\n    long long int flag57 = 0;\n    long \n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplng1ue_q.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplng1ue_q.cpp:90:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   90 | }\n      | ^\n/tmp/tmplng1ue_q.cpp:90:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749490
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = i + 1; j < m; j++) {\n            if (lst[i] > lst[j]) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkeoed6ao: /tmp/tmpkeoed6ao.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[50];\n    long long\
    \ int temp;\n    long long int count = 0;\n    for(int i=0;i<lst.size();i++){\n\
    \        for(int j=i+1;j<lst.size();j++){\n            if(lst[i]>lst[j]){\n  \
    \              temp = lst[i];\n                lst[i] = lst[j];\n            \
    \    lst[j] = temp;\n            }\n        }\n    }\n    for(int i=0;i<lst.size();i++){\n\
    \        if(arr[i]==lst[i]){\n            count++;\n        }\n    }\n    if(count==lst.size()){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbgrsl2tt: /tmp/tmpbgrsl2tt.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5w312o2.cpp: In function 'int main()':\n/tmp/tmpe5w312o2.cpp:281:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5w312o2.cpp:2:\n/tmp/tmpe5w312o2.cpp:282:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpe5w312o2.cpp:282:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpe5w312o2.cpp:282:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:282:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpe5w312o2.cpp:283:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpe5w312o2.cpp:283:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpe5w312o2.cpp:283:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:283:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    long long int\
    \ k = 0;\n    long long int temp = 0;\n    while (i < n) {\n        if (lst[i]\
    \ < lst[j]) {\n            temp = lst[i];\n            lst[i] = lst[j];\n    \
    \        lst[j] = temp;\n        }\n        i++;\n        j++;\n    }\n    while\
    \ (j < m) {\n        if (lst[j] < lst[k]) {\n            temp = lst[j];\n    \
    \        lst[j] = lst[k];\n            lst[k] = temp;\n        }\n        j++;\n\
    \        k++;\n    }\n    while (j < m) {\n        if (lst[j] == lst[k]) {\n \
    \           return false;\n        }\n        j++;\n        k++;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp94reykl0: /tmp/tmp94reykl0.cpp:61: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long last = lst[0];\n    for (long i : lst) {\n        if (i !=\
    \ last) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpden8gqkz: /tmp/tmpden8gqkz.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int last = lst[0];\n    long long int curr = lst[0];\n\
    \    for (long long int i = 1; i < lst.size(); i++) {\n        if (lst[i] < last)\
    \ {\n            return false;\n        }\n        if (lst[i] > curr) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4i7kw8v1: /tmp/tmp4i7kw8v1.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    long long int m = lst.at(0);\n    for (long long int i = 1; i < n; i++) {\n\
    \        if (lst.at(i) > m)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn8st7bi8: /tmp/tmpn8st7bi8.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i > prev)\
    \ {\n            return false;\n        }\n        prev = i;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_j71xkam: /tmp/tmp_j71xkam.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.at(0);\n\
    \    long long int k = n;\n    long long int i = 0;\n    long long int j = 0;\n\
    \    long long int temp;\n    while (i < n) {\n        j = i;\n        while (j\
    \ < n && lst.at(j) < m) {\n            j++;\n        }\n        if (j == n) {\n\
    \            return true;\n        }\n        temp = lst.at(j);\n        lst.at(j)\
    \ = lst.at(i);\n        lst.at(i) = temp;\n        i++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpubtbiaw9: /tmp/tmpubtbiaw9.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int n = lst.size();\n   \
    \ long long int m = lst.size();\n    long long int i = 0;\n    long long int j\
    \ = 0;\n    long long int k = 0;\n    long long int temp = 0;\n    long long int\
    \ count = 0;\n    long long int flag = 0;\n    long long int flag2 = 0;\n    long\
    \ long int flag3 = 0;\n    long long int flag4 = 0;\n    long long int flag5 =\
    \ 0;\n    long long int flag6 = 0;\n    long long int flag7 = 0;\n    long long\
    \ int flag8 = 0;\n    long long int flag9 = 0;\n    long long int flag10 = 0;\n\
    \    long long int flag11 = 0;\n    long long int flag12 = 0;\n    long long int\
    \ flag13 = 0;\n    long long int flag14 = 0;\n    long long int flag15 = 0;\n\
    \    long long int flag16 = 0;\n    long long int flag17 = 0;\n    long long int\
    \ flag18 = 0;\n    long long int flag19 = 0;\n    long long int flag20 = 0;\n\
    \    long long int flag21 = 0;\n    long long int flag22 = 0;\n    long long int\
    \ flag23 = 0;\n    long long int flag24 = 0;\n    long long int flag25 = 0;\n\
    \    long long int flag26 = 0;\n    long long int flag27 = 0;\n    long long int\
    \ flag28 = 0;\n    long long int flag29 = 0;\n    long long int flag30 = 0;\n\
    \    long long int flag31 = 0;\n    long long int flag32 = 0;\n    long long int\
    \ flag33 = 0;\n    long long int flag34 = 0;\n    long long int flag35 = 0;\n\
    \    long long int flag36 = 0;\n    long long int flag37 = 0;\n    long long int\
    \ flag38 = 0;\n    long long int flag39 = 0;\n    long long int flag40 = 0;\n\
    \    long long int flag41 = 0;\n    long long int flag42 = 0;\n    long long int\
    \ flag43 = 0;\n    long long int flag44 = 0;\n    long long int flag45 = 0;\n\
    \    long long int flag46 = 0;\n    long long int flag47 = 0;\n    long long int\
    \ flag48 = 0;\n    long long int flag49 = 0;\n    long long int flag50 = 0;\n\
    \    long long int flag51 = 0;\n    long long int flag52 = 0;\n    long long int\
    \ flag53 = 0;\n    long long int flag54 = 0;\n    long long int flag55 = 0;\n\
    \    long long int flag56 = 0;\n    long long int flag57 = 0;\n    long long \n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprug2ms0t.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprug2ms0t.cpp:90:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   90 | }\n      | ^\n/tmp/tmprug2ms0t.cpp:90:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749490
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int last = lst[0];\n    for (long long int i : lst) {\n\
    \        if (i == last) {\n            return false;\n        }\n        last\
    \ = i;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmwpperp8: /tmp/tmpmwpperp8.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    while (i < m &&\
    \ lst[i] < lst[j]) {\n        i++;\n        j++;\n    }\n    if (i == m) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo7q27aug: /tmp/tmpo7q27aug.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 1; i < n; i++) {\n       \
    \ if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_1jyo07r: /tmp/tmp_1jyo07r.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int l = 0;\n    long long int h = 0;\n    long long int\
    \ mid = 0;\n    bool flag = false;\n    for (long long int i = 0; i < lst.size();\
    \ i++) {\n        l = lst[i];\n        mid = l + (h - l) / 2;\n        if (mid\
    \ > h) {\n            h = mid;\n        } else {\n            flag = true;\n \
    \       }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5g1vscd4: /tmp/tmp5g1vscd4.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0) return true;\n  \
    \  if (n == 1) return false;\n    long long int mid = n / 2;\n    long long int\
    \ left = lst[mid];\n    long long int right = lst[n - 1];\n    if (left > right)\
    \ return false;\n    if (left == right) return true;\n    return is_sorted(lst,\
    \ mid + 1, n - 1);\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8p_ls3ue.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8p_ls3ue.cpp:32:41: error: no matching function for call\
    \ to \u2018is_sorted(std::vector<long int>&, long long int, long long int)\u2019\
    \n   32 |     return is_sorted(lst, mid + 1, n - 1);\n      |                \
    \                         ^\n/tmp/tmp8p_ls3ue.cpp:23:6: note: candidate: \u2018\
    bool is_sorted(std::vector<long int>)\u2019\n   23 | bool is_sorted(std::vector<long>\
    \ lst) {\n      |      ^~~~~~~~~\n/tmp/tmp8p_ls3ue.cpp:23:6: note:   candidate\
    \ expects 1 argument, 3 provided\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8p_ls3ue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note: candidate: \u2018template<class _FIter> bool std::is_sorted(_FIter, _FIter)\u2019\
    \n 3203 |     is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n \
    \     |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8p_ls3ue.cpp:32:41:\
    \ note:   deduced conflicting types for parameter \u2018_FIter\u2019 (\u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   32 |     return is_sorted(lst,\
    \ mid + 1, n - 1);\n      |                                         ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8p_ls3ue.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note: candidate: \u2018template<class _FIter, class _Compare> bool std::is_sorted(_FIter,\
    \ _FIter, _Compare)\u2019\n 3217 |     is_sorted(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note:   template argument deduction/substitution f"
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long last = lst[lst.size()\
    \ - 1];\n    for (long i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] !=\
    \ last + 1) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy44gowp4: /tmp/tmpy44gowp4.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    if (lst.size() == 1) return\
    \ true;\n    long first = lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < first) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpx9uhdf66: /tmp/tmpx9uhdf66.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    for (long long int i = 0; i < m; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprqaxjy_m: /tmp/tmprqaxjy_m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    \n    long long int arr[] = {(long long int)lst.at(0)};\n\
    \    long long int count = 1;\n    for(long long int i : lst){\n        if(arr[0]\
    \ != i){\n            count++;\n            arr[0] = i;\n        }\n    }\n  \
    \  \n    if(count > 1){\n        return false;\n    }\n    \n    for(long long\
    \ int i : lst){\n        if(arr[0] != i){\n            return false;\n       \
    \ }\n    }\n    \n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnp9xgwej: /tmp/tmpnp9xgwej.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long cur = lst[1]; cur < lst.size();\
    \ cur++) {\n        if (prev == lst[cur]) {\n            return false;\n     \
    \   }\n        prev = lst[cur];\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi9ukxylw: /tmp/tmpi9ukxylw.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size();\n\
    \    long long int i = 0;\n    long long int j = 0;\n    long long int k = 0;\n\
    \    long long int l = 0;\n    long long int count = 0;\n    long long int temp\
    \ = 0;\n    long long int temp2 = 0;\n    long long int temp3 = 0;\n    long long\
    \ int temp4 = 0;\n    long long int temp5 = 0;\n    long long int temp6 = 0;\n\
    \    long long int temp7 = 0;\n    long long int temp8 = 0;\n    long long int\
    \ temp9 = 0;\n    long long int temp10 = 0;\n    long long int temp11 = 0;\n \
    \   long long int temp12 = 0;\n    long long int temp13 = 0;\n    long long int\
    \ temp14 = 0;\n    long long int temp15 = 0;\n    long long int temp16 = 0;\n\
    \    long long int temp17 = 0;\n    long long int temp18 = 0;\n    long long int\
    \ temp19 = 0;\n    long long int temp20 = 0;\n    long long int temp21 = 0;\n\
    \    long long int temp22 = 0;\n    long long int temp23 = 0;\n    long long int\
    \ temp24 = 0;\n    long long int temp25 = 0;\n    long long int temp26 = 0;\n\
    \    long long int temp27 = 0;\n    long long int temp28 = 0;\n    long long int\
    \ temp29 = 0;\n    long long int temp30 = 0;\n    long long int temp31 = 0;\n\
    \    long long int temp32 = 0;\n    long long int temp33 = 0;\n    long long int\
    \ temp34 = 0;\n    long long int temp35 = 0;\n    long long int temp36 = 0;\n\
    \    long long int temp37 = 0;\n    long long int temp38 = 0;\n    long long int\
    \ temp39 = 0;\n    long long int temp40 = 0;\n    long long int temp41 = 0;\n\
    \    long long int temp42 = 0;\n    long long int temp43 = 0;\n    long long int\
    \ temp44 = 0;\n    long long int temp45 = 0;\n    long long int temp46 = 0;\n\
    \    long long int temp47 = 0;\n    long long int temp48 = 0;\n    long long int\
    \ temp49 = 0;\n    long long int temp50 = 0;\n    long long int temp51 = 0;\n\
    \    long long int temp52 = 0;\n    long long int temp53 = 0;\n    long long int\
    \ temp54 = 0;\n    long long int temp55 = 0;\n    long long int temp56 = 0;\n\
    \    long long int temp57 = 0;\n    long long int temp58 = 0;\n\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvzc_8oay: /tmp/tmpvzc_8oay.cpp:94: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749492
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    if (n == 0) return true;\n    if (n ==\
    \ 1) return false;\n    long first = lst[0];\n    long last = lst[n - 1];\n  \
    \  for (int i = 1; i < n; i++) {\n        if (lst[i] < first) return false;\n\
    \        if (lst[i] > last) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpklwhap03: /tmp/tmpklwhap03.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749492
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    for (long long int i = 0; i < m; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprqaxjy_m: /tmp/tmprqaxjy_m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 1; i < n; i++) {\n       \
    \ if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_1jyo07r: /tmp/tmp_1jyo07r.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5w312o2.cpp: In function 'int main()':\n/tmp/tmpe5w312o2.cpp:281:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5w312o2.cpp:2:\n/tmp/tmpe5w312o2.cpp:282:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpe5w312o2.cpp:282:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpe5w312o2.cpp:282:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:282:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpe5w312o2.cpp:283:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpe5w312o2.cpp:283:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpe5w312o2.cpp:283:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:283:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    long long int\
    \ k = 0;\n    long long int temp = 0;\n    long long int count = 0;\n    long\
    \ long int sum = 0;\n    long long int max = 0;\n    long long int min = 0;\n\
    \    long long int mid = 0;\n    long long int mid2 = 0;\n    long long int mid3\
    \ = 0;\n    long long int mid4 = 0;\n    long long int mid5 = 0;\n    long long\
    \ int mid6 = 0;\n    long long int mid7 = 0;\n    long long int mid8 = 0;\n  \
    \  long long int mid9 = 0;\n    long long int mid10 = 0;\n    long long int mid11\
    \ = 0;\n    long long int mid12 = 0;\n    long long int mid13 = 0;\n    long long\
    \ int mid14 = 0;\n    long long int mid15 = 0;\n    long long int mid16 = 0;\n\
    \    long long int mid17 = 0;\n    long long int mid18 = 0;\n    long long int\
    \ mid19 = 0;\n    long long int mid20 = 0;\n    long long int mid21 = 0;\n   \
    \ long long int mid22 = 0;\n    long long int mid23 = 0;\n    long long int mid24\
    \ = 0;\n    long long int mid25 = 0;\n    long long int mid26 = 0;\n    long long\
    \ int mid27 = 0;\n    long long int mid28 = 0;\n    long long int mid29 = 0;\n\
    \    long long int mid30 = 0;\n    long long int mid31 = 0;\n    long long int\
    \ mid32 = 0;\n    long long int mid33 = 0;\n    long long int mid34 = 0;\n   \
    \ long long int mid35 = 0;\n    long long int mid36 = 0;\n    long long int mid37\
    \ = 0;\n    long long int mid38 = 0;\n    long long int mid39 = 0;\n    long long\
    \ int mid40 = 0;\n    long long int mid41 = 0;\n    long long int mid42 = 0;\n\
    \    long long int mid43 = 0;\n    long long int mid44 = 0;\n    long long int\
    \ mid45 = 0;\n    long long int mid46 = 0;\n    long long int mid47 = 0;\n   \
    \ long long int mid48 = 0;\n    long long int mid49 = 0;\n    long long int mid50\
    \ = 0;\n    long long int mid51 = 0;\n    long long int mid52 = 0;\n    long long\
    \ int mid53 = 0;\n    long long int mid54 = 0;\n    long long int mid55 = 0;\n\
    \    long \n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvd8s78_g.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvd8s78_g.cpp:90:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   90 | }\n      | ^\n/tmp/tmpvd8s78_g.cpp:90:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749492
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n - 1; i++) {\n   \
    \     if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1m_k7e3i: /tmp/tmp1m_k7e3i.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5w312o2.cpp: In function 'int main()':\n/tmp/tmpe5w312o2.cpp:281:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5w312o2.cpp:2:\n/tmp/tmpe5w312o2.cpp:282:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpe5w312o2.cpp:282:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpe5w312o2.cpp:282:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:282:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpe5w312o2.cpp:283:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpe5w312o2.cpp:283:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpe5w312o2.cpp:283:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:283:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0)\n        return true;\n    long prev = lst[0];\n\
    \    for (long i : lst) {\n        if (i == prev)\n            return false;\n\
    \        prev = i;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprsoangfe: /tmp/tmprsoangfe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0) return true;\n  \
    \  long long int m = lst.at(0);\n    for (long long int i = 1; i < n; i++) {\n\
    \        if (lst.at(i) > m) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdto7owg2: /tmp/tmpdto7owg2.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : lst) {\n        sum += i;\n     \
    \   count++;\n    }\n    if (count == 0) {\n        return true;\n    }\n    if\
    \ (count == 1) {\n        if (sum == lst[0]) {\n            return true;\n   \
    \     }\n        return false;\n    }\n    if (count > 1) {\n        long long\
    \ int mid = sum / 2;\n        long long int leftSum = 0;\n        long long int\
    \ rightSum = 0;\n        for (long long int i : lst) {\n            if (i == mid)\
    \ {\n                return false;\n            }\n            leftSum += i;\n\
    \        }\n        for (long long int i : lst) {\n            if (i == mid) {\n\
    \                return false;\n            }\n            rightSum += i;\n  \
    \      }\n        if (leftSum == rightSum) {\n            return true;\n     \
    \   }\n        return false;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp36947h14: /tmp/tmp36947h14.cpp:67: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    for (long long int i = 1; i < m; i++)\
    \ {\n        if (lst[i] > lst[i - 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqqv21hul: /tmp/tmpqqv21hul.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long first = lst[0];\n  \
    \  for (long i : lst) {\n        if (i != first) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptrv4i2lv: /tmp/tmptrv4i2lv.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0)\n        return true;\n    if (lst.size() ==\
    \ 1)\n        return lst[0] == lst[1];\n    long first = lst[0];\n    long last\
    \ = lst[lst.size() - 1];\n    for (long i = 2; i < lst.size(); i++) {\n      \
    \  if (lst[i] < first)\n            return false;\n        if (lst[i] > last)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyeel_20s: /tmp/tmpyeel_20s.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int l=0;\n    long long int\
    \ h=lst.size();\n    long long int mid;\n    for(long long int i=0;i<h;i++)\n\
    \    {\n        mid=lst.at(i);\n        if(mid==l)\n        {\n            return\
    \ false;\n        }\n        else if(mid<l)\n        {\n            l=mid;\n \
    \       }\n        else\n        {\n            h=mid;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 1) >= this->size() (which is 1)\n"
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    long long int k = lst.back();\n    for\
    \ (long long int i = 0; i < m; i++) {\n        if (lst[i] > k) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl4atq15e: /tmp/tmpl4atq15e.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    long long int\
    \ k = 0;\n    long long int l = 0;\n    long long int count = 0;\n    long long\
    \ int flag = 0;\n    long long int temp = 0;\n    long long int temp2 = 0;\n \
    \   long long int temp3 = 0;\n    long long int temp4 = 0;\n    long long int\
    \ temp5 = 0;\n    long long int temp6 = 0;\n    long long int temp7 = 0;\n   \
    \ long long int temp8 = 0;\n    long long int temp9 = 0;\n    long long int temp10\
    \ = 0;\n    long long int temp11 = 0;\n    long long int temp12 = 0;\n    long\
    \ long int temp13 = 0;\n    long long int temp14 = 0;\n    long long int temp15\
    \ = 0;\n    long long int temp16 = 0;\n    long long int temp17 = 0;\n    long\
    \ long int temp18 = 0;\n    long long int temp19 = 0;\n    long long int temp20\
    \ = 0;\n    long long int temp21 = 0;\n    long long int temp22 = 0;\n    long\
    \ long int temp23 = 0;\n    long long int temp24 = 0;\n    long long int temp25\
    \ = 0;\n    long long int temp26 = 0;\n    long long int temp27 = 0;\n    long\
    \ long int temp28 = 0;\n    long long int temp29 = 0;\n    long long int temp30\
    \ = 0;\n    long long int temp31 = 0;\n    long long int temp32 = 0;\n    long\
    \ long int temp33 = 0;\n    long long int temp34 = 0;\n    long long int temp35\
    \ = 0;\n    long long int temp36 = 0;\n    long long int temp37 = 0;\n    long\
    \ long int temp38 = 0;\n    long long int temp39 = 0;\n    long long int temp40\
    \ = 0;\n    long long int temp41 = 0;\n    long long int temp42 = 0;\n    long\
    \ long int temp43 = 0;\n    long long int temp44 = 0;\n    long long int temp45\
    \ = 0;\n    long long int temp46 = 0;\n    long long int temp47 = 0;\n    long\
    \ long int temp48 = 0;\n    long long int temp49 = 0;\n    long long int temp50\
    \ = 0;\n    long long int temp51 = 0;\n    long long int temp52 = 0;\n    long\
    \ long int temp53 = 0;\n    long long int temp54 = 0;\n    long long int temp55\
    \ = 0;\n    long long int temp56 = 0;\n    long long int temp57 = 0;\n\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpch9ijyc9: /tmp/tmpch9ijyc9.cpp:93: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long prev = lst[0];\n   \
    \ for (long i : lst) {\n        if (i == prev) return true;\n        prev = i;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph0d__rav: /tmp/tmph0d__rav.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    for (long long int i = 0; i < m; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprqaxjy_m: /tmp/tmprqaxjy_m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 1; i < n; i++) {\n       \
    \ if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_1jyo07r: /tmp/tmp_1jyo07r.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long last = lst[0];\n    for (long i : lst) {\n        if (i !=\
    \ last) {\n            return false;\n        }\n        last = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk9nu7fh1: /tmp/tmpk9nu7fh1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = 0;\n    for (long long int i : lst) {\n      \
    \  if (i != lst[n]) {\n            return false;\n        }\n        n++;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n   \
    \ assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp15isa_on: /tmp/tmp15isa_on.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long last = lst[0];\n    for (long i : lst) {\n        if (i !=\
    \ last) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpden8gqkz: /tmp/tmpden8gqkz.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : lst) {\n        sum += i;\n    }\n    if (sum == 0)\n        return\
    \ true;\n    if (sum < 0)\n        return false;\n    long long int last = lst[0];\n\
    \    for (long long int i : lst) {\n        if (i == last)\n            continue;\n\
    \        if (i > last)\n            return false;\n        last = i;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfyqdpsi7: /tmp/tmpfyqdpsi7.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[] = {(long long int)lst.at(0),\
    \ (long long int)lst.at(1), (long long int)lst.at(2), (long long int)lst.at(3),\
    \ (long long int)lst.at(4), (long long int)lst.at(5), (long long int)lst.at(6),\
    \ (long long int)lst.at(7)};\n    long long int size = sizeof(arr) / sizeof(long\
    \ long int);\n    long long int temp;\n    for (int i = 0; i < size - 1; i++)\
    \ {\n        for (int j = i + 1; j < size; j++) {\n            if (arr[i] > arr[j])\
    \ {\n                temp = arr[i];\n                arr[i] = arr[j];\n      \
    \          arr[j] = temp;\n            }\n        }\n    }\n    for (int i = 0;\
    \ i < size; i++) {\n        if (arr[i] != arr[i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 1) >= this->size() (which is 1)\n"
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    for (long long int i = 0; i < m; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprqaxjy_m: /tmp/tmprqaxjy_m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long prev = lst[0];\n   \
    \ for (long &i : lst) {\n        if (i > prev) {\n            return false;\n\
    \        }\n        prev = i;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg9kr4ijs: /tmp/tmpg9kr4ijs.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int size = lst.size();\n\
    \    long long int max_val = lst.front();\n    long long int min_val = lst.back();\n\
    \    long long int mid;\n    bool flag = false;\n    for (long long int i = 0;\
    \ i < size; i++) {\n        if (lst[i] == max_val) {\n            flag = true;\n\
    \            break;\n        }\n    }\n    if (flag == true) {\n        flag =\
    \ false;\n        for (long long int i = 0; i < size; i++) {\n            if (lst[i]\
    \ == min_val) {\n                flag = true;\n                break;\n      \
    \      }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppzfsr8nt: /tmp/tmppzfsr8nt.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0)\n        return true;\n    if (lst.size() ==\
    \ 1)\n        return false;\n    long first = lst[0];\n    for (long i = 1, j\
    \ = 1; i < lst.size(); i++, j++) {\n        if (lst[i] < first)\n            return\
    \ false;\n        else if (lst[i] > first)\n            return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgwqt1pew: /tmp/tmpgwqt1pew.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = i + 1; j < m; j++) {\n            if (lst[i] > lst[j]) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkeoed6ao: /tmp/tmpkeoed6ao.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int mid = n\
    \ / 2;\n    long long int left = lst[mid];\n    long long int right = lst[n -\
    \ 1];\n    if (left < right)\n        return false;\n    return is_sorted(lst,\
    \ mid + 1, n - 1);\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_quaw7tu.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_quaw7tu.cpp:34:41: error: no matching function for call\
    \ to \u2018is_sorted(std::vector<long int>&, long long int, long long int)\u2019\
    \n   34 |     return is_sorted(lst, mid + 1, n - 1);\n      |                \
    \                         ^\n/tmp/tmp_quaw7tu.cpp:23:6: note: candidate: \u2018\
    bool is_sorted(std::vector<long int>)\u2019\n   23 | bool is_sorted(std::vector<long>\
    \ lst) {\n      |      ^~~~~~~~~\n/tmp/tmp_quaw7tu.cpp:23:6: note:   candidate\
    \ expects 1 argument, 3 provided\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_quaw7tu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note: candidate: \u2018template<class _FIter> bool std::is_sorted(_FIter, _FIter)\u2019\
    \n 3203 |     is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n \
    \     |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_quaw7tu.cpp:34:41:\
    \ note:   deduced conflicting types for parameter \u2018_FIter\u2019 (\u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   34 |     return is_sorted(lst,\
    \ mid + 1, n - 1);\n      |                                         ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_quaw7tu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note: candidate: \u2018template<class _FIter, class _Compare> bool std::is_sorted(_FIter,\
    \ _FIter, _Compare)\u2019\n 3217 |     is_sorted(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note:   template argument deduction/substitution f"
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[] = {(long long int)lst.at(0)};\n\
    \    for(int i = 1; i < lst.size(); i++) {\n        if(arr[i-1] > lst.at(i)) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2y000yvt: /tmp/tmp2y000yvt.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int mid = n\
    \ / 2;\n    long long int left = lst[mid];\n    long long int right = lst[n -\
    \ 1];\n    if (left > right)\n        return false;\n    if (left == right)\n\
    \        return is_sorted(lst, mid + 1, n - 1);\n    return is_sorted(lst, mid\
    \ + 1, n);\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o7r7dk2.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4o7r7dk2.cpp:35:45: error: no matching function for call\
    \ to \u2018is_sorted(std::vector<long int>&, long long int, long long int)\u2019\
    \n   35 |         return is_sorted(lst, mid + 1, n - 1);\n      |            \
    \                                 ^\n/tmp/tmp4o7r7dk2.cpp:23:6: note: candidate:\
    \ \u2018bool is_sorted(std::vector<long int>)\u2019\n   23 | bool is_sorted(std::vector<long>\
    \ lst) {\n      |      ^~~~~~~~~\n/tmp/tmp4o7r7dk2.cpp:23:6: note:   candidate\
    \ expects 1 argument, 3 provided\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4o7r7dk2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note: candidate: \u2018template<class _FIter> bool std::is_sorted(_FIter, _FIter)\u2019\
    \n 3203 |     is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n \
    \     |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4o7r7dk2.cpp:35:45:\
    \ note:   deduced conflicting types for parameter \u2018_FIter\u2019 (\u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   35 |         return is_sorted(lst,\
    \ mid + 1, n - 1);\n      |                                             ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4o7r7dk2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note: candidate: \u2018template<class _FIter, class _Compare> bool std::is_sorted(_FIter,\
    \ _FIter, _Compare)\u2019\n 3217 |     is_sorted(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note:   template argument deductio"
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[50];\n    long long\
    \ int temp;\n    long long int i;\n    for(i=0;i<lst.size();i++){\n        arr[i]=lst[i];\n\
    \    }\n    for(i=0;i<lst.size();i++){\n        for(j=i+1;j<lst.size();j++){\n\
    \            if(arr[i]>arr[j]){\n                temp=arr[i];\n              \
    \  arr[i]=arr[j];\n                arr[j]=temp;\n            }\n        }\n  \
    \  }\n    for(i=0;i<lst.size();i++){\n        if(arr[i]!=lst[i]){\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpag_oq8g7.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpag_oq8g7.cpp:32:13: error: \u2018j\u2019 was not declared\
    \ in this scope\n   32 |         for(j=i+1;j<lst.size();j++){\n      |       \
    \      ^\n"
  stdout: ''
  timestamp: 1659749494
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int l;\n    long long int m;\n    long long int n;\n    long long\
    \ int k;\n    long long int l;\n    long long int m;\n    long long int n;\n \
    \   long long int k;\n    long long int l;\n    long long int m;\n    long long\
    \ int n;\n    long long int k;\n    long long int l;\n    long long int m;\n \
    \   long long int n;\n    long long int k;\n    long long int l;\n    long long\
    \ int m;\n    long long int n;\n    long long int k;\n    long long int l;\n \
    \   long long int m;\n    long long int n;\n    long long int k;\n    long long\
    \ int l;\n    long long int m;\n    long long int n;\n    long long int k;\n \
    \   long long int l;\n    long long int m;\n    long long int n;\n    long long\
    \ int k;\n    long long int l;\n    long long int m;\n    long long int n;\n \
    \   long long int k;\n    long long int l;\n    long long int m;\n    long long\
    \ int n;\n    long long int k;\n    long long int l;\n    long long int m;\n \
    \   long long int n;\n    long long int k;\n    long long int l;\n    long long\
    \ int m;\n    long long int n;\n    long long int k;\n    long long int l;\n \
    \   long long int m;\n    long long int n;\n    long long int k;\n    long long\
    \ int l;\n    long long int m;\n    long long int n;\n    long long int k;\n \
    \   long long int l;\n    long long int m;\n    long long int n;\n    long long\
    \ int k;\n    long long int l;\n    long long int m;\n    long long int n;\n \
    \   long long int k;\n    long long int l;\n    long long int m;\n    long long\
    \ int n;\n    long long int k;\n    long long int l;\n    long long int m;\n \
    \   long long int n;\n    long long int k;\n    long long int l;\n    long long\
    \ int m;\n    long long int n;\n    long long int k;\n    long long int l;\n \
    \   long long int m;\n    long long int \n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmlcmbio.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgmlcmbio.cpp:30:19: error: redeclaration of \u2018long\
    \ long int m\u2019\n   30 |     long long int m;\n      |                   ^\n\
    /tmp/tmpgmlcmbio.cpp:25:19: note: \u2018long long int m\u2019 previously declared\
    \ here\n   25 |     long long int m = lst.size() - 1;\n      |               \
    \    ^\n/tmp/tmpgmlcmbio.cpp:31:19: error: redeclaration of \u2018long long int\
    \ n\u2019\n   31 |     long long int n;\n      |                   ^\n/tmp/tmpgmlcmbio.cpp:24:19:\
    \ note: \u2018long long int n\u2019 previously declared here\n   24 |     long\
    \ long int n = lst.size();\n      |                   ^\n/tmp/tmpgmlcmbio.cpp:32:19:\
    \ error: redeclaration of \u2018long long int k\u2019\n   32 |     long long int\
    \ k;\n      |                   ^\n/tmp/tmpgmlcmbio.cpp:28:19: note: \u2018long\
    \ long int k\u2019 previously declared here\n   28 |     long long int k;\n  \
    \    |                   ^\n/tmp/tmpgmlcmbio.cpp:33:19: error: redeclaration of\
    \ \u2018long long int l\u2019\n   33 |     long long int l;\n      |         \
    \          ^\n/tmp/tmpgmlcmbio.cpp:29:19: note: \u2018long long int l\u2019 previously\
    \ declared here\n   29 |     long long int l;\n      |                   ^\n/tmp/tmpgmlcmbio.cpp:34:19:\
    \ error: redeclaration of \u2018long long int m\u2019\n   34 |     long long int\
    \ m;\n      |                   ^\n/tmp/tmpgmlcmbio.cpp:25:19: note: \u2018long\
    \ long int m\u2019 previously declared here\n   25 |     long long int m = lst.size()\
    \ - 1;\n      |                   ^\n/tmp/tmpgmlcmbio.cpp:35:19: error: redeclaration\
    \ of \u2018long long int n\u2019\n   35 |     long long int n;\n      |      \
    \             ^\n/tmp/tmpgmlcmbio.cpp:24:19: note: \u2018long long int n\u2019\
    \ previously declared here\n   24 |     long long int n = lst.size();\n      |\
    \                   ^\n/tmp/tmpgmlcmbio.cpp:36:19: error: redeclaration of \u2018\
    long long int k\u2019\n   36 |     long long int k;\n      |                 \
    \  ^\n/tmp/tmpgmlcmbio.cpp:28:19: note: \u2018long long int k\u2019 previously\
    \ declared here\n   28 |     long long int k;\n      |                   ^\n/tmp/tmpgmlcmbio.cpp:37:19:\
    \ error: redeclaration of \u2018long long int l\u2019\n   37 |     long"
  stdout: ''
  timestamp: 1659749494
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Your code here\n    long long int temp;\n    bool flag = true;\n\
    \    for (long long int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i]\
    \ > lst[i + 1]) {\n            flag = false;\n            break;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i !=\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxyyrso97: /tmp/tmpxyyrso97.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long last = lst[0];\n   \
    \ for (long i : lst) {\n        if (i != last) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp09hzcxxz: /tmp/tmp09hzcxxz.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ for (i = 0; i <= m; i++) {\n        for (j = i + 1; j <= m; j++) {\n       \
    \     if (lst[i] > lst[j]) {\n                k = lst[i];\n                lst[i]\
    \ = lst[j];\n                lst[j] = k;\n            }\n        }\n    }\n  \
    \  return lst.size() == n;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphnsnxg35: /tmp/tmphnsnxg35.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int mid = n\
    \ / 2;\n    long long int left = lst[mid];\n    long long int right = lst[mid+1];\n\
    \    if (left < right)\n        return false;\n    return is_sorted(lst, mid+1);\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvitqfj0.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdvitqfj0.cpp:34:32: error: no matching function for call\
    \ to \u2018is_sorted(std::vector<long int>&, long long int)\u2019\n   34 |   \
    \  return is_sorted(lst, mid+1);\n      |                                ^\n/tmp/tmpdvitqfj0.cpp:23:6:\
    \ note: candidate: \u2018bool is_sorted(std::vector<long int>)\u2019\n   23 |\
    \ bool is_sorted(std::vector<long> lst) {\n      |      ^~~~~~~~~\n/tmp/tmpdvitqfj0.cpp:23:6:\
    \ note:   candidate expects 1 argument, 2 provided\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvitqfj0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note: candidate: \u2018template<class _FIter> bool std::is_sorted(_FIter, _FIter)\u2019\
    \n 3203 |     is_sorted(_ForwardIterator __first, _ForwardIterator __last)\n \
    \     |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3203:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdvitqfj0.cpp:34:32:\
    \ note:   deduced conflicting types for parameter \u2018_FIter\u2019 (\u2018std::vector<long\
    \ int>\u2019 and \u2018long long int\u2019)\n   34 |     return is_sorted(lst,\
    \ mid+1);\n      |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdvitqfj0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note: candidate: \u2018template<class _FIter, class _Compare> bool std::is_sorted(_FIter,\
    \ _FIter, _Compare)\u2019\n 3217 |     is_sorted(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3217:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdvitqfj0.cpp:34:32:\
    \ note:   deduced "
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int mid = n\
    \ / 2;\n    long long int left = lst[mid];\n    long long int right = lst[mid+1];\n\
    \    if (left < right)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnqaaz6fv: /tmp/tmpnqaaz6fv.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    for (i = 0; i < m; i++) {\n        if (lst[i]\
    \ > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_wmubyi3: /tmp/tmp_wmubyi3.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = 0;\n    for (auto i : lst) {\n        ++n;\n \
    \   }\n    if (n == lst.size()) {\n        return true;\n    }\n    for (auto\
    \ i : lst) {\n        for (auto j : lst) {\n            if (i != j) {\n      \
    \          if (i < j) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4gt548t7: /tmp/tmp4gt548t7.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    for (long long int i = 0; i < m; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprqaxjy_m: /tmp/tmprqaxjy_m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[] = {(long long int)lst.at(0),\
    \ lst.at(1), lst.at(2), lst.at(3), lst.at(4), lst.at(5), lst.at(6), lst.at(7)};\n\
    \    long long int n = sizeof(arr) / sizeof(long long int);\n    long long int\
    \ count[8]={0};\n    long long int max = 0;\n    long long int min = 0;\n    long\
    \ long int mid = 0;\n    long long int temp = 0;\n    for(int i=0;i<n;i++){\n\
    \        temp = arr[i];\n        for(int j=0;j<8;j++){\n            if(temp ==\
    \ arr[j]){\n                count[j]++;\n                if(count[j] > max){\n\
    \                    max = count[j];\n                    mid = j;\n         \
    \       }\n                if(count[j] < min){\n                    min = count[j];\n\
    \                }\n            }\n        }\n    }\n    if(max == min){\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 1) >= this->size() (which is 1)\n"
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    if (lst.size() == 1) return\
    \ true;\n    if (lst.size() == 2) return true;\n    if (lst.size() == 3) return\
    \ true;\n    if (lst.size() == 4) return true;\n    if (lst.size() == 5) return\
    \ true;\n    if (lst.size() == 6) return true;\n    if (lst.size() == 7) return\
    \ true;\n    if (lst.size() == 8) return true;\n    if (lst.size() == 9) return\
    \ true;\n    if (lst.size() == 10) return true;\n    if (lst.size() == 11) return\
    \ true;\n    if (lst.size() == 12) return true;\n    if (lst.size() == 13) return\
    \ true;\n    if (lst.size() == 14) return true;\n    if (lst.size() == 15) return\
    \ true;\n    if (lst.size() == 16) return true;\n    if (lst.size() == 17) return\
    \ true;\n    if (lst.size() == 18) return true;\n    if (lst.size() == 19) return\
    \ true;\n    if (lst.size() == 20) return true;\n    if (lst.size() == 21) return\
    \ true;\n    if (lst.size() == 22) return true;\n    if (lst.size() == 23) return\
    \ true;\n    if (lst.size() == 24) return true;\n    if (lst.size() == 25) return\
    \ true;\n    if (lst.size() == 26) return true;\n    if (lst.size() == 27) return\
    \ true;\n    if (lst.size() == 28) return true;\n    if (lst.size() == 29) return\
    \ true;\n    if (lst.size() == 30) return true;\n    if (lst.size() == 31) return\
    \ true;\n    if (lst.size() == 32) return true;\n    if (lst.size() == 33) return\
    \ true;\n    if (lst.size() == 34) return true;\n    if (lst.size() == 35) return\
    \ true;\n    if (lst.size() == 36) return true;\n    if (lst.size() == 37) return\
    \ true;\n    if (lst.size() == 38) return true;\n    if (lst.size() == 39) return\
    \ true;\n    if (lst.size() == 40) return true;\n    if (lst.size() == 41) return\
    \ true;\n    if (lst.size() == 42) return true;\n    if (lst.size() == 43) return\
    \ true;\n    if (lst.size() == 44) return true;\n    if (lst.size() == 45) return\
    \ true;\n    if (lst.size() == 46) return true;\n    if (lst.size() == 47) return\
    \ true;\n    if (lst.size() == 48) return true;\n    if (lst.size() == 49) return\
    \ true;\n    if (lst.size() == 50) return true;\n    if (lst.size() == 51) return\
    \ true;\n    if (lst.size() == 52) return true;\n    if (lst.size() == 53) return\
    \ true;\n    if (lst.size() == 54) return true;\n    if (lst.size() == 55) return\
    \ true;\n    if (lst.size() == \n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxr_d36bz.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxr_d36bz.cpp:81:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpxr_d36bz.cpp:80:22:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   80 |     if (lst.size()\
    \ ==\n      |        ~             ^\n      |                      )\n   81 |\
    \ }\n      | ~                     \n/tmp/tmpxr_d36bz.cpp:81:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpxr_d36bz.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659749490
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.size() - 1;\n    for (long long int i = 0; i < m; i++)\
    \ {\n        if (lst[i] > lst[i + 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprqaxjy_m: /tmp/tmprqaxjy_m.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int size = lst.size();\n    long long int last = lst[size\
    \ - 1];\n    for (long long int i = 0; i < size - 1; i++) {\n        if (lst[i]\
    \ > last) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyd2_o6ad: /tmp/tmpyd2_o6ad.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long prev = lst[0];\n    for\
    \ (long curr = lst[1]; curr < lst.size(); curr++) {\n        if (prev > curr)\
    \ return false;\n        prev = curr;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2c5opban: /tmp/tmp2c5opban.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    long long int\
    \ k = 0;\n    long long int temp = 0;\n    long long int count = 0;\n    long\
    \ long int flag = 0;\n    while (i < n) {\n        if (lst[i] < lst[j]) {\n  \
    \          temp = lst[i];\n            lst[i] = lst[j];\n            lst[j] =\
    \ temp;\n            i++;\n            j++;\n            count++;\n        } else\
    \ {\n            if (count == m) {\n                flag = 1;\n              \
    \  break;\n            }\n            count++;\n        }\n    }\n    if (flag\
    \ == 1) {\n        return false;\n    }\n    while (i < n) {\n        if (lst[i]\
    \ > lst[j]) {\n            temp = lst[i];\n            lst[i] = lst[j];\n    \
    \        lst[j] = temp;\n            i++;\n            j++;\n            count++;\n\
    \        } else {\n            if (count == m) {\n                flag = 1;\n\
    \                break;\n            }\n            count++;\n        }\n    }\n\
    \    if (flag == 1) {\n        return false;\n    }\n    while (i < n) {\n   \
    \     if (lst[i] < lst[j]) {\n            temp = lst[i];\n            lst[i] =\
    \ lst[j];\n            lst[j] = temp;\n            i++;\n            j++;\n  \
    \          count++;\n        } else {\n            if (count == m) {\n       \
    \         flag = 1;\n                break;\n            }\n            count++;\n\
    \        }\n    }\n    if (flag == 1) {\n        return false;\n    }\n    while\
    \ (i < n) {\n        if (lst[i] > lst[j]) {\n            temp = lst[i];\n    \
    \        lst[i] = lst[j];\n            lst[j] = temp;\n            i++;\n    \
    \        j++;\n            count++;\n        } else {\n            if (count ==\
    \ m) {\n                flag = 1;\n                break;\n            }\n   \
    \         count++;\n        }\n    }\n    if (flag == 1) {\n        return false;\n\
    \    }\n    while (i < n) {\n        if (lst[i] < lst[j]) {\n            temp\
    \ = lst[i];\n            lst[i] = lst[j];\n            lst[j] = temp;\n      \
    \      i++;\n            j++;\n            count++;\n        } else {\n      \
    \      if (count == m) {\n                flag = 1;\n                break;\n\
    \            }\n            count++;\n        }\n    }\n    if (flag == 1) {\n\
    \        return false;\n    }\n    while (i < n) {\n        if (lst[i] > lst[j])\
    \ {\n            temp = lst[i];\n            lst[i] = lst[j];\n            lst[j]\
    \ = temp;\n            i++;\n            j++;\n            count++;\n        }\
    \ else {\n            if (count == m) {\n                flag = 1;\n         \
    \       break;\n            }\n            count++;\n        }\n    }\n    if\
    \ (flag == 1) {\n        return false;\n    }\n    while (i < n) {\n        if\
    \ (lst[i] < lst[j]) {\n            temp = lst[i];\n            lst\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgnttoho1.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgnttoho1.cpp:149:16: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n  149 |             lst\n      |                ^\n   \
    \   |                ;\n  150 | }\n      | ~               \n/tmp/tmpgnttoho1.cpp:151:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  151 | int main() {\n      |            ^\n/tmp/tmpgnttoho1.cpp:166:1: error:\
    \ expected \u2018}\u2019 at end of input\n  166 | }\n      | ^\n/tmp/tmpgnttoho1.cpp:146:19:\
    \ note: to match this \u2018{\u2019\n  146 |     while (i < n) {\n      |    \
    \               ^\n/tmp/tmpgnttoho1.cpp:166:1: error: expected \u2018}\u2019 at\
    \ end of input\n  166 | }\n      | ^\n/tmp/tmpgnttoho1.cpp:23:39: note: to match\
    \ this \u2018{\u2019\n   23 | bool is_sorted(std::vector<long> lst) {\n      |\
    \                                       ^\n/tmp/tmpgnttoho1.cpp:166:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  166 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyijzib2a.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyijzib2a.cpp:118:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  118 | int main() {\n      |     \
    \       ^\n/tmp/tmpyijzib2a.cpp:133:1: error: expected \u2018}\u2019 at end of\
    \ input\n  133 | }\n      | ^\n/tmp/tmpyijzib2a.cpp:112:38: note: to match this\
    \ \u2018{\u2019\n  112 |         for (j = i + 1; j <= m; j++) {\n      |     \
    \                                 ^\n/tmp/tmpyijzib2a.cpp:133:1: error: expected\
    \ \u2018}\u2019 at end of input\n  133 | }\n      | ^\n/tmp/tmpyijzib2a.cpp:111:30:\
    \ note: to match this \u2018{\u2019\n  111 |     for (i = 0; i <= m; i++) {\n\
    \      |                              ^\n/tmp/tmpyijzib2a.cpp:133:1: error: expected\
    \ \u2018}\u2019 at end of input\n  133 | }\n      | ^\n/tmp/tmpyijzib2a.cpp:23:39:\
    \ note: to match this \u2018{\u2019\n   23 | bool is_sorted(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmpyijzib2a.cpp:133:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  133 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0)\n        return true;\n    if (lst.size() ==\
    \ 1)\n        return lst[0] == lst[0];\n    long prev = lst[0];\n    for (long\
    \ i = 1, j = 1; i < lst.size(); i++, j++) {\n        if (lst[i] < prev)\n    \
    \        return false;\n        prev = lst[i];\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplr5mk8c2: /tmp/tmplr5mk8c2.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int count[1000];\n    long\
    \ long int maxCount = 0;\n    long long int maxIndex = 0;\n    long long int minIndex\
    \ = 0;\n    for (long long int i = 0; i < lst.size(); i++) {\n        count[lst[i]]++;\n\
    \        if (count[lst[i]] > maxCount) {\n            maxCount = count[lst[i]];\n\
    \            maxIndex = i;\n        }\n        if (count[lst[i]] < minCount) {\n\
    \            minCount = count[lst[i]];\n            minIndex = i;\n        }\n\
    \    }\n    if (maxCount > 1) {\n        return false;\n    }\n    if (minCount\
    \ > 1) {\n        return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhppd262.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvhppd262.cpp:35:29: error: \u2018minCount\u2019 was not\
    \ declared in this scope; did you mean \u2018maxCount\u2019?\n   35 |        \
    \ if (count[lst[i]] < minCount) {\n      |                             ^~~~~~~~\n\
    \      |                             maxCount\n/tmp/tmpvhppd262.cpp:43:9: error:\
    \ \u2018minCount\u2019 was not declared in this scope; did you mean \u2018maxCount\u2019\
    ?\n   43 |     if (minCount > 1) {\n      |         ^~~~~~~~\n      |        \
    \ maxCount\n"
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long prev = lst[0];\n   \
    \ for (long i : lst) {\n        if (i == prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpebhlec8g: /tmp/tmpebhlec8g.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy0dia__6.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy0dia__6.cpp:122:20: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n  122 |             if (lst\n      |                ~ \
    \  ^\n      |                    )\n  123 | }\n      | ~                   \n\
    /tmp/tmpy0dia__6.cpp:122:17: error: could not convert \u2018lst\u2019 from \u2018\
    std::vector<long int>\u2019 to \u2018bool\u2019\n  122 |             if (lst\n\
    \      |                 ^~~\n      |                 |\n      |             \
    \    std::vector<long int>\n/tmp/tmpy0dia__6.cpp:123:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  123 | }\n      | ^\n/tmp/tmpy0dia__6.cpp:124:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  124 | int main() {\n      |            ^\n/tmp/tmpy0dia__6.cpp:139:1: error:\
    \ expected \u2018}\u2019 at end of input\n  139 | }\n      | ^\n/tmp/tmpy0dia__6.cpp:120:29:\
    \ note: to match this \u2018{\u2019\n  120 |     for (i = 0; i < n; i++) {\n \
    \     |                             ^\n/tmp/tmpy0dia__6.cpp:139:1: error: expected\
    \ \u2018}\u2019 at end of input\n  139 | }\n      | ^\n/tmp/tmpy0dia__6.cpp:23:39:\
    \ note: to match this \u2018{\u2019\n   23 | bool is_sorted(std::vector<long>\
    \ lst) {\n      |                                       ^\n/tmp/tmpy0dia__6.cpp:139:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  139 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : lst) {\n        sum += i;\n    }\n    if (sum < 0)\n        return\
    \ false;\n    long long int count = 1;\n    for (long long int i : lst) {\n  \
    \      if (i == lst[count])\n            count++;\n        else\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwqramesr: /tmp/tmpwqramesr.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0)\n        return true;\n    if (lst.size() ==\
    \ 1)\n        return lst[0] == lst[0];\n    long last = lst[0];\n    for (long\
    \ i = 1; i < lst.size(); i++) {\n        if (lst[i] < last)\n            return\
    \ false;\n        last = lst[i];\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb4qbax6w: /tmp/tmpb4qbax6w.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[n];\n    long long\
    \ int count=0;\n    for(int i=0;i<lst.size();i++){\n        arr[i]=lst[i];\n \
    \       for(int j=i;j<n;j++){\n            if(arr[j]==arr[i]){\n             \
    \   count++;\n            }\n        }\n    }\n    if(count==n){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpficpu7tn.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpficpu7tn.cpp:25:23: error: \u2018n\u2019 was not declared\
    \ in this scope; did you mean \u2018yn\u2019?\n   25 |     long long int arr[n];\n\
    \      |                       ^\n      |                       yn\n/tmp/tmpficpu7tn.cpp:28:9:\
    \ error: \u2018arr\u2019 was not declared in this scope\n   28 |         arr[i]=lst[i];\n\
    \      |         ^~~\n"
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size();\n\
    \    long long int i;\n    long long int j;\n    long long int k;\n    long long\
    \ int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++)\
    \ {\n            if (lst[i] > lst[j]) {\n                k = j;\n            \
    \    temp = lst[i];\n                lst[i] = lst[k];\n                lst[k]\
    \ = temp;\n            }\n        }\n    }\n    return lst.size() == m;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbp9_xvz_: /tmp/tmpbp9_xvz_.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long prev = lst[0];\n    for\
    \ (long i : lst) {\n        if (i == prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_290dd4j: /tmp/tmp_290dd4j.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long last = lst[0];\n    for (long i : lst) {\n        if (i !=\
    \ last) {\n            return false;\n        }\n        last = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk9nu7fh1: /tmp/tmpk9nu7fh1.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    if (n <= 1) return true;\n    int i = 0;\n\
    \    int j = 0;\n    while (i < n && j < n) {\n        if (lst[i] < lst[j]) {\n\
    \            return false;\n        }\n        i++;\n        j++;\n    }\n   \
    \ return i == n;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4fb16wfj: /tmp/tmp4fb16wfj.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int m = lst.size()\
    \ / 2;\n    long long int left = 0, right = m;\n    while (left < right) {\n \
    \       if (lst[left] > lst[right])\n            return false;\n        if (lst[left]\
    \ == lst[right])\n            left++;\n        else\n            right--;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n   \
    \ assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprp7la_ue: /tmp/tmprp7la_ue.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749496
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int arr[] = {0};\n    long long int n = lst.size();\n\
    \    long long int i;\n    long long int j;\n    long long int k;\n    long long\
    \ int temp;\n    bool flag = true;\n    for (i = 0; i < n; i++) {\n        arr[i]\
    \ = lst[i];\n    }\n    for (i = 1; i < n; i++) {\n        for (j = i; j > 0;\
    \ j--) {\n            if (arr[j] < arr[j - 1]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdgk8cs1i: /tmp/tmpdgk8cs1i.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749496
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == lst[1];\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    while (i < m &&\
    \ lst[i] == lst[j]) {\n        i++;\n        j++;\n    }\n    if (i == m)\n  \
    \      return true;\n    if (j == m)\n        return false;\n    if (lst[i] >\
    \ lst[j])\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnxz3lynu: /tmp/tmpnxz3lynu.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749497
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1)\n        return true;\n\
    \    long long int m = lst.at(n - 1);\n    for (long long int i = n - 2; i >=\
    \ 0; i--) {\n        if (lst.at(i) > m)\n            return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_b3iivjd: /tmp/tmp_b3iivjd.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749497
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long prev = lst[0];\n   \
    \ for (long i : lst) {\n        if (i == prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpebhlec8g: /tmp/tmpebhlec8g.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0)\n        return true;\n    long prev = lst[0];\n\
    \    for (long i : lst) {\n        if (i == prev)\n            return false;\n\
    \        prev = i;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprsoangfe: /tmp/tmprsoangfe.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size();\n\
    \    long long int i;\n    long long int j;\n    long long int k;\n    long long\
    \ int temp;\n    long long int flag = 0;\n    for (i = 0; i < n; i++) {\n    \
    \    for (j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n     \
    \           flag = 1;\n                break;\n            }\n        }\n    \
    \    if (flag == 1) {\n            break;\n        }\n    }\n    if (flag == 1)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwlwqtyys: /tmp/tmpwlwqtyys.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749497
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long prev = lst[0];\n   \
    \ for (long i : lst) {\n        if (i != prev) {\n            return false;\n\
    \        }\n        prev = i;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp95ya50x3: /tmp/tmp95ya50x3.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749497
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    bool flag = true;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = i + 1; j < m; j++) {\n            if (lst[i] > lst[j]) {\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz__fj32t: /tmp/tmpz__fj32t.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749497
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    for (long long int i = 0; i < n; i++) {\n        if (lst[i] > lst[m])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu2j43nr.cpp: In function 'int main()':\n/tmp/tmpuu2j43nr.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuu2j43nr.cpp:2:\n/tmp/tmpuu2j43nr.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpuu2j43nr.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpuu2j43nr.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuu2j43nr.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpuu2j43nr.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpuu2j43nr.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpuu2j43nr.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuu2j43nr.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpuu2j43"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int n = 0;\n    long long\
    \ int sum = 0;\n    long long int count = 0;\n    for (long long int i : lst)\
    \ {\n        sum += i;\n        ++count;\n    }\n    if (count == 0) {\n     \
    \   return true;\n    }\n    if (count == 1) {\n        if (sum == lst[0]) {\n\
    \            return true;\n        }\n    }\n    if (count == 2) {\n        if\
    \ (sum == lst[0] && lst[1] == lst[0]) {\n            return true;\n        }\n\
    \    }\n    if (count == 3) {\n        if (sum == lst[0] && lst[1] == lst[1] &&\
    \ lst[2] == lst[0]) {\n            return true;\n        }\n    }\n    if (count\
    \ == 4) {\n        if (sum == lst[0] && lst[1] == lst[1] && lst[2] == lst[2] &&\
    \ lst[3] == lst[0]) {\n            return true;\n        }\n    }\n    if (count\
    \ == 5) {\n        if (sum == lst[0] && lst[1] == lst[1] && lst[2] == lst[2] &&\
    \ lst[3] == lst[3] && lst[4] == lst[0]) {\n            return true;\n        }\n\
    \    }\n    if (count == 6) {\n        if (sum == lst[0] && lst[1] == lst[1] &&\
    \ lst[2] == lst[2] && lst[3] == lst[3] && lst[4] == lst[4] && lst[5] == lst[0])\
    \ {\n            return true;\n        }\n    }\n    if (count == 7) {\n     \
    \   if (sum == lst[0] && lst[1] == lst[1] && lst[2] == lst[2] && lst[3] == lst[3]\
    \ && lst[4] == lst[4] && lst[5] == lst[5] && lst[6] == lst[0]) {\n           \
    \ return true;\n        }\n    }\n    if (count == 8) {\n        if (sum == lst[0]\
    \ && lst[1] == lst[1] && lst[2] == lst[2] && lst[3] == lst[3] && lst[4] == lst[4]\
    \ && lst[5] == lst[5] && lst[6] == lst[6] && lst[7] == lst[0]) {\n           \
    \ return true;\n        }\n    }\n    if (count == 9) {\n        if (sum == lst[0]\
    \ && lst[1] == lst[1] && lst[2] == lst[2] && lst[3] == lst[3] && lst[4] == lst[4]\
    \ && lst[5] == lst[5] && lst[6] == lst[6] && lst[7] == lst[7] && lst[8] == lst[0])\
    \ {\n            return true;\n        }\n    }\n    if (count == 10) {\n    \
    \    if (sum == lst[0] && lst[1] == lst[1] && lst[2] == lst[2] && lst[3] == lst[3]\
    \ && lst[4] == lst[4] && lst[5] == lst[5] && lst[6] == lst[6] && lst[7] == lst[7]\
    \ && lst[8] == lst[8] && lst[9] == lst[0]) {\n            return true;\n     \
    \   }\n    }\n    if (count == 11) {\n        if (sum == lst[0] && lst\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpholo1t89.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpholo1t89.cpp:86:27: error: no match for \u2018operator&&\u2019\
    \ (operand types are \u2018bool\u2019 and \u2018std::vector<long int>\u2019)\n\
    \   86 |         if (sum == lst[0] && lst\n      |                           ^~\
    \ ~~~\n      |                              |\n      |                       \
    \       std::vector<long int>\n/tmp/tmpholo1t89.cpp:86:27: note: candidate: \u2018\
    operator&&(bool, bool)\u2019 <built-in>\n   86 |         if (sum == lst[0] &&\
    \ lst\n      |             ~~~~~~~~~~~~~~^~~~~~\n/tmp/tmpholo1t89.cpp:86:27: note:\
    \   no known conversion for argument 2 from \u2018std::vector<long int>\u2019\
    \ to \u2018bool\u2019\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpholo1t89.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:415:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__logical_and,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__logical_and,\
    \ typename _Dom1::value_type>::result_type> std::operator&&(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  415 |     _DEFINE_EXPR_BINARY_OPERATOR(&&, __logical_and)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpholo1t89.cpp:86:30:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018bool\u2019\n   86 |         if (sum == lst[0] && lst\n      |    \
    \                          ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpholo1t89.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/incl"
  stdout: ''
  timestamp: 1659749497
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long first = lst[0];\n  \
    \  for (long i = 1, j = lst.size(); i < j; ++i, --j) {\n        if (lst[i] < first)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgv58z8d2: /tmp/tmpgv58z8d2.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749497
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int count[1000];\n    long\
    \ long int max[1000];\n    long long int min[1000];\n    long long int sum[1000];\n\
    \    long long int sum2[1000];\n    long long int sum3[1000];\n    long long int\
    \ sum4[1000];\n    long long int sum5[1000];\n    long long int sum6[1000];\n\
    \    long long int sum7[1000];\n    long long int sum8[1000];\n    long long int\
    \ sum9[1000];\n    long long int sum10[1000];\n    long long int sum11[1000];\n\
    \    long long int sum12[1000];\n    long long int sum13[1000];\n    long long\
    \ int sum14[1000];\n    long long int sum15[1000];\n    long long int sum16[1000];\n\
    \    long long int sum17[1000];\n    long long int sum18[1000];\n    long long\
    \ int sum19[1000];\n    long long int sum20[1000];\n    long long int sum21[1000];\n\
    \    long long int sum22[1000];\n    long long int sum23[1000];\n    long long\
    \ int sum24[1000];\n    long long int sum25[1000];\n    long long int sum26[1000];\n\
    \    long long int sum27[1000];\n    long long int sum28[1000];\n    long long\
    \ int sum29[1000];\n    long long int sum30[1000];\n    long long int sum31[1000];\n\
    \    long long int sum32[1000];\n    long long int sum33[1000];\n    long long\
    \ int sum34[1000];\n    long long int sum35[1000];\n    long long int sum36[1000];\n\
    \    long long int sum37[1000];\n    long long int sum38[1000];\n    long long\
    \ int sum39[1000];\n    long long int sum40[1000];\n    long long int sum41[1000];\n\
    \    long long int sum42[1000];\n    long long int sum43[1000];\n    long long\
    \ int sum44\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13szp2u1.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp13szp2u1.cpp:72:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmp13szp2u1.cpp:72:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749497
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int n = lst.size();\n   \
    \ long long int m = lst.size() - 1;\n    long long int i = 0;\n    long long int\
    \ j = 0;\n    long long int k = 0;\n    long long int temp = 0;\n    long long\
    \ int flag = 0;\n    long long int count = 0;\n    long long int flag2 = 0;\n\
    \    long long int count2 = 0;\n    long long int flag3 = 0;\n    long long int\
    \ count3 = 0;\n    long long int flag4 = 0;\n    long long int count4 = 0;\n \
    \   long long int flag5 = 0;\n    long long int count5 = 0;\n    long long int\
    \ flag6 = 0;\n    long long int count6 = 0;\n    long long int flag7 = 0;\n  \
    \  long long int count7 = 0;\n    long long int flag8 = 0;\n    long long int\
    \ count8 = 0;\n    long long int flag9 = 0;\n    long long int count9 = 0;\n \
    \   long long int flag10 = 0;\n    long long int count10 = 0;\n    long long int\
    \ flag11 = 0;\n    long long int count11 = 0;\n    long long int flag12 = 0;\n\
    \    long long int count12 = 0;\n    long long int flag13 = 0;\n    long long\
    \ int count13 = 0;\n    long long int flag14 = 0;\n    long long int count14 =\
    \ 0;\n    long long int flag15 = 0;\n    long long int count15 = 0;\n    long\
    \ long int flag16 = 0;\n    long long int count16 = 0;\n    long long int flag17\
    \ = 0;\n    long long int count17 = 0;\n    long long int flag18 = 0;\n    long\
    \ long int count18 = 0;\n    long long int flag19 = 0;\n    long long int count19\
    \ = 0;\n    long long int flag20 = 0;\n    long long int count20 = 0;\n    long\
    \ long int flag21 = 0;\n    long long int count21 = 0;\n    long long int flag22\
    \ = 0;\n    long long int count22 = 0;\n    long long int flag23 = 0;\n    long\
    \ long int count23 = 0;\n    long long int flag24 = 0;\n    long long int count24\
    \ = 0;\n    long long int flag25 = 0;\n    long long int count25 = 0;\n    long\
    \ long int flag26 = 0;\n    long long int count26 = 0;\n    long long int flag27\
    \ = 0;\n    long long int count27 = 0;\n    long long int flag28 = 0;\n    long\
    \ long int count28 = 0;\n    long long int flag29 = 0;\n    long long int count29\
    \ = 0;\n    long long int flag30\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp49zs724b.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp49zs724b.cpp:90:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   90 | }\n      | ^\n/tmp/tmp49zs724b.cpp:90:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749497
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    for (long long int i = 0; i < n; i++) {\n        if (lst[i] > lst[m])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu2j43nr.cpp: In function 'int main()':\n/tmp/tmpuu2j43nr.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuu2j43nr.cpp:2:\n/tmp/tmpuu2j43nr.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpuu2j43nr.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpuu2j43nr.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuu2j43nr.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpuu2j43nr.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpuu2j43nr.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpuu2j43nr.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpuu2j43nr.cpp:36:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpuu2j43"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < m; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        if (lst[i] != lst[i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5zq8ja8h: /tmp/tmp5zq8ja8h.cpp:77: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749497
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    long prev = lst[0];\n   \
    \ for (long i : lst) {\n        if (i == prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpebhlec8g: /tmp/tmpebhlec8g.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int size = lst.size();\n\
    \    long long int count[size];\n    long long int i;\n    long long int j;\n\
    \    long long int k;\n    long long int temp;\n    for(i=0;i<size;i++){\n   \
    \     count[i] = 0;\n    }\n    for(i=0;i<size;i++){\n        for(j=i+1;j<size;j++){\n\
    \            if(lst[i] > lst[j]){\n                count[i]++;\n             \
    \   count[j]--;\n            }\n        }\n    }\n    for(i=0;i<size;i++){\n \
    \       if(count[i]>1){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpouwxrwl1: /tmp/tmpouwxrwl1.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int last = lst.back();\n    long long int first = lst.front();\n\
    \    long long int mid;\n    for (long long int i = lst.size() - 1; i >= 0; i--)\
    \ {\n        mid = lst[i];\n        if (mid < first || mid > last) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyaktlhjy: /tmp/tmpyaktlhjy.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return lst[0] == 0;\n    if (n == 2)\n        return\
    \ lst[0] == lst[1];\n    if (n == 3)\n        return lst[0] == lst[1] && lst[1]\
    \ == lst[2];\n    if (n == 4)\n        return lst[0] == lst[1] && lst[1] == lst[2]\
    \ && lst[2] == lst[3];\n    if (n == 5)\n        return lst[0] == lst[1] && lst[1]\
    \ == lst[2] && lst[2] == lst[3] && lst[3] == lst[4];\n    if (n == 6)\n      \
    \  return lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] ==\
    \ lst[4] && lst[4] == lst[5];\n    if (n == 7)\n        return lst[0] == lst[1]\
    \ && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\
    \ && lst[5] == lst[6];\n    if (n == 8)\n        return lst[0] == lst[1] && lst[1]\
    \ == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5] && lst[5]\
    \ == lst[6] && lst[6] == lst[7];\n    if (n == 9)\n        return lst[0] == lst[1]\
    \ && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\
    \ && lst[5] == lst[6] && lst[6] == lst[7] && lst[7] == lst[8];\n    if (n == 10)\n\
    \        return lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3] && lst[3]\
    \ == lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7] && lst[7]\
    \ == lst[8] && lst[8] == lst[9];\n    if (n == 11)\n        return lst[0] == lst[1]\
    \ && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\
    \ && lst[5] == lst[6] && lst[6] == lst[7] && lst[7] == lst[8] && lst[8] == lst[9]\
    \ && lst[9] == lst[10];\n    if (n == 12)\n        return lst[0] == lst[1] &&\
    \ lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\
    \ && lst[5] == lst[6] && lst[6] == lst[7] && lst[7] == lst[8] && lst[8] == lst[9]\
    \ && lst[9] == lst[10] && lst[10] == lst[11];\n    if (n == 13)\n        return\
    \ lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4]\
    \ && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7] && lst[7] == \n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnak7ll7b.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnak7ll7b.cpp:53:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpnak7ll7b.cpp:52:165:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   52 |         return\
    \ lst[0] == lst[1] && lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4]\
    \ && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7] && lst[7] ==\n \
    \     |                                                                      \
    \                                                                            \
    \                   ^\n      |                                               \
    \                                                                            \
    \                                          ;\n   53 | }\n      | ~           \
    \                                                                            \
    \                                                                            \
    \ \n"
  stdout: ''
  timestamp: 1659749497
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size();\n\
    \    long long int i;\n    long long int j;\n    long long int k;\n    long long\
    \ int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++)\
    \ {\n            if (lst[i] > lst[j]) {\n                k = j;\n            \
    \    temp = lst[i];\n                lst[i] = lst[k];\n                lst[k]\
    \ = temp;\n            }\n        }\n    }\n    return lst.size() == n;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp03ja0fbr: /tmp/tmp03ja0fbr.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int count=0;\n    long long\
    \ int temp=0;\n    for(long long int i=0;i<lst.size();i++){\n        if(lst[i]==lst[i+1]){\n\
    \            count++;\n        }\n        else{\n            if(count==0){\n \
    \               return false;\n            }\n            else{\n            \
    \    count=0;\n            }\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbc05eeh5: /tmp/tmpbc05eeh5.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int last = lst.back();\n    long long int first = 1;\n\
    \    for (auto i : lst) {\n        if (i != last) {\n            return false;\n\
    \        }\n        last = i;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4iu22x_o: /tmp/tmp4iu22x_o.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i = 0;\n    long long int j = 0;\n    long long int\
    \ k = 0;\n    long long int l = 0;\n    long long int count = 0;\n    long long\
    \ int flag = 0;\n    long long int temp = 0;\n    long long int temp2 = 0;\n \
    \   long long int temp3 = 0;\n    long long int temp4 = 0;\n    long long int\
    \ temp5 = 0;\n    long long int temp6 = 0;\n    long long int temp7 = 0;\n   \
    \ long long int temp8 = 0;\n    long long int temp9 = 0;\n    long long int temp10\
    \ = 0;\n    long long int temp11 = 0;\n    long long int temp12 = 0;\n    long\
    \ long int temp13 = 0;\n    long long int temp14 = 0;\n    long long int temp15\
    \ = 0;\n    long long int temp16 = 0;\n    long long int temp17 = 0;\n    long\
    \ long int temp18 = 0;\n    long long int temp19 = 0;\n    long long int temp20\
    \ = 0;\n    long long int temp21 = 0;\n    long long int temp22 = 0;\n    long\
    \ long int temp23 = 0;\n    long long int temp24 = 0;\n    long long int temp25\
    \ = 0;\n    long long int temp26 = 0;\n    long long int temp27 = 0;\n    long\
    \ long int temp28 = 0;\n    long long int temp29 = 0;\n    long long int temp30\
    \ = 0;\n    long long int temp31 = 0;\n    long long int temp32 = 0;\n    long\
    \ long int temp33 = 0;\n    long long int temp34 = 0;\n    long long int temp35\
    \ = 0;\n    long long int temp36 = 0;\n    long long int temp37 = 0;\n    long\
    \ long int temp38 = 0;\n    long long int temp39 = 0;\n    long long int temp40\
    \ = 0;\n    long long int temp41 = 0;\n    long long int temp42 = 0;\n    long\
    \ long int temp43 = 0;\n    long long int temp44 = 0;\n    long long int temp45\
    \ = 0;\n    long long int temp46 = 0;\n    long long int temp47 = 0;\n    long\
    \ long int temp48 = 0;\n    long long int temp49 = 0;\n    long long int temp50\
    \ = 0;\n    long long int temp51 = 0;\n    long long int temp52 = 0;\n    long\
    \ long int temp53 = 0;\n    long long int temp54 = 0;\n    long long int temp55\
    \ = 0;\n    long long int temp56 = 0;\n    long long int temp57 = 0;\n\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpch9ijyc9: /tmp/tmpch9ijyc9.cpp:93: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0) return true;\n  \
    \  if (n == 1) return false;\n    if (lst[0] == lst[1]) return true;\n    long\
    \ long int mid = n / 2;\n    long long int left = lst[mid];\n    long long int\
    \ right = lst[mid + 1];\n    if (left < right) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpin61wagd: /tmp/tmpin61wagd.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int last = lst[0];\n    for (long long int x : lst) {\n\
    \        if (last < x) {\n            return false;\n        }\n        last =\
    \ x;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpggf0huyc: /tmp/tmpggf0huyc.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int temp;\n    long long int i;\n    long long int j;\n\
    \    bool flag = true;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_sorted;\n    assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnh7wvwkf: /tmp/tmpnh7wvwkf.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    for (long long int i = 0; i < n; i++) {\n        for (long long int\
    \ j = i + 1; j < m; j++) {\n            if (lst[i] > lst[j]) {\n             \
    \   return false;\n            }\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp44hka4m_: /tmp/tmp44hka4m_.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmbtd0rx.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmpsmbtd0rx.cpp:25:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpsmbtd0rx.cpp:\
    \ In function 'int main()':\n/tmp/tmpsmbtd0rx.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = is_sorted;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsmbtd0rx.cpp:2:\n/tmp/tmpsmbtd0rx.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpsmbtd0rx.cpp:35:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpsmbtd0rx.cpp:35:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpsmbtd0rx.cpp:35:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpsmbtd0rx.cpp:36:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpsmbtd0rx.cpp:36:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpsmbtd0rx.cpp:36:86:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[] = {(long long int)lst.at(0),\
    \ (long long int)lst.at(1), (long long int)lst.at(2), (long long int)lst.at(3),\
    \ (long long int)lst.at(4)};\n    long long int n = sizeof(arr) / sizeof(long\
    \ long int);\n    long long int count = 0;\n    long long int temp = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (arr[i] != arr[i + 1]) {\n           \
    \ count++;\n            if (count == 2) {\n                temp = arr[i];\n  \
    \              arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n    \
    \            count = 0;\n            }\n        }\n    }\n    if (count != 0)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 1) >= this->size() (which is 1)\n"
  stdout: ''
  timestamp: 1659749498
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n <= 1) return true;\n  \
    \  long long int m = lst.at(n - 1);\n    for (long long int i = n - 2; i >= 0;\
    \ i--) {\n        if (lst.at(i) > m) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb89g3n83.cpp: In function 'int main()':\n/tmp/tmpb89g3n83.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb89g3n83.cpp:2:\n/tmp/tmpb89g3n83.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpb89g3n83.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpb89g3n83.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpb89g3n83.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpb89g3n83.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpb89g3n83.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb89g3n83.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpb89g3n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    for (long long int i = 0; i < m; i++) {\n        if (lst[i] > lst[i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnobmq8o6: /tmp/tmpnobmq8o6.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long long int l1 = lst[0];\n\
    \    long long int l2 = lst[1];\n    for (long long int i = 2; i < lst.size();\
    \ i++) {\n        if (lst[i] < l1) return false;\n        if (lst[i] > l2) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbyavjvbn: /tmp/tmpbyavjvbn.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            if (lst[i] > lst[j]) {\n                k = i;\n\
    \                temp = lst[i];\n                lst[i] = lst[j];\n          \
    \      lst[j] = temp;\n            }\n        }\n    }\n    for (i = 0; i < m;\
    \ i++) {\n        for (j = i + 1; j < m; j++) {\n            if (lst[i] > lst[j])\
    \ {\n                k = i;\n                temp = lst[i];\n                lst[i]\
    \ = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\
    \    return lst.size() == 0;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0q9j6f48: /tmp/tmp0q9j6f48.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int size = lst.size();\n    long long int last = lst[size\
    \ - 1];\n    long long int mid;\n    for (long long int i = 0; i < size - 1; i++)\
    \ {\n        mid = lst[i];\n        if (mid != last) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprurx5lyg: /tmp/tmprurx5lyg.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749498
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0) return true;\n  \
    \  long long int m = lst.at(0);\n    for (long long int i = 1; i < n; i++) {\n\
    \        if (lst.at(i) > m) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdto7owg2: /tmp/tmpdto7owg2.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n; i++) {\n       \
    \ for (int j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm28q0pke.cpp: In function 'int main()':\n/tmp/tmpm28q0pke.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm28q0pke.cpp:2:\n/tmp/tmpm28q0pke.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpm28q0pke.cpp:36:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpm28q0pke.cpp:36:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:36:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpm28q0pke.cpp:37:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpm28q0pke.cpp:37:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpm28q0pke.cpp:37:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpm28q0pke.cpp:37:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpm28q0p"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() < 2) return true;\n    long prev = lst[0];\n    for\
    \ (long i : lst) {\n        if (i != prev) return false;\n        prev = i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n \
    \   assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoh8pzf4w: /tmp/tmpoh8pzf4w.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749499
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long last = lst[0];\n    for (long i : lst) {\n        if (i ==\
    \ last) return true;\n        if (i != last) return false;\n        last = i;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmglicvcd: /tmp/tmpmglicvcd.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749499
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    if (n == 0) return true;\n  \
    \  long long int m = lst.at(n - 1);\n    for (long long int i = 1; i < n; i++)\
    \ {\n        if (lst.at(i) > m) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4avktzsa: /tmp/tmp4avktzsa.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749499
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    int n = lst.size();\n    for (int i = 0; i < n - 1; i++) {\n   \
    \     if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1m_k7e3i: /tmp/tmp1m_k7e3i.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749493
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    if (lst.size() == 0) return true;\n    if (lst.size() == 1) return\
    \ false;\n    long last = lst[0];\n    for (long i = 1, j = lst.size() - 1; i\
    \ < j; ++i, --j) {\n        if (lst[i] < last) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpevzfg_25: /tmp/tmpevzfg_25.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749499
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int temp;\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] < lst[j]) {\n                temp = lst[i];\n\
    \                lst[i] = lst[j];\n                lst[j] = temp;\n          \
    \  }\n        }\n    }\n    for (i = 0; i <= m; i++) {\n        for (j = i + 1;\
    \ j <= m; j++) {\n            if (lst[i] == lst[j]) {\n                k = i;\n\
    \            }\n        }\n    }\n    if (k == i) {\n        return true;\n  \
    \  }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n  \
    \  assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpstwhd0fu: /tmp/tmpstwhd0fu.cpp:62: int main(): Assertion `candidate((std::vector<long>({(long)5})))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749499
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int last = lst[0];\n    for (long long int i : lst) {\n\
    \        if (i != last) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7be_e1vl.cpp: In function 'bool is_sorted(std::vector<long int>)':\n\
    /tmp/tmp7be_e1vl.cpp:25:28: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long long int i : lst) {\n                           \
    \ ^\n/tmp/tmp7be_e1vl.cpp: In function 'int main()':\n/tmp/tmp7be_e1vl.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7be_e1vl.cpp:2:\n/tmp/tmp7be_e1vl.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmp7be_e1vl.cpp:34:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmp7be_e1vl.cpp:34:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp7be_e1vl.cpp:34:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmp7be_e1vl.cpp:35:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmp7be_e1vl.cpp:35:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmp7be_e1vl.cpp:35:86:\
    \ warning: extended initia"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    for (i = 0; i < m; i++) {\n        if (lst[i]\
    \ > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_wmubyi3: /tmp/tmp_wmubyi3.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749488
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int arr[] = {0};\n    long long int n = lst.size();\n\
    \    long long int i;\n    long long int j;\n    long long int k;\n    long long\
    \ int temp;\n    long long int count = 0;\n    for (i = 0; i < n; i++) {\n   \
    \     for (j = i + 1; j < n; j++) {\n            if (lst[i] > lst[j]) {\n    \
    \            temp = lst[i];\n                lst[i] = lst[j];\n              \
    \  lst[j] = temp;\n            }\n        }\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (arr[j] == 0) {\n     \
    \           arr[j] = 1;\n                count++;\n            }\n        }\n\
    \    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (arr[j] == 1) {\n                arr[j] = 0;\n                count--;\n\
    \            }\n        }\n    }\n    if (count == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp45kr5u90: /tmp/tmp45kr5u90.cpp:65: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)2, (long)4, (long)5}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749499
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = i + 1; j < m; j++) {\n            if (lst[i] > lst[j]) {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkeoed6ao: /tmp/tmpkeoed6ao.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)2, (long)2, (long)3, (long)4}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659749491
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    long long int arr[10];\n    long long\
    \ int temp;\n    long long int i;\n    long long int j;\n    long long int k;\n\
    \    long long int n;\n    long long int m;\n    long long int flag = 0;\n   \
    \ long long int count = 0;\n    long long int count2 = 0;\n    long long int count3\
    \ = 0;\n    long long int count4 = 0;\n    long long int count5 = 0;\n    long\
    \ long int count6 = 0;\n    long long int count7 = 0;\n    long long int count8\
    \ = 0;\n    long long int count9 = 0;\n    long long int count10 = 0;\n    long\
    \ long int count11 = 0;\n    long long int count12 = 0;\n    long long int count13\
    \ = 0;\n    long long int count14 = 0;\n    long long int count15 = 0;\n    long\
    \ long int count16 = 0;\n    long long int count17 = 0;\n    long long int count18\
    \ = 0;\n    long long int count19 = 0;\n    long long int count20 = 0;\n    long\
    \ long int count21 = 0;\n    long long int count22 = 0;\n    long long int count23\
    \ = 0;\n    long long int count24 = 0;\n    long long int count25 = 0;\n    long\
    \ long int count26 = 0;\n    long long int count27 = 0;\n    long long int count28\
    \ = 0;\n    long long int count29 = 0;\n    long long int count30 = 0;\n    long\
    \ long int count31 = 0;\n    long long int count32 = 0;\n    long long int count33\
    \ = 0;\n    long long int count34 = 0;\n    long long int count35 = 0;\n    long\
    \ long int count36 = 0;\n    long long int count37 = 0;\n    long long int count38\
    \ = 0;\n    long long int count39 = 0;\n    long long int count40 = 0;\n    long\
    \ long int count41 = 0;\n    long long int count42 = 0;\n    long long int count43\
    \ = 0;\n    long long int count44 = 0;\n    long long int count45 = 0;\n    long\
    \ long int count46 = 0;\n    long long int count47 = 0;\n    long long int count48\
    \ = 0;\n    long long int count49 = 0;\n    long long int count50 = 0;\n    long\
    \ long int count51 = 0;\n    long long int count52 = 0;\n    long long int count53\
    \ = 0;\n    long long int count54 = 0;\n    long long int count55 = 0;\n    long\
    \ long int count56 = 0;\n    long long int count57 = 0;\n    long long int \n\
    }\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeh6zdm_t.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeh6zdm_t.cpp:91:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   91 | }\n      | ^\n/tmp/tmpeh6zdm_t.cpp:91:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749499
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    // Write your code here\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5w312o2.cpp: In function 'int main()':\n/tmp/tmpe5w312o2.cpp:281:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = is_sorted;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe5w312o2.cpp:2:\n/tmp/tmpe5w312o2.cpp:282:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                        ^\n/tmp/tmpe5w312o2.cpp:282:50: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)5}))) == (true));\n\
    \                                                  ^\n/tmp/tmpe5w312o2.cpp:282:50:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:282:52: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n                                                    ^\n/tmp/tmpe5w312o2.cpp:283:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))) == (true));\n                                \
    \        ^\n/tmp/tmpe5w312o2.cpp:283:86: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n                       \
    \                                                               ^\n/tmp/tmpe5w312o2.cpp:283:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe5w312o2.cpp:283:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long long int n = lst.size();\n    long long int m = lst.size()\
    \ - 1;\n    long long int i;\n    long long int j;\n    long long int k;\n   \
    \ long long int l = 0;\n    long long int h = 1;\n    long long int mid;\n   \
    \ long long int mid2;\n    long long int mid3;\n    long long int mid4;\n    long\
    \ long int mid5;\n    long long int mid6;\n    long long int mid7;\n    long long\
    \ int mid8;\n    long long int mid9;\n    long long int mid10;\n    long long\
    \ int mid11;\n    long long int mid12;\n    long long int mid13;\n    long long\
    \ int mid14;\n    long long int mid15;\n    long long int mid16;\n    long long\
    \ int mid17;\n    long long int mid18;\n    long long int mid19;\n    long long\
    \ int mid20;\n    long long int mid21;\n    long long int mid22;\n    long long\
    \ int mid23;\n    long long int mid24;\n    long long int mid25;\n    long long\
    \ int mid26;\n    long long int mid27;\n    long long int mid28;\n    long long\
    \ int mid29;\n    long long int mid30;\n    long long int mid31;\n    long long\
    \ int mid32;\n    long long int mid33;\n    long long int mid34;\n    long long\
    \ int mid35;\n    long long int mid36;\n    long long int mid37;\n    long long\
    \ int mid38;\n    long long int mid39;\n    long long int mid40;\n    long long\
    \ int mid41;\n    long long int mid42;\n    long long int mid43;\n    long long\
    \ int mid44;\n    long long int mid45;\n    long long int mid46;\n    long long\
    \ int mid47;\n    long long int mid48;\n    long long int mid49;\n    long long\
    \ int mid50;\n    long long int mid51;\n    long long int mid52;\n    long long\
    \ int mid53;\n    long long int mid54;\n    long long int mid55;\n    long long\
    \ int mid56;\n    long long int mid57;\n    long long int mid58;\n    long long\
    \ int mid59;\n    long long int mid\n}\nint main() {\n    auto candidate = is_sorted;\n\
    \    assert(candidate((std::vector<long>({(long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsjsx6_77.cpp: In function \u2018bool is_sorted(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsjsx6_77.cpp:91:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   91 | }\n      | ^\n/tmp/tmpsjsx6_77.cpp:91:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659749499
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector of numbers,\
    \ return whether or not they are sorted\n// in ascending order. If vector has\
    \ more than 1 duplicate of the same\n// number, return false. Assume no negative\
    \ numbers and only integers.\n// Examples\n// >>> is_sorted((std::vector<long>({(long)5})))\n\
    // (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1, (long)3,\
    \ (long)2, (long)4, (long)5})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7})))\n// (true)\n// >>>\
    \ is_sorted((std::vector<long>({(long)1, (long)3, (long)2, (long)4, (long)5, (long)6,\
    \ (long)7})))\n// (false)\n// >>> is_sorted((std::vector<long>({(long)1, (long)2,\
    \ (long)2, (long)3, (long)3, (long)4})))\n// (true)\n// >>> is_sorted((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)2, (long)3, (long)4})))\n// (false)\nbool is_sorted(std::vector<long>\
    \ lst) {\n    long prev = lst[0];\n    for (long i : lst) {\n        if (i !=\
    \ prev) {\n            return false;\n        }\n        prev = i;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_sorted;\n    assert(candidate((std::vector<long>({(long)5})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)2, (long)4, (long)5, (long)6, (long)7}))) == (false));\n    assert(candidate((std::vector<long>()))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1}))) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)1}))) == (false));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)2, (long)2,\
    \ (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)3, (long)3, (long)4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)2, (long)3, (long)3, (long)4}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxyyrso97: /tmp/tmpxyyrso97.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4, (long)5}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659749495
