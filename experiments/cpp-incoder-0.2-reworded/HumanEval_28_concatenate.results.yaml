language: cpp
name: HumanEval_28_concatenate
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &string : strings) {\n  \
    \      result += string;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7dcfku72.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp7dcfku72.cpp:10:16: error: ISO C++ forbids declaration of 'string'\
    \ with no type [-fpermissive]\n     for (auto &string : strings) {\n         \
    \       ^\n/tmp/tmp7dcfku72.cpp:10:25: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (auto &string : strings) {\n               \
    \          ^\n/tmp/tmp7dcfku72.cpp: In function 'int main()':\n/tmp/tmp7dcfku72.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7dcfku72.cpp:2:\n/tmp/tmp7dcfku72.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp7dcfku72.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp7dcfku72.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp7dcfku72.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp7dcfku72.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp7dcfku72.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/q"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it) {\n        result += *it;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2c12kml.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpf2c12kml.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n               ^\n\
    /tmp/tmpf2c12kml.cpp:10:37: error: expected ';' before 'it'\n     for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n                          \
    \           ^\n/tmp/tmpf2c12kml.cpp:10:37: error: 'it' was not declared in this\
    \ scope\n/tmp/tmpf2c12kml.cpp: In function 'int main()':\n/tmp/tmpf2c12kml.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf2c12kml.cpp:2:\n/tmp/tmpf2c12kml.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpf2c12kml.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyszhm7c.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwyszhm7c.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwyszhm7c.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwyszhm7c.cpp: In function 'int main()':\n/tmp/tmpwyszhm7c.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwyszhm7c.cpp:2:\n/tmp/tmpwyszhm7c.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwyszhm7c.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwyszhm7c.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwyszhm7c.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwyszhm7c.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings)\n        result\
    \ += s;\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgiqgtlxy.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpgiqgtlxy.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings)\n                ^\n\
    /tmp/tmpgiqgtlxy.cpp:10:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &s : strings)\n                    ^\n/tmp/tmpgiqgtlxy.cpp:\
    \ In function 'int main()':\n/tmp/tmpgiqgtlxy.cpp:15:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgiqgtlxy.cpp:2:\n/tmp/tmpgiqgtlxy.cpp:16:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpgiqgtlxy.cpp:17:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpgiqgtlxy.cpp:17:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpgiqgtlxy.cpp:17:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgiqgtlxy.cpp:17:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgiqgtlxy.cpp:17:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n               "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it) {\n        result += *it;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2c12kml.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpf2c12kml.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n               ^\n\
    /tmp/tmpf2c12kml.cpp:10:37: error: expected ';' before 'it'\n     for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n                          \
    \           ^\n/tmp/tmpf2c12kml.cpp:10:37: error: 'it' was not declared in this\
    \ scope\n/tmp/tmpf2c12kml.cpp: In function 'int main()':\n/tmp/tmpf2c12kml.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf2c12kml.cpp:2:\n/tmp/tmpf2c12kml.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpf2c12kml.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it) {\n        result += *it;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2c12kml.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpf2c12kml.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n               ^\n\
    /tmp/tmpf2c12kml.cpp:10:37: error: expected ';' before 'it'\n     for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n                          \
    \           ^\n/tmp/tmpf2c12kml.cpp:10:37: error: 'it' was not declared in this\
    \ scope\n/tmp/tmpf2c12kml.cpp: In function 'int main()':\n/tmp/tmpf2c12kml.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf2c12kml.cpp:2:\n/tmp/tmpf2c12kml.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpf2c12kml.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyszhm7c.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwyszhm7c.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwyszhm7c.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwyszhm7c.cpp: In function 'int main()':\n/tmp/tmpwyszhm7c.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwyszhm7c.cpp:2:\n/tmp/tmpwyszhm7c.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwyszhm7c.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwyszhm7c.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwyszhm7c.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwyszhm7c.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it) {\n        result += *it;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2c12kml.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpf2c12kml.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n               ^\n\
    /tmp/tmpf2c12kml.cpp:10:37: error: expected ';' before 'it'\n     for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n                          \
    \           ^\n/tmp/tmpf2c12kml.cpp:10:37: error: 'it' was not declared in this\
    \ scope\n/tmp/tmpf2c12kml.cpp: In function 'int main()':\n/tmp/tmpf2c12kml.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpf2c12kml.cpp:2:\n/tmp/tmpf2c12kml.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpf2c12kml.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpf2c12kml.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpf2c12kml.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04x4fkjk.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp04x4fkjk.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp04x4fkjk.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp04x4fkjk.cpp:\
    \ In function 'int main()':\n/tmp/tmp04x4fkjk.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04x4fkjk.cpp:2:\n/tmp/tmp04x4fkjk.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp04x4fkjk.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp04x4fkjk.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp04x4fkjk.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyszhm7c.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpwyszhm7c.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpwyszhm7c.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwyszhm7c.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwyszhm7c.cpp: In function 'int main()':\n/tmp/tmpwyszhm7c.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwyszhm7c.cpp:2:\n/tmp/tmpwyszhm7c.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpwyszhm7c.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpwyszhm7c.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpwyszhm7c.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpwyszhm7c.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate vector of\
    \ strings into a single string\n// >>> concatenate((std::vector<std::string>()))\n\
    // (\"\")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto &s : strings) {\n    result +=\
    \ s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ten81x4.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp8ten81x4.cpp:10:14: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n   for (auto &s : strings) {\n              ^\n\
    /tmp/tmp8ten81x4.cpp:10:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (auto &s : strings) {\n                  ^\n/tmp/tmp8ten81x4.cpp:\
    \ In function 'int main()':\n/tmp/tmp8ten81x4.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ten81x4.cpp:2:\n/tmp/tmp8ten81x4.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp8ten81x4.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp8ten81x4.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp8ten81x4.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp8ten81x4.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8ten81x4.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fr"
  stdout: ''
