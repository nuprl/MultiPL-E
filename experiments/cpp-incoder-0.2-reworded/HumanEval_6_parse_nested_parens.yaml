name: HumanEval_6_parse_nested_parens
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string represented multiple groups for nested parentheses separated by spaces.\n\
  // For each of the group, output the deepest level of nesting of parentheses.\n\
  // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
  \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
  \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
  \ paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
  \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
  \ (std::vector<long>({(long)4})));\n}\n"
completions: ["    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    long paren_level_count = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            is_open = true;\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            is_closed = true;\n            paren_level_count--;\n\
    \        } else if (is_open && is_closed) {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level = 0;\n            is_open = false;\n            is_closed\
    \ = false;\n        } else if (is_open) {\n            paren_level++;\n      \
    \  } else if (is_closed) {\n            paren_level--;\n        }\n    }\n   \
    \ paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long paren_level\
    \ = 0;\n    bool is_open = false;\n    bool is_closed = false;\n    long paren_level_count\
    \ = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n        char c\
    \ = paren_string[i];\n        if (c == '(') {\n            is_open = true;\n \
    \           paren_level_count++;\n        } else if (c == ')') {\n           \
    \ is_closed = true;\n            paren_level_count--;\n        } else if (c ==\
    \ ' ') {\n            if (is_open && is_closed) {\n                paren_levels.push_back(paren_level);\n\
    \                paren_level = 0;\n                is_open = false;\n        \
    \        is_closed = false;\n            }\n        } else {\n            is_open\
    \ = false;\n            is_closed = false;\n        }\n        paren_level++;\n\
    \    }\n    if (is_open && is_closed) {\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string curr_paren_string = paren_string;\n    long curr_level = 0;\n\
    \    while (curr_paren_string.size() > 0) {\n        auto next_paren_string =\
    \ curr_paren_string.substr(0, curr_paren_string.size() - 1);\n        auto next_level\
    \ = curr_level + 1;\n        auto next_paren_level = paren_levels.size();\n  \
    \      paren_levels.emplace_back(next_paren_level);\n        curr_paren_string\
    \ = next_paren_string;\n        curr_level = next_level;\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    std::string paren_level;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    for (auto &c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n            paren_level\
    \ = std::to_string(paren_level_count);\n            paren_level_count = 0;\n \
    \       } else if (c == ')') {\n            paren_level_count--;\n           \
    \ paren_level = std::to_string(paren_level_count);\n            paren_level_count\
    \ = 0;\n            if (paren_level_count == 0) {\n                paren_level_count\
    \ = paren_level_max_count;\n                paren_level_max_count = 0;\n     \
    \       }\n            paren_level_count++;\n        }\n        paren_level +=\
    \ c;\n    }\n    paren_level_count = paren_level_max_count;\n    paren_level_max_count\
    \ = 0;\n    for (auto &c : paren_level) {\n        if (c == '(') {\n         \
    \   paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n        } else if (c == ')') {\n        \
    \    paren_level_count--;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n            if (paren_level_count == 0) {\n\
    \                paren_level_count = paren_level_max_count;\n                paren_level_max_count\
    \ = 0;\n            }\n            paren_level_count++;\n        }\n        paren_level\
    \ += c;\n    }\n    paren_level_count = paren_level_max_count;\n    paren_level_max_count\
    \ = 0;\n    for (auto &c : paren_level) {\n        if (c == '(') {\n         \
    \   paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n        } else if (c == ')') {\n        \
    \    paren_level_count--;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n            if (paren_level_count == 0) {\n\
    \                paren_level_count = paren_level_max_count;\n                paren_level_max_count\
    \ = 0;\n            }\n            paren_level_count++;\n        }\n        paren_level\
    \ += c;\n    }\n    paren_level_count = paren_level_max_count;\n    paren_level_max_count\
    \ = 0;\n    for (auto &c : paren_level) {\n        if (c == '(') {\n         \
    \   paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n        } else if (c == ')') {\n        \
    \    paren_level_count--;\n            paren_level = std::to_", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    size_t paren_level\
    \ = 0;\n    size_t paren_level_count = 0;\n    size_t paren_level_start = 0;\n\
    \    for (size_t i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            paren_level_count++;\n            paren_levels[paren_level]\
    \ = paren_level_count;\n            paren_level_start = i;\n        } else if\
    \ (paren_string[i] == ')') {\n            paren_level_count--;\n            paren_levels[paren_level]\
    \ = paren_level_count;\n            paren_level = paren_level_start;\n       \
    \ }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    std::string paren_level_string;\n    long paren_level = 0;\n    bool is_open\
    \ = false;\n    bool is_closed = false;\n    for (auto c : paren_string) {\n \
    \       if (c == '(') {\n            is_open = true;\n            paren_level_string\
    \ = paren_level_string.empty() ? \"\" : paren_level_string;\n            paren_level_string\
    \ = paren_level_string + c;\n        } else if (c == ')') {\n            is_closed\
    \ = true;\n            paren_level_string = paren_level_string + c;\n        \
    \    paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long level = 0;\n    bool\
    \ is_open = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n\
    \            is_open = true;\n        } else if (c == ')') {\n            is_open\
    \ = false;\n        } else if (is_open) {\n            paren_levels.push_back(level);\n\
    \            level++;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_levels.push_back(level);\n            level++;\n\
    \        } else if (c == ')') {\n            is_closed = true;\n            level--;\n\
    \        } else if (c == ' ') {\n            if (is_open && !is_closed) {\n  \
    \              level++;\n            } else if (is_closed && !is_open) {\n   \
    \             level--;\n            }\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> result;\n    long level = 0;\n\
    \    std::string current_paren_string = paren_string;\n    std::string current_paren_level\
    \ = \"\";\n    for (size_t i = 0; i < paren_string.size(); ++i) {\n        if\
    \ (paren_string[i] == '(') {\n            current_paren_level += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            current_paren_level\
    \ += paren_string[i];\n            if (current_paren_level == current_paren_string)\
    \ {\n                result.push_back(level);\n                level = 0;\n  \
    \              current_paren_string = \"\";\n            } else {\n          \
    \      level += 1;\n            }\n        } else {\n            current_paren_string\
    \ += paren_string[i];\n        }\n    }\n    if (current_paren_level != current_paren_string)\
    \ {\n        result.push_back(level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels = paren_string.substr(0, paren_string.find('\
    \ ')).split(' ');\n    long max_level = 0;\n    for (auto level : paren_levels)\
    \ {\n        if (level > max_level) {\n            max_level = level;\n      \
    \  }\n    }\n    std::vector<long> paren_levels_out;\n    paren_levels_out.reserve(max_level\
    \ + 1);\n    for (auto level : paren_levels) {\n        paren_levels_out.push_back(level);\n\
    \    }\n    paren_levels_out.push_back(max_level);\n    return paren_levels_out;",
  "    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\" \"\
    );\n    std::vector<long> paren_levels_copy;\n    paren_levels_copy = paren_levels.begin();\n\
    \    long paren_level = 0;\n    long paren_levels_copy_index = 0;\n    long paren_levels_copy_size\
    \ = 0;\n    long paren_levels_copy_size2 = 0;\n    long paren_levels_copy_size3\
    \ = 0;\n    long paren_levels_copy_size4 = 0;\n    long paren_levels_copy_size5\
    \ = 0;\n    long paren_levels_copy_size6 = 0;\n    long paren_levels_copy_size7\
    \ = 0;\n    long paren_levels_copy_size8 = 0;\n    long paren_levels_copy_size9\
    \ = 0;\n    long paren_levels_copy_size10 = 0;\n    long paren_levels_copy_size11\
    \ = 0;\n    long paren_levels_copy_size12 = 0;\n    long paren_levels_copy_size13\
    \ = 0;\n    long paren_levels_copy_size14 = 0;\n    long paren_levels_copy_size15\
    \ = 0;\n    long paren_levels_copy_size16 = 0;\n    long paren_levels_copy_size17\
    \ = 0;\n    long paren_levels_copy_size18 = 0;\n    long paren_levels_copy_size19\
    \ = 0;\n    long paren_levels_copy_size20 = 0;\n    long paren_levels_copy_size21\
    \ = 0;\n    long paren_levels_copy_size22 = 0;\n    long paren_levels_copy_size23\
    \ = 0;\n    long paren_levels_copy_size24 = 0;\n    long paren_levels_copy_size25\
    \ = 0;\n    long paren_levels_copy_size26 = 0;\n    long paren_levels_copy_size27\
    \ = 0;\n    long paren_levels_copy_size28 = 0;\n    long paren_levels_copy_size29\
    \ = 0;\n    long paren_levels_copy_size30 = 0;\n    long paren_levels_copy_size31\
    \ = 0;\n    long paren_levels_copy_size32 = 0;\n    long paren_levels_copy_size33\
    \ = 0;\n    long paren_levels_copy_size34 = 0;\n    long paren_levels_copy_size35\
    \ = 0;\n    long paren_levels_copy_size36 = 0;\n    long paren_levels_copy_size37\
    \ = 0;\n    long paren_levels_copy_size38 = 0;\n    long paren_levels_copy_size39\
    \ = 0;\n    long paren_levels_copy_size40 = 0;\n    long paren_levels_copy_size41\
    \ = 0;\n    long paren_level", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n   \
    \ paren_levels_temp.reserve(paren_levels.size());\n    for (auto &level : paren_levels)\
    \ {\n        long paren_level = 0;\n        bool is_open = false;\n        for\
    \ (auto &char : level) {\n            if (char == '(') {\n                is_open\
    \ = true;\n                paren_level++;\n            } else if (char == ')')\
    \ {\n                is_open = false;\n                paren_level--;\n      \
    \      }\n            if (is_open) {\n                paren_levels_temp.push_back(paren_level);\n\
    \            }\n        }\n    }\n    std::vector<long> paren_levels_temp2;\n\
    \    paren_levels_temp2.reserve(paren_levels_temp.size());\n    for (auto &level\
    \ : paren_levels_temp) {\n        if (level > 0) {\n            paren_levels_temp2.push_back(level);\n\
    \        }\n    }\n    return paren_levels_temp2;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long current_level = 0;\n\
    \    for (auto &c : paren_string) {\n        if (c != '(' && c != ')') {\n   \
    \         paren_levels.push_back(current_level);\n        }\n        if (c ==\
    \ '(') {\n            current_level++;\n        }\n        if (c == ')') {\n \
    \           current_level--;\n        }\n    }\n    paren_levels.push_back(current_level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket_or_paren = false;\n    bool is_closing_curly_bracket_or_paren\
    \ = false;\n    bool is_opening_square_bracket_or_paren = false;\n    bool is_closing_square_bracket_or_paren\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren_or_space = false;\n    bool is_closing_paren_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket_or_paren = false;\n    bool is_closing_curly_bracket_or_paren\
    \ = false;\n    bool is_opening_square_bracket_or_paren = false;\n    bool is_closing_square_bracket_or_paren\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket_or_paren = false;\n    bool is_closing_curly_bracket_or_paren\
    \ = false;\n    bool is_opening_square_bracket_or_paren = false;\n    bool is_closing_square_bracket_or_paren\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_",
  "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.size() == paren_string.size());\n\
    \  return paren_levels;", "    std::vector<long> paren_levels;\n    std::string\
    \ paren_level;\n    long paren_level_count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n            paren_level\
    \ = paren_level_count;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level = paren_level_count;\n        } else {\n            paren_level_count\
    \ = 0;\n        }\n        paren_levels.push_back(paren_level);\n    }\n    return\
    \ paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \    paren_levels.push_back(paren_level);\n  }\n  return paren_levels;"]
stop_tokens:
- "\n}"
