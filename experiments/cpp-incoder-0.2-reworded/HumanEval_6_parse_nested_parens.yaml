name: HumanEval_6_parse_nested_parens
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string represented multiple groups for nested parentheses separated by spaces.\n\
  // For each of the group, output the deepest level of nesting of parentheses.\n\
  // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
  \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
  \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
  \ paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
  \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
  \ (std::vector<long>({(long)4})));\n}\n"
completions: ["    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    long paren_level_count = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            is_open = true;\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            is_closed = true;\n            paren_level_count--;\n\
    \        } else if (is_open && is_closed) {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level = 0;\n            is_open = false;\n            is_closed\
    \ = false;\n        } else if (is_open) {\n            paren_level++;\n      \
    \  } else if (is_closed) {\n            paren_level--;\n        }\n    }\n   \
    \ paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long paren_level\
    \ = 0;\n    bool is_open = false;\n    bool is_closed = false;\n    long paren_level_count\
    \ = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n        char c\
    \ = paren_string[i];\n        if (c == '(') {\n            is_open = true;\n \
    \           paren_level_count++;\n        } else if (c == ')') {\n           \
    \ is_closed = true;\n            paren_level_count--;\n        } else if (c ==\
    \ ' ') {\n            if (is_open && is_closed) {\n                paren_levels.push_back(paren_level);\n\
    \                paren_level = 0;\n                is_open = false;\n        \
    \        is_closed = false;\n            }\n        } else {\n            is_open\
    \ = false;\n            is_closed = false;\n        }\n        paren_level++;\n\
    \    }\n    if (is_open && is_closed) {\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string curr_paren_string = paren_string;\n    long curr_level = 0;\n\
    \    while (curr_paren_string.size() > 0) {\n        auto next_paren_string =\
    \ curr_paren_string.substr(0, curr_paren_string.size() - 1);\n        auto next_level\
    \ = curr_level + 1;\n        auto next_paren_level = paren_levels.size();\n  \
    \      paren_levels.emplace_back(next_paren_level);\n        curr_paren_string\
    \ = next_paren_string;\n        curr_level = next_level;\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    std::string paren_level;\n    long paren_level_count\
    \ = 0;\n    long paren_level_max_count = 0;\n    for (auto &c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n            paren_level\
    \ = std::to_string(paren_level_count);\n            paren_level_count = 0;\n \
    \       } else if (c == ')') {\n            paren_level_count--;\n           \
    \ paren_level = std::to_string(paren_level_count);\n            paren_level_count\
    \ = 0;\n            if (paren_level_count == 0) {\n                paren_level_count\
    \ = paren_level_max_count;\n                paren_level_max_count = 0;\n     \
    \       }\n            paren_level_count++;\n        }\n        paren_level +=\
    \ c;\n    }\n    paren_level_count = paren_level_max_count;\n    paren_level_max_count\
    \ = 0;\n    for (auto &c : paren_level) {\n        if (c == '(') {\n         \
    \   paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n        } else if (c == ')') {\n        \
    \    paren_level_count--;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n            if (paren_level_count == 0) {\n\
    \                paren_level_count = paren_level_max_count;\n                paren_level_max_count\
    \ = 0;\n            }\n            paren_level_count++;\n        }\n        paren_level\
    \ += c;\n    }\n    paren_level_count = paren_level_max_count;\n    paren_level_max_count\
    \ = 0;\n    for (auto &c : paren_level) {\n        if (c == '(') {\n         \
    \   paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n        } else if (c == ')') {\n        \
    \    paren_level_count--;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n            if (paren_level_count == 0) {\n\
    \                paren_level_count = paren_level_max_count;\n                paren_level_max_count\
    \ = 0;\n            }\n            paren_level_count++;\n        }\n        paren_level\
    \ += c;\n    }\n    paren_level_count = paren_level_max_count;\n    paren_level_max_count\
    \ = 0;\n    for (auto &c : paren_level) {\n        if (c == '(') {\n         \
    \   paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \            paren_level_count = 0;\n        } else if (c == ')') {\n        \
    \    paren_level_count--;\n            paren_level = std::to_", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    size_t paren_level\
    \ = 0;\n    size_t paren_level_count = 0;\n    size_t paren_level_start = 0;\n\
    \    for (size_t i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            paren_level_count++;\n            paren_levels[paren_level]\
    \ = paren_level_count;\n            paren_level_start = i;\n        } else if\
    \ (paren_string[i] == ')') {\n            paren_level_count--;\n            paren_levels[paren_level]\
    \ = paren_level_count;\n            paren_level = paren_level_start;\n       \
    \ }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    std::string paren_level_string;\n    long paren_level = 0;\n    bool is_open\
    \ = false;\n    bool is_closed = false;\n    for (auto c : paren_string) {\n \
    \       if (c == '(') {\n            is_open = true;\n            paren_level_string\
    \ = paren_level_string.empty() ? \"\" : paren_level_string;\n            paren_level_string\
    \ = paren_level_string + c;\n        } else if (c == ')') {\n            is_closed\
    \ = true;\n            paren_level_string = paren_level_string + c;\n        \
    \    paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string;\n            paren_level_string =\
    \ paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + paren_level_string;\n            paren_level_string = paren_level_string +\
    \ \")\";\n            paren_level_string = paren_level_string + paren_level_string;\n\
    \            paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + paren_level_string", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long level = 0;\n    bool\
    \ is_open = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n\
    \            is_open = true;\n        } else if (c == ')') {\n            is_open\
    \ = false;\n        } else if (is_open) {\n            paren_levels.push_back(level);\n\
    \            level++;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_levels.push_back(level);\n            level++;\n\
    \        } else if (c == ')') {\n            is_closed = true;\n            level--;\n\
    \        } else if (c == ' ') {\n            if (is_open && !is_closed) {\n  \
    \              level++;\n            } else if (is_closed && !is_open) {\n   \
    \             level--;\n            }\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> result;\n    long level = 0;\n\
    \    std::string current_paren_string = paren_string;\n    std::string current_paren_level\
    \ = \"\";\n    for (size_t i = 0; i < paren_string.size(); ++i) {\n        if\
    \ (paren_string[i] == '(') {\n            current_paren_level += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            current_paren_level\
    \ += paren_string[i];\n            if (current_paren_level == current_paren_string)\
    \ {\n                result.push_back(level);\n                level = 0;\n  \
    \              current_paren_string = \"\";\n            } else {\n          \
    \      level += 1;\n            }\n        } else {\n            current_paren_string\
    \ += paren_string[i];\n        }\n    }\n    if (current_paren_level != current_paren_string)\
    \ {\n        result.push_back(level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels = paren_string.substr(0, paren_string.find('\
    \ ')).split(' ');\n    long max_level = 0;\n    for (auto level : paren_levels)\
    \ {\n        if (level > max_level) {\n            max_level = level;\n      \
    \  }\n    }\n    std::vector<long> paren_levels_out;\n    paren_levels_out.reserve(max_level\
    \ + 1);\n    for (auto level : paren_levels) {\n        paren_levels_out.push_back(level);\n\
    \    }\n    paren_levels_out.push_back(max_level);\n    return paren_levels_out;",
  "    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\" \"\
    );\n    std::vector<long> paren_levels_copy;\n    paren_levels_copy = paren_levels.begin();\n\
    \    long paren_level = 0;\n    long paren_levels_copy_index = 0;\n    long paren_levels_copy_size\
    \ = 0;\n    long paren_levels_copy_size2 = 0;\n    long paren_levels_copy_size3\
    \ = 0;\n    long paren_levels_copy_size4 = 0;\n    long paren_levels_copy_size5\
    \ = 0;\n    long paren_levels_copy_size6 = 0;\n    long paren_levels_copy_size7\
    \ = 0;\n    long paren_levels_copy_size8 = 0;\n    long paren_levels_copy_size9\
    \ = 0;\n    long paren_levels_copy_size10 = 0;\n    long paren_levels_copy_size11\
    \ = 0;\n    long paren_levels_copy_size12 = 0;\n    long paren_levels_copy_size13\
    \ = 0;\n    long paren_levels_copy_size14 = 0;\n    long paren_levels_copy_size15\
    \ = 0;\n    long paren_levels_copy_size16 = 0;\n    long paren_levels_copy_size17\
    \ = 0;\n    long paren_levels_copy_size18 = 0;\n    long paren_levels_copy_size19\
    \ = 0;\n    long paren_levels_copy_size20 = 0;\n    long paren_levels_copy_size21\
    \ = 0;\n    long paren_levels_copy_size22 = 0;\n    long paren_levels_copy_size23\
    \ = 0;\n    long paren_levels_copy_size24 = 0;\n    long paren_levels_copy_size25\
    \ = 0;\n    long paren_levels_copy_size26 = 0;\n    long paren_levels_copy_size27\
    \ = 0;\n    long paren_levels_copy_size28 = 0;\n    long paren_levels_copy_size29\
    \ = 0;\n    long paren_levels_copy_size30 = 0;\n    long paren_levels_copy_size31\
    \ = 0;\n    long paren_levels_copy_size32 = 0;\n    long paren_levels_copy_size33\
    \ = 0;\n    long paren_levels_copy_size34 = 0;\n    long paren_levels_copy_size35\
    \ = 0;\n    long paren_levels_copy_size36 = 0;\n    long paren_levels_copy_size37\
    \ = 0;\n    long paren_levels_copy_size38 = 0;\n    long paren_levels_copy_size39\
    \ = 0;\n    long paren_levels_copy_size40 = 0;\n    long paren_levels_copy_size41\
    \ = 0;\n    long paren_level", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n   \
    \ paren_levels_temp.reserve(paren_levels.size());\n    for (auto &level : paren_levels)\
    \ {\n        long paren_level = 0;\n        bool is_open = false;\n        for\
    \ (auto &char : level) {\n            if (char == '(') {\n                is_open\
    \ = true;\n                paren_level++;\n            } else if (char == ')')\
    \ {\n                is_open = false;\n                paren_level--;\n      \
    \      }\n            if (is_open) {\n                paren_levels_temp.push_back(paren_level);\n\
    \            }\n        }\n    }\n    std::vector<long> paren_levels_temp2;\n\
    \    paren_levels_temp2.reserve(paren_levels_temp.size());\n    for (auto &level\
    \ : paren_levels_temp) {\n        if (level > 0) {\n            paren_levels_temp2.push_back(level);\n\
    \        }\n    }\n    return paren_levels_temp2;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long current_level = 0;\n\
    \    for (auto &c : paren_string) {\n        if (c != '(' && c != ')') {\n   \
    \         paren_levels.push_back(current_level);\n        }\n        if (c ==\
    \ '(') {\n            current_level++;\n        }\n        if (c == ')') {\n \
    \           current_level--;\n        }\n    }\n    paren_levels.push_back(current_level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket_or_paren = false;\n    bool is_closing_curly_bracket_or_paren\
    \ = false;\n    bool is_opening_square_bracket_or_paren = false;\n    bool is_closing_square_bracket_or_paren\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren_or_space = false;\n    bool is_closing_paren_or_space\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket_or_paren = false;\n    bool is_closing_curly_bracket_or_paren\
    \ = false;\n    bool is_opening_square_bracket_or_paren = false;\n    bool is_closing_square_bracket_or_paren\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_or_paren_or_space\
    \ = false;\n    bool is_closing_square_bracket_or_paren_or_space = false;\n  \
    \  bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket_or_paren = false;\n    bool is_closing_curly_bracket_or_paren\
    \ = false;\n    bool is_opening_square_bracket_or_paren = false;\n    bool is_closing_square_bracket_or_paren\
    \ = false;\n    bool is_opening_curly_bracket_or_paren_or_space = false;\n   \
    \ bool is_closing_curly_bracket_or_paren_or_space = false;\n    bool is_opening_square_bracket_",
  "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.size() == paren_string.size());\n\
    \  return paren_levels;", "    std::vector<long> paren_levels;\n    std::string\
    \ paren_level;\n    long paren_level_count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n            paren_level\
    \ = paren_level_count;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level = paren_level_count;\n        } else {\n            paren_level_count\
    \ = 0;\n        }\n        paren_levels.push_back(paren_level);\n    }\n    return\
    \ paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \    paren_levels.push_back(paren_level);\n  }\n  return paren_levels;", "   \
    \ std::vector<long> paren_levels;\n    long level = 0;\n    bool is_open = false;\n\
    \    bool is_closed = false;\n    long opening_paren_level = 0;\n    long closing_paren_level\
    \ = 0;\n    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_count_max\
    \ = 0;\n    long paren_level_count_max_index = 0;\n    long paren_level_count_min\
    \ = 0;\n    long paren_level_count_min_index = 0;\n    long paren_level_count_max_count\
    \ = 0;\n    long paren_level_count_min_count = 0;\n    long paren_level_count_max_count_index\
    \ = 0;\n    long paren_level_count_min_count_index = 0;\n    long paren_level_count_max_count_count\
    \ = 0;\n    long paren_level_count_min_count_count = 0;\n    long paren_level_count_max_count_index_count\
    \ = 0;\n    long paren_level_count_min_count_index_count = 0;\n    long paren_level_count_max_count_index_count_index\
    \ = 0;\n    long paren_level_count_min_count_index_count_index = 0;\n    long\
    \ paren_level_count_max_count_index_count_count_index = 0;\n    long paren_level_count_min_count_index_count_count_index\
    \ = 0;\n    long paren_level_count_max_count_index_count_count_index_count = 0;\n\
    \    long paren_level_count_min_count_index_count_count_count_index = 0;\n   \
    \ long paren_level_count_max_count_index_count_count_count_index_count = 0;\n\
    \    long paren_level_count_min_count_index_count_count_count_index_count = 0;\n\
    \    long paren_level_count_max_count_index_count_count_count_index_count_count\
    \ = 0;\n    long paren_level_count_min_count_index_count_count_count_count_index_count_count\
    \ = 0;\n    long paren_level_count_max_count_index_count_count_count_count_index_count_count_count\
    \ = 0;\n    long paren_level_count_min_count_index_count_count_count_count_count_index_count_count_count_count\
    \ = 0;\n    long paren_level_count_max_count_index_count_count_count_count_count_index_count_count_count_count_count\
    \ = 0;\n    long paren_level_count_min_count_index_count_count_count_count_count_count_index_count_count_count_count_count\
    \ = 0;\n    long paren_level_count_max_count_index_count_count_count_count_count_index_count_count_count_count_count_count\
    \ = 0;\n    long paren_level_count_min_count_index_count_count_count_count_count_count_index_count_count_count_count_count_count\
    \ = 0;\n    long paren_level_count_max_count_index_count_count_count_count_count_count_index_count_count_count_count_count_count_count\
    \ = 0;\n    long paren_level_count_min_count_index_count_count_count_count_count_count_count_index_count_count_count_count_count_count_count\
    \ = 0;\n    long paren_level_count_max_count_index_count_count_count_", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    std::string\
    \ curr_paren_string = paren_string;\n    long curr_paren_level = 0;\n    bool\
    \ is_open = false;\n    for (size_t i = 0; i < curr_paren_string.size(); i++)\
    \ {\n        if (curr_paren_string[i] == '(') {\n            is_open = true;\n\
    \            curr_paren_level++;\n        } else if (curr_paren_string[i] == ')')\
    \ {\n            is_open = false;\n            curr_paren_level--;\n        }\
    \ else if (curr_paren_string[i] == ' ' && is_open) {\n            paren_levels.push_back(curr_paren_level);\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> levels;\n\
    \    std::string current_level;\n    long current_level_size = 1;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            current_level.push_back('(');\n            current_level_size++;\n\
    \        } else if (paren_string[i] == ')') {\n            current_level.push_back(')');\n\
    \            current_level_size--;\n        } else if (paren_string[i] == ' ')\
    \ {\n            if (current_level_size == 0) {\n                levels.push_back(current_level.size());\n\
    \                current_level.clear();\n                current_level_size =\
    \ 1;\n            } else {\n                current_level.push_back(' ');\n  \
    \              current_level_size++;\n            }\n        } else {\n      \
    \      current_level.push_back(paren_string[i]);\n            current_level_size++;\n\
    \        }\n    }\n    if (current_level_size) {\n        levels.push_back(current_level.size());\n\
    \    }\n    return levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (char c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n        } else if (c == ')') {\n            is_closed = true;\n   \
    \     } else if (is_open && is_closed) {\n            paren_levels.push_back(level);\n\
    \            level = 0;\n            is_open = false;\n            is_closed =\
    \ false;\n        } else if (is_open) {\n            level++;\n        } else\
    \ if (is_closed) {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = {0};\n    std::string paren_level_string;\n    std::string paren_level_char;\n\
    \    long paren_level = 0;\n    long paren_level_counter = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        paren_level_counter = 0;\n \
    \       paren_level_char = \"\";\n        paren_level_string = \"\";\n       \
    \ while (i < paren_string.size() && paren_string[i] != ' ') {\n            paren_level_counter++;\n\
    \            paren_level_char += paren_string[i];\n            i++;\n        }\n\
    \        paren_level_string = paren_level_char;\n        paren_level_string =\
    \ paren_level_string.substr(0, paren_level_counter);\n        paren_level_string\
    \ = paren_level_string.substr(0, paren_level_string.size() - 1);\n        paren_level_string\
    \ = paren_level_string.substr(0, paren_level_string.find_first_of(\")\"));\n \
    \       paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    (\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    (\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"\
    )\"));\n        paren_level_string = paren_level_string.substr(0, paren_level_string.find_last_of(\"",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n        } else if (c\
    \ == ')') {\n            is_open = false;\n        } else if (is_open) {\n   \
    \         paren_levels.push_back(paren_level);\n            paren_level++;\n \
    \       }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   bool is_open = false;\n    for (size_t i = 0; i < paren_string.size(); i++)\
    \ {\n        if (paren_string[i] == '(') {\n            is_open = true;\n    \
    \    } else if (paren_string[i] == ')') {\n            is_open = false;\n    \
    \    } else if (is_open) {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        }\n    }\n    return paren_levels;", "  \
    \  std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> result;\n    std::string\
    \ curr_paren_string = paren_string;\n    long curr_depth = 0;\n    long max_depth\
    \ = 0;\n    while (curr_paren_string.size() > 0) {\n        long curr_depth_temp\
    \ = curr_depth;\n        std::string curr_paren_string_temp;\n        for (size_t\
    \ i = 0; i < curr_paren_string.size(); i++) {\n            if (curr_paren_string[i]\
    \ == '(') {\n                curr_paren_string_temp += curr_paren_string[i];\n\
    \                curr_depth_temp++;\n            } else if (curr_paren_string[i]\
    \ == ')') {\n                curr_paren_string_temp += curr_paren_string[i];\n\
    \                curr_depth_temp--;\n            } else {\n                curr_paren_string_temp\
    \ += curr_paren_string[i];\n            }\n        }\n        if (curr_depth_temp\
    \ > max_depth) {\n            max_depth = curr_depth_temp;\n        }\n      \
    \  result.push_back(max_depth);\n        curr_paren_string = curr_paren_string_temp;\n\
    \    }\n    return result;", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n   \
    \ paren_levels_temp.reserve(paren_levels.size());\n    for (long i = 0; i < paren_levels.size();\
    \ i++) {\n        if (paren_levels[i] == \"(\") {\n            paren_levels_temp.push_back(paren_levels.size());\n\
    \        }\n        if (paren_levels[i] == \")\") {\n            paren_levels_temp.push_back(paren_levels_temp.back());\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp_reverse;\n    paren_levels_temp_reverse.reserve(paren_levels_temp.size());\n\
    \    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        paren_levels_temp_reverse.push_back(paren_levels_temp.at(i));\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp;\n    paren_levels_temp_reverse_temp.reserve(paren_levels_temp_reverse.size());\n\
    \    for (long i = 0; i < paren_levels_temp_reverse.size(); i++) {\n        paren_levels_temp_reverse_temp.push_back(paren_levels_temp_reverse.at(i));\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp_reverse;\n    paren_levels_temp_reverse_temp_reverse.reserve(paren_levels_temp_reverse_temp.size());\n\
    \    for (long i = 0; i < paren_levels_temp_reverse_temp.size(); i++) {\n    \
    \    paren_levels_temp_reverse_temp_reverse.push_back(paren_levels_temp_reverse_temp.at(i));\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp_reverse_temp;\n \
    \   paren_levels_temp_reverse_temp_reverse_temp.reserve(paren_levels_temp_reverse_temp_reverse.size());\n\
    \    for (long i = 0; i < paren_levels_temp_reverse_temp_reverse.size(); i++)\
    \ {\n        paren_levels_temp_reverse_temp_reverse_temp.push_back(paren_levels_temp_reverse_temp_reverse.at(i));\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_temp_reverse_temp_reverse;\n\
    \    paren_levels_temp_reverse_temp_reverse_temp_reverse.reserve(paren_levels_temp_reverse_temp_reverse_temp.size());\n\
    \    for (long i = 0; i < paren_levels_temp_reverse_temp_reverse_temp.size();\
    \ i++) {\n        paren_levels_temp_reverse_temp_reverse_temp_reverse.push_back(paren_levels_temp_reverse_temp_re",
  "  std::vector<long> paren_levels;\n  paren_levels.push_back(0);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n", "    std::vector<long> levels;\n    std::string\
    \ curr_level;\n    for (auto &c : paren_string) {\n        if (c == '(') {\n \
    \           curr_level = curr_level + \"(\";\n        } else if (c == ')') {\n\
    \            curr_level = curr_level.substr(0, curr_level.size() - 1) + \")\"\
    ;\n        } else if (c == ' ') {\n            if (curr_level.empty()) {\n   \
    \             levels.push_back(1);\n            } else {\n                levels.push_back(std::stoi(curr_level));\n\
    \            }\n            curr_level.clear();\n        } else {\n          \
    \  curr_level = curr_level + c;\n        }\n    }\n    if (curr_level.empty())\
    \ {\n        levels.push_back(1);\n    } else {\n        levels.push_back(std::stoi(curr_level));\n\
    \    }\n    return levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto it = paren_string.begin(); it != paren_string.end();\
    \ ++it) {\n        if (*it == '(') {\n            ++level;\n        } else if\
    \ (*it == ')') {\n            --level;\n        }\n        paren_levels.push_back(level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    std::string\
    \ current_paren_string = \"\";\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            current_paren_string = current_paren_string + c;\n\
    \        } else if (c == ')') {\n            paren_levels.push_back(std::stoi(current_paren_string));\n\
    \            current_paren_string = \"\";\n        } else {\n            current_paren_string\
    \ = current_paren_string + c;\n        }\n    }\n    return paren_levels;", " \
    \   std::vector<long> paren_levels;\n    std::vector<long> paren_levels_temp;\n\
    \    long paren_level = 0;\n    long paren_levels_temp_index = 0;\n    long paren_levels_temp_size\
    \ = 0;\n    long paren_levels_temp_index2 = 0;\n    long paren_levels_temp_size2\
    \ = 0;\n    long paren_levels_temp_index3 = 0;\n    long paren_levels_temp_size3\
    \ = 0;\n    long paren_levels_temp_index4 = 0;\n    long paren_levels_temp_size4\
    \ = 0;\n    long paren_levels_temp_index5 = 0;\n    long paren_levels_temp_size5\
    \ = 0;\n    long paren_levels_temp_index6 = 0;\n    long paren_levels_temp_size6\
    \ = 0;\n    long paren_levels_temp_index7 = 0;\n    long paren_levels_temp_size7\
    \ = 0;\n    long paren_levels_temp_index8 = 0;\n    long paren_levels_temp_size8\
    \ = 0;\n    long paren_levels_temp_index9 = 0;\n    long paren_levels_temp_size9\
    \ = 0;\n    long paren_levels_temp_index10 = 0;\n    long paren_levels_temp_size10\
    \ = 0;\n    long paren_levels_temp_index11 = 0;\n    long paren_levels_temp_size11\
    \ = 0;\n    long paren_levels_temp_index12 = 0;\n    long paren_levels_temp_size12\
    \ = 0;\n    long paren_levels_temp_index13 = 0;\n    long paren_levels_temp_size13\
    \ = 0;\n    long paren_levels_temp_index14 = 0;\n    long paren_levels_temp_size14\
    \ = 0;\n    long paren_levels_temp_index15 = 0;\n    long paren_levels_temp_size15\
    \ = 0;\n    long paren_levels_temp_index16 = 0;\n    long paren_levels_temp_size16\
    \ = 0;\n    long paren_levels_temp_index17 = 0;\n    long paren_levels_temp_size17\
    \ = 0;\n    long paren_levels_temp_index18 = 0;\n    long paren_levels_temp_size18\
    \ = 0;\n    long paren_levels_temp_index19 = 0;\n    long paren_levels_temp_size19\
    \ = 0;\n    long paren_levels_temp_index20 = 0;\n    long paren_levels_temp_size20\
    \ = 0;\n    long paren_levels_temp_index21 = 0;\n    long paren_levels_temp_size21\
    \ = 0;\n    long paren_levels_temp_index22 = 0;\n    long paren_levels_temp_size22\
    \ = 0;\n    long paren_levels_temp_index23 = 0;\n", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    for (auto &level :\
    \ paren_levels) {\n        paren_levels_temp.push_back(level.size());\n    }\n\
    \    std::vector<long> paren_levels_temp2 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp3 = paren_levels_temp;\n    std::vector<long> paren_levels_temp4\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp5 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp6 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp7 = paren_levels_temp;\n    std::vector<long> paren_levels_temp8\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp9 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp10 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp11 = paren_levels_temp;\n    std::vector<long> paren_levels_temp12\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp13 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp14 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp15 = paren_levels_temp;\n    std::vector<long> paren_levels_temp16\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp17 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp18 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp19 = paren_levels_temp;\n    std::vector<long> paren_levels_temp20\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp21 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp22 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp23 = paren_levels_temp;\n    std::vector<long> paren_levels_temp24\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp25 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp26 = paren_levels_temp;\n    std::vector<long>\
    \ paren", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level--;\n\
    \        } else if (is_open) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    std::string curr_paren_level\
    \ = \"\";\n    for (auto c : paren_string) {\n        if (c == '(') {\n      \
    \      curr_paren_level += c;\n        } else if (c == ')') {\n            curr_paren_level\
    \ += c;\n            paren_levels.push_back(std::stoi(curr_paren_level));\n  \
    \          curr_paren_level = \"\";\n        } else {\n            curr_paren_level\
    \ += c;\n        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n    }\n    paren_levels.push_back(paren_level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ ++i) {\n        if (paren_string[i] == '(') {\n            current_level++;\n\
    \        } else if (paren_string[i] == ')') {\n            current_level--;\n\
    \        }\n        paren_levels.push_back(current_level);\n    }\n    return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\"()\");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels.size());\n    for (long i = 0; i <\
    \ paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    long max_level = 0;\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        if (paren_levels_temp[i] > max_level) {\n            max_level\
    \ = paren_levels_temp[i];\n        }\n    }\n    std::vector<long> paren_levels_temp2;\n\
    \    paren_levels_temp2.reserve(paren_levels_temp.size());\n    for (long i =\
    \ 0; i < paren_levels_temp.size(); i++) {\n        if (paren_levels_temp[i] ==\
    \ max_level) {\n            paren_levels_temp2.push_back(i);\n        }\n    }\n\
    \    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.reserve(paren_levels_temp2.size());\n\
    \    for (long i = 0; i < paren_levels_temp2.size(); i++) {\n        paren_levels_temp3.push_back(paren_levels_temp2[i]);\n\
    \    }\n    return paren_levels_temp3;", "    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    std::string curr_level;\n    std::string curr_paren;\n\
    \    for (size_t i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            curr_level = paren_string.substr(0, i);\n           \
    \ curr_paren = paren_string.substr(i, 1);\n            paren_levels.push_back(curr_level.size());\n\
    \            if (curr_level.size() > max_level) {\n                max_level =\
    \ curr_level.size();\n            }\n        } else if (paren_string[i] == ')')\
    \ {\n            curr_level = paren_string.substr(0, i);\n            curr_paren\
    \ = paren_string.substr(i, 1);\n            paren_levels.push_back(curr_level.size());\n\
    \            if (curr_level.size() > max_level) {\n                max_level =\
    \ curr_level.size();\n            }\n        }\n    }\n    std::vector<long> result;\n\
    \    for (size_t i = 0; i < paren_levels.size(); i++) {\n        result.push_back(max_level);\n\
    \    }\n    return result;", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n   \
    \ paren_levels_temp.reserve(paren_levels.size());\n    for (long i = 0; i < paren_levels.size();\
    \ i++) {\n        long paren_level = paren_levels[i];\n        if (paren_level\
    \ > 0) {\n            paren_levels_temp.push_back(paren_level);\n        }\n \
    \   }\n    long max_level = 0;\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        if (paren_levels_temp[i] > max_level) {\n            max_level\
    \ = paren_levels_temp[i];\n        }\n    }\n    std::vector<long> paren_levels_temp2;\n\
    \    paren_levels_temp2.reserve(max_level + 1);\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        if (paren_levels_temp[i] > max_level) {\n            paren_levels_temp2.push_back(paren_levels_temp[i]);\n\
    \        }\n    }\n    paren_levels_temp2.push_back(max_level);\n    return paren_levels_temp2;",
  "    std::vector<long> paren_levels;\n    std::string paren_level;\n    long paren_level_count\
    \ = 0;\n    for (auto &c : paren_string) {\n        if (c == '(') {\n        \
    \    paren_level_count++;\n            paren_level = std::to_string(paren_level_count);\n\
    \        } else if (c == ')') {\n            paren_level_count--;\n          \
    \  paren_level = std::to_string(paren_level_count);\n        } else {\n      \
    \      paren_level += c;\n        }\n    }\n    paren_level_count = 0;\n    for\
    \ (auto &c : paren_level) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \        } else if (c == ')') {\n            paren_level_count--;\n        }\n\
    \    }\n    paren_levels.push_back(paren_level_count);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    long paren_level = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n        } else if (c\
    \ == ')') {\n            paren_level--;\n        }\n        if (paren_level ==\
    \ current_level) {\n            paren_levels.push_back(paren_level);\n       \
    \ }\n        current_level = paren_level;\n    }\n    return paren_levels;", " \
    \   std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(1);\n\
    \    long max_level = 1;\n    for (long i = 0; i < paren_levels.size(); i++) {\n\
    \        if (paren_levels[i] == \"(\") {\n            paren_levels_temp.push_back(1);\n\
    \        } else if (paren_levels[i] == \")\") {\n            long current_level\
    \ = paren_levels_temp.back();\n            paren_levels_temp.pop_back();\n   \
    \         if (current_level > max_level) {\n                max_level = current_level;\n\
    \            }\n        } else {\n            long current_level = paren_levels_temp.back();\n\
    \            paren_levels_temp.pop_back();\n            long new_level = current_level\
    \ + 1;\n            if (new_level > max_level) {\n                max_level =\
    \ new_level;\n            }\n            paren_levels_temp.push_back(new_level);\n\
    \        }\n    }\n    return paren_levels_temp;", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.substr(0, paren_string.find_first_of(\"()\")).split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp2.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp3.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp4.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp5.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp6;\n    paren_levels_temp6.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp6.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp7;\n    paren_levels_temp7.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp7.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp8;\n    paren_levels_temp8.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp8.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp9;\n    paren_levels_temp9.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp9.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp10;\n    paren_levels_temp10.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp",
  "    std::vector<long> levels;\n    std::string current_level;\n    long current_level_size\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level += c;\n            current_level_size += 1;\n        } else\
    \ if (c == ')') {\n            current_level_size = std::min(current_level_size,\
    \ levels.size());\n            levels.push_back(current_level_size);\n       \
    \     current_level.clear();\n        } else {\n            current_level += c;\n\
    \        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long level = 0;\n    long\
    \ paren_level = 0;\n    long paren_level_counter = 0;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_levels.push_back(level);\n   \
    \         level++;\n            paren_level++;\n            paren_level_counter++;\n\
    \        } else if (c == ')') {\n            level--;\n            paren_levels.push_back(level);\n\
    \            paren_level--;\n            paren_level_counter--;\n        } else\
    \ if (c == ' ') {\n            level--;\n            paren_levels.push_back(level);\n\
    \            paren_level--;\n            paren_level_counter--;\n        } else\
    \ if (c == '(' || c == ')' || c == ' ') {\n            level--;\n            paren_levels.push_back(level);\n\
    \            paren_level--;\n            paren_level_counter--;\n        } else\
    \ {\n            assert(false);\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    paren_levels.push_back(level);\n    paren_levels.push_back(level);\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool paren_found = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_found = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_found = false;\n          \
    \  paren_level--;\n        }\n        if (paren_found) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels.size());\n    for (auto &level : paren_levels)\
    \ {\n        long paren_level = 0;\n        for (auto &char : level) {\n     \
    \       if (char == '(') {\n                paren_level++;\n            } else\
    \ if (char == ')') {\n                paren_level--;\n            }\n        }\n\
    \        paren_levels_temp.push_back(paren_level);\n    }\n    std::vector<long>\
    \ paren_levels_temp2 = paren_levels_temp;\n    std::sort(paren_levels_temp2.begin(),\
    \ paren_levels_temp2.end());\n    std::vector<long> paren_levels_temp3 = paren_levels_temp2;\n\
    \    std::vector<long> paren_levels_temp4 = paren_levels_temp3;\n    std::vector<long>\
    \ paren_levels_temp5 = paren_levels_temp4;\n    std::vector<long> paren_levels_temp6\
    \ = paren_levels_temp5;\n    std::vector<long> paren_levels_temp7 = paren_levels_temp6;\n\
    \    std::vector<long> paren_levels_temp8 = paren_levels_temp7;\n    std::vector<long>\
    \ paren_levels_temp9 = paren_levels_temp8;\n    std::vector<long> paren_levels_temp10\
    \ = paren_levels_temp9;\n    std::vector<long> paren_levels_temp11 = paren_levels_temp10;\n\
    \    std::vector<long> paren_levels_temp12 = paren_levels_temp11;\n    std::vector<long>\
    \ paren_levels_temp13 = paren_levels_temp12;\n    std::vector<long> paren_levels_temp14\
    \ = paren_levels_temp13;\n    std::vector<long> paren_levels_temp15 = paren_levels_temp14;\n\
    \    std::vector<long> paren_levels_temp16 = paren_levels_temp15;\n    std::vector<long>\
    \ paren_levels_temp17 = paren_levels_temp16;\n    std::vector<long> paren_levels_temp18\
    \ = paren_levels_temp17;\n    std::vector<long> paren_levels_temp19 = paren_levels_temp18;\n\
    \    std::vector<long> paren_levels_temp20 = paren_levels_temp19;\n    std::vector<long>\
    \ paren_levels_temp21 = paren_levels_temp20;\n    std::vector<long> paren_levels_temp22\
    \ = paren_levels_temp21;\n    std::vector<long> paren_levels_", "  std::vector<long>\
    \ paren_levels;\n  paren_levels.reserve(paren_string.size());\n  long current_level\
    \ = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n      current_level++;\n\
    \    } else if (c == ')') {\n      current_level--;\n    }\n    paren_levels.push_back(current_level);\n\
    \  }\n  return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (char c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n        } else if (c\
    \ == ')') {\n            is_open = false;\n        } else if (is_open) {\n   \
    \         paren_levels.push_back(level);\n            level++;\n        }\n  \
    \  }\n    paren_levels.push_back(level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long paren_level = 0;\n    long paren_level_counter = 0;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            paren_level_counter++;\n        } else if (c == ')') {\n        \
    \    paren_level--;\n            paren_level_counter--;\n        }\n        if\
    \ (paren_level == 0 && paren_level_counter == 0) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> levels;\n\
    \    std::string paren_level;\n    long level = 0;\n    for (size_t i = 0; i <\
    \ paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n       \
    \     paren_level = paren_string.substr(0, i);\n            level++;\n       \
    \ } else if (paren_string[i] == ')') {\n            level--;\n            if (level\
    \ == 0) {\n                levels.push_back(level);\n            }\n        }\n\
    \    }\n    return levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.split(\" \");\n    std::vector<long> paren_levels_copy;\n   \
    \ paren_levels_copy = paren_levels.begin();\n    long paren_level = 0;\n    long\
    \ paren_levels_copy_index = 0;\n    long paren_levels_copy_size = 0;\n    long\
    \ paren_levels_copy_size2 = 0;\n    long paren_levels_copy_size3 = 0;\n    long\
    \ paren_levels_copy_size4 = 0;\n    long paren_levels_copy_size5 = 0;\n    long\
    \ paren_levels_copy_size6 = 0;\n    long paren_levels_copy_size7 = 0;\n    long\
    \ paren_levels_copy_size8 = 0;\n    long paren_levels_copy_size9 = 0;\n    long\
    \ paren_levels_copy_size10 = 0;\n    long paren_levels_copy_size11 = 0;\n    long\
    \ paren_levels_copy_size12 = 0;\n    long paren_levels_copy_size13 = 0;\n    long\
    \ paren_levels_copy_size14 = 0;\n    long paren_levels_copy_size15 = 0;\n    long\
    \ paren_levels_copy_size16 = 0;\n    long paren_levels_copy_size17 = 0;\n    long\
    \ paren_levels_copy_size18 = 0;\n    long paren_levels_copy_size19 = 0;\n    long\
    \ paren_levels_copy_size20 = 0;\n    long paren_levels_copy_size21 = 0;\n    long\
    \ paren_levels_copy_size22 = 0;\n    long paren_levels_copy_size23 = 0;\n    long\
    \ paren_levels_copy_size24 = 0;\n    long paren_levels_copy_size25 = 0;\n    long\
    \ paren_levels_copy_size26 = 0;\n    long paren_levels_copy_size27 = 0;\n    long\
    \ paren_levels_copy_size28 = 0;\n    long paren_levels_copy_size29 = 0;\n    long\
    \ paren_levels_copy_size30 = 0;\n    long paren_levels_copy_size31 = 0;\n    long\
    \ paren_levels_copy_size32 = 0;\n    long paren_levels_copy_size33 = 0;\n    long\
    \ paren_levels_copy_size34 = 0;\n    long paren_levels_copy_size35 = 0;\n    long\
    \ paren_levels_copy_size36 = 0;\n    long paren_levels_copy_size37 = 0;\n    long\
    \ paren_levels_copy_size38 = 0;\n    long paren_levels_copy_size39 = 0;\n    long\
    \ paren_levels_copy_size40 = 0;\n    long paren_levels_copy_size41 = 0;\n    long\
    \ paren_level", "    std::vector<long> paren_levels;\n    std::string paren_level_string;\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level_string\
    \ = paren_level_string.empty() ? \"(\" : paren_level_string;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level_string\
    \ = paren_level_string.empty() ? \")\" : paren_level_string;\n            paren_level_string\
    \ = paren_level_string.substr(0, paren_level_string.size() - 1);\n           \
    \ paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string.substr(0, paren_level_string.size() - 1);\n           \
    \ paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string.substr(0, paren_level_string.size() - 1);\n           \
    \ paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + \")\";\n            paren_level_string = paren_level_string + \")\";\n   \
    \         paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + \")\";\n            paren_level_string = paren_level_string + \")\";\n   \
    \         paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + \")\";\n            paren_level_string = paren_level_string + \")\";\n   \
    \         paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + \")\";\n            paren_level_string = paren_level_string + \")\";\n   \
    \         paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + \")\";\n            paren_level_string = paren_level_string\
    \ + \")\";\n            paren_level_string = paren_level_string + \")\";\n   \
    \         paren_level_string = paren_level_string + \")\";\n            paren_level_string\
    \ = paren_level_string + \")\";\n            paren_level_string = ", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long paren_level\
    \ = 0;\n    bool in_paren = false;\n    for (char c : paren_string) {\n      \
    \  if (c == '(') {\n            in_paren = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (c == ')') {\n            in_paren = false;\n            paren_levels.pop_back();\n\
    \        } else if (c == ' ') {\n            if (in_paren) {\n               \
    \ paren_level++;\n            }\n        } else {\n            assert(false);\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    size_t paren_level = 0;\n\
    \    size_t paren_level_count = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            if (paren_level_count == 0) {\n                paren_levels.push_back(paren_level);\n\
    \                paren_level_count = 0;\n            }\n        }\n    }\n   \
    \ return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    long paren_level_max\
    \ = 0;\n    long paren_level_max_count = 0;\n    long paren_level_max_count2 =\
    \ 0;\n    long paren_level_max_count3 = 0;\n    long paren_level_max_count4 =\
    \ 0;\n    long paren_level_max_count5 = 0;\n    long paren_level_max_count6 =\
    \ 0;\n    long paren_level_max_count7 = 0;\n    long paren_level_max_count8 =\
    \ 0;\n    long paren_level_max_count9 = 0;\n    long paren_level_max_count10 =\
    \ 0;\n    long paren_level_max_count11 = 0;\n    long paren_level_max_count12\
    \ = 0;\n    long paren_level_max_count13 = 0;\n    long paren_level_max_count14\
    \ = 0;\n    long paren_level_max_count15 = 0;\n    long paren_level_max_count16\
    \ = 0;\n    long paren_level_max_count17 = 0;\n    long paren_level_max_count18\
    \ = 0;\n    long paren_level_max_count19 = 0;\n    long paren_level_max_count20\
    \ = 0;\n    long paren_level_max_count21 = 0;\n    long paren_level_max_count22\
    \ = 0;\n    long paren_level_max_count23 = 0;\n    long paren_level_max_count24\
    \ = 0;\n    long paren_level_max_count25 = 0;\n    long paren_level_max_count26\
    \ = 0;\n    long paren_level_max_count27 = 0;\n    long paren_level_max_count28\
    \ = 0;\n    long paren_level_max_count29 = 0;\n    long paren_level_max_count30\
    \ = 0;\n    long paren_level_max_count31 = 0;\n    long paren_level_max_count32\
    \ = 0;\n    long paren_level_max_count33 = 0;\n    long paren_level_max_count34\
    \ = 0;\n    long paren_level_max_count35 = 0;\n    long paren_level_max_count36\
    \ = 0;\n    long paren_level_max_count37 = 0;\n    long paren_level_max_count38\
    \ = 0;\n    long paren_level_max_count39 = 0;\n    long paren_level_max_count40\
    \ = 0;\n    long paren_level_max_count41 = 0;\n    long paren_level_max_count42\
    \ = 0;\n    long paren_level_max_count43 = 0;\n    long paren_level_max_count44\
    \ = 0;\n    long paren_level_max_count45 = 0;\n    long paren_level_max_count46\
    \ = 0;\n    long paren_level_max_count47 = 0;\n    long paren_level_max_count48\
    \ = 0;", "  std::vector<long> paren_levels;\n  paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\"()\");\n  long max_level = 0;\n\
    \  for (auto level : paren_levels) {\n    if (level.length() > max_level) {\n\
    \      max_level = level.length();\n    }\n  }\n  std::vector<long> nested_paren_levels;\n\
    \  for (auto level : paren_levels) {\n    if (level.length() == max_level) {\n\
    \      nested_paren_levels.push_back(level.length());\n    } else {\n      nested_paren_levels.push_back(0);\n\
    \    }\n  }\n  return nested_paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels.size());\n    for (long i = 0; i <\
    \ paren_levels.size(); i++) {\n        long paren_level = 0;\n        bool is_open\
    \ = false;\n        for (long j = 0; j < paren_levels[i].length(); j++) {\n  \
    \          if (paren_levels[i].at(j) == '(') {\n                is_open = true;\n\
    \                paren_level++;\n            } else if (paren_levels[i].at(j)\
    \ == ')') {\n                is_open = false;\n                paren_level--;\n\
    \            }\n        }\n        paren_levels_temp.push_back(paren_level);\n\
    \    }\n    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.reserve(paren_levels_temp.size());\n\
    \    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        if (paren_levels_temp[i]\
    \ > paren_levels_temp2[i]) {\n            paren_levels_temp2 = paren_levels_temp;\n\
    \        }\n    }\n    return paren_levels_temp2;", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.reserve(paren_levels.size());\n    for (auto &level : paren_levels)\
    \ {\n        paren_levels_temp.push_back(level);\n    }\n    std::vector<long>\
    \ paren_levels_temp2;\n    paren_levels_temp2.reserve(paren_levels_temp.size());\n\
    \    for (auto &level : paren_levels_temp) {\n        paren_levels_temp2.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.reserve(paren_levels_temp2.size());\n\
    \    for (auto &level : paren_levels_temp2) {\n        paren_levels_temp3.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.reserve(paren_levels_temp3.size());\n\
    \    for (auto &level : paren_levels_temp3) {\n        paren_levels_temp4.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.reserve(paren_levels_temp4.size());\n\
    \    for (auto &level : paren_levels_temp4) {\n        paren_levels_temp5.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp6;\n    paren_levels_temp6.reserve(paren_levels_temp5.size());\n\
    \    for (auto &level : paren_levels_temp5) {\n        paren_levels_temp6.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp7;\n    paren_levels_temp7.reserve(paren_levels_temp6.size());\n\
    \    for (auto &level : paren_levels_temp6) {\n        paren_levels_temp7.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp8;\n    paren_levels_temp8.reserve(paren_levels_temp7.size());\n\
    \    for (auto &level : paren_levels_temp7) {\n        paren_levels_temp8.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp9;\n    paren_levels_temp9.reserve(paren_levels_temp8.size());\n\
    \    for (auto &level : paren_levels_temp8) {\n        paren_levels_temp9.push_back(level);\n\
    \    }\n    ", "    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket = false;\n    bool is_closing_curly_bracket = false;\n\
    \    bool is_opening_square_bracket = false;\n    bool is_closing_square_bracket\
    \ = false;\n    bool is_opening_curly_brace = false;\n    bool is_closing_curly_brace\
    \ = false;\n    bool is_opening_square_brace = false;\n    bool is_closing_square_brace\
    \ = false;\n    bool is_opening_paren_or_curly_bracket = false;\n    bool is_closing_paren_or_curly_bracket\
    \ = false;\n    bool is_opening_paren_or_curly_brace = false;\n    bool is_closing_paren_or_curly_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_bracket = false;\n\
    \    bool is_closing_paren_or_curly_brace_or_square_bracket = false;\n    bool\
    \ is_opening_paren_or_curly_brace_or_square_brace = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_bracket\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_bracket\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_bracket\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_bracket\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_brace\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_brace_or_curly_bracket\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.push_back(0);\n    long paren_level = 0;\n \
    \   bool is_open = false;\n    bool is_closed = false;\n    long paren_level_count\
    \ = 0;\n    long paren_level_count_max = 0;\n    std::string paren_string_reversed;\n\
    \    std::string paren_string_reversed_reversed;\n    std::string paren_string_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed_reversed;\n    std::string\
    \ paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string paren_string_reverse", "    std::vector<long> paren_levels;\n\
    \    long max_level = 0;\n    long level = 0;\n    bool is_open = false;\n   \
    \ bool is_closed = false;\n    bool is_opening_paren = false;\n    bool is_closing_paren\
    \ = false;\n    bool is_opening_paren_or_closed = false;\n    bool is_closing_paren_or_open\
    \ = false;\n    bool is_opening_paren_or_closed_or_open = false;\n    bool is_closing_paren_or_opening_paren\
    \ = false;\n    bool is_closing_paren_or_opening_paren_or_closed = false;\n  \
    \  bool is_opening_paren_or_closed_or_opening_paren = false;\n    bool is_closing_paren_or_opening_paren_or_closed_or_open\
    \ = false;\n    bool is_opening_paren_or_closed_or_opening_paren_or_closed = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.push_back(0);\n    long paren_level = 0;\n \
    \   long paren_level_count = 0;\n    long paren_level_max_count = 1;\n    long\
    \ paren_level_max_count_index = 0;\n    long paren_level_max_count_index2 = 0;\n\
    \    long paren_level_max_count_index3 = 0;\n    long paren_level_max_count_index4\
    \ = 0;\n    long paren_level_max_count_index5 = 0;\n    long paren_level_max_count_index6\
    \ = 0;\n    long paren_level_max_count_index7 = 0;\n    long paren_level_max_count_index8\
    \ = 0;\n    long paren_level_max_count_index9 = 0;\n    long paren_level_max_count_index10\
    \ = 0;\n    long paren_level_max_count_index11 = 0;\n    long paren_level_max_count_index12\
    \ = 0;\n    long paren_level_max_count_index13 = 0;\n    long paren_level_max_count_index14\
    \ = 0;\n    long paren_level_max_count_index15 = 0;\n    long paren_level_max_count_index16\
    \ = 0;\n    long paren_level_max_count_index17 = 0;\n    long paren_level_max_count_index18\
    \ = 0;\n    long paren_level_max_count_index19 = 0;\n    long paren_level_max_count_index20\
    \ = 0;\n    long paren_level_max_count_index21 = 0;\n    long paren_level_max_count_index22\
    \ = 0;\n    long paren_level_max_count_index23 = 0;\n    long paren_level_max_count_index24\
    \ = 0;\n    long paren_level_max_count_index25 = 0;\n    long paren_level_max_count_index26\
    \ = 0;\n    long paren_level_max_count_index27 = 0;\n    long paren_level_max_count_index28\
    \ = 0;\n    long paren_level_max_count_index29 = 0;\n    long paren_level_max_count_index30\
    \ = 0;\n    long paren_level_max_count_index31 = 0;\n    long paren_level_max_count_index32\
    \ = 0;\n    long paren_level_max_count_index33 = 0;\n    long paren_level_max_count_index34\
    \ = 0;\n    long paren_level_max_count_index35 = 0;\n    long paren_level_max_count_index36\
    \ = 0;\n    long paren_level_max_count_index37 = 0;\n    long paren_level_max_count_index38\
    \ = 0;\n    long paren_level_max_count_index39 = 0;\n    long paren_level_max_count_index40\
    \ = 0;\n    long paren_level_max_count_index41 = 0;\n    long paren_level_max_count_index42\
    \ = 0;\n    long paren_level_max_count_index43 = 0;\n    long paren_", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_levels.push_back(level);\n            level++;\n        } else if (c\
    \ == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string current_paren_string = paren_string;\n    long current_paren_level\
    \ = 0;\n    bool is_open = false;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            is_open = true;\n\
    \            current_paren_level++;\n        }\n        else if (paren_string[i]\
    \ == ')') {\n            is_open = false;\n            current_paren_level--;\n\
    \        }\n        else if (is_open) {\n            current_paren_level++;\n\
    \        }\n        else {\n            current_paren_level--;\n        }\n  \
    \      paren_levels.push_back(current_paren_level);\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    std::vector<long> paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp_copy;\n    std::vector<long> paren_levels_temp_copy2;\n\
    \    std::vector<long> paren_levels_temp_copy3;\n    std::vector<long> paren_levels_temp_copy4;\n\
    \    std::vector<long> paren_levels_temp_copy5;\n    std::vector<long> paren_levels_temp_copy6;\n\
    \    std::vector<long> paren_levels_temp_copy7;\n    std::vector<long> paren_levels_temp_copy8;\n\
    \    std::vector<long> paren_levels_temp_copy9;\n    std::vector<long> paren_levels_temp_copy10;\n\
    \    std::vector<long> paren_levels_temp_copy11;\n    std::vector<long> paren_levels_temp_copy12;\n\
    \    std::vector<long> paren_levels_temp_copy13;\n    std::vector<long> paren_levels_temp_copy14;\n\
    \    std::vector<long> paren_levels_temp_copy15;\n    std::vector<long> paren_levels_temp_copy16;\n\
    \    std::vector<long> paren_levels_temp_copy17;\n    std::vector<long> paren_levels_temp_copy18;\n\
    \    std::vector<long> paren_levels_temp_copy19;\n    std::vector<long> paren_levels_temp_copy20;\n\
    \    std::vector<long> paren_levels_temp_copy21;\n    std::vector<long> paren_levels_temp_copy22;\n\
    \    std::vector<long> paren_levels_temp_copy23;\n    std::vector<long> paren_levels_temp_copy24;\n\
    \    std::vector<long> paren_levels_temp_copy25;\n    std::vector<long> paren_levels_temp_copy26;\n\
    \    std::vector<long> paren_levels_temp_copy27;\n    std::vector<long> paren_levels_temp_copy28;\n\
    \    std::vector<long> paren_levels_temp_copy29;\n    std::vector<long> paren_levels_temp_copy30;\n\
    \    std::vector<long> paren_levels_temp_copy31;\n    std::vector<long> paren_levels_temp_copy32;\n\
    \    std::vector<long> paren_levels_temp_copy33;\n    std::vector<long> paren_levels_temp_copy34;\n\
    \    std::vector<long> paren_levels_temp_copy35;\n    std::vector<long> paren_levels_temp_copy36;\n\
    \    std::vector<long> paren_levels_temp_copy37;\n    std::vector<long> paren_levels_temp_copy38;\n\
    \    std::vector<long> paren_levels_temp_copy39;\n    std::vector<long> ", " \
    \ std::vector<long> paren_levels;\n  paren_levels = paren_string.split(\" \");\n\
    \  std::vector<long> paren_levels_temp;\n  paren_levels_temp.reserve(paren_levels.size());\n\
    \  for (int i = 0; i < paren_levels.size(); i++) {\n    long paren_level = paren_levels[i];\n\
    \    long paren_level_count = 1;\n    while (paren_level > 0) {\n      paren_level_count++;\n\
    \      paren_level--;\n    }\n    paren_levels_temp.push_back(paren_level_count);\n\
    \  }\n  std::sort(paren_levels_temp.begin(), paren_levels_temp.end());\n  std::vector<long>\
    \ paren_levels_sorted_temp;\n  paren_levels_sorted_temp.reserve(paren_levels_temp.size());\n\
    \  for (int i = 0; i < paren_levels_temp.size(); i++) {\n    paren_levels_sorted_temp.push_back(paren_levels_temp[i]);\n\
    \  }\n  std::vector<long> paren_levels_sorted_temp_reversed;\n  paren_levels_sorted_temp_reversed.reserve(paren_levels_sorted_temp.size());\n\
    \  for (int i = 0; i < paren_levels_sorted_temp.size() - 1; i++) {\n    paren_levels_sorted_temp_reversed.push_back(paren_levels_sorted_temp[i]);\n\
    \  }\n  std::vector<long> paren_levels_sorted_temp_reversed_temp;\n  paren_levels_sorted_temp_reversed_temp.reserve(paren_levels_sorted_temp_reversed.size());\n\
    \  for (int i = 0; i < paren_levels_sorted_temp_reversed.size(); i++) {\n    paren_levels_sorted_temp_reversed_temp.push_back(paren_levels_sorted_temp_reversed[i]);\n\
    \  }\n  std::vector<long> paren_levels_sorted_temp_reversed_temp_reversed;\n \
    \ paren_levels_sorted_temp_reversed_temp_reversed.reserve(paren_levels_sorted_temp_reversed_temp.size());\n\
    \  for (int i = 0; i < paren_levels_sorted_temp_reversed_temp.size() - 1; i++)\
    \ {\n    paren_levels_sorted_temp_reversed_temp_reversed.push_back(paren_levels_sorted_temp_reversed_temp[i]);\n\
    \  }\n  std::vector<long> paren_levels_sorted_temp_reversed_temp_reversed_temp;\n\
    \  paren_levels_sorted_temp_reversed_temp_reversed_temp.reserve(paren_levels_sorted_temp_reversed_temp_reversed.size());\n\
    \  for (int i = 0; i < paren_levels_sorted_temp_reversed_temp_reversed.size();\
    \ i++) {\n    paren_levels_sorted_temp_reversed_temp_reversed_", "    std::vector<long>\
    \ paren_levels;\n    paren_levels = paren_string.split(\" \");\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n  \
    \  for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    long max_level = 0;\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        if (paren_levels_temp[i] > max_level) {\n            max_level\
    \ = paren_levels_temp[i];\n        }\n    }\n    std::vector<long> paren_levels_temp2;\n\
    \    paren_levels_temp2.reserve(paren_levels_temp.size());\n    for (long i =\
    \ 0; i < paren_levels_temp.size(); i++) {\n        paren_levels_temp2.push_back(paren_levels_temp[i]);\n\
    \    }\n    for (long i = 0; i < paren_levels_temp2.size(); i++) {\n        if\
    \ (paren_levels_temp2[i] > max_level) {\n            paren_levels_temp2.erase(paren_levels_temp2.begin()\
    \ + i);\n        }\n    }\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.reserve(paren_levels_temp2.size());\n\
    \    for (long i = 0; i < paren_levels_temp2.size(); i++) {\n        paren_levels_temp3.push_back(paren_levels_temp2[i]);\n\
    \    }\n    for (long i = 0; i < paren_levels_temp3.size(); i++) {\n        if\
    \ (paren_levels_temp3[i] > max_level) {\n            paren_levels_temp3.erase(paren_levels_temp3.begin()\
    \ + i);\n        }\n    }\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.reserve(paren_levels_temp3.size());\n\
    \    for (long i = 0; i < paren_levels_temp3.size(); i++) {\n        paren_levels_temp4.push_back(paren_levels_temp3[i]);\n\
    \    }\n    for (long i = 0; i < paren_levels_temp4.size(); i++) {\n        if\
    \ (paren_levels_temp4[i] > max_level) {\n            paren_levels_temp4.erase(paren_levels_temp4.begin()\
    \ + i);\n        }\n    }\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.reserve(paren_levels_temp4.size());\n\
    \    for (long i = 0; i < paren_levels_temp4.size(); i++) {\n        paren_levels_temp5.push_back(paren_levels_temp4[i]);\n\
    \    }\n    for (long i = 0; i < paren_levels_temp5.size(); i++) {\n        if\
    \ (paren_levels_temp5[i] > ", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string curr_paren_level = \"\";\n    for (auto c : paren_string) {\n\
    \        if (c == '(') {\n            curr_paren_level += c;\n        } else if\
    \ (c == ')') {\n            paren_levels.push_back(std::stoi(curr_paren_level));\n\
    \            curr_paren_level = \"\";\n        } else {\n            curr_paren_level\
    \ += c;\n        }\n    }\n    if (curr_paren_level != \"\") {\n        paren_levels.push_back(std::stoi(curr_paren_level));\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = {0};\n    std::string paren_string_reversed = paren_string;\n    std::reverse(paren_string_reversed.begin(),\
    \ paren_string_reversed.end());\n    size_t paren_level = 0;\n    size_t paren_level_reversed\
    \ = 0;\n    size_t paren_level_start = 0;\n    size_t paren_level_end = 0;\n \
    \   size_t paren_level_start_reversed = 0;\n    size_t paren_level_end_reversed\
    \ = 0;\n    size_t paren_level_start_reversed_end = 0;\n    size_t paren_level_end_reversed_end\
    \ = 0;\n    size_t paren_level_start_reversed_start_end = 0;\n    size_t paren_level_end_reversed_start_end\
    \ = 0;\n    size_t paren_level_start_reversed_start_end_reversed = 0;\n    size_t\
    \ paren_level_end_reversed_start_end_reversed = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end\
    \ = 0;\n    size_t paren_level_end_reversed_start_end_reversed_end = 0;\n    size_t\
    \ paren_level_start_reversed_start_end_reversed_end_reversed = 0;\n    size_t\
    \ paren_level_end_reversed_start_end_reversed_end_reversed = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_end_reversed_start_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end_reversed_end_reversed\
    \ = 0;\n    size_t paren_level_end_reversed_start_end_reversed_end_reversed_end_reversed\
    \ = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_end_reversed_start_end_reversed_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end_reversed_end_reversed_end_reversed\
    \ = 0;\n    size_t paren_level_end_reversed_start_end_reversed_end_reversed_end_reversed_end_reversed\
    \ = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end_reversed_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_end_reversed_start_end_reversed_end_reversed_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end_reversed_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_end_reversed_start_end_reversed_end_reversed_end_reversed_end_reversed_end\
    \ = 0;\n    size_t paren_level_start_reversed_start_end_reversed_end_reversed_end_reverse",
  "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  std::string curr_paren_level;\n  for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      curr_paren_level = paren_string.substr(0,\
    \ i);\n      paren_levels.push_back(curr_paren_level.size());\n    } else if (paren_string[i]\
    \ == ')') {\n      long curr_level = paren_levels[paren_levels.size() - 1];\n\
    \      long new_level = curr_level + 1;\n      paren_levels.push_back(new_level);\n\
    \    }\n  }\n  return paren_levels;", "    std::vector<long> paren_levels;\n \
    \   paren_levels.reserve(paren_string.size());\n    long current_level = 0;\n\
    \    bool is_open = false;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            is_open = true;\n            current_level++;\n        }\
    \ else if (c == ')') {\n            is_open = false;\n            current_level--;\n\
    \        } else if (is_open) {\n            current_level++;\n        } else {\n\
    \            paren_levels.push_back(current_level);\n        }\n    }\n    return\
    \ paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n\
    \      paren_levels.push_back(paren_level);\n      paren_level++;\n    } else\
    \ if (c == ')') {\n      paren_level--;\n    }\n  }\n  assert(paren_level == 0);\n\
    \  return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     is_open = true;\n            level++;\n        } else if (c == ')') {\n\
    \            is_open = false;\n            level--;\n        } else if (c == '\
    \ ') {\n            if (is_open) {\n                level++;\n            }\n\
    \        } else {\n            assert(false);\n        }\n        paren_levels.push_back(level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    std::string\
    \ paren_level;\n    long paren_level_count = 0;\n    for (auto &c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n            paren_level\
    \ = paren_level + c;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level = paren_level.substr(0, paren_level.size() - 1);\n  \
    \          if (paren_level_count == 0) {\n                paren_levels.push_back(std::stoi(paren_level));\n\
    \            }\n        }\n    }\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_levels.push_back(level);\n            level++;\n        } else if (c\
    \ == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> result;\n    long current_level\
    \ = 0;\n    long max_level = 0;\n    for (auto c : paren_string) {\n        if\
    \ (c == '(') {\n            current_level++;\n        } else if (c == ')') {\n\
    \            current_level--;\n        }\n        if (current_level > max_level)\
    \ {\n            result.push_back(max_level);\n            max_level = current_level;\n\
    \        } else if (current_level < max_level) {\n            result.push_back(max_level);\n\
    \            max_level = current_level;\n        }\n    }\n    if (max_level >\
    \ 0) {\n        result.push_back(max_level);\n    }\n    return result;", "  \
    \  std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\" \"\
    );\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    std::vector<long> paren_levels_temp2 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp3 = paren_levels_temp;\n    std::vector<long> paren_levels_temp4\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp5 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp6 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp7 = paren_levels_temp;\n    std::vector<long> paren_levels_temp8\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp9 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp10 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp11 = paren_levels_temp;\n    std::vector<long> paren_levels_temp12\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp13 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp14 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp15 = paren_levels_temp;\n    std::vector<long> paren_levels_temp16\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp17 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp18 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp19 = paren_levels_temp;\n    std::vector<long> paren_levels_temp20\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp21 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp22 = paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp23 = paren_levels_temp;\n    std::vector<long> paren_levels_temp24\
    \ = paren_levels_temp;\n    std::vector<long> paren_levels_temp25 = paren_levels_temp;\n\
    \    std::vector<long> paren_levels_temp26 = paren_levels_temp;\n    std::vector<long>\
    \ paren", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    std::string\
    \ paren_level_string;\n    long paren_level = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level++;\n            paren_level_string\
    \ = std::to_string(paren_level);\n        } else if (c == ')') {\n           \
    \ paren_level--;\n            paren_level_string = std::to_string(paren_level);\n\
    \            paren_levels.push_back(paren_level);\n        }\n    }\n    return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels_t paren_levels_t;\n\
    \    paren_levels_t.paren_levels = paren_levels;\n    paren_levels_t.paren_levels_size\
    \ = 0;\n    paren_levels_t.paren_levels_capacity = paren_levels.size();\n    paren_levels_t.paren_levels_max_size\
    \ = 0;\n    paren_levels_t.paren_levels_max_capacity = paren_levels.size();\n\
    \    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren_levels_t.paren_levels_max_capacity\
    \ = paren_levels.size();\n    paren_levels_t.paren_levels_max_size = 0;\n    paren",
  "    std::vector<long> result;\n    long level = 0;\n    bool is_open = false;\n\
    \    bool is_closed = false;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            is_open = true;\n            level++;\n        } else\
    \ if (c == ')') {\n            is_closed = true;\n            level--;\n     \
    \   } else if (c == ' ') {\n            if (is_open && is_closed) {\n        \
    \        result.push_back(level);\n            }\n            is_open = false;\n\
    \            is_closed = false;\n        } else {\n            is_open = false;\n\
    \            is_closed = false;\n        }\n    }\n    if (is_open && is_closed)\
    \ {\n        result.push_back(level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long current_level\
    \ = 0;\n    for (auto &c : paren_string) {\n        if (c == '(') {\n        \
    \    current_level++;\n        } else if (c == ')') {\n            current_level--;\n\
    \        }\n        paren_levels.push_back(current_level);\n    }\n    return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels = {0};\n\
    \    std::string paren_level_string;\n    std::string paren_level_char;\n    long\
    \ paren_level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n \
    \       paren_level_char = paren_string[i];\n        if (paren_level_char == '(')\
    \ {\n            paren_level++;\n            paren_level_string = std::to_string(paren_level);\n\
    \            paren_level_string = paren_level_string + paren_level_char;\n   \
    \         paren_level_string = paren_level_string + paren_level_char;\n      \
    \      paren_level_string = paren_level_string + paren_level_char;\n         \
    \   paren_level_string = paren_level_string + paren_level_char;\n            paren_level_string\
    \ = paren_level_string + paren_level_char;\n            paren_level_string = paren_level_string\
    \ + paren_level_char;\n            paren_level_string = paren_level_string + paren_level_char;\n\
    \            paren_level_string = paren_level_string + paren_level_char;\n   \
    \         paren_level_string = paren_level_string + paren_level_char;\n      \
    \      paren_level_string = paren_level_string + paren_level_char;\n         \
    \   paren_level_string = paren_level_string + paren_level_char;\n            paren_level_string\
    \ = paren_level_string + paren_level_char;\n            paren_level_string = paren_level_string\
    \ + paren_level_char;\n            paren_level_string = paren_level_string + paren_level_char;\n\
    \            paren_level_string = paren_level_string + paren_level_char;\n   \
    \         paren_level_string = paren_level_string + paren_level_char;\n      \
    \      paren_level_string = paren_level_string + paren_level_char;\n         \
    \   paren_level_string = paren_level_string + paren_level_char;\n            paren_level_string\
    \ = paren_level_string + paren_level_char;\n            paren_level_string = paren_level_string\
    \ + paren_level_char;\n            paren_level_string = paren_level_string + paren_level_char;\n\
    \            paren_level_string = paren_level_string + paren_level_char;\n   \
    \         paren_level_string = paren_level_string + paren_level_char;\n      \
    \      paren_level_string = paren_level_string + paren_level_char;\n         \
    \   paren_level_string = paren_level_string + paren_level_char;\n            ",
  "    std::vector<long> paren_levels;\n    paren_levels = {0};\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.push_back(paren_levels.size());\n\
    \    std::vector<long> paren_levels_temp_temp;\n    paren_levels_temp_temp.push_back(paren_levels_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp;\n    paren_levels_temp_temp_temp.push_back(paren_levels_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp;\n    paren_levels_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp;\n    paren_levels_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp_temp;\n    paren_levels_temp_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp_temp_temp;\n    paren_levels_temp_temp_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp_temp_temp;\n    paren_levels_temp_temp_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    paren_levels_temp_temp_temp_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp.push_back(paren_levels_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp.size());\n\
    \    std::vector<long> paren_levels_temp_temp_", "    std::vector<long> paren_levels;\n\
    \    paren_levels = {0};\n    std::string current_paren_string;\n    std::string\
    \ current_paren_level;\n    for (auto &c : paren_string) {\n        if (c == '(')\
    \ {\n            current_paren_string = current_paren_level;\n            current_paren_level\
    \ += c;\n        } else if (c == ')') {\n            paren_levels.push_back(std::stoi(current_paren_level));\n\
    \            current_paren_string = \"\";\n            current_paren_level = \"\
    \";\n        } else {\n            current_paren_level += c;\n        }\n    }\n\
    \    return paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.size() == paren_string.size());\n\
    \  return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n   \
    \ paren_levels_temp.assign(paren_levels.begin(), paren_levels.end());\n    long\
    \ max_level = 0;\n    for (long i = 0; i < paren_levels_temp.size(); i++) {\n\
    \        if (paren_levels_temp[i] > max_level) {\n            max_level = paren_levels_temp[i];\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    for (long i = 0; i < paren_levels_temp.size(); i++)\
    \ {\n        if (paren_levels_temp[i] > max_level) {\n            paren_levels_temp2.push_back(i);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp3;\n    paren_levels_temp3.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    for (long i = 0; i < paren_levels_temp2.size(); i++)\
    \ {\n        if (paren_levels_temp2[i] > max_level) {\n            paren_levels_temp3.push_back(paren_levels_temp2[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp4;\n    paren_levels_temp4.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    for (long i = 0; i < paren_levels_temp3.size(); i++)\
    \ {\n        if (paren_levels_temp3[i] > max_level) {\n            paren_levels_temp4.push_back(paren_levels_temp3[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp5;\n    paren_levels_temp5.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    for (long i = 0; i < paren_levels_temp4.size(); i++)\
    \ {\n        if (paren_levels_temp4[i] > max_level) {\n            paren_levels_temp5.push_back(paren_levels_temp4[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp6;\n    paren_levels_temp6.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    for (long i = 0; i < paren_levels_temp5.size(); i++)\
    \ {\n        if (paren_levels_temp5[i] > max_level) {\n            paren_levels_temp6.push_back(paren_levels_temp5[i]);\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp7;\n    paren_levels_temp7.assign(paren_levels.begin(),\
    \ paren_levels.end());\n    for (long i = 0; i < paren_levels_temp6.size(); i++)\
    \ {\n        if (paren_levels_temp6[i] > max_level", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    long paren_levels_sum\
    \ = 0;\n    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_sum\
    \ += paren_levels[i];\n    }\n    for (long i = 0; i < paren_levels.size(); i++)\
    \ {\n        paren_levels_temp[i] = paren_levels_temp[i] + (paren_levels_sum -\
    \ paren_levels[i]);\n    }\n    return paren_levels_temp;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    long paren_level = 0;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \            current_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \            current_level--;\n        }\n        if (current_level > paren_level)\
    \ {\n            paren_levels.push_back(paren_level);\n        }\n    }\n    return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(1);\n\
    \    long paren_level = 1;\n    for (auto &level : paren_levels) {\n        if\
    \ (level == \"(\") {\n            paren_levels_temp.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (level == \")\") {\n          \
    \  paren_level = paren_levels_temp.back();\n            paren_levels_temp.pop_back();\n\
    \        } else {\n            paren_level = paren_levels_temp.back();\n     \
    \       paren_levels_temp.pop_back();\n        }\n    }\n    return paren_levels_temp;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_levels.push_back(paren_level);\n        } else if\
    \ (c == ')') {\n            is_closed = true;\n            paren_level = paren_levels.back();\n\
    \        } else if (is_open && is_closed) {\n            paren_level++;\n    \
    \    }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   bool is_open = false;\n    for (auto c : paren_string) {\n        if (is_open)\
    \ {\n            if (c == '(') {\n                paren_level++;\n           \
    \ } else if (c == ')') {\n                paren_level--;\n            }\n    \
    \    }\n        is_open = c == '(';\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_levels.pop_back();\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n    }\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    long max_level\
    \ = 0;\n    for (auto &c : paren_string) {\n        if (c == '(') {\n        \
    \    paren_levels.push_back(0);\n        } else if (c == ')') {\n            long\
    \ level = paren_levels.size() - 1;\n            if (level > max_level) {\n   \
    \             max_level = level;\n            }\n            paren_levels.erase(paren_levels.begin()\
    \ + level);\n        } else {\n            long level = paren_levels.size();\n\
    \            paren_levels.push_back(level);\n        }\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    std::vector<long> paren_levels_temp;\n\
    \    long paren_level = 0;\n    long paren_levels_temp_index = 0;\n    long paren_levels_temp_size\
    \ = 0;\n    long paren_levels_temp_capacity = 0;\n    long paren_levels_temp_max_size\
    \ = 0;\n    long paren_levels_temp_max_capacity = 0;\n    long paren_levels_temp_max_index\
    \ = 0;\n    long paren_levels_temp_max_value = 0;\n    long paren_levels_temp_max_count\
    \ = 0;\n    long paren_levels_temp_max_count_index = 0;\n    long paren_levels_temp_max_count_value\
    \ = 0;\n    long paren_levels_temp_max_count_count = 0;\n    long paren_levels_temp_max_count_count_index\
    \ = 0;\n    long paren_levels_temp_max_count_count_value = 0;\n    long paren_levels_temp_max_count_count_count\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_index = 0;\n    long\
    \ paren_levels_temp_max_count_count_count_value = 0;\n    long paren_levels_temp_max_count_count_count_count\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_index = 0;\n  \
    \  long paren_levels_temp_max_count_count_count_count_value = 0;\n    long paren_levels_temp_max_count_count_count_count_count\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_index = 0;\n\
    \    long paren_levels_temp_max_count_count_count_count_count_value = 0;\n   \
    \ long paren_levels_temp_max_count_count_count_count_count_count = 0;\n    long\
    \ paren_levels_temp_max_count_count_count_count_count_count_index = 0;\n    long\
    \ paren_levels_temp_max_count_count_count_count_count_count_value = 0;\n    long\
    \ paren_levels_temp_max_count_count_count_count_count_count_count_count = 0;\n\
    \    long paren_levels_temp_max_count_count_count_count_count_count_count_index\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_count_count_value\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_count_count_count\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_count_count_index\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_count_count_value\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_count_count_count_count\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_count_count_count_index\
    \ = 0;\n    long paren_levels_temp_max_count_count_count_count_count_count_count_count_value\
    \ = 0;", "    std::vector<long> paren_levels;\n    paren_levels = paren_string.substr(0,\
    \ paren_string.find_first_of(\"()\")).split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    long paren_levels_size\
    \ = paren_levels.size();\n    long paren_levels_index = 0;\n    long paren_levels_index_temp\
    \ = 0;\n    long paren_levels_index_temp2 = 0;\n    long paren_levels_index_temp3\
    \ = 0;\n    long paren_levels_index_temp4 = 0;\n    long paren_levels_index_temp5\
    \ = 0;\n    long paren_levels_index_temp6 = 0;\n    long paren_levels_index_temp7\
    \ = 0;\n    long paren_levels_index_temp8 = 0;\n    long paren_levels_index_temp9\
    \ = 0;\n    long paren_levels_index_temp10 = 0;\n    long paren_levels_index_temp11\
    \ = 0;\n    long paren_levels_index_temp12 = 0;\n    long paren_levels_index_temp13\
    \ = 0;\n    long paren_levels_index_temp14 = 0;\n    long paren_levels_index_temp15\
    \ = 0;\n    long paren_levels_index_temp16 = 0;\n    long paren_levels_index_temp17\
    \ = 0;\n    long paren_levels_index_temp18 = 0;\n    long paren_levels_index_temp19\
    \ = 0;\n    long paren_levels_index_temp20 = 0;\n    long paren_levels_index_temp21\
    \ = 0;\n    long paren_levels_index_temp22 = 0;\n    long paren_levels_index_temp23\
    \ = 0;\n    long paren_levels_index_temp24 = 0;\n    long paren_levels_index_temp25\
    \ = 0;\n    long paren_levels_index_temp26 = 0;\n    long paren_levels_index_temp27\
    \ = 0;\n    long paren_levels_index_temp28 = 0;\n    long paren_levels_index_temp29\
    \ = 0;\n    long paren_levels_index_temp30 = 0;\n    long paren_levels_index_temp31\
    \ = 0;\n    long paren_levels_index_temp32 = 0;\n    long paren_levels_index_temp33\
    \ = 0;\n    long paren_levels_index_temp34 = 0;\n    long paren_levels_index_temp35\
    \ = 0;\n    long paren_levels_index_temp36 = 0;\n    long paren_levels_index_temp37\
    \ = 0;\n    long paren_levels_index_temp38 = 0;\n    long paren_levels_index_temp39\
    \ = 0;\n    long paren_levels_index_temp40", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_copy;\n\
    \    paren_levels_copy.reserve(paren_levels.size());\n    for (auto &level : paren_levels)\
    \ {\n        paren_levels_copy.push_back(level);\n    }\n    long max_level =\
    \ 0;\n    for (auto &level : paren_levels_copy) {\n        if (level > max_level)\
    \ {\n            max_level = level;\n        }\n    }\n    std::vector<long> max_level_paren_levels;\n\
    \    max_level_paren_levels.reserve(max_level + 1);\n    for (auto &level : paren_levels_copy)\
    \ {\n        if (level == max_level) {\n            max_level_paren_levels.push_back(level);\n\
    \        }\n    }\n    return max_level_paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels = paren_string.split(\" \");\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.push_back(1);\n    long paren_level\
    \ = 1;\n    long paren_levels_sum = 0;\n    long paren_levels_max = 0;\n    long\
    \ paren_levels_max_index = 0;\n    for (long i = 0; i < paren_levels.size(); i++)\
    \ {\n        if (paren_levels[i] != \"()\") {\n            paren_levels_temp.push_back(paren_level);\n\
    \            paren_levels_sum += paren_level;\n            if (paren_levels_sum\
    \ > paren_levels_max) {\n                paren_levels_max = paren_levels_sum;\n\
    \                paren_levels_max_index = i;\n            }\n            paren_levels_temp.push_back(1);\n\
    \            paren_levels_sum = 0;\n            paren_level++;\n        } else\
    \ {\n            paren_levels_temp.push_back(paren_level);\n            paren_levels_sum\
    \ += paren_level;\n            paren_levels_temp.push_back(1);\n            paren_levels_sum\
    \ = 0;\n            paren_level++;\n        }\n    }\n    paren_levels_temp.push_back(paren_level);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n\
    \    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n  \
    \  paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n    paren_levels_temp.push_back(1);\n",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_level++;\n\
    \        } else if (paren_string[i] == ')') {\n            paren_level--;\n  \
    \      }\n        paren_levels.push_back(paren_level);\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "  std::vector<long>\
    \ paren_levels;\n  paren_levels.reserve(paren_string.size());\n  long level =\
    \ 0;\n  for (char c : paren_string) {\n    if (c == '(') {\n      paren_levels.push_back(level);\n\
    \      level++;\n    } else if (c == ')') {\n      level--;\n      assert(level\
    \ >= 0);\n      paren_levels.push_back(level);\n    }\n  }\n  return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    size_t paren_start_index = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level++;\n            paren_start_index = i;\n        }\
    \ else if (paren_string[i] == ')') {\n            paren_level--;\n           \
    \ paren_levels[paren_level] = paren_start_index;\n        }\n    }\n    return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_levels.push_back(level);\n\
    \        } else if (c == ')') {\n            is_open = false;\n            level--;\n\
    \        } else if (is_open) {\n            level++;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_level--;\n\
    \        } else if (is_open) {\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   bool is_open = false;\n    for (size_t i = 0; i < paren_string.size(); ++i)\
    \ {\n        if (paren_string[i] == '(') {\n            is_open = true;\n    \
    \        paren_levels.push_back(paren_level);\n        } else if (paren_string[i]\
    \ == ')') {\n            is_open = false;\n            paren_levels.pop_back();\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n    }\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_level++;\n\
    \        } else if (paren_string[i] == ')') {\n            paren_level--;\n  \
    \      }\n        paren_levels.push_back(paren_level);\n    }\n    return paren_levels;",
  "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n   \
    \   paren_levels.push_back(level);\n      level++;\n    } else if (c == ')') {\n\
    \      level--;\n    }\n  }\n  assert(paren_levels.back() == 0);\n  return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long level\
    \ = 0;\n    long paren_level = 0;\n    bool is_open = false;\n    for (char c\
    \ : paren_string) {\n        if (c == '(') {\n            is_open = true;\n  \
    \          paren_level = level;\n        } else if (c == ')') {\n            is_open\
    \ = false;\n            paren_levels.push_back(paren_level);\n            level--;\n\
    \        } else if (is_open) {\n            level++;\n        }\n    }\n    return\
    \ paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels = {0};\n\
    \  std::string paren_level_string;\n  std::string paren_level_char;\n  long paren_level\
    \ = 0;\n  for (size_t i = 0; i < paren_string.size(); i++) {\n    paren_level_char\
    \ = paren_string[i];\n    if (paren_level_char == '(') {\n      paren_level++;\n\
    \      paren_level_string = std::to_string(paren_level);\n      paren_level_string.push_back('(');\n\
    \      paren_level_string.push_back(')');\n      paren_level_string.push_back('\
    \ ');\n      paren_level_string.push_back('(');\n      paren_level_string.push_back(')');\n\
    \      paren_level_string.push_back(' ');\n      paren_level_string.push_back('(');\n\
    \      paren_level_string.push_back(')');\n      paren_level_string.push_back('\
    \ ');\n      paren_level_string.push_back('(');\n      paren_level_string.push_back(')');\n\
    \      paren_level_string.push_back(' ');\n      paren_level_string.push_back('(');\n\
    \      paren_level_string.push_back(')');\n      paren_level_string.push_back('\
    \ ');\n      paren_level_string.push_back('(');\n      paren_level_string.push_back(')');\n\
    \      paren_level_string.push_back(' ');\n      paren_level_string.push_back('(');\n\
    \      paren_level_string.push_back(')');\n      paren_level_string.push_back('\
    \ ');\n      paren_level_string.push_back('(');\n      paren_level_string.push_back(')');\n\
    \      paren_level_string.push_back(' ');\n      paren_level_string.push_back('(');\n\
    \      paren_level_string.push_back(')');\n      paren_level_string.push_back('\
    \ ');\n      paren_level_string.push_back('(');\n      paren_level_string.push_back(')');\n\
    \      paren_level_string.push_back(' ');\n      paren_level_string.push_back('(');\n\
    \      paren_level_string.push_back(')');\n      paren_level_string.push_back('\
    \ ');\n      paren_level_string.push_back('(');\n      paren_level_string.push_back(')');\n\
    \      paren_level_string.push_back(' ');\n      paren_level_string.push_back('(');\n\
    \      paren_level_string.push_back(')');\n      paren_level_string.push_back('\
    \ '", "    std::vector<long> paren_levels;\n    long current_level = 0;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            current_level++;\n\
    \        } else if (c == ')') {\n            current_level--;\n        }\n   \
    \     paren_levels.push_back(current_level);\n    }\n    return paren_levels;",
  "    std::vector<long> result;\n    std::string curr_paren_string = paren_string;\n\
    \    long curr_level = 0;\n    long max_level = 0;\n    bool is_open = false;\n\
    \    while (curr_paren_string.size() > 0) {\n        char curr_char = curr_paren_string[0];\n\
    \        curr_paren_string = curr_paren_string.substr(1);\n        curr_level++;\n\
    \        if (curr_char == '(') {\n            is_open = true;\n        } else\
    \ if (curr_char == ')') {\n            is_open = false;\n        } else if (curr_char\
    \ == ' ') {\n            if (is_open) {\n                result.push_back(curr_level);\n\
    \                curr_level = 0;\n            }\n        } else {\n          \
    \  assert(false);\n        }\n        if (curr_level > max_level) {\n        \
    \    max_level = curr_level;\n        }\n    }\n    if (max_level > 0) {\n   \
    \     result.push_back(max_level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long level\
    \ = 0;\n    bool is_open = false;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            is_open = true;\n        } else if (c == ')') {\n\
    \            is_open = false;\n        } else if (is_open) {\n            paren_levels.push_back(level);\n\
    \            level++;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> levels;\n    std::string paren_level;\n\
    \    long level = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n\
    \        if (paren_string[i] == '(') {\n            paren_level = paren_string.substr(i,\
    \ 1);\n            level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          level--;\n            if (level == 0) {\n                levels.push_back(level);\n\
    \            }\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ result;\n    long level = 0;\n    bool is_open = false;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            is_open = true;\n            level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            level--;\n\
    \        } else if (is_open) {\n            level++;\n        }\n        result.push_back(level);\n\
    \    }\n    return result;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string paren_level;\n    long paren_level_count = 0;\n    for (auto\
    \ c : paren_string) {\n        if (c == '(') {\n            paren_level_count++;\n\
    \            paren_level = std::to_string(paren_level_count);\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n            paren_level =\
    \ std::to_string(paren_level_count);\n        } else if (c == ' ') {\n       \
    \     paren_level += c;\n        } else {\n            paren_level += c;\n   \
    \     }\n        paren_levels.push_back(std::stoi(paren_level));\n    }\n    return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (char c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n            assert(level >= 0);\n\
    \            paren_levels.push_back(level);\n        }\n    }\n    return paren_levels;",
  "    std::vector<long> levels;\n    std::string curr_paren = paren_string;\n   \
    \ long level = 0;\n    while (curr_paren != \"\") {\n        if (curr_paren[0]\
    \ == '(') {\n            level++;\n        } else if (curr_paren[0] == ')') {\n\
    \            level--;\n        }\n        curr_paren = curr_paren.substr(1);\n\
    \        levels.push_back(level);\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.push_back(0);\n    long level = 0;\n    long\
    \ paren_level = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2\
    \ = 0;\n    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n\
    \    long paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long\
    \ paren_level_counter7 = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9\
    \ = 0;\n    long paren_level_counter10 = 0;\n    long paren_level_counter11 =\
    \ 0;\n    long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n\
    \    long paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n  \
    \  long paren_level_counter16 = 0;\n    long paren_level_counter17 = 0;\n    long\
    \ paren_level_counter18 = 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20\
    \ = 0;\n    long paren_level_counter21 = 0;\n    long paren_level_counter22 =\
    \ 0;\n    long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n\
    \    long paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n  \
    \  long paren_level_counter27 = 0;\n    long paren_level_counter28 = 0;\n    long\
    \ paren_level_counter29 = 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31\
    \ = 0;\n    long paren_level_counter32 = 0;\n    long paren_level_counter33 =\
    \ 0;\n    long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n\
    \    long paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n  \
    \  long paren_level_counter38 = 0;\n    long paren_level_counter39 = 0;\n    long\
    \ paren_level_counter40 = 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42\
    \ = 0;\n    long paren_level_counter43 = 0;\n    long paren_level_counter44 =\
    \ 0;\n    long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n\
    \    long paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n  \
    \  long paren_level_counter49 = 0;\n    long paren_level_counter50 = 0;\n    long\
    \ paren_level_counter51 = 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53\
    \ = 0;\n    long paren_level_counter54 = 0;\n    long paren", "    std::vector<long>\
    \ paren_levels;\n    paren_levels = paren_string.split(\" \");\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n  \
    \  for (auto &level : paren_levels) {\n        long paren_level = 0;\n       \
    \ for (auto &char : level) {\n            if (char == '(') paren_level++;\n  \
    \          if (char == ')') paren_level--;\n        }\n        paren_levels_temp.push_back(paren_level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reversed;\n    paren_levels_temp_reversed.reserve(paren_levels_temp.size());\n\
    \    for (auto &level : paren_levels_temp) {\n        long paren_level_reversed\
    \ = 0;\n        for (auto &char : level) {\n            if (char == '(') paren_level_reversed++;\n\
    \            if (char == ')') paren_level_reversed--;\n        }\n        paren_levels_temp_reversed.push_back(paren_level_reversed);\n\
    \    }\n    std::vector<long> paren_levels_temp_reversed_temp;\n    paren_levels_temp_reversed_temp.reserve(paren_levels_temp_reversed.size());\n\
    \    for (auto &level : paren_levels_temp_reversed) {\n        long paren_level_reversed_temp\
    \ = 0;\n        for (auto &char : level) {\n            if (char == '(') paren_level_reversed_temp++;\n\
    \            if (char == ')') paren_level_reversed_temp--;\n        }\n      \
    \  paren_levels_temp_reversed_temp.push_back(paren_level_reversed_temp);\n   \
    \ }\n    std::vector<long> paren_levels_temp_reversed_temp_temp;\n    paren_levels_temp_reversed_temp_temp.reserve(paren_levels_temp_reversed_temp.size());\n\
    \    for (auto &level : paren_levels_temp_reversed_temp) {\n        long paren_level_reversed_temp_temp\
    \ = 0;\n        for (auto &char : level) {\n            if (char == '(') paren_level_reversed_temp_temp++;\n\
    \            if (char == ')') paren_level_reversed_temp_temp--;\n        }\n \
    \       paren_levels_temp_reversed_temp_temp.push_back(paren_level_reversed_temp_temp);\n\
    \    }\n    std::vector<long> paren_levels_temp_reversed_temp_temp_temp;\n   \
    \ paren_levels_temp_reversed_temp_temp_temp.reserve(paren_levels_temp", "    std::vector<long>\
    \ paren_levels;\n    std::vector<long> paren_levels_temp;\n    std::vector<long>\
    \ paren_levels_temp_temp;\n    std::vector<long> paren_levels_temp_temp_temp;\n\
    \    std::vector<long> paren_levels_temp_temp_temp_temp;\n    long paren_levels_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp = 0;\n    long paren_levels_temp_temp\
    \ = 0;\n    long paren_levels_temp = 0;\n    long paren_levels = 0;\n    long\
    \ paren_levels_temp_temp = 0;\n    long paren_levels_temp_temp_temp = 0;\n   \
    \ long paren_levels_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp = 0;\n    long paren_levels_temp = 0;\n\
    \    long paren_levels_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp = 0;\n    long paren_levels_temp_temp\
    \ = 0;\n    long paren_levels_temp = 0;\n    long paren_levels_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp = 0;\n    long paren_levels_temp = 0;\n\
    \    long paren_levels_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp = 0;\n    long paren_levels_temp_temp\
    \ = 0;\n    long paren_levels_temp = 0;\n    long paren_levels_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp_temp_temp = 0;\n    long paren_levels_temp_temp_temp\
    \ = 0;\n    long paren_levels_temp_temp = 0;\n    long paren_levels_temp = 0;\n\
    \    long paren", "    std::vector<long> result;\n    long max_level = 0;\n  \
    \  long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n \
    \   std::string current_paren = \"\";\n    std::string current_group = \"\";\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            current_paren = c;\n        } else if (c == ')') {\n  \
    \          is_closed = true;\n            current_paren = c;\n        } else if\
    \ (is_open && is_closed) {\n            current_group = current_paren + c;\n \
    \           result.push_back(level);\n            current_paren = \"\";\n    \
    \        level++;\n        } else if (is_open) {\n            current_group =\
    \ current_paren + c;\n        } else if (is_closed) {\n            current_group\
    \ = current_paren + c;\n            result.push_back(level);\n            current_paren\
    \ = \"\";\n            level--;\n        }\n    }\n    if (current_paren != \"\
    \") {\n        result.push_back(level);\n    }\n    return result;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long level\
    \ = 0;\n    long paren_level = 0;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            paren_level++;\n        } else if (c == ')') {\n\
    \            paren_level--;\n        }\n        if (paren_level == 0 && paren_levels.size()\
    \ <= level) {\n            paren_levels.resize(level + 1, 0);\n        }\n   \
    \     paren_levels[level] += 1;\n        level++;\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\" \"\
    );\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n\
    \    for (auto &level : paren_levels) {\n        paren_levels_temp.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse;\n    paren_levels_temp_reverse.reserve(paren_levels_temp.size());\n\
    \    for (auto &level : paren_levels_temp) {\n        paren_levels_temp_reverse.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_reverse;\n    paren_levels_temp_reverse_reverse.reserve(paren_levels_temp_reverse.size());\n\
    \    for (auto &level : paren_levels_temp_reverse) {\n        paren_levels_temp_reverse_reverse.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_reverse_reverse;\n   \
    \ paren_levels_temp_reverse_reverse_reverse.reserve(paren_levels_temp_reverse_reverse.size());\n\
    \    for (auto &level : paren_levels_temp_reverse_reverse) {\n        paren_levels_temp_reverse_reverse_reverse.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_reverse_reverse_reverse;\n\
    \    paren_levels_temp_reverse_reverse_reverse_reverse.reserve(paren_levels_temp_reverse_reverse_reverse.size());\n\
    \    for (auto &level : paren_levels_temp_reverse_reverse_reverse) {\n       \
    \ paren_levels_temp_reverse_reverse_reverse_reverse.push_back(level);\n    }\n\
    \    std::vector<long> paren_levels_temp_reverse_reverse_reverse_reverse_reverse;\n\
    \    paren_levels_temp_reverse_reverse_reverse_reverse_reverse.reserve(paren_levels_temp_reverse_reverse_reverse_reverse.size());\n\
    \    for (auto &level : paren_levels_temp_reverse_reverse_reverse_reverse) {\n\
    \        paren_levels_temp_reverse_reverse_reverse_reverse.push_back(level);\n\
    \    }\n    std::vector<long> paren_levels_temp_reverse_reverse_reverse_reverse_reverse;\n\
    \    paren_levels_temp_reverse_reverse_reverse_reverse_reverse.reserve(paren_levels_temp_reverse_reverse_re",
  "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n\
    \      paren_levels.push_back(paren_level);\n      paren_level++;\n    } else\
    \ if (c == ')') {\n      paren_level--;\n    }\n  }\n  paren_levels.push_back(paren_level);\n\
    \  return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_paren_or_closed = false;\n    bool is_closing_paren_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_open = false;\n    bool is_closing_paren_or_opening_paren\
    \ = false;\n    bool is_closing_paren_or_opening_paren_or_closed = false;\n  \
    \  bool is_opening_paren_or_closed_or_opening_paren = false;\n    bool is_closing_paren_or_opening_paren_or_closed_or_open\
    \ = false;\n    bool is_opening_paren_or_closed_or_opening_paren_or_closed = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_closed_or_opening_paren_or_closed_or_open = false;\n\
    \    bool is_opening_paren_or_", "    std::vector<long> paren_levels;\n    std::vector<long>\
    \ paren_levels_temp;\n    long paren_level = 0;\n    long paren_levels_temp_len\
    \ = 0;\n    long paren_level_temp = 0;\n    long paren_level_temp_len = 0;\n \
    \   long paren_level_temp2 = 0;\n    long paren_level_temp_len2 = 0;\n    long\
    \ paren_level_temp3 = 0;\n    long paren_level_temp_len3 = 0;\n    long paren_level_temp4\
    \ = 0;\n    long paren_level_temp_len4 = 0;\n    long paren_level_temp5 = 0;\n\
    \    long paren_level_temp_len5 = 0;\n    long paren_level_temp6 = 0;\n    long\
    \ paren_level_temp_len6 = 0;\n    long paren_level_temp7 = 0;\n    long paren_level_temp_len7\
    \ = 0;\n    long paren_level_temp8 = 0;\n    long paren_level_temp_len8 = 0;\n\
    \    long paren_level_temp9 = 0;\n    long paren_level_temp_len9 = 0;\n    long\
    \ paren_level_temp10 = 0;\n    long paren_level_temp_len10 = 0;\n    long paren_level_temp11\
    \ = 0;\n    long paren_level_temp_len11 = 0;\n    long paren_level_temp12 = 0;\n\
    \    long paren_level_temp_len12 = 0;\n    long paren_level_temp13 = 0;\n    long\
    \ paren_level_temp_len13 = 0;\n    long paren_level_temp14 = 0;\n    long paren_level_temp_len14\
    \ = 0;\n    long paren_level_temp15 = 0;\n    long paren_level_temp_len15 = 0;\n\
    \    long paren_level_temp16 = 0;\n    long paren_level_temp_len16 = 0;\n    long\
    \ paren_level_temp17 = 0;\n    long paren_level_temp_len17 = 0;\n    long paren_level_temp18\
    \ = 0;\n    long paren_level_temp_len18 = 0;\n    long paren_level_temp19 = 0;\n\
    \    long paren_level_temp_len19 = 0;\n    long paren_level_temp20 = 0;\n    long\
    \ paren_level_temp_len20 = 0;\n    long paren_level_temp21 = 0;\n    long paren_level_temp_len21\
    \ = 0;\n    long paren_level_temp22 = 0;\n    long paren_level_temp_len22 = 0;\n\
    \    long paren_level_temp23 = 0;\n    long paren_level_temp_len23 = 0;\n    long\
    \ paren_level_temp24 = 0;\n    long paren_level_temp_len24 = 0;\n    long paren_level_temp25\
    \ = 0;\n    long paren_level_temp_len25 = 0;\n    long paren_level_temp26 = 0;\n\
    \    ", "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  long paren_level_count = 0;\n  for (char c : paren_string)\
    \ {\n    if (c == '(') {\n      paren_level_count++;\n    } else if (c == ')')\
    \ {\n      paren_level_count--;\n      if (paren_level_count == 0) {\n       \
    \ paren_levels.push_back(paren_level);\n        paren_level_count = 0;\n     \
    \ }\n    }\n    paren_level++;\n  }\n  return paren_levels;", "    std::vector<long>\
    \ levels;\n    std::string paren_level;\n    long level = 0;\n    bool is_open\
    \ = false;\n    for (auto c : paren_string) {\n        if (c == '(') {\n     \
    \       is_open = true;\n            paren_level = c;\n        } else if (c ==\
    \ ')') {\n            is_open = false;\n            level++;\n            levels[level]\
    \ = level;\n        } else if (is_open) {\n            level++;\n            levels[level]\
    \ = level;\n        }\n    }\n    return levels;", "  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  std::string current_paren_string\
    \ = paren_string;\n  long current_paren_level = 0;\n  for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n    if (paren_string[i] == '(') {\n      current_paren_level++;\n  \
    \  } else if (paren_string[i] == ')') {\n      current_paren_level--;\n    }\n\
    \    paren_levels.push_back(current_paren_level);\n    current_paren_string =\
    \ paren_string.substr(0, i) + current_paren_string.substr(i + 1);\n  }\n  return\
    \ paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    size_t paren_level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          paren_level--;\n        }\n    }\n    paren_levels.push_back(paren_level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    std::string\
    \ paren_level;\n    long paren_level_count = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_level_count++;\n\
    \            paren_level = paren_levels[paren_level_count];\n            paren_levels.push_back(paren_level_count);\n\
    \        } else if (paren_string[i] == ')') {\n            paren_level_count--;\n\
    \            paren_level = paren_levels[paren_level_count];\n            paren_levels.push_back(paren_level_count);\n\
    \        } else {\n            paren_level += paren_string[i];\n        }\n  \
    \  }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    std::string\
    \ paren_level;\n    long paren_level_count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n            paren_level\
    \ = std::to_string(paren_level_count);\n        } else if (c == ')') {\n     \
    \       paren_level_count--;\n            paren_level = std::to_string(paren_level_count);\n\
    \        } else {\n            paren_level += c;\n        }\n        if (paren_level_count\
    \ == 0) {\n            paren_level_count++;\n            paren_level_count--;\n\
    \            paren_level += std::to_string(paren_level_count);\n            paren_levels.push_back(std::stoi(paren_level));\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    size_t paren_level = 0;\n\
    \    for (size_t i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i]\
    \ == '(') {\n            paren_levels.push_back(paren_level);\n        } else\
    \ if (paren_string[i] == ')') {\n            paren_level--;\n        }\n    }\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    std::string\
    \ paren_level;\n    long paren_level_count = 0;\n    for (auto c : paren_string)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n            paren_level\
    \ = paren_level_count;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \            paren_level = paren_level_count;\n        }\n        paren_levels[paren_level_count]\
    \ = paren_level;\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    std::string paren_level;\n\
    \    for (auto &c : paren_string) {\n        if (c == '(') {\n            paren_level\
    \ = paren_level + c;\n        } else if (c == ')') {\n            paren_level\
    \ = paren_level.substr(0, paren_level.size() - 1);\n            paren_levels.push_back(std::stoi(paren_level));\n\
    \            paren_level = c;\n        } else {\n            paren_level = paren_level\
    \ + c;\n        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    std::string curr_paren_level\
    \ = \"\";\n    for (size_t i = 0; i < paren_string.size(); i++) {\n        if\
    \ (paren_string[i] == '(') {\n            curr_paren_level += paren_string[i];\n\
    \        } else if (paren_string[i] == ')') {\n            paren_levels.push_back(std::stoi(curr_paren_level));\n\
    \            curr_paren_level = \"\";\n        } else {\n            curr_paren_level\
    \ += paren_string[i];\n        }\n    }\n    paren_levels.push_back(std::stoi(curr_paren_level));\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels = paren_string.split(\" \");\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.push_back(paren_levels[0]);\n    long\
    \ paren_level = 1;\n    for (long i = 1; i < paren_levels.size(); i++) {\n   \
    \     if (paren_levels[i-1] != paren_levels[i]) {\n            paren_levels_temp.push_back(paren_level);\n\
    \            paren_level = paren_levels[i-1];\n        }\n    }\n    paren_levels_temp.push_back(paren_level);\n\
    \    return paren_levels_temp;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "  std::vector<long>\
    \ paren_levels;\n  paren_levels = paren_string.substr(0, paren_string.find(' ')).split('\
    \ ');\n  std::vector<long> paren_levels_temp;\n  paren_levels_temp.reserve(paren_levels.size());\n\
    \  for (long i = 0; i < paren_levels.size(); i++) {\n    paren_levels_temp.push_back(paren_levels[i]);\n\
    \  }\n  long max_level = 0;\n  for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n    if (paren_levels_temp[i] > max_level) {\n      max_level = paren_levels_temp[i];\n\
    \    }\n  }\n  std::vector<long> paren_levels_temp2;\n  paren_levels_temp2.reserve(max_level\
    \ + 1);\n  for (long i = 0; i < paren_levels_temp.size(); i++) {\n    if (paren_levels_temp[i]\
    \ > max_level) {\n      paren_levels_temp2.push_back(max_level);\n    } else {\n\
    \      paren_levels_temp2.push_back(paren_levels_temp[i]);\n    }\n  }\n  paren_levels_temp2.push_back(max_level);\n\
    \  return paren_levels_temp2;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    long paren_level = 0;\n    bool is_open = false;\n \
    \   for (char c : paren_string) {\n        if (c == '(') {\n            is_open\
    \ = true;\n            paren_level = level;\n        }\n        else if (c ==\
    \ ')') {\n            is_open = false;\n            paren_levels[paren_level]\
    \ = paren_levels[paren_level] + 1;\n        }\n        else if (is_open) {\n \
    \           level = level + 1;\n        }\n    }\n    return paren_levels;", " \
    \   std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(1);\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        long paren_level\
    \ = paren_levels[i];\n        long paren_levels_sum = 0;\n        for (long j\
    \ = 0; j < paren_level; j++) {\n            paren_levels_sum += paren_levels_temp[j];\n\
    \        }\n        paren_levels_temp.push_back(paren_levels_sum);\n    }\n  \
    \  return paren_levels_temp;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n   \
    \ paren_levels_temp.assign(paren_levels.begin(), paren_levels.end());\n    long\
    \ paren_levels_sum = 0;\n    for (long i = 0; i < paren_levels_temp.size(); i++)\
    \ {\n        paren_levels_sum += paren_levels_temp[i];\n    }\n    std::vector<long>\
    \ paren_levels_temp2;\n    paren_levels_temp2.assign(paren_levels.begin(), paren_levels.end());\n\
    \    long paren_levels_sum2 = 0;\n    for (long i = 0; i < paren_levels_temp2.size();\
    \ i++) {\n        paren_levels_sum2 += paren_levels_temp2[i];\n    }\n    long\
    \ paren_levels_sum3 = paren_levels_sum2 - paren_levels_sum;\n    long paren_levels_sum4\
    \ = paren_levels_sum3 - paren_levels_sum2;\n    long paren_levels_sum5 = paren_levels_sum4\
    \ - paren_levels_sum3;\n    long paren_levels_sum6 = paren_levels_sum5 - paren_levels_sum4;\n\
    \    long paren_levels_sum7 = paren_levels_sum6 - paren_levels_sum5;\n    long\
    \ paren_levels_sum8 = paren_levels_sum7 - paren_levels_sum6;\n    long paren_levels_sum9\
    \ = paren_levels_sum8 - paren_levels_sum7;\n    long paren_levels_sum10 = paren_levels_sum9\
    \ - paren_levels_sum8;\n    long paren_levels_sum11 = paren_levels_sum10 - paren_levels_sum9;\n\
    \    long paren_levels_sum12 = paren_levels_sum11 - paren_levels_sum10;\n    long\
    \ paren_levels_sum13 = paren_levels_sum12 - paren_levels_sum11;\n    long paren_levels_sum14\
    \ = paren_levels_sum13 - paren_levels_sum12;\n    long paren_levels_sum15 = paren_levels_sum14\
    \ - paren_levels_sum13;\n    long paren_levels_sum16 = paren_levels_sum15 - paren_levels_sum14;\n\
    \    long paren_levels_sum17 = paren_levels_sum16 - paren_levels_sum15;\n    long\
    \ paren_levels_sum18 = paren_levels_sum17 - paren_levels_sum16;\n    long paren",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n        }\n    }\n    paren_levels.push_back(level);\n\
    \    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ paren_level;\n    long level = 0;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        if (paren_string[i] == '(') {\n            paren_level = paren_string.substr(0,\
    \ i);\n            level++;\n        } else if (paren_string[i] == ')') {\n  \
    \          level--;\n            if (level == 0) {\n                levels.push_back(level);\n\
    \            }\n        }\n    }\n    return levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long paren_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n        paren_levels.push_back(paren_level);\n    }\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\" \"\
    );\n    std::vector<long> paren_levels_copy;\n    paren_levels_copy.reserve(paren_levels.size());\n\
    \    for (auto &level : paren_levels) {\n        paren_levels_copy.push_back(level);\n\
    \    }\n    long max_level = 0;\n    for (auto &level : paren_levels_copy) {\n\
    \        if (level > max_level) {\n            max_level = level;\n        }\n\
    \    }\n    std::vector<long> paren_levels_copy(paren_levels_copy.begin(), paren_levels_copy.begin()\
    \ + max_level);\n    return paren_levels_copy;", "    std::vector<long> paren_levels;\n\
    \    long current_level = 0;\n    long current_paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    long paren_level_counter2 = 0;\n    long paren_level_counter3 = 0;\n\
    \    long paren_level_counter4 = 0;\n    long paren_level_counter5 = 0;\n    long\
    \ paren_level_counter6 = 0;\n    long paren_level_counter7 = 0;\n    long paren_level_counter8\
    \ = 0;\n    long paren_level_counter9 = 0;\n    long paren_level_counter10 = 0;\n\
    \    long paren_level_counter11 = 0;\n    long paren_level_counter12 = 0;\n  \
    \  long paren_level_counter13 = 0;\n    long paren_level_counter14 = 0;\n    long\
    \ paren_level_counter15 = 0;\n    long paren_level_counter16 = 0;\n    long paren_level_counter17\
    \ = 0;\n    long paren_level_counter18 = 0;\n    long paren_level_counter19 =\
    \ 0;\n    long paren_level_counter20 = 0;\n    long paren_level_counter21 = 0;\n\
    \    long paren_level_counter22 = 0;\n    long paren_level_counter23 = 0;\n  \
    \  long paren_level_counter24 = 0;\n    long paren_level_counter25 = 0;\n    long\
    \ paren_level_counter26 = 0;\n    long paren_level_counter27 = 0;\n    long paren_level_counter28\
    \ = 0;\n    long paren_level_counter29 = 0;\n    long paren_level_counter30 =\
    \ 0;\n    long paren_level_counter31 = 0;\n    long paren_level_counter32 = 0;\n\
    \    long paren_level_counter33 = 0;\n    long paren_level_counter34 = 0;\n  \
    \  long paren_level_counter35 = 0;\n    long paren_level_counter36 = 0;\n    long\
    \ paren_level_counter37 = 0;\n    long paren_level_counter38 = 0;\n    long paren_level_counter39\
    \ = 0;\n    long paren_level_counter40 = 0;\n    long paren_level_counter41 =\
    \ 0;\n    long paren_level_counter42 = 0;\n    long paren_level_counter43 = 0;\n\
    \    long paren_level_counter44 = 0;\n    long paren_level_counter45 = 0;\n  \
    \  long paren_level_counter46 = 0;\n    long paren_level_counter47 = 0;\n    long\
    \ paren_level_counter48 = 0;\n    long paren_level_counter49 = 0;\n    long paren_level_counter50\
    \ = 0;\n    long paren_level_counter51 = 0;\n    long paren_level_counter52 =\
    \ 0;\n    long paren_level_counter53 = 0;\n    long paren_level_counter54 = 0;\n\
    \    long paren_level_counter55 = 0;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   for (char c : paren_string) {\n        if (c == '(') {\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n     \
    \   paren_levels.push_back(paren_level);\n    }\n    return paren_levels;", " \
    \   std::vector<long> paren_levels;\n    paren_levels = paren_string.split(\"\
    \ \");\n    std::vector<long> paren_levels_copy;\n    paren_levels_copy = paren_levels.begin();\n\
    \    long paren_levels_copy_size = paren_levels.size();\n    long paren_levels_copy_index\
    \ = 0;\n    long paren_levels_copy_value = 0;\n    long paren_levels_copy_index2\
    \ = 0;\n    long paren_levels_copy_value2 = 0;\n    long paren_levels_copy_index3\
    \ = 0;\n    long paren_levels_copy_value3 = 0;\n    long paren_levels_copy_index4\
    \ = 0;\n    long paren_levels_copy_value4 = 0;\n    long paren_levels_copy_index5\
    \ = 0;\n    long paren_levels_copy_value5 = 0;\n    long paren_levels_copy_index6\
    \ = 0;\n    long paren_levels_copy_value6 = 0;\n    long paren_levels_copy_index7\
    \ = 0;\n    long paren_levels_copy_value7 = 0;\n    long paren_levels_copy_index8\
    \ = 0;\n    long paren_levels_copy_value8 = 0;\n    long paren_levels_copy_index9\
    \ = 0;\n    long paren_levels_copy_value9 = 0;\n    long paren_levels_copy_index10\
    \ = 0;\n    long paren_levels_copy_value10 = 0;\n    long paren_levels_copy_index11\
    \ = 0;\n    long paren_levels_copy_value11 = 0;\n    long paren_levels_copy_index12\
    \ = 0;\n    long paren_levels_copy_value12 = 0;\n    long paren_levels_copy_index13\
    \ = 0;\n    long paren_levels_copy_value13 = 0;\n    long paren_levels_copy_index14\
    \ = 0;\n    long paren_levels_copy_value14 = 0;\n    long paren_levels_copy_index15\
    \ = 0;\n    long paren_levels_copy_value15 = 0;\n    long paren_levels_copy_index16\
    \ = 0;\n    long paren_levels_copy_value16 = 0;\n    long paren_levels_copy_index17\
    \ = 0;\n    long paren_levels_copy_value17 = 0;\n    long paren_levels_copy_index18\
    \ = 0;\n    long paren_levels_copy_value18 = 0;\n    long paren_levels_copy_index19\
    \ = 0;\n    long paren_levels_copy_value19 = 0;\n    long paren_levels_copy_index20\
    \ = 0;\n    long paren_levels_copy_value20 = 0;\n    long paren_levels_copy_index21\
    \ = 0;\n    long paren_levels_copy_value21 = 0;\n    long ", "    std::vector<long>\
    \ paren_levels;\n    std::vector<long> paren_levels_temp;\n    long paren_level\
    \ = 0;\n    long paren_levels_temp_index = 0;\n    bool paren_levels_temp_empty\
    \ = true;\n    bool paren_levels_temp_empty_flag = false;\n    bool paren_levels_temp_empty_flag2\
    \ = false;\n    bool paren_levels_temp_empty_flag3 = false;\n    bool paren_levels_temp_empty_flag4\
    \ = false;\n    bool paren_levels_temp_empty_flag5 = false;\n    bool paren_levels_temp_empty_flag6\
    \ = false;\n    bool paren_levels_temp_empty_flag7 = false;\n    bool paren_levels_temp_empty_flag8\
    \ = false;\n    bool paren_levels_temp_empty_flag9 = false;\n    bool paren_levels_temp_empty_flag10\
    \ = false;\n    bool paren_levels_temp_empty_flag11 = false;\n    bool paren_levels_temp_empty_flag12\
    \ = false;\n    bool paren_levels_temp_empty_flag13 = false;\n    bool paren_levels_temp_empty_flag14\
    \ = false;\n    bool paren_levels_temp_empty_flag15 = false;\n    bool paren_levels_temp_empty_flag16\
    \ = false;\n    bool paren_levels_temp_empty_flag17 = false;\n    bool paren_levels_temp_empty_flag18\
    \ = false;\n    bool paren_levels_temp_empty_flag19 = false;\n    bool paren_levels_temp_empty_flag20\
    \ = false;\n    bool paren_levels_temp_empty_flag21 = false;\n    bool paren_levels_temp_empty_flag22\
    \ = false;\n    bool paren_levels_temp_empty_flag23 = false;\n    bool paren_levels_temp_empty_flag24\
    \ = false;\n    bool paren_levels_temp_empty_flag25 = false;\n    bool paren_levels_temp_empty_flag26\
    \ = false;\n    bool paren_levels_temp_empty_flag27 = false;\n    bool paren_levels_temp_empty_flag28\
    \ = false;\n    bool paren_levels_temp_empty_flag29 = false;\n    bool paren_levels_temp_empty_flag30\
    \ = false;\n    bool paren_levels_temp_empty_flag31 = false;\n    bool paren_levels_temp_empty_flag32\
    \ = false;\n    bool paren_levels_temp_empty_flag33 = false;\n    bool paren_levels_temp_empty_flag34\
    \ = false;\n    bool paren_levels_temp_empty_flag35 = false;\n    bool paren_levels_temp_empty_flag36\
    \ = false;\n    bool paren_levels_temp_empty_flag37 = false;\n    bool paren_levels_temp_empty_flag38\
    \ = false;\n    bool paren_levels_temp_empty_", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(1);\n    long max_level = 1;\n    for (long i\
    \ = 1; i < paren_levels.size(); i++) {\n        if (paren_levels[i] > max_level)\
    \ {\n            max_level = paren_levels[i];\n        }\n    }\n    for (long\
    \ i = 0; i < paren_levels.size(); i++) {\n        if (paren_levels[i] <= max_level)\
    \ {\n            paren_levels_temp.push_back(paren_levels[i]);\n        }\n  \
    \  }\n    return paren_levels_temp;", "    std::vector<long> paren_levels;\n \
    \   paren_levels.reserve(paren_string.size());\n    std::string current_paren_string\
    \ = paren_string;\n    long current_paren_level = 0;\n    for (size_t i = 0; i\
    \ < paren_string.size(); i++) {\n        if (paren_string[i] == '(') {\n     \
    \       current_paren_level++;\n        } else if (paren_string[i] == ')') {\n\
    \            current_paren_level--;\n        }\n        if (current_paren_level\
    \ == 0) {\n            paren_levels.push_back(current_paren_level);\n        \
    \    current_paren_string = paren_string.substr(i + 1);\n            current_paren_level\
    \ = 0;\n        }\n    }\n    return paren_levels;", "    std::vector<long> result;\n\
    \    long level = 0;\n    bool is_open = false;\n    bool is_closed = false;\n\
    \    bool is_opening_paren = false;\n    bool is_closing_paren = false;\n    bool\
    \ is_opening_curly_bracket = false;\n    bool is_closing_curly_bracket = false;\n\
    \    bool is_opening_square_bracket = false;\n    bool is_closing_square_bracket\
    \ = false;\n    bool is_opening_curly_brace = false;\n    bool is_closing_curly_brace\
    \ = false;\n    bool is_opening_square_brace = false;\n    bool is_closing_square_brace\
    \ = false;\n    bool is_opening_paren_or_curly_bracket = false;\n    bool is_closing_paren_or_curly_bracket\
    \ = false;\n    bool is_opening_paren_or_curly_brace = false;\n    bool is_closing_paren_or_curly_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_bracket = false;\n\
    \    bool is_closing_paren_or_curly_brace_or_square_bracket = false;\n    bool\
    \ is_opening_paren_or_curly_brace_or_square_brace = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_bracket\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_bracket\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_bracket\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_bracket\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_brace\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_brace\
    \ = false;\n    bool is_opening_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_brace_or_curly_bracket\
    \ = false;\n    bool is_closing_paren_or_curly_brace_or_square_brace_or_curly_brace_or_square_bra",
  "    std::vector<long> paren_levels;\n    paren_levels_t paren_levels_t;\n    paren_levels_t.clear();\n\
    \    paren_levels_t.push_back(paren_levels);\n    paren_levels_t paren_levels_t1;\n\
    \    paren_levels_t1.clear();\n    paren_levels_t1.push_back(paren_levels_t);\n\
    \    paren_levels_t paren_levels_t2;\n    paren_levels_t2.clear();\n    paren_levels_t2.push_back(paren_levels_t1);\n\
    \    paren_levels_t paren_levels_t3;\n    paren_levels_t3.clear();\n    paren_levels_t3.push_back(paren_levels_t2);\n\
    \    paren_levels_t paren_levels_t4;\n    paren_levels_t4.clear();\n    paren_levels_t4.push_back(paren_levels_t3);\n\
    \    paren_levels_t paren_levels_t5;\n    paren_levels_t5.clear();\n    paren_levels_t5.push_back(paren_levels_t4);\n\
    \    paren_levels_t paren_levels_t6;\n    paren_levels_t6.clear();\n    paren_levels_t6.push_back(paren_levels_t5);\n\
    \    paren_levels_t paren_levels_t7;\n    paren_levels_t7.clear();\n    paren_levels_t7.push_back(paren_levels_t6);\n\
    \    paren_levels_t paren_levels_t8;\n    paren_levels_t8.clear();\n    paren_levels_t8.push_back(paren_levels_t7);\n\
    \    paren_levels_t paren_levels_t9;\n    paren_levels_t9.clear();\n    paren_levels_t9.push_back(paren_levels_t8);\n\
    \    paren_levels_t paren_levels_t10;\n    paren_levels_t10.clear();\n    paren_levels_t10.push_back(paren_levels_t9);\n\
    \    paren_levels_t paren_levels_t11;\n    paren_levels_t11.clear();\n    paren_levels_t11.push_back(paren_levels_t10);\n\
    \    paren_levels_t paren_levels_t12;\n    paren_levels_t12.clear();\n    paren_levels_t12.push_back(paren_levels_t11);\n\
    \    paren_levels_t paren_levels_t13;\n    paren_levels_t13.clear();\n    paren_levels_t13.push_back(paren",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n\
    \    size_t paren_level = 0;\n    size_t paren_level_count = 0;\n    size_t paren_level_length\
    \ = 0;\n    size_t paren_level_start = 0;\n    size_t paren_level_end = 0;\n \
    \   size_t paren_level_end_count = 0;\n    size_t paren_level_end_length = 0;\n\
    \    size_t paren_level_end_start = 0;\n    size_t paren_level_end_end = 0;\n\
    \    size_t paren_level_end_end_count = 0;\n    size_t paren_level_end_end_length\
    \ = 0;\n    size_t paren_level_end_end_start = 0;\n    size_t paren_level_end_end_end\
    \ = 0;\n    size_t paren_level_end_end_end_count = 0;\n    size_t paren_level_end_end_end_length\
    \ = 0;\n    size_t paren_level_end_end_end_start = 0;\n    size_t paren_level_end_end_end_end\
    \ = 0;\n    size_t paren_level_end_end_end_end_count = 0;\n    size_t paren_level_end_end_end_end_length\
    \ = 0;\n    size_t paren_level_end_end_end_end_start = 0;\n    size_t paren_level_end_end_end_end_end\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_count = 0;\n    size_t paren_level_end_end_end_end_end_length\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_start = 0;\n    size_t paren_level_end_end_end_end_end_end\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_end_count = 0;\n    size_t\
    \ paren_level_end_end_end_end_end_end_length = 0;\n    size_t paren_level_end_end_end_end_end_end_start\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_end_end = 0;\n    size_t paren_level_end_end_end_end_end_end_end_count\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_end_length = 0;\n    size_t\
    \ paren_level_end_end_end_end_end_end_start = 0;\n    size_t paren_level_end_end_end_end_end_end_end\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_end_end_count = 0;\n    size_t\
    \ paren_level_end_end_end_end_end_end_length = 0;\n    size_t paren_level_end_end_end_end_end_end_end_start\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_end_end_end = 0;\n    size_t\
    \ paren_level_end_end_end_end_end_end_end_count = 0;\n    size_t paren_level_end_end_end_end_end_end_length\
    \ = 0;\n    size_t paren_level_end_end_end_end_end_end_start = 0;\n    size_t\
    \ paren_level_end_end_end_end_end_end_end = 0;\n    size_t paren_level_end_end_end_end_end_end_end_count\
    \ = 0;\n    size_t paren", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_level++;\n        } else if (c == ')') {\n       \
    \     paren_level--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> levels;\n    std::string\
    \ paren_level;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n     \
    \   if (paren_string[i] == '(') {\n            paren_level = paren_string.substr(0,\
    \ i);\n            levels[levels.size() - 1]++;\n        } else if (paren_string[i]\
    \ == ')') {\n            levels[levels.size() - 1]--;\n            if (levels[levels.size()\
    \ - 1] == 0) {\n                levels.push_back(levels.size() - 1);\n       \
    \     }\n        }\n    }\n    return levels;", "  std::vector<long> paren_levels;\n\
    \  paren_levels.reserve(paren_string.size());\n  for (auto &c : paren_string)\
    \ {\n    if (c == '(') {\n      paren_levels.push_back(1);\n    } else if (c ==\
    \ ')') {\n      paren_levels.back()--;\n    }\n  }\n  return paren_levels;", " \
    \   std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n    long\
    \ paren_level = 0;\n    long paren_level_counter = 0;\n    long paren_level_counter2\
    \ = 0;\n    long paren_level_counter3 = 0;\n    long paren_level_counter4 = 0;\n\
    \    long paren_level_counter5 = 0;\n    long paren_level_counter6 = 0;\n    long\
    \ paren_level_counter7 = 0;\n    long paren_level_counter8 = 0;\n    long paren_level_counter9\
    \ = 0;\n    long paren_level_counter10 = 0;\n    long paren_level_counter11 =\
    \ 0;\n    long paren_level_counter12 = 0;\n    long paren_level_counter13 = 0;\n\
    \    long paren_level_counter14 = 0;\n    long paren_level_counter15 = 0;\n  \
    \  long paren_level_counter16 = 0;\n    long paren_level_counter17 = 0;\n    long\
    \ paren_level_counter18 = 0;\n    long paren_level_counter19 = 0;\n    long paren_level_counter20\
    \ = 0;\n    long paren_level_counter21 = 0;\n    long paren_level_counter22 =\
    \ 0;\n    long paren_level_counter23 = 0;\n    long paren_level_counter24 = 0;\n\
    \    long paren_level_counter25 = 0;\n    long paren_level_counter26 = 0;\n  \
    \  long paren_level_counter27 = 0;\n    long paren_level_counter28 = 0;\n    long\
    \ paren_level_counter29 = 0;\n    long paren_level_counter30 = 0;\n    long paren_level_counter31\
    \ = 0;\n    long paren_level_counter32 = 0;\n    long paren_level_counter33 =\
    \ 0;\n    long paren_level_counter34 = 0;\n    long paren_level_counter35 = 0;\n\
    \    long paren_level_counter36 = 0;\n    long paren_level_counter37 = 0;\n  \
    \  long paren_level_counter38 = 0;\n    long paren_level_counter39 = 0;\n    long\
    \ paren_level_counter40 = 0;\n    long paren_level_counter41 = 0;\n    long paren_level_counter42\
    \ = 0;\n    long paren_level_counter43 = 0;\n    long paren_level_counter44 =\
    \ 0;\n    long paren_level_counter45 = 0;\n    long paren_level_counter46 = 0;\n\
    \    long paren_level_counter47 = 0;\n    long paren_level_counter48 = 0;\n  \
    \  long paren_level_counter49 = 0;\n    long paren_level_counter50 = 0;\n    long\
    \ paren_level_counter51 = 0;\n    long paren_level_counter52 = 0;\n    long paren_level_counter53\
    \ = 0;\n    long paren_level_counter54 = 0;\n    long paren_level_counter55 =\
    \ 0;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    long paren_level_count = 0;\n    for (auto &c\
    \ : paren_string) {\n        if (c == '(') {\n            paren_level++;\n   \
    \         paren_level_count++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \            paren_level_count--;\n        }\n        paren_levels.push_back(paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ paren_level = 0;\n    std::string paren_level_string;\n    std::string paren_level_char;\n\
    \    for (auto c : paren_string) {\n        if (c == '(') {\n            paren_level_string\
    \ = paren_level_string.empty() ? c : paren_level_string;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren_level_string = paren_level_string + c;\n           \
    \ paren_level_string = paren_level_string + c;\n            paren_level_string\
    \ = paren_level_string + c;\n            paren_level_string = paren_level_string\
    \ + c;\n            paren", "    std::vector<long> paren_levels;\n    long level\
    \ = 0;\n    long paren_level = 0;\n    bool is_open = false;\n    bool is_closed\
    \ = false;\n    long paren_level_count = 0;\n    long paren_level_count_max =\
    \ 0;\n    long paren_level_count_current = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren_level_count_current_min = 0;\n    long paren_level_count_current_max\
    \ = 0;\n    long paren", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    std::string current_paren_level;\n    bool is_first_paren = true;\n    for\
    \ (auto c : paren_string) {\n        if (is_first_paren) {\n            current_paren_level\
    \ = c;\n            is_first_paren = false;\n        } else {\n            if\
    \ (c == ')') {\n                paren_levels.push_back(std::stoi(current_paren_level));\n\
    \                current_paren_level = \"\";\n            } else {\n         \
    \       current_paren_level += c;\n            }\n        }\n    }\n    if (current_paren_level\
    \ != \"\") {\n        paren_levels.push_back(std::stoi(current_paren_level));\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ paren_level = 0;\n    bool is_first_paren = true;\n    bool is_last_paren =\
    \ true;\n    long paren_level_count = 0;\n    for (auto c : paren_string) {\n\
    \        if (c == '(') {\n            if (is_first_paren) {\n                is_first_paren\
    \ = false;\n                paren_level_count++;\n            } else {\n     \
    \           paren_level_count--;\n            }\n        } else if (c == ')')\
    \ {\n            if (is_last_paren) {\n                is_last_paren = false;\n\
    \                paren_level_count++;\n            } else {\n                paren_level_count--;\n\
    \            }\n        } else if (c == ' ') {\n            if (is_first_paren)\
    \ {\n                is_first_paren = false;\n                paren_level_count++;\n\
    \            } else if (is_last_paren) {\n                is_last_paren = false;\n\
    \                paren_level_count++;\n            } else {\n                paren_level_count--;\n\
    \            }\n        } else if (c == '(' || c == '[' || c == '{') {\n     \
    \       if (paren_level_count == 0) {\n                paren_level_count++;\n\
    \            }\n        } else if (c == ')' || c == ']' || c == '}') {\n     \
    \       if (paren_level_count == 0) {\n                paren_level_count--;\n\
    \            }\n        }\n        paren_levels[paren_level] = paren_level_count;\n\
    \        paren_level++;\n    }\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    std::string paren_level = \"\";\n    long paren_level_count\
    \ = 0;\n    for (char c : paren_string) {\n        if (c == '(') {\n         \
    \   paren_level_count++;\n            paren_level += c;\n        } else if (c\
    \ == ')') {\n            paren_level_count--;\n            paren_level += c;\n\
    \        } else if (c == ' ') {\n            if (paren_level_count == 0) {\n \
    \               paren_level_count++;\n                paren_level += c;\n    \
    \        } else {\n                paren_level_count--;\n                paren_level\
    \ += c;\n            }\n        } else {\n            paren_level += c;\n    \
    \    }\n    }\n    paren_level_count = 0;\n    for (char c : paren_level) {\n\
    \        if (c == '(') {\n            paren_level_count++;\n        } else if\
    \ (c == ')') {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (char c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (char c : paren_level)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (char c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (char c : paren_level)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (char c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (char c : paren_level)\
    \ {\n        if (c == '(') {\n            paren_level_count++;\n        } else\
    \ if (c == ')') {\n            paren_level_count--;\n        }\n    }\n    paren_level_count\
    \ = 0;\n    for (char c : paren_level) {\n        if (c == '(') {\n          \
    \  paren_level_count++;\n        } else if (c == ')') {\n            paren_level_count--;\n\
    \        }\n    }\n    paren_level_count = 0;\n    for (char c : paren_level)\
    \ {\n        if (c == '(') {\n            paren", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.split(\" \");\n    std::vector<long> paren_levels_temp;\n\
    \    paren_levels_temp.push_back(paren_levels.size());\n    for (long i = 0; i\
    \ < paren_levels.size(); i++) {\n        if (paren_levels[i] == \"(\") {\n   \
    \         paren_levels_temp.push_back(i);\n        } else if (paren_levels[i]\
    \ == \")\") {\n            long paren_levels_size = paren_levels_temp.back();\n\
    \            long paren_levels_size = paren_levels_size - 1;\n            long\
    \ paren_levels_size = paren_levels_size - 1;\n            paren_levels_temp.push_back(paren_levels_size);\n\
    \        }\n    }\n    return paren_levels_temp;", "    std::vector<long> paren_levels;\n\
    \    std::string current_paren_string = paren_string;\n    long current_paren_level\
    \ = 0;\n    bool is_open = false;\n    while (current_paren_string != \"\") {\n\
    \        if (current_paren_string.find(\"(\") != std::string::npos) {\n      \
    \      is_open = true;\n            current_paren_level++;\n        }\n      \
    \  if (current_paren_string.find(\")\") != std::string::npos) {\n            is_open\
    \ = false;\n            current_paren_level--;\n        }\n        if (is_open)\
    \ {\n            current_paren_string = current_paren_string.substr(0, current_paren_string.find(\"\
    )\"));\n        } else {\n            current_paren_string = current_paren_string.substr(0,\
    \ current_paren_string.find(\"(\"));\n        }\n        paren_levels.push_back(current_paren_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> result;\n    std::string\
    \ curr_paren_string = paren_string;\n    long level = 0;\n    while (curr_paren_string.size()\
    \ > 0) {\n        auto pos = curr_paren_string.find(\"(\");\n        if (pos ==\
    \ std::string::npos) {\n            result.push_back(level);\n            break;\n\
    \        }\n        auto end_pos = curr_paren_string.find(\")\", pos + 1);\n \
    \       if (end_pos == std::string::npos) {\n            result.push_back(level);\n\
    \            break;\n        }\n        curr_paren_string = curr_paren_string.substr(pos\
    \ + 1, end_pos - pos + 1);\n        level++;\n    }\n    return result;", "  std::vector<long>\
    \ paren_levels;\n  paren_levels.reserve(paren_string.size());\n  long level =\
    \ 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n      paren_levels.push_back(level);\n\
    \      level++;\n    } else if (c == ')') {\n      level--;\n    }\n  }\n  assert(paren_levels.size()\
    \ == paren_string.size());\n  return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels = paren_string.substr(0, paren_string.find_first_of(\"()\")).split(\"\
    ()\");\n    std::vector<long> paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n\
    \    for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    long max_level = 0;\n    for (long i = 0; i < paren_levels_temp.size();\
    \ i++) {\n        long level_of_nesting = paren_levels_temp[i].size();\n     \
    \   if (level_of_nesting > max_level) {\n            max_level = level_of_nesting;\n\
    \        }\n    }\n    std::vector<long> paren_levels_temp2;\n    paren_levels_temp2.reserve(paren_levels_temp.size());\n\
    \    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        paren_levels_temp2.push_back(max_level);\n\
    \    }\n    for (long i = 0; i < paren_levels_temp.size(); i++) {\n        for\
    \ (long j = 0; j < paren_levels_temp[i].size(); j++) {\n            paren_levels_temp2[i][j]\
    \ = paren_levels_temp[i][j];\n        }\n    }\n    return paren_levels_temp2;",
  "    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.substr(0, paren_string.find_first_of('(')).split(' ');\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.reserve(paren_levels.size());\n  \
    \  for (long i = 0; i < paren_levels.size(); i++) {\n        paren_levels_temp.push_back(paren_levels[i]);\n\
    \    }\n    long paren_levels_size = paren_levels_temp.size();\n    long paren_levels_max_size\
    \ = paren_levels_temp[paren_levels_size - 1];\n    long paren_levels_max_size2\
    \ = paren_levels_temp[paren_levels_size - 2];\n    long paren_levels_max_size3\
    \ = paren_levels_temp[paren_levels_size - 3];\n    long paren_levels_max_size4\
    \ = paren_levels_temp[paren_levels_size - 4];\n    long paren_levels_max_size5\
    \ = paren_levels_temp[paren_levels_size - 5];\n    long paren_levels_max_size6\
    \ = paren_levels_temp[paren_levels_size - 6];\n    long paren_levels_max_size7\
    \ = paren_levels_temp[paren_levels_size - 7];\n    long paren_levels_max_size8\
    \ = paren_levels_temp[paren_levels_size - 8];\n    long paren_levels_max_size9\
    \ = paren_levels_temp[paren_levels_size - 9];\n    long paren_levels_max_size10\
    \ = paren_levels_temp[paren_levels_size - 10];\n    long paren_levels_max_size11\
    \ = paren_levels_temp[paren_levels_size - 11];\n    long paren_levels_max_size12\
    \ = paren_levels_temp[paren_levels_size - 12];\n    long paren_levels_max_size13\
    \ = paren_levels_temp[paren_levels_size - 13];\n    long paren_levels_max_size14\
    \ = paren_levels_temp[paren_levels_size - 14];\n    long paren_levels_max_size15\
    \ = paren_levels_temp[paren_levels_size - 15];\n    long paren_levels_max_size16\
    \ = paren_levels_temp[paren_levels_size - 16];\n    long paren_levels_max_size17\
    \ = paren_levels_temp[paren_levels_size - 17];\n    long paren_levels_max_size18\
    \ = paren_levels_temp[paren_levels_size - 18];", "    std::vector<long> paren_levels;\n\
    \    std::vector<long> paren_levels_temp;\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n\
    \    paren_levels_temp.push_back(0);\n    paren_levels_temp.push_back(0);\n  \
    \  paren_levels_temp.push_back(0);\n    paren_levels_temp.", "  std::vector<long>\
    \ paren_levels;\n  paren_levels.reserve(paren_string.size());\n  long current_level\
    \ = 0;\n  long paren_level = 0;\n  for (char c : paren_string) {\n    if (c ==\
    \ '(') {\n      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n\
    \    }\n    if (paren_level == current_level) {\n      paren_levels.push_back(paren_level);\n\
    \    }\n    current_level = paren_level;\n  }\n  return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    long current_level = 0;\n    bool is_open = false;\n    for\
    \ (auto c : paren_string) {\n        if (c == '(') {\n            is_open = true;\n\
    \            current_level++;\n        } else if (c == ')') {\n            is_open\
    \ = false;\n            current_level--;\n        }\n        if (is_open) {\n\
    \            paren_levels.push_back(current_level);\n        }\n    }\n    return\
    \ paren_levels;", "  std::vector<long> paren_levels;\n  paren_levels = paren_string.split(\"\
    \ \");\n  long max_level = 0;\n  for (long i = 0; i < paren_levels.size(); i++)\
    \ {\n    if (paren_levels[i] > max_level) {\n      max_level = paren_levels[i];\n\
    \    }\n  }\n  std::vector<long> result;\n  result.push_back(max_level);\n  return\
    \ result;", "    std::vector<long> paren_levels;\n    std::string current_paren_string\
    \ = paren_string;\n    long current_paren_level = 0;\n    long paren_level_counter\
    \ = 0;\n    bool is_first_paren = true;\n    while (true) {\n        if (current_paren_string\
    \ == \"()\") {\n            paren_levels[paren_level_counter] = current_paren_level;\n\
    \            paren_level_counter++;\n            current_paren_string = \"\";\n\
    \            current_paren_level = 0;\n            is_first_paren = true;\n  \
    \      } else if (current_paren_string == \"(\") {\n            if (is_first_paren)\
    \ {\n                is_first_paren = false;\n            } else {\n         \
    \       current_paren_level++;\n            }\n            current_paren_string\
    \ = \"\";\n        } else if (current_paren_string == \")\") {\n            if\
    \ (is_first_paren) {\n                is_first_paren = false;\n            } else\
    \ {\n                current_paren_level--;\n            }\n            current_paren_string\
    \ = \"\";\n        } else {\n            current_paren_string += current_paren_string;\n\
    \        }\n        if (current_paren_level == 0) {\n            break;\n    \
    \    }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n    }\n    paren_levels.push_back(paren_level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    long current_level = 0;\n    long max_level\
    \ = 0;\n    bool is_open = false;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            is_open = true;\n            current_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            current_level--;\n\
    \        } else if (is_open) {\n            current_level++;\n            if (current_level\
    \ > max_level) {\n                max_level = current_level;\n            }\n\
    \        }\n    }\n    paren_levels.push_back(max_level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long paren_level\
    \ = 0;\n    bool paren_open = false;\n    bool paren_close = false;\n    bool\
    \ paren_opening_paren = false;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     paren_opening_paren = true;\n            paren_open = true;\n          \
    \  paren_level++;\n        }\n        else if (c == ')') {\n            paren_opening_paren\
    \ = false;\n            paren_close = true;\n            paren_level--;\n    \
    \    }\n        else if (c == ' ') {\n            if (paren_opening_paren) {\n\
    \                paren_level++;\n            }\n            else if (paren_close)\
    \ {\n                paren_level--;\n            }\n        }\n        else if\
    \ (paren_opening_paren) {\n            paren_open = false;\n        }\n      \
    \  paren_levels.push_back(paren_level);\n    }\n    return paren_levels;", " \
    \   std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (char c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;"]
stop_tokens:
- "\n}"
