name: HumanEval_81_numerical_letter_grade
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the\
  \ semester and the teacher has to give the grades\n// to students. The teacher has\
  \ been making her own algorithm for grading.\n// The only problem is, she has lost\
  \ the code she used for grading.\n// She has given you a vector of GPAs for some\
  \ students and you have to write \n// a function that can output a vector of letter\
  \ grades using the following table:\n// GPA       |    Letter grade\n// 4.0    \
  \            A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0\
  \                B+\n// > 2.7                B \n// > 2.3                B-\n//\
  \ > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n\
  // > 1.0                D+ \n// > 0.7                D \n// > 0.0              \
  \  D-\n// 0.0                E\n// Example:\n// >>> grade_equation((std::vector<float>({(float)4.0,\
  \ (float)3, (float)1.7, (float)2, (float)3.5})))\n// (std::vector<std::string>({(std::string)\"\
  A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
  A-\"}))\nstd::vector<std::string> numerical_letter_grade(std::vector<float> grades)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({(float)4.0,\
  \ (float)3, (float)1.7, (float)2, (float)3.5}))) == (std::vector<std::string>({(std::string)\"\
  A+\", (std::string)\"B\", (std::string)\"C-\", (std::string)\"C\", (std::string)\"\
  A-\"})));\n    assert(candidate((std::vector<float>({(float)1.2}))) == (std::vector<std::string>({(std::string)\"\
  D+\"})));\n    assert(candidate((std::vector<float>({(float)0.5}))) == (std::vector<std::string>({(std::string)\"\
  D-\"})));\n    assert(candidate((std::vector<float>({(float)0.0}))) == (std::vector<std::string>({(std::string)\"\
  E\"})));\n    assert(candidate((std::vector<float>({(float)1.0, (float)0.3, (float)1.5,\
  \ (float)2.8, (float)3.3}))) == (std::vector<std::string>({(std::string)\"D\", (std::string)\"\
  D-\", (std::string)\"C-\", (std::string)\"B\", (std::string)\"B+\"})));\n    assert(candidate((std::vector<float>({(float)0.0,\
  \ (float)0.7}))) == (std::vector<std::string>({(std::string)\"E\", (std::string)\"\
  D-\"})));\n}\n"
completions: ["    std::vector<std::string> letter_grades;\n    for (float g : grades)\
    \ {\n        if (g > 3.0) {\n            letter_grades.push_back(\"C+\");\n  \
    \      } else if (g > 2.7) {\n            letter_grades.push_back(\"C\");\n  \
    \      } else if (g > 2.3) {\n            letter_grades.push_back(\"B-\");\n \
    \       } else if (g > 2.0) {\n            letter_grades.push_back(\"B-\");\n\
    \        } else if (g > 1.7) {\n            letter_grades.push_back(\"C\");\n\
    \        } else if (g > 1.3) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if (g > 1.0) {\n            letter_grades.push_back(\"D+\");\n\
    \        } else if (g > 0.7) {\n            letter_grades.push_back(\"D\");\n\
    \        } else if (g > 0.0) {\n            letter_grades.push_back(\"D-\");\n\
    \        } else {\n            letter_grades.push_back(\"E\");\n        }\n  \
    \  }\n    return letter_grades;", '    // Your code goes here', "    std::vector<std::string>\
    \ letter_grades;\n    float sum = 0;\n    for (float grade : grades) {\n     \
    \   sum += grade;\n    }\n    float average = sum / grades.size();\n    float\
    \ standard_deviation = 0;\n    for (float grade : grades) {\n        standard_deviation\
    \ += pow(grade - average, 2);\n    }\n    float variance = standard_deviation\
    \ / grades.size();\n    float standard_deviation_of_grades = 0;\n    for (float\
    \ grade : grades) {\n        standard_deviation_of_grades += pow(grade - average,\
    \ 2);\n    }\n    float variance_of_grades = standard_deviation_of_grades / grades.size();\n\
    \    float standard_deviation_of_grades_squared = 0;\n    for (float grade : grades)\
    \ {\n        standard_deviation_of_grades_squared += pow(grade - average, 2);\n\
    \    }\n    float variance_of_grades_squared = standard_deviation_of_grades_squared\
    \ / grades.size();\n    float standard_deviation_of_grades_cubed = variance_of_grades_squared\
    \ * variance_of_grades;\n    float variance_of_grades_cubed = standard_deviation_of_grades_squared\
    \ * variance_of_grades;\n    float standard_deviation_of_grades_cubed_squared\
    \ = variance_of_grades_cubed * variance_of_grades_squared;\n    float variance_of_grades_cubed_squared\
    \ = standard_deviation_of_grades_squared * variance_of_grades_squared;\n    float\
    \ standard_deviation_of_grades_cubed_cubed = variance_of_grades_cubed_squared\
    \ * variance_of_grades_cubed;\n    float variance_of_grades_cubed_cubed = standard_deviation_of_grades_squared\
    \ * variance_of_grades_cubed;\n    float standard_deviation_of_grades_cubed_cubed_squared\
    \ = variance_of_grades_cubed_cubed * variance_of_grades_cubed_squared;\n    float\
    \ variance_of_grades_cubed_cubed_squared = standard_deviation_of_grades_squared\
    \ * variance_of_grades_cubed_squared;\n    float standard_deviation_of_grades_cubed_cubed_cubed\
    \ = variance_of_grades_cubed_cubed_squared * variance_of_grades_cubed_cubed;\n\
    \    float variance_of_grades_cubed_cubed_cubed = standard_deviation_of_grades_squared\
    \ * variance_of_grades_cubed_cubed;\n    float standard_deviation_of_grades_cubed_cubed_cubed_squared\
    \ = variance_of_grades_cubed_cubed_cubed * variance_of_grades_cubed_cubed_squared;\n\
    \    float variance_of_", "    // Your code goes here\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"A+\");\n        } else if(grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A\");\n        } else if(grades[i]\
    \ >= 3.7) {\n            letter_grades.push_back(\"A-\");\n        } else if(grades[i]\
    \ >= 4.0) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 4.3) {\n            letter_grades.push_back(\"B\");\n        } else if(grades[i]\
    \ >= 4.7) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ >= 5.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 5.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 5.7) {\n            letter_grades.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 6.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grades[i]\
    \ >= 6.3) {\n            letter_grades.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 6.7) {\n            letter_grades.push_back(\"D-\");\n        } else if(grades[i]\
    \ >= 7.0) {\n            letter_grades.push_back(\"E\");\n        } else {\n \
    \           letter_grades.push_back(\"F\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> letter_grades;\n    float gpa = grades.front();\n\
    \    float sum = 0;\n    float average = 0;\n    float difference = 0;\n    float\
    \ standard_deviation = 0;\n    float standard_deviation_squared = 0;\n    float\
    \ letter_grade = 0;\n    float letter_grade_squared = 0;\n    float letter_grade_difference\
    \ = 0;\n    float letter_grade_standard_deviation = 0;\n    float letter_grade_standard_deviation_squared\
    \ = 0;\n    float letter_grade_average = 0;\n    float letter_grade_sum = 0;\n\
    \    float letter_grade_gpa = 0;\n    float letter_grade_gpa_sum = 0;\n    float\
    \ letter_grade_gpa_average = 0;\n    float letter_grade_gpa_difference = 0;\n\
    \    float letter_grade_gpa_standard_deviation = 0;\n    float letter_grade_gpa_standard_deviation_squared\
    \ = 0;\n    float letter_grade_gpa_letter_grade = 0;\n    float letter_grade_gpa_letter_grade_squared\
    \ = 0;\n    float letter_grade_gpa_letter_grade_difference = 0;\n    float letter_grade_gpa_letter_grade_standard_deviation\
    \ = 0;\n    float letter_grade_gpa_letter_grade_standard_deviation_squared = 0;\n\
    \    float letter_grade_gpa_letter_grade_average = 0;\n    float letter_grade_gpa_letter_grade_sum\
    \ = 0;\n    float letter_grade_gpa_letter_grade_gpa = 0;\n    float letter_grade_gpa_letter_grade_gpa_sum\
    \ = 0;\n    float letter_grade_gpa_letter_grade_gpa_average = 0;\n    float letter_grade_gpa_letter_grade_gpa_difference\
    \ = 0;\n    float letter_grade_gpa_letter_grade_gpa_standard_deviation = 0;\n\
    \    float letter_grade_gpa_letter_grade_gpa_standard_deviation_squared = 0;\n\
    \    float letter_grade_gpa_letter_grade_gpa_letter_grade = 0;\n    float letter_grade_gpa_letter_grade_gpa_letter_grade_squared\
    \ = 0;\n    float letter_grade_gpa_letter_grade_gpa_letter_grade_difference =\
    \ 0;\n    float letter_grade_gpa_letter_grade_gpa_letter_grade_standard_deviation\
    \ = 0;\n    float letter_grade_gpa_letter_grade_gpa_letter_grade_standard_deviation_squared\
    \ = 0;\n    float letter_grade_gpa_letter_grade_gpa_letter_grade_average = 0;\n\
    \    float letter_grade_gpa_letter_grade_gpa_letter_grade_sum = 0;\n    float\
    \ letter_grade_gpa_letter_grade_gpa_letter_grade_g", "    std::vector<std::string>\
    \ letter_grades;\n    float sum = 0;\n    for (float grade : grades) {\n     \
    \   sum += grade;\n    }\n    float average = sum / grades.size();\n    for (float\
    \ grade : grades) {\n        float grade_to_letter = grade * average / sum;\n\
    \        letter_grades.push_back(std::to_string(grade_to_letter));\n    }\n  \
    \  return letter_grades;", "    std::vector<std::string> letter_grades;\n    assert(grades.size()\
    \ == 12);\n    float sum = 0;\n    for (float grade : grades) {\n        sum +=\
    \ grade;\n    }\n    float average = sum / grades.size();\n    float standard_deviation\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ - 1));\n    float standard_deviation_of_grades = std::sqrt(std::accumulate(grades.begin(),\
    \ grades.end(), 0.0) / (grades.size()));\n    float standard_deviation_of_grades_square\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size()));\n    float standard_deviation_of_grades_square_of_grades\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size()));\n    float standard_deviation_of_grades_square_of_grades_square\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size() * grades.size()));\n    float standard_deviation_of_grades_square_of_grades_square_of_grades\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size() * grades.size() * grades.size()));\n    float standard_deviation_of_grades_square_of_grades_square_of_grades_square\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size() * grades.size() * grades.size() * grades.size()));\n    float\
    \ standard_deviation_of_grades_square_of_grades_square_of_grades_square_of_grades\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size() * grades.size() * grades.size() * grades.size() * grades.size()));\n\
    \    float standard_deviation_of_grades_square_of_grades_square_of_grades_square_of_grades_square\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size() * grades.size() * grades.size() * grades.size() * grades.size()\
    \ * grades.size()));\n    float standard_deviation_of_grades_square_of_grades_square_of_grades_square_of_grades_square_of_grades\
    \ = std::sqrt(std::accumulate(grades.begin(), grades.end(), 0.0) / (grades.size()\
    \ * grades.size() * grades.size() * grades.size() * grades.size() * grades.size()\
    \ * grades.size() * grades.size()));\n    float standard_deviation_of_grades_square_of_grades_square_of_grades_square_of_grades_square_of_",
  "    std::vector<std::string> letter_grades;\n    float sum = 0;\n    for (float\
    \ grade : grades) {\n        sum += grade;\n    }\n    float average = sum / grades.size();\n\
    \    float standard_deviation = 0;\n    for (float grade : grades) {\n       \
    \ standard_deviation += pow(grade - average, 2);\n    }\n    float variance =\
    \ standard_deviation / grades.size();\n    float standard_deviation_of_grade =\
    \ 0;\n    for (float grade : grades) {\n        standard_deviation_of_grade +=\
    \ pow(grade - average, 2);\n    }\n    float standard_deviation_of_grade_divided_by_variance\
    \ = standard_deviation_of_grade / variance;\n    float standard_deviation_of_grade_divided_by_standard_deviation\
    \ = standard_deviation_of_grade / standard_deviation;\n    for (float grade :\
    \ grades) {\n        float standard_deviation_of_grade_divided_by_standard_deviation_plus_one\
    \ = standard_deviation_of_grade / standard_deviation + 1;\n        float standard_deviation_of_grade_divided_by_standard_deviation_minus_one\
    \ = standard_deviation_of_grade / standard_deviation - 1;\n        float standard_deviation_of_grade_divided_by_standard_deviation_plus_two\
    \ = standard_deviation_of_grade / standard_deviation + 2;\n        float standard_deviation_of_grade_divided_by_standard_deviation_minus_two\
    \ = standard_deviation_of_grade / standard_deviation - 2;\n        float standard_deviation_of_grade_divided_by_standard_deviation_plus_three\
    \ = standard_deviation_of_grade / standard_deviation + 3;\n        float standard_deviation_of_grade_divided_by_standard_deviation_minus_three\
    \ = standard_deviation_of_grade / standard_deviation - 3;\n        float standard_deviation_of_grade_divided_by_standard_deviation_plus_four\
    \ = standard_deviation_of_grade / standard_deviation + 4;\n        float standard_deviation_of_grade_divided_by_standard_deviation_minus_four\
    \ = standard_deviation_of_grade / standard_deviation - 4;\n        float standard_deviation_of_grade_divided_by_standard_deviation_plus_five\
    \ = standard_deviation_of_grade / standard_deviation + 5;\n        float standard_deviation_of_grade_divided_by_standard_deviation_minus_five\
    \ = standard_deviation_of_grade / standard_deviation - 5;\n        float standard_deviation_of_grade_divided_by_standard_deviation_plus_six\
    \ = standard_deviation_of_grade / standard_deviation + 6;\n        float standard_devi",
  "    std::vector<std::string> letter_grades;\n    \n    // Write your code here\n\
    \    \n    return letter_grades;", "    // Your code here\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 3.0) {\n            letter_grades.push_back(\"A+\");\n        } else if(grades[i]\
    \ >= 2.7) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ >= 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ >= 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(grades[i]\
    \ >= 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(grades[i]\
    \ >= 0.0) {\n            letter_grades.push_back(\"D-\");\n        } else {\n\
    \            letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> letter_grades;\n    for(int i = 0; i < grades.size();\
    \ i++) {\n        if(grades[i] >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if(grades[i] >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grades[i] >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if(grades[i] >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grades[i] >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grades[i] >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if(grades[i] >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grades[i] >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grades[i] >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if(grades[i] >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grades[i] >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(grades[i] >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    for(float grade : grades) {\n        if(grade > 3.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 2.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 2.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 2.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 1.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 1.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.7) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade > 0.0) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else ", "    std::vector<std::string> letter_grades;\n    for(float\
    \ g : grades) {\n        if(g > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(g > 2.7) {\n            letter_grades.push_back(\"B\"\
    );\n        } else if(g > 2.3) {\n            letter_grades.push_back(\"B-\");\n\
    \        } else if(g > 2.0) {\n            letter_grades.push_back(\"C+\");\n\
    \        } else if(g > 1.7) {\n            letter_grades.push_back(\"C\");\n \
    \       } else if(g > 1.3) {\n            letter_grades.push_back(\"C-\");\n \
    \       } else if(g > 1.0) {\n            letter_grades.push_back(\"D+\");\n \
    \       } else if(g > 0.7) {\n            letter_grades.push_back(\"D\");\n  \
    \      } else if(g > 0.0) {\n            letter_grades.push_back(\"D-\");\n  \
    \      } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n\
    \    return letter_grades;", "    std::vector<std::string> letter_grades;\n  \
    \  float sum = 0;\n    for(float grade : grades) {\n        sum += grade;\n  \
    \  }\n    float average = sum / grades.size();\n    for(float grade : grades)\
    \ {\n        float difference = grade - average;\n        if(difference < 0) {\n\
    \            letter_grades.push_back(std::string(\"D-\"));\n        } else if(difference\
    \ < -0.7) {\n            letter_grades.push_back(std::string(\"D-\"));\n     \
    \   } else if(difference < -0.3) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < -0.1) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 0.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 0.1) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 0.3) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 0.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 1.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 1.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 2.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 3.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 3.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 4.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 4.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 5.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 5.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 6.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 6.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 7.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 7.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 8.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 8.7) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else if(difference < 9.0) {\n            letter_grades.", " \
    \   // Your code goes here\n    std::vector<std::string> letter_grades;\n    for(int\
    \ i=0;i<grades.size();i++){\n        if(grades[i]>3.0){\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(grades[i]>2.7){\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if(grades[i]>2.3){\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if(grades[i]>2.0){\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(grades[i]>1.7){\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if(grades[i]>1.3){\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(grades[i]>1.0){\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if(grades[i]>0.7){\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if(grades[i]>0.0){\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else{\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    for(float g : grades) {\n        if(g > 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(g > 2.7) {\n            letter_grades.push_back(\"B\"\
    );\n        } else if(g > 2.3) {\n            letter_grades.push_back(\"B-\");\n\
    \        } else if(g > 2.0) {\n            letter_grades.push_back(\"C+\");\n\
    \        } else if(g > 1.7) {\n            letter_grades.push_back(\"C\");\n \
    \       } else if(g > 1.3) {\n            letter_grades.push_back(\"C-\");\n \
    \       } else if(g > 1.0) {\n            letter_grades.push_back(\"D+\");\n \
    \       } else if(g > 0.7) {\n            letter_grades.push_back(\"D\");\n  \
    \      } else if(g > 0.0) {\n            letter_grades.push_back(\"D-\");\n  \
    \      } else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n\
    \    return letter_grades;", "    // Your code goes here\n    std::vector<std::string>\
    \ letter_grades;\n    for(int i=0;i<grades.size();i++){\n        if(grades[i]>=4.0&&grades[i]<=4.9){\n\
    \            letter_grades.push_back(\"A+\");\n        }\n        else if(grades[i]>=3.7&&grades[i]<=4.0){\n\
    \            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i]>=3.3&&grades[i]<=3.7){\n\
    \            letter_grades.push_back(\"A-\");\n        }\n        else if(grades[i]>=3.0&&grades[i]<=3.3){\n\
    \            letter_grades.push_back(\"B+\");\n        }\n        else if(grades[i]>=2.7&&grades[i]<=3.0){\n\
    \            letter_grades.push_back(\"B\");\n        }\n        else if(grades[i]>=2.3&&grades[i]<=2.7){\n\
    \            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i]>=2.0&&grades[i]<=2.3){\n\
    \            letter_grades.push_back(\"C+\");\n        }\n        else if(grades[i]>=1.7&&grades[i]<=2.0){\n\
    \            letter_grades.push_back(\"C\");\n        }\n        else if(grades[i]>=1.3&&grades[i]<=1.7){\n\
    \            letter_grades.push_back(\"C-\");\n        }\n        else if(grades[i]>=1.0&&grades[i]<=1.3){\n\
    \            letter_grades.push_back(\"D+\");\n        }\n        else if(grades[i]>=0.7&&grades[i]<=1.0){\n\
    \            letter_grades.push_back(\"D\");\n        }\n        else if(grades[i]>=0.0&&grades[i]<=0.7){\n\
    \            letter_grades.push_back(\"D-\");\n        }\n        else if(grades[i]>=0.0&&grades[i]<=1.0){\n\
    \            letter_grades.push_back(\"E\");\n        }\n        else{\n     \
    \       letter_grades.push_back(\"F\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> letter_grades;\n    for(float g : grades) {\n    \
    \    if(g > 3.0) {\n            letter_grades.push_back(\"B+\");\n        } else\
    \ if(g > 2.7) {\n            letter_grades.push_back(\"B\");\n        } else if(g\
    \ > 2.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(g\
    \ > 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(g\
    \ > 1.7) {\n            letter_grades.push_back(\"C\");\n        } else if(g >\
    \ 1.3) {\n            letter_grades.push_back(\"C-\");\n        } else if(g >\
    \ 1.0) {\n            letter_grades.push_back(\"D+\");\n        } else if(g >\
    \ 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if(g > 0.0)\
    \ {\n            letter_grades.push_back(\"D-\");\n        } else {\n        \
    \    letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> letter_grades;\n    for(float grade : grades) {\n\
    \        if(grade >= 3.0) {\n            letter_grades.push_back(std::string(\"\
    A+\"));\n        } else if(grade >= 2.7) {\n            letter_grades.push_back(std::string(\"\
    B+\"));\n        } else if(grade >= 2.3) {\n            letter_grades.push_back(std::string(\"\
    B-\"));\n        } else if(grade >= 2.0) {\n            letter_grades.push_back(std::string(\"\
    C+\"));\n        } else if(grade >= 1.7) {\n            letter_grades.push_back(std::string(\"\
    C\"));\n        } else if(grade >= 1.3) {\n            letter_grades.push_back(std::string(\"\
    C-\"));\n        } else if(grade >= 1.0) {\n            letter_grades.push_back(std::string(\"\
    D+\"));\n        } else if(grade >= 0.7) {\n            letter_grades.push_back(std::string(\"\
    D\"));\n        } else if(grade >= 0.0) {\n            letter_grades.push_back(std::string(\"\
    D-\"));\n        } else {\n            letter_grades.push_back(std::string(\"\
    E\"));\n        }\n    }\n    return letter_grades;", "    // Your code goes here\n\
    \    std::vector<std::string> letter_grades;\n    for (float g : grades) {\n \
    \       if (g >= 3.0) {\n            letter_grades.push_back(\"A+\");\n      \
    \  } else if (g >= 2.7) {\n            letter_grades.push_back(\"B+\");\n    \
    \    } else if (g >= 2.3) {\n            letter_grades.push_back(\"B-\");\n  \
    \      } else if (g >= 2.0) {\n            letter_grades.push_back(\"C+\");\n\
    \        } else if (g >= 1.7) {\n            letter_grades.push_back(\"C\");\n\
    \        } else if (g >= 1.3) {\n            letter_grades.push_back(\"C-\");\n\
    \        } else if (g >= 1.0) {\n            letter_grades.push_back(\"D+\");\n\
    \        } else if (g >= 0.7) {\n            letter_grades.push_back(\"D\");\n\
    \        } else if (g >= 0.0) {\n            letter_grades.push_back(\"D-\");\n\
    \        } else {\n            letter_grades.push_back(\"E\");\n        }\n  \
    \  }\n    return letter_grades;"]
stop_tokens:
- "\n}"
