name: HumanEval_141_file_name_check
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes\
  \ a string representing a file's name, and returns\n// 'Yes' if the the file's name\
  \ is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid\
  \ if and only if all the following conditions \n// are met:\n// - There should not\
  \ be more than three digits ('0'-'9') in the file's name.\n// - The file's name\
  \ contains exactly one dot '.'\n// - The substring before the dot should not be\
  \ empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  // Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"\
  1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
  example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
  No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
  K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
  ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
  _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
  \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
  this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
  )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n\
  \    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
  @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
  )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
  I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"\
  Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
  1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) ==\
  \ (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"\
  final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"\
  No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"\
  s.\")) == (\"No\"));\n}\n"
completions: ["    // Your code here\n    \n    std::string file_name_check;\n   \
    \ \n    if (file_name.size() > 3 || file_name.find(\".\") == 0 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z' || file_name.substr(file_name.find_last_of(\"\
    .\") + 1) != \"txt\" || file_name.substr(file_name.find_last_of(\".\") + 1) !=\
    \ \"exe\" || file_name.substr(file_name.find_last_of(\".\") + 1) != \"dll\") {\n\
    \        file_name_check = \"No\";\n    } else {\n        file_name_check = \"\
    Yes\";\n    }\n    \n    return file_name_check;", "    // Your code here\n  \
    \  \n    // Write your code here\n    \n    return \"\";", "    // Your code here\n\
    \    std::string file_extension = file_name.substr(file_name.find_last_of(\".\"\
    ) + 1);\n    if (file_name.find_last_of(\".\") > 0) {\n        if (file_name.find_last_of(\"\
    .\") > 3) {\n            return \"No\";\n        }\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    abcdefghijklmnopqrstuvwxyz\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .txt\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .exe\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .dll\") == 0) {\n        return \"No\";\n    }\n    if (file_extension == \"txt\"\
    ) {\n        return \"Yes\";\n    }\n    if (file_extension == \"exe\") {\n  \
    \      return \"Yes\";\n    }\n    if (file_extension == \"dll\") {\n        return\
    \ \"Yes\";\n    }\n    return \"No\";", "    // Your code goes here\n    int count\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if(count > 3) {\n        return \"No\";\n    }\n    else if(file_name.find(\"\
    .\") == -1) {\n        return \"No\";\n    }\n    else if(file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    else if(file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code goes\
    \ here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1); \n    std::string file_content = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    \n    if(file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\"){\n        return \"Yes\";\n    }\n    else{\n        return \"No\"\
    ;\n    }", "    std::string file_name_check;\n    // Your code goes here\n   \
    \ \n    return file_name_check;", "    // Your code goes here\n    \n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n\
    \    if (file_name.length() < 3 || file_name.find_last_of(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    if (file_extension != \"txt\" &&\
    \ file_extension != \"exe\" && file_extension != \"dll\") {\n        return \"\
    No\";\n    }\n    \n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z' || file_name.substr(0, 1) < 'A' || file_name.substr(0, 1) > 'Z') {\n\
    \        return \"No\";\n    }\n    \n    return \"Yes\";", "    // Your code\
    \ goes here\n    std::string file_name = file_name;\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_of('.'));\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_not_of('.'));\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.')));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.'))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.'))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.')))));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.')))))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.')))))));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.')))))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.')))))))));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.",
  "    // Write your code here\n    \n    // return \"Yes\";\n    return \"No\";",
  "    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of(\".\"));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension", "    int num_digits = 0;\n    int dot_count = 0;\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            num_digits++;\n        }\n   \
    \     else if (file_name[i] == '.') {\n            dot_count++;\n        }\n \
    \   }\n    if (dot_count > 1 || num_digits > 3) {\n        return \"No\";\n  \
    \  }\n    else if ((file_name[0] == 'a' || file_name[0] == 'A') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'b' || file_name[0] == 'B') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'c'\
    \ || file_name[0] == 'C') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n \
    \       return \"Yes\";\n    }\n    else if ((file_name[0] == 'd' || file_name[0]\
    \ == 'D') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n        return \"\
    Yes\";\n    }\n    else if ((file_name[0] == 'e' || file_name[0] == 'E') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'f' || file_name[0] == 'F') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'g'\
    \ || file_name[0] == 'G') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n \
    \       return \"Yes\";\n    }\n    else if ((file_name[0] == 'h' || file_name[0]\
    \ == 'H') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n        return \"\
    Yes\";\n    }\n    else if ((file_name[0] == 'i' || file_name[0] == 'I') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'j' || file_name[0] == 'J') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'k'\
    \ || file_name[0] == 'K') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n \
    \       return \"Yes\";\n    }\n    else if ((file_name[0] == 'l' || file_name[0]\
    \ == 'L') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n        return \"\
    Yes\";\n    }\n    else if ((file_name[0] == 'm' || file_name[0] == 'M') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'n' || file_name[0] == 'N') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'o'\
    \ || file_name[0] == '", "    // Your code goes here\n    \n    std::string file_extension\
    \ = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n    if (file_name.length()\
    \ > 3 && file_name.find_last_of(\".\") > 0 && file_name[0] >= 'a' && file_name[0]\
    \ <= 'z' && file_name[1] >= 'a' && file_name[1] <= 'z' && file_name[2] >= 'a'\
    \ && file_name[2] <= 'z') {\n        if (file_extension == \"txt\" || file_extension\
    \ == \"exe\" || file_extension == \"dll\") {\n            return \"Yes\";\n  \
    \      }\n    }\n    return \"No\";", "    std::string file_extension;\n    std::string\
    \ file_extension_check;\n    std::string file_extension_check_2;\n    std::string\
    \ file_extension_check_3;\n    std::string file_extension_check_4;\n    std::string\
    \ file_extension_check_5;\n    std::string file_extension_check_6;\n    std::string\
    \ file_extension_check_7;\n    std::string file_extension_check_8;\n    std::string\
    \ file_extension_check_9;\n    std::string file_extension_check_10;\n    std::string\
    \ file_extension_check_11;\n    std::string file_extension_check_12;\n    std::string\
    \ file_extension_check_13;\n    std::string file_extension_check_14;\n    std::string\
    \ file_extension_check_15;\n    std::string file_extension_check_16;\n    std::string\
    \ file_extension_check_17;\n    std::string file_extension_check_18;\n    std::string\
    \ file_extension_check_19;\n    std::string file_extension_check_20;\n    std::string\
    \ file_extension_check_21;\n    std::string file_extension_check_22;\n    std::string\
    \ file_extension_check_23;\n    std::string file_extension_check_24;\n    std::string\
    \ file_extension_check_25;\n    std::string file_extension_check_26;\n    std::string\
    \ file_extension_check_27;\n    std::string file_extension_check_28;\n    std::string\
    \ file_extension_check_29;\n    std::string file_extension_check_30;\n    std::string\
    \ file_extension_check_31;\n    std::string file_extension_check_32;\n    std::string\
    \ file_extension_check_33;\n    std::string file_extension_check_34;\n    std::string\
    \ file_extension_check_35;\n    std::string file_extension_check_36;\n    std::string\
    \ file_extension_check_37;\n    std::string file_extension_check_38;\n    std::string\
    \ file_extension_check_39;\n    std::string file_extension_check_40;\n    std::string\
    \ file_extension_check_41;\n    std::string file_extension_check_42;\n    std::string\
    \ file_extension_check_43;\n    std::string file_extension_check_44;\n    std::string\
    \ file_extension_check_45;\n    std::string file_extension_check_46;\n    std::string\
    \ file_extension_check_47;\n    std::string file_extension_check_48;\n    std::string\
    \ file_extension_check_49;\n    std::string file_extension_check_50;\n    std::string\
    \ file_extension_check_51;\n    std::string file_extension_check_52;\n    std::string\
    \ file_extension_check_53;\n    std::string file_extension_check_54;\n    std::string\
    \ file_extension_check_55;\n    std::string file_extension_check_56;\n    std::string\
    \ file_extension_check_57;\n    std::string file_extension_check_58;\n    std::string\
    \ file_", "    // Your code here\n    \n    // Write your code here\n    \n  \
    \  return file_name;", "    // Write your code here\n    \n    // return \"Yes\"\
    ;\n    return \"No\";", "    // Your code here\n    int count = 0;\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n        if (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            count++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            count++;\n        }\n        if (count > 3) {\n     \
    \       return \"No\";\n        }\n    }\n    if (file_name.find(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) != 'a' && file_name.substr(0,\
    \ 1) != 'A') {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // ", "  \
    \  int n = file_name.size();\n    if (n < 3 || file_name.at(0) == '0' || file_name.at(0)\
    \ == '9') {\n        return \"No\";\n    }\n    if (file_name.at(-1) != '.') {\n\
    \        return \"No\";\n    }\n    if (file_name.at(0) != 'a' || file_name.at(0)\
    \ != 'z' || file_name.at(0) != 'A' || file_name.at(0) != 'Z') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(1) == '0' || file_name.at(1) == '9') {\n\
    \        return \"No\";\n    }\n    if (file_name.at(file_name.size() - 1) !=\
    \ 'txt' || file_name.at(file_name.size() - 1) != 'exe' || file_name.at(file_name.size()\
    \ - 1) != 'dll') {\n        return \"No\";\n    }\n    return \"Yes\";", "   \
    \ // Your code here\n    \n    return file_name;", "    // Your code goes here\n\
    \    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n    \
    \    if (file_name[i] < '0' || file_name[i] > '9') {\n            count++;\n \
    \       }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    if\
    \ (file_name.find(\".\") == std::string::npos) {\n        return \"No\";\n   \
    \ }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\".\"\
    ) + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\" &&\
    \ file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return \"\
    No\";\n    }\n    return \"Yes\";"]
stop_tokens:
- "\n}"
