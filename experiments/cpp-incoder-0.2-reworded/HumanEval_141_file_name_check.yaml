name: HumanEval_141_file_name_check
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which takes\
  \ a string representing a file's name, and returns\n// 'Yes' if the the file's name\
  \ is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid\
  \ if and only if all the following conditions \n// are met:\n// - There should not\
  \ be more than three digits ('0'-'9') in the file's name.\n// - The file's name\
  \ contains exactly one dot '.'\n// - The substring before the dot should not be\
  \ empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  // Examples:\n// >>> file_name_check((\"example.txt\"))\n// (\"Yes\")\n// >>> file_name_check((\"\
  1example.dll\"))\n// (\"No\")\nstd::string file_name_check(std::string file_name)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = file_name_check;\n    assert(candidate((\"\
  example.txt\")) == (\"Yes\"));\n    assert(candidate((\"1example.dll\")) == (\"\
  No\"));\n    assert(candidate((\"s1sdf3.asd\")) == (\"No\"));\n    assert(candidate((\"\
  K.dll\")) == (\"Yes\"));\n    assert(candidate((\"MY16FILE3.exe\")) == (\"Yes\"\
  ));\n    assert(candidate((\"His12FILE94.exe\")) == (\"No\"));\n    assert(candidate((\"\
  _Y.txt\")) == (\"No\"));\n    assert(candidate((\"?aREYA.exe\")) == (\"No\"));\n\
  \    assert(candidate((\"/this_is_valid.dll\")) == (\"No\"));\n    assert(candidate((\"\
  this_is_valid.wow\")) == (\"No\"));\n    assert(candidate((\"this_is_valid.txt\"\
  )) == (\"Yes\"));\n    assert(candidate((\"this_is_valid.txtexe\")) == (\"No\"));\n\
  \    assert(candidate((\"#this2_i4s_5valid.ten\")) == (\"No\"));\n    assert(candidate((\"\
  @this1_is6_valid.exe\")) == (\"No\"));\n    assert(candidate((\"this_is_12valid.6exe4.txt\"\
  )) == (\"No\"));\n    assert(candidate((\"all.exe.txt\")) == (\"No\"));\n    assert(candidate((\"\
  I563_No.exe\")) == (\"Yes\"));\n    assert(candidate((\"Is3youfault.txt\")) == (\"\
  Yes\"));\n    assert(candidate((\"no_one#knows.dll\")) == (\"Yes\"));\n    assert(candidate((\"\
  1I563_Yes3.exe\")) == (\"No\"));\n    assert(candidate((\"I563_Yes3.txtt\")) ==\
  \ (\"No\"));\n    assert(candidate((\"final..txt\")) == (\"No\"));\n    assert(candidate((\"\
  final132\")) == (\"No\"));\n    assert(candidate((\"_f4indsartal132.\")) == (\"\
  No\"));\n    assert(candidate((\".txt\")) == (\"No\"));\n    assert(candidate((\"\
  s.\")) == (\"No\"));\n}\n"
completions: ["    // Your code here\n    \n    std::string file_name_check;\n   \
    \ \n    if (file_name.size() > 3 || file_name.find(\".\") == 0 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z' || file_name.substr(file_name.find_last_of(\"\
    .\") + 1) != \"txt\" || file_name.substr(file_name.find_last_of(\".\") + 1) !=\
    \ \"exe\" || file_name.substr(file_name.find_last_of(\".\") + 1) != \"dll\") {\n\
    \        file_name_check = \"No\";\n    } else {\n        file_name_check = \"\
    Yes\";\n    }\n    \n    return file_name_check;", "    // Your code here\n  \
    \  \n    // Write your code here\n    \n    return \"\";", "    // Your code here\n\
    \    std::string file_extension = file_name.substr(file_name.find_last_of(\".\"\
    ) + 1);\n    if (file_name.find_last_of(\".\") > 0) {\n        if (file_name.find_last_of(\"\
    .\") > 3) {\n            return \"No\";\n        }\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    abcdefghijklmnopqrstuvwxyz\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .txt\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .exe\") == 0) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .dll\") == 0) {\n        return \"No\";\n    }\n    if (file_extension == \"txt\"\
    ) {\n        return \"Yes\";\n    }\n    if (file_extension == \"exe\") {\n  \
    \      return \"Yes\";\n    }\n    if (file_extension == \"dll\") {\n        return\
    \ \"Yes\";\n    }\n    return \"No\";", "    // Your code goes here\n    int count\
    \ = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if(count > 3) {\n        return \"No\";\n    }\n    else if(file_name.find(\"\
    .\") == -1) {\n        return \"No\";\n    }\n    else if(file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    else if(file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code goes\
    \ here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1); \n    std::string file_content = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    \n    if(file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\"){\n        return \"Yes\";\n    }\n    else{\n        return \"No\"\
    ;\n    }", "    std::string file_name_check;\n    // Your code goes here\n   \
    \ \n    return file_name_check;", "    // Your code goes here\n    \n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n\
    \    if (file_name.length() < 3 || file_name.find_last_of(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    if (file_extension != \"txt\" &&\
    \ file_extension != \"exe\" && file_extension != \"dll\") {\n        return \"\
    No\";\n    }\n    \n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z' || file_name.substr(0, 1) < 'A' || file_name.substr(0, 1) > 'Z') {\n\
    \        return \"No\";\n    }\n    \n    return \"Yes\";", "    // Your code\
    \ goes here\n    std::string file_name = file_name;\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_of('.'));\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_not_of('.'));\n    std::string file_name\
    \ = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.')));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.'))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.'))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.')))));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.')))))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.')))))));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.')))))));\n    std::string\
    \ file_name = file_name.substr(0, file_name.find_first_not_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.')))))))));\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_not_of('.',\
    \ file_name.find_first_of('.', file_name.find_first_of('.', file_name.find_first_of('.",
  "    // Write your code here\n    \n    // return \"Yes\";\n    return \"No\";",
  "    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of(\".\"));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension", "    int num_digits = 0;\n    int dot_count = 0;\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            num_digits++;\n        }\n   \
    \     else if (file_name[i] == '.') {\n            dot_count++;\n        }\n \
    \   }\n    if (dot_count > 1 || num_digits > 3) {\n        return \"No\";\n  \
    \  }\n    else if ((file_name[0] == 'a' || file_name[0] == 'A') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'b' || file_name[0] == 'B') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'c'\
    \ || file_name[0] == 'C') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n \
    \       return \"Yes\";\n    }\n    else if ((file_name[0] == 'd' || file_name[0]\
    \ == 'D') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n        return \"\
    Yes\";\n    }\n    else if ((file_name[0] == 'e' || file_name[0] == 'E') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'f' || file_name[0] == 'F') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'g'\
    \ || file_name[0] == 'G') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n \
    \       return \"Yes\";\n    }\n    else if ((file_name[0] == 'h' || file_name[0]\
    \ == 'H') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n        return \"\
    Yes\";\n    }\n    else if ((file_name[0] == 'i' || file_name[0] == 'I') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'j' || file_name[0] == 'J') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'k'\
    \ || file_name[0] == 'K') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n \
    \       return \"Yes\";\n    }\n    else if ((file_name[0] == 'l' || file_name[0]\
    \ == 'L') && file_name[1] >= 'a' && file_name[1] <= 'z') {\n        return \"\
    Yes\";\n    }\n    else if ((file_name[0] == 'm' || file_name[0] == 'M') && file_name[1]\
    \ >= 'a' && file_name[1] <= 'z') {\n        return \"Yes\";\n    }\n    else if\
    \ ((file_name[0] == 'n' || file_name[0] == 'N') && file_name[1] >= 'a' && file_name[1]\
    \ <= 'z') {\n        return \"Yes\";\n    }\n    else if ((file_name[0] == 'o'\
    \ || file_name[0] == '", "    // Your code goes here\n    \n    std::string file_extension\
    \ = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n    if (file_name.length()\
    \ > 3 && file_name.find_last_of(\".\") > 0 && file_name[0] >= 'a' && file_name[0]\
    \ <= 'z' && file_name[1] >= 'a' && file_name[1] <= 'z' && file_name[2] >= 'a'\
    \ && file_name[2] <= 'z') {\n        if (file_extension == \"txt\" || file_extension\
    \ == \"exe\" || file_extension == \"dll\") {\n            return \"Yes\";\n  \
    \      }\n    }\n    return \"No\";", "    std::string file_extension;\n    std::string\
    \ file_extension_check;\n    std::string file_extension_check_2;\n    std::string\
    \ file_extension_check_3;\n    std::string file_extension_check_4;\n    std::string\
    \ file_extension_check_5;\n    std::string file_extension_check_6;\n    std::string\
    \ file_extension_check_7;\n    std::string file_extension_check_8;\n    std::string\
    \ file_extension_check_9;\n    std::string file_extension_check_10;\n    std::string\
    \ file_extension_check_11;\n    std::string file_extension_check_12;\n    std::string\
    \ file_extension_check_13;\n    std::string file_extension_check_14;\n    std::string\
    \ file_extension_check_15;\n    std::string file_extension_check_16;\n    std::string\
    \ file_extension_check_17;\n    std::string file_extension_check_18;\n    std::string\
    \ file_extension_check_19;\n    std::string file_extension_check_20;\n    std::string\
    \ file_extension_check_21;\n    std::string file_extension_check_22;\n    std::string\
    \ file_extension_check_23;\n    std::string file_extension_check_24;\n    std::string\
    \ file_extension_check_25;\n    std::string file_extension_check_26;\n    std::string\
    \ file_extension_check_27;\n    std::string file_extension_check_28;\n    std::string\
    \ file_extension_check_29;\n    std::string file_extension_check_30;\n    std::string\
    \ file_extension_check_31;\n    std::string file_extension_check_32;\n    std::string\
    \ file_extension_check_33;\n    std::string file_extension_check_34;\n    std::string\
    \ file_extension_check_35;\n    std::string file_extension_check_36;\n    std::string\
    \ file_extension_check_37;\n    std::string file_extension_check_38;\n    std::string\
    \ file_extension_check_39;\n    std::string file_extension_check_40;\n    std::string\
    \ file_extension_check_41;\n    std::string file_extension_check_42;\n    std::string\
    \ file_extension_check_43;\n    std::string file_extension_check_44;\n    std::string\
    \ file_extension_check_45;\n    std::string file_extension_check_46;\n    std::string\
    \ file_extension_check_47;\n    std::string file_extension_check_48;\n    std::string\
    \ file_extension_check_49;\n    std::string file_extension_check_50;\n    std::string\
    \ file_extension_check_51;\n    std::string file_extension_check_52;\n    std::string\
    \ file_extension_check_53;\n    std::string file_extension_check_54;\n    std::string\
    \ file_extension_check_55;\n    std::string file_extension_check_56;\n    std::string\
    \ file_extension_check_57;\n    std::string file_extension_check_58;\n    std::string\
    \ file_", "    // Your code here\n    \n    // Write your code here\n    \n  \
    \  return file_name;", "    // Write your code here\n    \n    // return \"Yes\"\
    ;\n    return \"No\";", "    // Your code here\n    int count = 0;\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n        if (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            count++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            count++;\n        }\n        if (count > 3) {\n     \
    \       return \"No\";\n        }\n    }\n    if (file_name.find(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) != 'a' && file_name.substr(0,\
    \ 1) != 'A') {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // ", "  \
    \  int n = file_name.size();\n    if (n < 3 || file_name.at(0) == '0' || file_name.at(0)\
    \ == '9') {\n        return \"No\";\n    }\n    if (file_name.at(-1) != '.') {\n\
    \        return \"No\";\n    }\n    if (file_name.at(0) != 'a' || file_name.at(0)\
    \ != 'z' || file_name.at(0) != 'A' || file_name.at(0) != 'Z') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(1) == '0' || file_name.at(1) == '9') {\n\
    \        return \"No\";\n    }\n    if (file_name.at(file_name.size() - 1) !=\
    \ 'txt' || file_name.at(file_name.size() - 1) != 'exe' || file_name.at(file_name.size()\
    \ - 1) != 'dll') {\n        return \"No\";\n    }\n    return \"Yes\";", "   \
    \ // Your code here\n    \n    return file_name;", "    // Your code goes here\n\
    \    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n    \
    \    if (file_name[i] < '0' || file_name[i] > '9') {\n            count++;\n \
    \       }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    if\
    \ (file_name.find(\".\") == std::string::npos) {\n        return \"No\";\n   \
    \ }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\".\"\
    ) + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\" &&\
    \ file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return \"\
    No\";\n    }\n    return \"Yes\";", "    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // ", "  \
    \  // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    0123456789\"));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\n    std::string file_prefix\
    \ = file_prefix.substr(0, file_prefix.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\n    std::string file_prefix\
    \ = file_prefix.substr(0, file_prefix.find_first_of(\"0123456789\"));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\n    std::string file_prefix = file_prefix.substr(0,\
    \ file_prefix.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    0123456789\"));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\n    std::string file_prefix\
    \ = file_prefix.substr(0, file_prefix.find_first_of(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\n    std::string file_prefix\
    \ = file_prefix.substr(0, file_prefix.find_first_of(\"0123456789\"));\n    std::string\
    \ file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ));\n    std::string file_prefix = file_prefix.substr(0, file_prefix.find_first_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\n    std::string file_prefix = file_prefix.substr(0, ",
  "    int num_digits = 0;\n    std::string first_letter = \"\";\n    std::string\
    \ extension = \"\";\n    std::string first_dot_position = \"\";\n    std::string\
    \ second_dot_position = \"\";\n    std::string third_dot_position = \"\";\n  \
    \  std::string fourth_dot_position = \"\";\n    std::string fifth_dot_position\
    \ = \"\";\n    std::string sixth_dot_position = \"\";\n    std::string seventh_dot_position\
    \ = \"\";\n    std::string eighth_dot_position = \"\";\n    std::string ninth_dot_position\
    \ = \"\";\n    std::string tenth_dot_position = \"\";\n    std::string eleventh_dot_position\
    \ = \"\";\n    std::string twelfth_dot_position = \"\";\n    std::string thirteenth_dot_position\
    \ = \"\";\n    std::string fourteenth_dot_position = \"\";\n    std::string fifteenth_dot_position\
    \ = \"\";\n    std::string sixteenth_dot_position = \"\";\n    std::string seventeenth_dot_position\
    \ = \"\";\n    std::string eighteenth_dot_position = \"\";\n    std::string nineteenth_dot_position\
    \ = \"\";\n    std::string twentieth_dot_position = \"\";\n    std::string twenty_first_dot_position\
    \ = \"\";\n    std::string twenty_second_dot_position = \"\";\n    std::string\
    \ twenty_third_dot_position = \"\";\n    std::string twenty_fourth_dot_position\
    \ = \"\";\n    std::string twenty_fifth_dot_position = \"\";\n    std::string\
    \ twenty_sixth_dot_position = \"\";\n    std::string twenty_seventh_dot_position\
    \ = \"\";\n    std::string twenty_eighth_dot_position = \"\";\n    std::string\
    \ twenty_ninth_dot_position = \"\";\n    std::string twenty_tenth_dot_position\
    \ = \"\";\n    std::string twenty_eleventh_dot_position = \"\";\n    std::string\
    \ twenty_twelfth_dot_position = \"\";\n    std::string twenty_thirteenth_dot_position\
    \ = \"\";\n    std::string twenty_fourteenth_dot_position = \"\";\n    std::string\
    \ twenty_fifteenth_dot_position = \"\";\n    std::string twenty_sixteenth_dot_position\
    \ = \"\";\n    std::string twenty_seventeenth_dot_position = \"\";\n    std::string\
    \ twenty_eighteenth_dot_position = \"\";\n    std::string twenty_nineteenth_dot_position\
    \ = \"\";\n    std::string twenty_twentieth_dot_position = \"\";\n    std::string\
    \ twenty_twenty_first_dot_position = \"\";\n    std::string twenty_twenty_second_dot_position\
    \ = \"\";\n    std::string twenty_twenty_third_dot_position = \"\";\n    std::string\
    \ twenty_twenty_fourth_dot_position = \"\";\n    std::string twenty_twenty_fifth_dot_position\
    \ = \"\";\n    std::string twenty_twenty_sixth_dot_position = \"\";\n    std::string\
    \ twenty_", "    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    if (file_extension == \"txt\" || file_extension == \"exe\" ||\
    \ file_extension == \"dll\") {\n        return \"Yes\";\n    }\n    return \"\
    No\";", "    // Your code here\n    \n    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // ", "    // Your code here\n    std::string\
    \ file_name_check;\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            count++;\n        }\n\
    \    }\n    if (count > 3) {\n        file_name_check = \"No\";\n    }\n    else\
    \ if (count == 3) {\n        file_name_check = \"Yes\";\n    }\n    else if (file_name[0]\
    \ == 'a' && file_name[1] == 'z' && file_name[2] != 'z') {\n        file_name_check\
    \ = \"Yes\";\n    }\n    else if (file_name[0] == 'A' && file_name[1] == 'Z' &&\
    \ file_name[2] != 'Z') {\n        file_name_check = \"Yes\";\n    }\n    else\
    \ {\n        file_name_check = \"No\";\n    }\n    return file_name_check;", " \
    \   // Your code here\n    std::string file_name = file_name;\n    int count =\
    \ 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find('.')\
    \ == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find('.') + 1) != \"txt\" && file_name.substr(file_name.find('.')\
    \ + 1) != \"exe\" && file_name.substr(file_name.find('.') + 1) != \"dll\") {\n\
    \        return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // ", "    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n", "    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n", "    // Your code goes here\n    std::string file_name = file_name;\n\
    \    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n    \
    \    if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    if\
    \ (file_name.find(\".\") == std::string::npos) {\n        return \"No\";\n   \
    \ }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \        return \"No\";\n    }\n    if (file_name.substr(file_name.length() -\
    \ 1) < 'a' || file_name.substr(file_name.length() - 1) > 'z') {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 3) != \"example\") {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(3, 3) != \"txt\") {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(6, 3) != \"exe\") {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(9, 3) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    std::string file_name_check;\n  \
    \  int count = 0;\n    for(int i = 0; i < file_name.length(); i++) {\n       \
    \ if(file_name[i] == '.') {\n            count++;\n        }\n    }\n    if(count\
    \ > 3) {\n        file_name_check = \"No\";\n    }\n    else {\n        for(int\
    \ i = 0; i < file_name.length(); i++) {\n            if(file_name[i] >= 'a' &&\
    \ file_name[i] <= 'z') {\n                file_name_check += \"a\";\n        \
    \    }\n            else if(file_name[i] >= 'A' && file_name[i] <= 'Z') {\n  \
    \              file_name_check += \"A\";\n            }\n            else {\n\
    \                file_name_check += file_name[i];\n            }\n        }\n\
    \    }\n    return file_name_check;", "    // Your code goes here\n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n    if\
    \ (file_name.length() < 3 || file_name.find_last_of(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\") {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) != \"b\" &&\
    \ file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0,\
    \ 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) !=\
    \ \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) != \"i\"\
    \ && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0,\
    \ 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) !=\
    \ \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) != \"p\"\
    \ && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0,\
    \ 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) !=\
    \ \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) != \"w\"\
    \ && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0,\
    \ 1) != \"z\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    //\
    \ Your code goes here\n    int digits = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    digits++;\n        }\n    }\n    if (digits > 3) {\n        return \"No\"\
    ;\n    }\n    if (file_name.find(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.length()\
    \ - 1) < 'a' || file_name.substr(file_name.length() - 1) > 'z') {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n    \n    // Write\
    \ your code here\n    \n    return \"\";", "    // Your code goes here\n    int\
    \ n = file_name.size();\n    if (n > 3 || file_name.find(\".\") == std::string::npos\
    \ || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z' || file_name.substr(file_name.find_first_of(\"\
    .\") + 1) != \"txt\" || file_name.substr(file_name.find_first_of(\".\") + 1) !=\
    \ \"exe\" || file_name.substr(file_name.find_first_of(\".\") + 1) != \"dll\")\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // ", "    // Your code here\n    std::string file_name = file_name;\n\
    \    std::string file_name = file_name.substr(0, file_name.find_first_of(\".\"\
    ));\n    std::string file_name = file_name.substr(0, file_name.find_first_not_of(\"\
    0123456789\"));\n    std::string file_name = file_name.substr(0, file_name.find_first_not_of(\"\
    aA\"));\n    std::string file_name = file_name.substr(0, file_name.find_first_not_of(\"\
    aZ\"));\n    std::string file_name = file_name.substr(0, file_name.find_first_not_of(\"\
    zA\"));\n    std::string file_name = file_name.substr(0, file_name.find_first_not_of(\"\
    zZ\"));\n    if (file_name.find_first_not_of(\".txt\") != std::string::npos) {\n\
    \        return \"No\";\n    }\n    if (file_name.find_first_not_of(\".exe\")\
    \ != std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .dll\") != std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .txt\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .exe\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .dll\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    a\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    z\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    A\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    Z\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    9\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    a\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    z\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    A\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    Z\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0\") == std::string::n", "    // Your code here\n    int count = 0;\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n        if (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            count++;\n        }\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n        if\
    \ (file_name[i] == '.') {\n            count++;\n        }\n        if (count\
    \ == 3) {\n            count--;\n        }\n    }\n    if (count == 1) {\n   \
    \     return \"Yes\";\n    }\n    if (count > 1) {\n        return \"No\";\n \
    \   }\n    return \"No\";", "    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // ", "    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n", "    // Your code here\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    \n    std::string extension = file_name.substr(file_name.find_last_of('.'));\n\
    \    \n    if(file_name.length() <= 3 || file_name.find_first_of('.') == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    if(extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\") {\n        return \"Yes\";\n    }\n    \n\
    \    return \"No\";", "    std::string file_extension;\n    std::string file_content;\n\
    \    std::string file_name_without_extension;\n    std::string file_name_without_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_and_extension;\n    std::string\
    \ file_name_without_extension_without_dot_and_extension_without_dot;\n    std::string\
    \ file_name_without_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension;\n\
    \    std::string file_name_without_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_and_extension_without_dot_",
  "    // Your code here\n    std::string file_name = file_name;\n    std::string\
    \ file_name_no_digit = file_name.substr(0, file_name.size() - 1);\n    std::string\
    \ file_name_no_dot = file_name_no_digit.substr(0, file_name_no_digit.size() -\
    \ 1);\n    std::string file_name_no_empty = file_name_no_dot.substr(0, file_name_no_dot.size()\
    \ - 1);\n    std::string file_name_no_letter = file_name_no_empty.substr(0, file_name_no_empty.size()\
    \ - 1);\n    std::string file_name_no_extension = file_name_no_letter.substr(0,\
    \ file_name_no_letter.size() - 1);\n    std::string file_name_no_extension_no_dot\
    \ = file_name_no_extension.substr(0, file_name_no_extension.size() - 1);\n   \
    \ std::string file_name_no_extension_no_empty = file_name_no_extension_no_dot.substr(0,\
    \ file_name_no_extension_no_dot.size() - 1);\n    std::string file_name_no_extension_no_letter\
    \ = file_name_no_extension_no_empty.substr(0, file_name_no_extension_no_empty.size()\
    \ - 1);\n    std::string file_name_no_extension_no_letter_no_dot = file_name_no_extension_no_letter_no_empty.substr(0,\
    \ file_name_no_extension_no_letter_no_empty.size() - 1);\n    std::string file_name_no_extension_no_letter_no_empty_no_dot\
    \ = file_name_no_extension_no_letter_no_empty.substr(0, file_name_no_extension_no_letter_no_empty.size()\
    \ - 1);\n    std::string file_name_no_extension_no_letter_no_empty_no_dot_no_digit\
    \ = file_name_no_extension_no_letter_no_empty.substr(0, file_name_no_extension_no_letter_no_empty.size()\
    \ - 1);\n    std::string file_name_no_extension_no_letter_no_empty_no_dot_no_digit_no_dot\
    \ = file_name_no_extension_no_letter_no_empty_no_dot.substr(0, file_name_no_extension_no_letter_no_empty_no_dot.size()\
    \ - 1);\n    std::string file_name_no_extension_no_letter_no_empty_no_dot_no_digit_no_dot_no_digit\
    \ = file_name_no_extension_no_letter_no_empty_no_dot_no_digit.substr(0, file_name_no_extension_no_letter_no_empty_no_dot_no_digit.size()\
    \ - 1);\n    std::string file_name_no_extension_no_letter_no_empty_no_dot_no_digit_no_dot_no_digit_no_dot\
    \ = file_name_no_extension_no_letter_no_empty_no_dot_no_digit_no_dot.substr(0,\
    \ file_name_no_extension_no_letter_no_empty_no_dot_no_digit_no_dot.size() - 1);\n\
    \    std::string file_name_no_extension_no_letter_no_empty_no_dot_no_digit_no_dot_no_digit_no_dot_no_digit\
    \ = file_name_no_extension_no_letter_no_empty_", "    // Your code goes here\n\
    \    std::string file_name = file_name;\n    int count = 0;\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return \"No\";\n    }\n    if (file_name.find(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.length()\
    \ - 1) < 'a' || file_name.substr(file_name.length() - 1) > 'z') {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 1) != file_name.substr(1, file_name.length()\
    \ - 1)) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code\
    \ goes here\n    std::string file_name_check;\n    int count = 0;\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n        if (file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z') {\n            count++;\n        }\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        file_name_check = \"No\";\n    }\n    else if (count\
    \ == 3) {\n        if (file_name.substr(0, 1) == \"0\") {\n            file_name_check\
    \ = \"No\";\n        }\n        else if (file_name.substr(0, 1) != \"0\") {\n\
    \            file_name_check = \"Yes\";\n        }\n        else if (file_name.substr(0,\
    \ 1) == \"0\" && file_name.substr(1, 1) != \"0\") {\n            file_name_check\
    \ = \"Yes\";\n        }\n        else if (file_name.substr(0, 1) == \"0\" && file_name.substr(1,\
    \ 1) == \"0\") {\n            file_name_check = \"No\";\n        }\n        else\
    \ if (file_name.substr(0, 1) != \"0\") {\n            file_name_check = \"Yes\"\
    ;\n        }\n        else if (file_name.substr(0, 1) == \"0\" && file_name.substr(1,\
    \ 1) == \"0\") {\n            file_name_check = \"No\";\n        }\n        else\
    \ if (file_name.substr(0, 1) != \"0\") {\n            file_name_check = \"Yes\"\
    ;\n        }\n        else if (file_name.substr(0, 1) == \"0\" && file_name.substr(1,\
    \ 1) != \"0\") {\n            file_name_check = \"Yes\";\n        }\n        else\
    \ if (file_name.substr(0, 1) == \"0\" && file_name.substr(1, 1) == \"0\") {\n\
    \            file_name_check = \"No\";\n        }\n        else if (file_name.substr(0,\
    \ 1) != \"0\") {\n            file_name_check = \"Yes\";\n        }\n        else\
    \ if (file_name.substr(0, 1) == \"0\" && file_name.substr(1, 1) != \"0\") {\n\
    \            file_name_check = \"Yes\";\n        }\n        else if (file_name.substr(0,\
    \ 1) == \"0\" && file_name.substr(1, 1) == \"0\") {\n            file_name_check\
    \ = \"No\";\n        }\n        else if (file_name.substr(0, 1) != \"0\") {\n\
    \            file_name_check = \"Yes\";\n        }\n        else if (file_name.substr(0,\
    \ 1) == \"0\" && file_name.substr(1, 1) != \"0\") {\n            file_name_check\
    \ = \"Yes\";\n        }\n        else if (file_name.substr(0, 1) == \"0\" && file_name.substr(1,\
    \ 1) == \"0\") {\n            file_name_check = \"No\";\n        }\n        else\
    \ if (file_name.substr(0, 1) != \"0\") {\n            file_name_check = \"Yes\"\
    ;\n        }\n        else if (file_name.substr(0, 1) == \"0\" && file_name.substr(1,\
    \ 1) ", "    // Your code goes here\n    \n    // Your code goes here\n    \n\
    \    // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n", "    // Your code goes here\n    \n\
    \    // Write your code here\n    \n    return \"\";", "    int dotIndex = file_name.find_first_of(\"\
    .\");\n    if (dotIndex == std::string::npos) {\n        return \"No\";\n    }\n\
    \    int firstLetterIndex = file_name.find_first_not_of(\"0123456789\", dotIndex);\n\
    \    if (firstLetterIndex == std::string::npos) {\n        return \"No\";\n  \
    \  }\n    std::string firstLetter = file_name.substr(0, firstLetterIndex);\n \
    \   if (firstLetter.length() != 1) {\n        return \"No\";\n    }\n    if (firstLetter[0]\
    \ < 'a' || firstLetter[0] > 'z') {\n        return \"No\";\n    }\n    std::string\
    \ extension = file_name.substr(dotIndex + 1);\n    if (extension.length() != 3\
    \ || extension[0] != 'e' || extension[1] != 'x' || extension[2] != 'd') {\n  \
    \      return \"No\";\n    }\n    return \"Yes\";", "    // Your code goes here\n\
    \    \n    std::string file_name_check;\n    \n    // Your code goes here\n  \
    \  \n    return file_name_check;", "    // Your code here\n    \n    // Write\
    \ your code here\n    \n    return \"\";", "    // Your code goes here\n    \n\
    \    return file_name;", "    // Your code here\n    \n    \n    return file_name;",
  "    int num_digits = 0;\n    int dot_count = 0;\n    int first_letter = 0;\n  \
    \  for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            num_digits++;\n        }\n      \
    \  if (file_name[i] == '.') {\n            dot_count++;\n        }\n        if\
    \ (file_name[i] == ' ') {\n            if (dot_count == 1) {\n               \
    \ if (num_digits == 1) {\n                    if (first_letter == 1) {\n     \
    \                   if (file_name[i] == 'a' || file_name[i] == 'A') {\n      \
    \                      if (file_name[i + 1] == 'b' || file_name[i + 1] == 'B')\
    \ {\n                                if (file_name[i + 2] == 'c' || file_name[i\
    \ + 2] == 'C') {\n                                    if (file_name[i + 3] ==\
    \ 'd' || file_name[i + 3] == 'D') {\n                                        if\
    \ (file_name[i + 4] == 'e' || file_name[i + 4] == 'E') {\n                   \
    \                         if (file_name[i + 5] == 'f' || file_name[i + 5] == 'F')\
    \ {\n                                                if (file_name[i + 6] == 'g'\
    \ || file_name[i + 6] == 'G') {\n                                            \
    \        if (file_name[i + 7] == 'h' || file_name[i + 7] == 'H') {\n         \
    \                                               if (file_name[i + 8] == 'i' ||\
    \ file_name[i + 8] == 'I') {\n                                               \
    \             if (file_name[i + 9] == 'j' || file_name[i + 9] == 'J') {\n    \
    \                                                            if (file_name[i +\
    \ 10] == 'k' || file_name[i + 10] == 'K') {\n                                \
    \                                    if (file_name[i + 11] == 'l' || file_name[i\
    \ + 11] == 'L') {\n                                                          \
    \              if (file_name[i + 12] == 'm' || file_name[i + 12] == 'M') {\n \
    \                                                                           if\
    \ (file_name[i + 13] == 'n' || file_name[i + 13] == 'N') {\n                 \
    \                                                               if (file_name[i\
    \ + 14] == 'o' || file_name[i + 14] == 'O') {\n                              \
    \                                                      if (file_name[i + 15] ==\
    \ 'p' || file_name[i + 15] == 'P') {\n                                       \
    \                                                 if (file_name[i + 16] == 'q'\
    \ || file_name[i + 16] == 'Q') {\n                                           \
    \                                                 if (file_name[i + 17] == 'r'\
    \ || file_name[i + 17] == 'R') {\n                                           \
    \                                                     if (file_name[i + 18] ==\
    \ 's' || file_name[i + 18] == 'S') {\n                                       \
    \                                                             if (file_name[i\
    \ + 19] == 't' || file_name[i + 19] == 'T') {\n                              \
    \                                                                          if\
    \ (file_name[i + 20] == 'u' || file_name[i + 20] == 'U') {\n                 \
    \                                                                            \
    \               if (file_name[i + 21] == 'v' || file_name[i + 21] == 'V') {\n\
    \                                                                            \
    \                                    if (file_name[i + 22] == 'w' || file_name[i\
    \ + 22] == 'W') {\n                                                          \
    \                                                          if (file_name[i + 23]\
    \ == 'x' || file_name[i + 23] == 'X') {\n                                    \
    \                                                                            \
    \        if (file_name[i + 24] == 'y' || file_name[i + 24] == 'Y') {\n       \
    \                                                                            \
    \                         if (file_name[i + 25] == 'z' || file_name[i + 25] ==\
    \ 'Z') {\n                                                                   \
    \                                             return \"Yes\";\n              \
    \                                                                            \
    \                  }\n                                                       \
    \                                                 }\n                        \
    \                                                                            }\n\
    \                                                                            \
    \                    }\n                                                     \
    \                                       }\n                                  \
    \                                                      }\n                   \
    \                                                                 }\n        \
    \                                                                        }\n \
    \                                                               ", "    int num_digits\
    \ = 0;\n    int dot_count = 0;\n    char first_letter = 0;\n    char last_letter\
    \ = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            num_digits++;\n        }\n   \
    \     if (file_name[i] == '.') {\n            dot_count++;\n        }\n      \
    \  if (file_name[i] == first_letter && dot_count == 1) {\n            return (\"\
    No\");\n        }\n        if (file_name[i] == last_letter && dot_count == 1)\
    \ {\n            return (\"No\");\n        }\n        if (file_name[i] >= 'a'\
    \ && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n  \
    \          first_letter = file_name[i];\n        }\n        if (file_name[i] >=\
    \ 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n\
    \            last_letter = file_name[i];\n        }\n    }\n    if (dot_count\
    \ > 1) {\n        return (\"No\");\n    }\n    if (num_digits > 3) {\n       \
    \ return (\"No\");\n    }\n    if (dot_count == 1) {\n        if (file_name.substr(0,\
    \ 1) == \"t\" || file_name.substr(0, 1) == \"e\" || file_name.substr(0, 1) ==\
    \ \"x\" || file_name.substr(0, 1) == \"d\") {\n            return (\"Yes\");\n\
    \        }\n    }\n    return (\"No\");", "    // Your code here\n    \n    return\
    \ file_name;", "    std::string file_name_check;\n    int count = 0;\n    for\
    \ (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.')\
    \ {\n            count++;\n        }\n    }\n    if (count == 0) {\n        file_name_check\
    \ = \"No\";\n    }\n    else if (count > 3) {\n        file_name_check = \"No\"\
    ;\n    }\n    else if (file_name[0] == 'a' && file_name[1] == 'z') {\n       \
    \ file_name_check = \"No\";\n    }\n    else if (file_name[0] == 'A' && file_name[1]\
    \ == 'Z') {\n        file_name_check = \"No\";\n    }\n    else if (file_name[0]\
    \ == '0' && file_name[1] == '9') {\n        file_name_check = \"No\";\n    }\n\
    \    else {\n        file_name_check = \"Yes\";\n    }\n    return file_name_check;",
  "    // Your code here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    if (file_name.length() < 3 || file_name.find_last_of('.') == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\") {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n   \
    \     return \"No\";\n    }\n    if (file_name.substr(file_name.find_last_of('.')\
    \ + 1) < 'a' || file_name.substr(file_name.find_last_of('.') + 1) > 'z') {\n \
    \       return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    std::string result;\n    \n    // Your code here\n    \n    return result;",
  "    // Your code goes here\n    \n    std::string file_name_check;\n    \n    //\
    \ Your code goes here\n    \n    return file_name_check;", "    // Write your\
    \ code here\n    \n    // Your code here\n    \n    return file_name;", "    //\
    \ Your code here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    \n    if (file_name.length() > 3 && file_name.find_last_of('.') != std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_prefix.length() > 1 && file_prefix.find_first_of('a')\
    \ == std::string::npos) {\n        return \"No\";\n    }\n    if (file_extension.length()\
    \ > 3 && file_extension.find_last_of('.')  != std::string::npos) {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n    \n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n\
    \    if (file_name.size() > 3 || file_name.find_last_of(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    if (file_extension != \"txt\" &&\
    \ file_extension != \"exe\" && file_extension != \"dll\") {\n        return \"\
    No\";\n    }\n    \n    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0,\
    \ 1) != \"b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) !=\
    \ \"d\" && file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) != \"f\"\
    \ && file_name.substr(0, 1) != \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0,\
    \ 1) != \"i\" && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) !=\
    \ \"k\" && file_name.substr(0, 1) != \"l\" && file_name.substr(0, 1) != \"m\"\
    \ && file_name.substr(0, 1) != \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0,\
    \ 1) != \"p\" && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) !=\
    \ \"r\" && file_name.substr(0, 1) != \"s\" && file_name.substr(0, 1) != \"t\"\
    \ && file_name.substr(0, 1) != \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0,\
    \ 1) != \"w\" && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) !=\
    \ \"y\" && file_name.substr(0, 1) != \"z\") {\n        return \"No\";\n    }\n\
    \    \n    return file_name;", "    std::string file_name_check;\n    int counter\
    \ = 0;\n    while(counter < file_name.size()) {\n        if(file_name[counter]\
    \ >= '0' && file_name[counter] <= '9') {\n            counter++;\n           \
    \ continue;\n        }\n        if(file_name[counter] == '.') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] == '_') {\n \
    \           counter++;\n            continue;\n        }\n        if(file_name[counter]\
    \ >= 'a' && file_name[counter] <= 'z') {\n            counter++;\n           \
    \ continue;\n        }\n        if(file_name[counter] >= 'A' && file_name[counter]\
    \ <= 'Z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] == '.') {\n            counter++;\n            continue;\n\
    \        }\n        if(file_name[counter] == '_') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'a' && file_name[counter]\
    \ <= 'z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'A' && file_name[counter] <= 'Z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] == '.') {\n \
    \           counter++;\n            continue;\n        }\n        if(file_name[counter]\
    \ == '_') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'a' && file_name[counter] <= 'z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'A' && file_name[counter]\
    \ <= 'Z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] == '.') {\n            counter++;\n            continue;\n\
    \        }\n        if(file_name[counter] == '_') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'a' && file_name[counter]\
    \ <= 'z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'A' && file_name[counter] <= 'Z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] == '.') {\n \
    \           counter++;\n            continue;\n        }\n        if(file_name[counter]\
    \ == '_') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] >= 'a' && file_name[counter] <= 'z') {\n            counter++;\n\
    \            continue;\n        }\n        if(file_name[counter] >= 'A' && file_name[counter]\
    \ <= 'Z') {\n            counter++;\n            continue;\n        }\n      \
    \  if(file_name[counter] == '.') {\n            counter++;\n            continue;\n\
    \        }\n        if(file_name[counter] == '_') {\n            ", "    // Your\
    \ code goes here\n    std::string result;\n    int count = 0;\n    for (int i\
    \ = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      result = \"No\";\n    }\n    else if (file_name.find(\".\") == std::string::npos)\
    \ {\n        result = \"No\";\n    }\n    else if (file_name.substr(0, 1) < 'a'\
    \ || file_name.substr(0, 1) > 'z') {\n        result = \"No\";\n    }\n    else\
    \ if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        result = \"No\";\n    }\n    else {\n        result = \"Yes\";\n\
    \    }\n    return result;", "    // Your code here\n    \n    std::string file_name\
    \ = file_name;\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3 || file_name.find(\".\") ==\
    \ -1 || file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' && file_name[0]\
    \ <= 'Z') {\n        return \"No\";\n    }\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            count++;\n        }\n\
    \    }\n    if (count > 1 || file_name.find(\".\") == -1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            count++;\n        }\n    }\n    if (count > 1 || file_name.find(\"\
    .\") >= file_name.length() - 1) {\n        return \"No\";\n", "    // Your code\
    \ here\n    std::string file_name = file_name;\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_of('.'));\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.'));\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name.find_first_not_of('.') - 1);\n    std::string file_name = file_name.substr(0,\
    \ file_name", "    // Your code goes here\n    \n    std::string file_name_check\
    \ = \"No\";\n    \n    if (file_name.size() > 3 || file_name.find(\".\") == 0\
    \ || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z' || file_name.substr(file_name.find_last_of(\"\
    .\") + 1) != \"txt\" || file_name.substr(file_name.find_last_of(\".\") + 1) !=\
    \ \"exe\" || file_name.substr(file_name.find_last_of(\".\") + 1) != \"dll\") {\n\
    \        file_name_check = \"Yes\";\n    }\n    \n    return file_name_check;",
  "    // Your code goes here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    \n    if (file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\") {\n        if (file_prefix.find_first_not_of(\"0123456789\") ==\
    \ std::string::npos) {\n            return \"Yes\";\n        }\n        return\
    \ \"No\";\n    }\n    return \"No\";", "    // Your code here\n    \n    return\
    \ file_name;", "    // Your code here\n    int count = 0;\n    for (int i = 0;\
    \ i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3 || file_name.find(\"\
    .\") == -1 || file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A'\
    \ && file_name[0] <= 'Z') {\n        return \"No\";\n    } else {\n        return\
    \ \"Yes\";\n    }", "    // Your code goes here\n    int n = file_name.size();\n\
    \    if (n > 3 || file_name.find(\".\") == 0 || file_name.substr(0, 1) < 'a' ||\
    \ file_name.substr(0, 1) > 'z' || file_name.substr(0, 2) < 'a' || file_name.substr(0,\
    \ 2) > 'z' || file_name.substr(0, 3) != \"txt\" && file_name.substr(0, 3) != \"\
    exe\" && file_name.substr(0, 3) != \"dll\") {\n        return \"No\";\n    }\n\
    \    return \"Yes\";", "    // Your code goes here\n    std::string file_extension\
    \ = file_name.substr(file_name.find_last_of('.') + 1);\n    std::string file_without_extension\
    \ = file_name.substr(0, file_name.find_last_of('.'));\n    std::string file_first_letter\
    \ = file_without_extension.substr(0, 1);\n    std::string file_second_letter =\
    \ file_without_extension.substr(1, 1);\n    std::string file_third_letter = file_without_extension.substr(2,\
    \ 1);\n    std::string file_fourth_letter = file_without_extension.substr(3, 1);\n\
    \    std::string file_fifth_letter = file_without_extension.substr(4, 1);\n  \
    \  std::string file_sixth_letter = file_without_extension.substr(5, 1);\n    std::string\
    \ file_seventh_letter = file_without_extension.substr(6, 1);\n    std::string\
    \ file_eighth_letter = file_without_extension.substr(7, 1);\n    std::string file_ninth_letter\
    \ = file_without_extension.substr(8, 1);\n    std::string file_tenth_letter =\
    \ file_without_extension.substr(9, 1);\n    std::string file_eleventh_letter =\
    \ file_without_extension.substr(10, 1);\n    std::string file_twelfth_letter =\
    \ file_without_extension.substr(11, 1);\n    std::string file_thirteenth_letter\
    \ = file_without_extension.substr(12, 1);\n    std::string file_fourteenth_letter\
    \ = file_without_extension.substr(13, 1);\n    std::string file_fifteenth_letter\
    \ = file_without_extension.substr(14, 1);\n    std::string file_sixteenth_letter\
    \ = file_without_extension.substr(15, 1);\n    std::string file_seventeenth_letter\
    \ = file_without_extension.substr(16, 1);\n    std::string file_eighteenth_letter\
    \ = file_without_extension.substr(17, 1);\n    std::string file_nineteenth_letter\
    \ = file_without_extension.substr(18, 1);\n    std::string file_twentieth_letter\
    \ = file_without_extension.substr(19, 1);\n    std::string file_twenty_letter\
    \ = file_without_extension.substr(20, 1);\n    std::string file_thirtieth_letter\
    \ = file_without_extension.substr(21, 1);\n    std::string file_thirtyone_letter\
    \ = file_without_extension.substr(22, 1);\n    std::string file_fourtyone_letter\
    \ = file_without_extension.substr(23, 1);\n    std::string file_fiftyone_letter\
    \ = file_without_extension.substr(24, 1);\n    std::string file_sixtyone_letter\
    \ = file_without_extension.substr(25, 1);\n    std::string file_seventyone_letter\
    \ = file_without_extension.substr(26, 1);\n    std::string file_eightyone_letter\
    \ = file_without_extension.substr(27, 1);\n    std::string file_ninetyone_letter\
    \ = file_without_extension.substr(28, 1);\n    std::string file_one_letter = file_without_extension",
  "    // Your code here\n    \n    std::string file_name_check;\n    \n    \n   \
    \ return file_name_check;", "    // Your code here\n    \n    std::string file_name_check\
    \ = \"No\";\n    \n    if (file_name.size() > 3) {\n        file_name_check =\
    \ \"Yes\";\n    }\n    \n    if (file_name.find(\".\") == std::string::npos) {\n\
    \        file_name_check = \"No\";\n    }\n    \n    if (file_name[0] >= 'a' &&\
    \ file_name[0] <= 'z') {\n        file_name_check = \"No\";\n    }\n    \n   \
    \ if (file_name[file_name.size() - 1] >= 'a' && file_name[file_name.size() - 1]\
    \ <= 'z') {\n        file_name_check = \"No\";\n    }\n    \n    if (file_name_check\
    \ == \"Yes\") {\n        if (file_name.find(\".txt\") == std::string::npos &&\
    \ file_name.find(\".exe\") == std::string::npos && file_name.find(\".dll\") ==\
    \ std::string::npos) {\n            file_name_check = \"No\";\n        }\n   \
    \ }\n    \n    return file_name_check;", "    // Your code goes here\n    \n \
    \   std::string file_name_check;\n    \n    return file_name_check;", "    //\
    \ Your code here\n    \n    // Write your code here\n    \n    return file_name;",
  "    std::string result;\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3 || file_name.find(\".\") ==\
    \ -1 || file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n    \
    \    result = \"No\";\n    }\n    else if (file_name.substr(0, 4) == \"dll\" ||\
    \ file_name.substr(0, 4) == \"exe\" || file_name.substr(0, 4) == \"txt\") {\n\
    \        result = \"Yes\";\n    }\n    return result;", "    // Your code goes\
    \ here\n    std::string file_name_check = file_name;\n    int dotIndex = file_name_check.find_first_of(\"\
    .\");\n    if (dotIndex != std::string::npos) {\n        std::string file_name\
    \ = file_name_check.substr(0, dotIndex);\n        std::string extension = file_name_check.substr(dotIndex\
    \ + 1, file_name_check.length() - dotIndex - 1);\n        if (file_name.length()\
    \ != 3 || file_name[0] != '0' || file_name[1] != '9' || file_name[2] != '.' ||\
    \ extension != \"txt\" || extension != \"exe\" || extension != \"dll\") {\n  \
    \          file_name_check = \"No\";\n        }\n    }\n    return file_name_check;",
  "    std::string file_extension;\n    std::string file_name_before_dot;\n    std::string\
    \ file_name_after_dot;\n    \n    // Get the file's extension.\n    size_t pos\
    \ = file_name.find_last_of('.');\n    if (pos != std::string::npos) {\n      \
    \  file_extension = file_name.substr(pos + 1);\n    }\n    \n    // Get the file's\
    \ name before the dot.\n    pos = file_name.find_first_not_of('0', 0);\n    if\
    \ (pos != std::string::npos) {\n        file_name_before_dot = file_name.substr(0,\
    \ pos);\n    }\n    \n    // Get the file's name after the dot.\n    pos = file_name.find_last_not_of('0',\
    \ 0);\n    if (pos != std::string::npos) {\n        file_name_after_dot = file_name.substr(pos\
    \ + 1);\n    }\n    \n    // Check if the file's name contains more than one digit.\n\
    \    if (file_name.size() > 3) {\n        return \"No\";\n    }\n    \n    //\
    \ Check if the file's name contains only one dot.\n    if (file_name_before_dot.size()\
    \ != 1) {\n        return \"No\";\n    }\n    \n    // Check if the file's name\
    \ starts with a letter from the latin alphabet.\n    if (file_name_before_dot[0]\
    \ < 'a' || file_name_before_dot[0] > 'z') {\n        return \"No\";\n    }\n \
    \   \n    // Check if the file's name ends with a letter from the latin alphabet.\n\
    \    if (file_name_after_dot[0] < 'a' || file_name_after_dot[0] > 'z') {\n   \
    \     return \"No\";\n    }\n    \n    // Check if the file's name contains one\
    \ of the following extensions: txt, exe, dll.\n    if (file_extension == \"txt\"\
    \ || file_extension == \"exe\" || file_extension == \"dll\") {\n        return\
    \ \"Yes\";\n    }\n    \n    // Check if the file's name contains one of the following\
    \ extensions: txt, exe, dll.\n    if (file_extension == \"txt\" || file_extension\
    \ == \"exe\" || file_extension == \"dll\") {\n        return \"Yes\";\n    }\n\
    \    \n    // Check if the file's name contains one of the following extensions:\
    \ txt, exe, dll.\n    if (file_extension == \"txt\" || file_extension == \"exe\"\
    \ || file_extension == \"dll\") {\n        return \"Yes\";\n    }\n    \n    //\
    \ Check if the file's name contains one of the following extensions: txt, exe,\
    \ dll.\n    if (file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\") {\n        return \"Yes\";\n    }\n    \n    // Check if the file's\
    \ name contains one of the following extensions: txt, exe, dll.\n    if (file_extension\
    \ == \"txt\" || file_extension == \"exe\" || file_extension == \"dll\") {\n  \
    \      return \"Yes\";\n    }\n    \n    // Check if the file's name contains\
    \ one of the following extensions: txt", "    // Your code here\n    \n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n\
    \    if (file_name.size() <= 3 || file_name.find_last_of(\".\") == std::string::npos\
    \ ||\n        file_name[0] < 'a' || file_name[0] > 'z' || file_name[1] < 'a' ||\
    \ file_name[1] > 'z' ||\n        file_name[2] < 'a' || file_name[2] > 'z' || file_extension\
    \ != \"txt\" || file_extension != \"exe\" || file_extension != \"dll\") {\n  \
    \      return \"No\";\n    } else {\n        return \"Yes\";\n    }", "    //\
    \ Your code goes here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix_letter = file_prefix.substr(0, 1);\n    std::string\
    \ file_prefix_number = file_prefix.substr(1, file_prefix.size() - 1);\n    std::string\
    \ file_prefix_letter_capital = file_prefix.substr(0, 2);\n    std::string file_prefix_number_capital\
    \ = file_prefix.substr(2, file_prefix.size() - 2);\n    std::string file_prefix_number_lower\
    \ = file_prefix.substr(3, file_prefix.size() - 3);\n    std::string file_prefix_number_upper\
    \ = file_prefix.substr(4, file_prefix.size() - 4);\n    std::string file_prefix_number_digit\
    \ = file_prefix.substr(5, file_prefix.size() - 5);\n    std::string file_prefix_number_digit_capital\
    \ = file_prefix.substr(6, file_prefix.size() - 6);\n    std::string file_prefix_number_digit_lower\
    \ = file_prefix.substr(7, file_prefix.size() - 7);\n    std::string file_prefix_number_digit_upper\
    \ = file_prefix.substr(8, file_prefix.size() - 8);\n    std::string file_prefix_number_digit_digit\
    \ = file_prefix.substr(9, file_prefix.size() - 9);\n    std::string file_prefix_number_digit_digit_capital\
    \ = file_prefix.substr(10, file_prefix.size() - 10);\n    std::string file_prefix_number_digit_digit_lower\
    \ = file_prefix.substr(11, file_prefix.size() - 11);\n    std::string file_prefix_number_digit_digit_upper\
    \ = file_prefix.substr(12, file_prefix.size() - 12);\n    std::string file_prefix_number_digit_digit_digit\
    \ = file_prefix.substr(13, file_prefix.size() - 13);\n    std::string file_prefix_number_digit_digit_digit_capital\
    \ = file_prefix.substr(14, file_prefix.size() - 14);\n    std::string file_prefix_number_digit_digit_digit_lower\
    \ = file_prefix.substr(15, file_prefix.size() - 15);\n    std::string file_prefix_number_digit_digit_digit_upper\
    \ = file_prefix.substr(16, file_prefix.size() - 16);\n    std::string file_prefix_number_digit_digit_digit_digit\
    \ = file_prefix.substr(17, file_prefix.size() - 17);\n    std::string file_prefix_number_digit_digit_digit_digit_capital\
    \ = file_prefix.substr(18, file_prefix.size() - 18);\n    std::string file_prefix_number_digit_digit_digit_digit_lower\
    \ = file_prefix.substr(19, file_prefix.size() - 19);\n    std::string file_prefix_number_digit_digit_digit_digit_upper\
    \ = file_prefix.substr(20, file_prefix.size() - 20);\n    std::string file_prefix_number_digit_digit_digit_digit_digit\
    \ = file_prefix.substr(21, file_prefix.size() - 21);\n    std::string file_prefix_number_digit_digit_digit_digit_digit_capital\
    \ = file_prefix.substr(22, file_prefix.size() - 22);\n    std::string file_prefix_number_digit_digit_digit_digit_digit_lower\
    \ = file_prefix.substr(23, file_prefix.size() - 23);\n    ", "    // Your code\
    \ here\n    \n    return file_name;", "    // Your code here\n    \n    // Write\
    \ your code here\n    \n    return \"\";", "    // Your code goes here\n    \n\
    \    std::string file_extension;\n    int dot_index = file_name.find_last_of(\"\
    .\");\n    if (dot_index != std::string::npos) {\n        file_extension = file_name.substr(dot_index+1);\n\
    \    }\n    if (dot_index != std::string::npos && dot_index != file_name.size()\
    \ - 1) {\n        std::string first_letter = file_name.substr(0, dot_index);\n\
    \        if (first_letter == \"a\" || first_letter == \"b\" || first_letter ==\
    \ \"c\" || first_letter == \"d\" || first_letter == \"e\" || first_letter == \"\
    f\" || first_letter == \"g\" || first_letter == \"h\" || first_letter == \"i\"\
    \ || first_letter == \"j\" || first_letter == \"k\" || first_letter == \"l\" ||\
    \ first_letter == \"m\" || first_letter == \"n\" || first_letter == \"o\" || first_letter\
    \ == \"p\" || first_letter == \"q\" || first_letter == \"r\" || first_letter ==\
    \ \"s\" || first_letter == \"t\" || first_letter == \"u\" || first_letter == \"\
    v\" || first_letter == \"w\" || first_letter == \"x\" || first_letter == \"y\"\
    \ || first_letter == \"z\") {\n            file_extension = file_name.substr(dot_index+1);\n\
    \        }\n    }\n    if (file_extension == \"txt\" || file_extension == \"exe\"\
    \ || file_extension == \"dll\") {\n        return \"Yes\";\n    } else {\n   \
    \     return \"No\";\n    }", "    std::string file_extension;\n    int dot_index\
    \ = file_name.find_last_of(\".\");\n    if (dot_index != std::string::npos) {\n\
    \        file_extension = file_name.substr(dot_index + 1);\n    }\n    if (dot_index\
    \ != std::string::npos && dot_index != file_name.size() - 1) {\n        std::string\
    \ first_letter = file_name.substr(0, dot_index);\n        if (first_letter.find_first_not_of(\"\
    0123456789abcdefABCDEF\") == 0) {\n            file_extension = file_name.substr(dot_index\
    \ + 1);\n        }\n    }\n    if (dot_index != std::string::npos && dot_index\
    \ != file_name.size() - 1) {\n        std::string first_letter = file_name.substr(0,\
    \ dot_index);\n        if (first_letter.find_first_not_of(\"0123456789abcdefABCDEF\"\
    ) == 0) {\n            file_extension = file_name.substr(dot_index + 1);\n   \
    \     }\n    }\n    if (dot_index != std::string::npos && dot_index != file_name.size()\
    \ - 1) {\n        std::string first_letter = file_name.substr(0, dot_index);\n\
    \        if (first_letter.find_first_not_of(\"0123456789abcdefABCDEF\") == 0)\
    \ {\n            file_extension = file_name.substr(dot_index + 1);\n        }\n\
    \    }\n    if (dot_index != std::string::npos && dot_index != file_name.size()\
    \ - 1) {\n        std::string first_letter = file_name.substr(0, dot_index);\n\
    \        if (first_letter.find_first_not_of(\"0123456789abcdefABCDEF\") == 0)\
    \ {\n            file_extension = file_name.substr(dot_index + 1);\n        }\n\
    \    }\n    if (dot_index != std::string::npos && dot_index != file_name.size()\
    \ - 1) {\n        std::string first_letter = file_name.substr(0, dot_index);\n\
    \        if (first_letter.find_first_not_of(\"0123456789abcdefABCDEF\") == 0)\
    \ {\n            file_extension = file_name.substr(dot_index + 1);\n        }\n\
    \    }\n    if (dot_index != std::string::npos && dot_index != file_name.size()\
    \ - 1) {\n        std::string first_letter = file_name.substr(0, dot_index);\n\
    \        if (first_letter.find_first_not_of(\"0123456789abcdefABCDEF\") == 0)\
    \ {\n            file_extension = file_name.substr(dot_index + 1);\n        }\n\
    \    }\n    if (dot_index != std::string::npos && dot_index != file_name.size()\
    \ - 1) {\n        std::string first_letter = file_name.substr(0, dot_index);\n\
    \        if (first_letter.find_first_not_of(\"0123456789abcdefABCDEF\") == 0)\
    \ {\n            file_extension = file_name.substr(dot_index + 1);\n        }\n\
    \    }\n    if (dot_index != std::string::npos && dot_index != file_name.size()\
    \ - 1) {\n        std::string first_letter = file_name.substr(0, dot_index);\n\
    \        if (first_letter.find_first_not_of(\"0123456789abcdefABCDEF\") == 0)\
    \ {\n            file_extension = file_name.substr(dot_", "    // Your code goes\
    \ here\n    \n    std::string file_name = file_name.substr(0, file_name.find_first_of(\"\
    .\"));\n    \n    bool flag = false;\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        char c = file_name[i];\n        if ((c >= 'a' && c <= 'z') ||\
    \ (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {\n            continue;\n\
    \        }\n        else {\n            flag = true;\n            break;\n   \
    \     }\n    }\n    \n    if (flag) {\n        for (int i = 0; i < file_name.length();\
    \ i++) {\n            char c = file_name[i];\n            if ((c >= 'a' && c <=\
    \ 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {\n              \
    \  continue;\n            }\n            else {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    \n    if (flag)\
    \ {\n        for (int i = 0; i < file_name.length(); i++) {\n            char\
    \ c = file_name[i];\n            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c\
    \ <= 'Z') || (c >= '0' && c <= '9')) {\n                continue;\n          \
    \  }\n            else {\n                flag = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    if (flag) {\n        for (int i =\
    \ 0; i < file_name.length(); i++) {\n            char c = file_name[i];\n    \
    \        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' &&\
    \ c <= '9')) {\n                continue;\n            }\n            else {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n    }\n    \n    if (flag) {\n        for (int i = 0; i < file_name.length();\
    \ i++) {\n            char c = file_name[i];\n            if ((c >= 'a' && c <=\
    \ 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {\n              \
    \  continue;\n            }\n            else {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    \n    if (flag)\
    \ {\n        for (int i = 0; i < file_name.length(); i++) {\n            char\
    \ c = file_name[i];\n            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c\
    \ <= 'Z') || (c >= '0' && c <= '9')) {\n                continue;\n          \
    \  }\n            else {\n                flag = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    if (flag) {\n        for (int i =\
    \ 0; i < file_name.length(); i++) {\n            char c = file_name[i];\n    \
    \        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ", "    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // ", "    // Your code here\n    \n    return file_name;",
  "    std::string file_extension;\n    std::string file_name_without_extension;\n\
    \    std::string file_name_without_extension_without_dot;\n    std::string file_name_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_dot_without_extension;\n\
    \    std::string file_name_without_extension_without_dot_without_dot_without_dot_without_dot_without_",
  "    std::string file_name_check;\n    // Your code goes here\n    \n    return\
    \ file_name_check;", "    // Your code goes here\n    std::string file_name =\
    \ file_name;\n    std::string file_name_before_dot = file_name.substr(0, file_name.find_first_of(\"\
    .\"));\n    std::string file_name_after_dot = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_name_after_dot_without_extension = file_name_after_dot.substr(0,\
    \ file_name_after_dot.find_last_of(\".\"));\n    std::string file_name_after_dot_with_extension\
    \ = file_name_after_dot.substr(file_name_after_dot.find_last_of(\".\") + 1);\n\
    \    std::string file_name_after_dot_with_extension_without_extension = file_name_after_dot_with_extension.substr(0,\
    \ file_name_after_dot_with_extension.find_last_of(\".\"));\n    std::string file_name_after_dot_with_extension_with_extension\
    \ = file_name_after_dot_with_extension.substr(file_name_after_dot_with_extension.find_last_of(\"\
    .\") + 1);\n    std::string file_name_after_dot_with_extension_with_extension_without_extension\
    \ = file_name_after_dot_with_extension_with_extension.substr(0, file_name_after_dot_with_extension_with_extension.find_last_of(\"\
    .\"));\n    std::string file_name_after_dot_with_extension_with_extension_with_extension\
    \ = file_name_after_dot_with_extension_with_extension.substr(file_name_after_dot_with_extension_with_extension.find_last_of(\"\
    .\") + 1);\n    std::string file_name_after_dot_with_extension_with_extension_with_extension_without_extension\
    \ = file_name_after_dot_with_extension_with_extension_with_extension.substr(0,\
    \ file_name_after_dot_with_extension_with_extension_with_extension.find_last_of(\"\
    .\"));\n    std::string file_name_after_dot_with_extension_with_extension_with_extension_with_extension\
    \ = file_name_after_dot_with_extension_with_extension_with_extension.substr(file_name_after_dot_with_extension_with_extension_with_extension.find_last_of(\"\
    .\") + 1);\n    std::string file_name_after_dot_with_extension_with_extension_with_extension_with_extension_without_extension\
    \ = file_name_after_dot_with_extension_with_extension_with_extension_with_extension.substr(0,\
    \ file_name_after_dot_with_extension_with_extension_with_extension_with_extension.find_last_of(\"\
    .\"));\n    std::string file_name_after_dot_with_extension_with_extension_with_extension_with_extension_with_extension\
    \ = file_name_after_dot_with_extension_with_extension_with_extension_with_extension.substr(file_name_after_dot_with_extension_with_extension_with_extension_with_extension.find_last_of(\"\
    .\") + 1);\n    std::string file_name_after_dot_with_extension_with_extension_with_extension_with_extension_with_extension_without_extension\
    \ = file_name_after_dot_with_extension_with_extension_with_extension_with_extension_with_extension.substr(0,\
    \ file_name_after_dot_with_extension_with_extension_with_extension_with_extension_with_extension.find_last_of",
  "    // Your code here\n    \n    std::string file_extension;\n    \n    size_t\
    \ pos = file_name.find_last_of(\".\");\n    if (pos != std::string::npos) {\n\
    \        file_extension = file_name.substr(pos);\n    }\n    \n    if (file_name.size()\
    \ > 3 || file_name.find_first_not_of(\"0123456789\") == std::string::npos) {\n\
    \        return \"No\";\n    }\n    \n    if (file_extension == \"exe\" || file_extension\
    \ == \"dll\") {\n        return \"Yes\";\n    }\n    \n    return \"No\";", " \
    \   std::string file_extension = file_name.substr(file_name.find_last_of(\".\"\
    ) + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix_without_extension = file_prefix.substr(0,\
    \ file_prefix.find_last_of(\".\"));\n    std::string file_prefix_with_extension\
    \ = file_prefix.substr(0, file_prefix.find_last_of(\".\"));\n    std::string file_prefix_without_extension_without_dots\
    \ = file_prefix_without_extension.substr(0, file_prefix_without_extension.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_without_dots = file_prefix_with_extension.substr(0,\
    \ file_prefix_with_extension.find_last_of(\".\"));\n    std::string file_prefix_without_extension_with_dots\
    \ = file_prefix_without_extension.substr(0, file_prefix_without_extension.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dots = file_prefix_with_extension.substr(0,\
    \ file_prefix_with_extension.find_last_of(\".\"));\n    std::string file_prefix_without_extension_without_dots_without_dots\
    \ = file_prefix_without_extension_without_dots.substr(0, file_prefix_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_without_dots_without_dots =\
    \ file_prefix_with_extension_without_dots.substr(0, file_prefix_with_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_prefix_without_extension_with_dots_without_dots =\
    \ file_prefix_without_extension_with_dots.substr(0, file_prefix_without_extension_with_dots.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dots_without_dots = file_prefix_with_extension_with_dots.substr(0,\
    \ file_prefix_with_extension_with_dots.find_last_of(\".\"));\n    std::string\
    \ file_prefix_without_extension_without_dots_without_dots_without_dots = file_prefix_without_extension_without_dots_without_dots.substr(0,\
    \ file_prefix_without_extension_without_dots_without_dots.find_last_of(\".\"));\n\
    \    std::string file_prefix_with_extension_without_dots_without_dots_without_dots\
    \ = file_prefix_with_extension_without_dots_without_dots.substr(0, file_prefix_with_extension_without_dots_without_dots.find_last_of(\"\
    .\"));\n    std::string file_prefix_without_extension_with_dots_without_dots_without_dots\
    \ = file_prefix_without_extension_with_dots_without_dots.substr(0, file_prefix_without_extension_with_dots_without_dots.find_last_of(\"\
    .\"));\n    std::string file_prefix_with_extension_with_dots_without_dots_without_dots\
    \ = file_prefix_with_extension_with_dots_without_dots.substr(0, file_prefix_with_extension_with_dots_without_dots.find_last_",
  "    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // ", "    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // ", "  \
    \  // Your code here\n    \n    std::string file_name = file_name;\n    \n   \
    \ if (file_name.size() > 3 || file_name.find(\".\") == std::string::npos) {\n\
    \        return \"No\";\n    }\n    \n    if (file_name.substr(0, 1) != 'a' ||\
    \ file_name.substr(0, 1) != 'A' || file_name.substr(0, 1) != 'b' || file_name.substr(0,\
    \ 1) != 'B' || file_name.substr(0, 1) != 'c' || file_name.substr(0, 1) != 'C'\
    \ || file_name.substr(0, 1) != 'd' || file_name.substr(0, 1) != 'D' || file_name.substr(0,\
    \ 1) != 'e' || file_name.substr(0, 1) != 'E' || file_name.substr(0, 1) != 'f'\
    \ || file_name.substr(0, 1) != 'F' || file_name.substr(0, 1) != 'g' || file_name.substr(0,\
    \ 1) != 'G' || file_name.substr(0, 1) != 'h' || file_name.substr(0, 1) != 'H'\
    \ || file_name.substr(0, 1) != 'i' || file_name.substr(0, 1) != 'I' || file_name.substr(0,\
    \ 1) != 'j' || file_name.substr(0, 1) != 'J' || file_name.substr(0, 1) != 'k'\
    \ || file_name.substr(0, 1) != 'K' || file_name.substr(0, 1) != 'l' || file_name.substr(0,\
    \ 1) != 'L' || file_name.substr(0, 1) != 'm' || file_name.substr(0, 1) != 'M'\
    \ || file_name.substr(0, 1) != 'n' || file_name.substr(0, 1) != 'N' || file_name.substr(0,\
    \ 1) != 'o' || file_name.substr(0, 1) != 'O' || file_name.substr(0, 1) != 'p'\
    \ || file_name.substr(0, 1) != 'P' || file_name.substr(0, 1) != 'q' || file_name.substr(0,\
    \ 1) != 'Q' || file_name.substr(0, 1) != 'r' || file_name.substr(0, 1) != 'R'\
    \ || file_name.substr(0, 1) != 's' || file_name.substr(0, 1) != 'S' || file_name.substr(0,\
    \ 1) != 't' || file_name.substr(0, 1) != 'T' || file_name.substr(0, 1) != 'u'\
    \ || file_name.substr(0, 1) != 'U' || file_name.substr(0, 1) != 'v' || file_name.substr(0,\
    \ 1) != 'V' || file_name.substr(0, 1) != 'w' || file_name.substr(0, 1) != 'W'\
    \ || file_name.substr(0, 1) != 'x' || file_name.substr(0, 1) != 'X' || file_name.substr(0,\
    \ 1) != 'y' || file_name.substr(0, 1) != 'Y' || file_name.substr(0, 1) != 'z'\
    \ || file_name.substr(0, 1) != 'Z') {\n        return \"No\";\n    }\n    \n \
    \   if (file_name.substr(file_name.find_first_of(\".\") + 1, 3) != \"txt\" ||\
    \ file_name.substr(file_name.find_first_of(\".\") + 1, 3) != \"exe\" || file_name.substr(file_name.find_first_of(\"\
    .\"", "    // Your code here\n    \n    std::string file_name_check = file_name;\n\
    \    \n    int count = 0;\n    \n    for (int i = 0; i < file_name_check.size();\
    \ i++) {\n        if (file_name_check[i] >= 'a' && file_name_check[i] <= 'z')\
    \ {\n            count++;\n        }\n    }\n    \n    if (count > 3) {\n    \
    \    return \"No\";\n    }\n    \n    if (file_name_check.size() == 0) {\n   \
    \     return \"No\";\n    }\n    \n    if (file_name_check[0] == '.') {\n    \
    \    return \"No\";\n    }\n    \n    if (file_name_check[0] == '0' || file_name_check[0]\
    \ == '9') {\n        return \"No\";\n    }\n    \n    if (file_name_check[0] ==\
    \ 'a' || file_name_check[0] == 'z') {\n        return \"No\";\n    }\n    \n \
    \   for (int i = 0; i < file_name_check.size(); i++) {\n        if (file_name_check[i]\
    \ >= 'a' && file_name_check[i] <= 'z') {\n            count++;\n        }\n  \
    \  }\n    \n    if (count > 3) {\n        return \"No\";\n    }\n    \n    if\
    \ (file_name_check[file_name_check.size() - 1] == '.') {\n        return \"No\"\
    ;\n    }\n    \n    if (file_name_check[file_name_check.size() - 1] == '0' ||\
    \ file_name_check[file_name_check.size() - 1] == '9') {\n        return \"No\"\
    ;\n    }\n    \n    if (file_name_check[file_name_check.size() - 1] == 'a' ||\
    \ file_name_check[file_name_check.size() - 1] == 'z') {\n        return \"No\"\
    ;\n    }\n    \n    for (int i = 0; i < file_name_check.size(); i++) {\n     \
    \   if (file_name_check[i] >= 'a' && file_name_check[i] <= 'z') {\n          \
    \  count++;\n        }\n    }\n    \n    if (count > 3) {\n        return \"No\"\
    ;\n    }\n    \n    if (file_name_check[0] == '.') {\n        return \"No\";\n\
    \    }\n    \n    if (file_name_check[0] == '0' || file_name_check[0] == '9')\
    \ {\n        return \"No\";\n    }\n    \n    if (file_name_check[0] == 'a' ||\
    \ file_name_check[0] == 'z') {\n        return \"No\";\n    }\n    \n    for (int\
    \ i = 0; i < file_name_check.size(); i++) {\n        if (file_name_check[i] >=\
    \ 'a' && file_name_check[i] <= 'z') {\n            count++;\n        }\n    }\n\
    \    \n    if (count > 3) {\n        return \"No\";\n    }\n    \n    if (file_name_check[file_name_check.size()\
    \ - 1] == '.') {\n        return \"No\";\n    }\n    \n    if (file_name_check[file_name_check.size()\
    \ - 1] == '0' || file_name_check[file_name_check.size() - 1] == '9') {\n     \
    \   return \"No\";\n    }\n    \n", "    // Your code goes here\n    \n    return\
    \ file_name;", "    int num_digits = 0;\n    int dot_count = 0;\n    int first_letter\
    \ = 0;\n    int last_letter = 0;\n    std::string file_name_copy = file_name;\n\
    \    \n    // Count number of digits in file name\n    for (int i = 0; i < file_name_copy.size();\
    \ i++) {\n        if (file_name_copy[i] >= '0' && file_name_copy[i] <= '9') {\n\
    \            num_digits++;\n        }\n    }\n    \n    // Count number of dots\
    \ in file name\n    for (int i = 0; i < file_name_copy.size(); i++) {\n      \
    \  if (file_name_copy[i] == '.') {\n            dot_count++;\n        }\n    }\n\
    \    \n    // Check if file name is valid\n    if (dot_count == 0 && num_digits\
    \ == 1 && file_name_copy[0] == 'a' && file_name_copy[1] == 'z' && file_name_copy[2]\
    \ == 'A' && file_name_copy[3] == 'Z') {\n        return \"Yes\";\n    }\n    else\
    \ {\n        return \"No\";\n    }", "    int dot_pos = file_name.find_first_of(\"\
    .\");\n    if (dot_pos == std::string::npos) return \"No\";\n    if (file_name.size()<3)\
    \ return \"No\";\n    if (file_name[dot_pos]<='9' || file_name[dot_pos]>='0')\
    \ return \"No\";\n    if (file_name[dot_pos]=='.') return \"No\";\n    if (file_name[dot_pos]<'a'\
    \ || file_name[dot_pos]>'z') return \"No\";\n    if (file_name[dot_pos]>'z') return\
    \ \"No\";\n    return \"Yes\";", "    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of(\".\"));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_", "    // Your code goes here\n\
    \    std::string file_extension = file_name.substr(file_name.find_last_of(\".\"\
    ) + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_",
  "    // Your code goes here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    if (file_name.length() > 3 && file_name.find_last_of(\".\") ==\
    \ std::string::npos) {\n        return \"No\";\n    }\n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    if (file_name.find_first_not_of(\"0123456789\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    a\") == std::string::npos || file_name.find_first_not_of(\"A\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"a\"\
    ) == std::string::npos || file_name.find_first_not_of(\"A\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    return \"Yes\";", "    int n = file_name.size();\n\
    \    if (n < 3) return \"No\";\n    if (file_name.at(0) == '0' || file_name.at(0)\
    \ == '9') return \"No\";\n    if (file_name.at(0) == 'a' || file_name.at(0) ==\
    \ 'z') return \"No\";\n    if (file_name.at(0) == 'A' || file_name.at(0) == 'Z')\
    \ return \"No\";\n    if (file_name.at(0) == '.') return \"No\";\n    if (file_name.at(0)\
    \ != file_name.at(n - 1)) return \"No\";\n    if (file_name.at(n - 1) != 'a' &&\
    \ file_name.at(n - 1) != 'z' && file_name.at(n - 1) != 'A' && file_name.at(n -\
    \ 1) != 'Z') return \"No\";\n    if (file_name.at(n - 1) != '.' && file_name.at(n\
    \ - 1) != file_name.at(n - 2)) return \"No\";\n    if (file_name.at(n - 2) !=\
    \ 'txt' && file_name.at(n - 2) != 'exe' && file_name.at(n - 2) != 'dll') return\
    \ \"No\";\n    return \"Yes\";", "    // Your code goes here\n    int count =\
    \ 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    int num_digits\
    \ = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            num_digits++;\n        }\n   \
    \ }\n    if (num_digits > 3) {\n        return \"No\";\n    }\n    if (file_name.find('.')\
    \ != std::string::npos) {\n        return \"No\";\n    }\n    if (file_name[0]\
    \ >= 'a' && file_name[0] <= 'z') {\n        return \"No\";\n    }\n    if (file_name[file_name.size()\
    \ - 1] >= 'a' && file_name[file_name.size() - 1] <= 'z') {\n        return \"\
    No\";\n    }\n    if (file_name.substr(0, 1) != \".\") {\n        return \"No\"\
    ;\n    }\n    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) !=\
    \ \"b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\"\
    \ && file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0,\
    \ 1) != \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) !=\
    \ \"i\" && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\"\
    \ && file_name.substr(0, 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0,\
    \ 1) != \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) !=\
    \ \"p\" && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\"\
    \ && file_name.substr(0, 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0,\
    \ 1) != \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) !=\
    \ \"w\" && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\"\
    \ && file_name.substr(0, 1) != \"z\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";", "    std::string file_name_check;\n    int counter = 0;\n    for\
    \ (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.')\
    \ {\n            if (counter == 1) {\n                file_name_check = \"No\"\
    ;\n                break;\n            }\n            counter++;\n        }\n\
    \        else if (file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >=\
    \ 'A' && file_name[i] <= 'Z') {\n            if (counter == 1) {\n           \
    \     file_name_check = \"No\";\n                break;\n            }\n     \
    \       counter++;\n        }\n        else if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            if (counter == 1) {\n                file_name_check\
    \ = \"No\";\n                break;\n            }\n            counter++;\n \
    \       }\n    }\n    if (counter == 1) {\n        file_name_check = \"No\";\n\
    \    }\n    return file_name_check;", "    std::string file_extension;\n    int\
    \ dot_count = 0;\n    std::string file_before_dot;\n    std::string file_after_dot;\n\
    \    \n    // Get the file's extension.\n    file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    // Check if the file's name contains more than three digits.\n\
    \    if (file_name.size() > 3) {\n        return \"No\";\n    }\n    \n    //\
    \ Check if the file's name contains exactly one dot.\n    if (file_name.find_first_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    \n    // Check\
    \ if the file's name starts with a letter from the latin alphabet.\n    if (file_name.find_first_not_of(\"\
    0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") != std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    // Check if the file's name ends\
    \ with a letter from the latin alphabet.\n    if (file_name.find_last_not_of(\"\
    0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") != std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    // Get the file's name before the\
    \ first dot.\n    file_before_dot = file_name.substr(0, file_name.find_first_of(\"\
    .\"));\n    \n    // Get the file's name after the last dot.\n    file_after_dot\
    \ = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n    // Check if\
    \ the file's name contains one of the following strings: ['txt', 'exe', 'dll'].\n\
    \    if (file_after_dot == \"txt\" || file_after_dot == \"exe\" || file_after_dot\
    \ == \"dll\") {\n        return \"Yes\";\n    }\n    \n    // Check if the file's\
    \ name contains one of the following strings: ['txt', 'exe', 'dll'].\n    if (file_after_dot\
    \ == \"txt\" || file_after_dot == \"exe\" || file_after_dot == \"dll\") {\n  \
    \      return \"Yes\";\n    }\n    \n    // Check if the file's name contains\
    \ one of the following strings: ['txt', 'exe', 'dll'].\n    if (file_after_dot\
    \ == \"txt\" || file_after_dot == \"exe\" || file_after_dot == \"dll\") {\n  \
    \      return \"Yes\";\n    }\n    \n    // Check if the file's name contains\
    \ one of the following strings: ['txt', 'exe', 'dll'].\n    if (file_after_dot\
    \ == \"txt\" || file_after_dot == \"exe\" || file_after_dot == \"dll\") {\n  \
    \      return \"Yes\";\n    }\n    \n    // Check if the file's name contains\
    \ one of the following strings: ['txt', 'exe', 'dll'].\n    if (file_after_dot\
    \ == \"txt\" || file_after_dot == \"exe\" || file_after_dot == \"dll\") {\n  \
    \      return \"", "    // Your code goes here\n    \n    std::string file_name_check\
    \ = file_name;\n    \n    if (file_name_check.size() > 3 || file_name_check.find(\"\
    .\") == 0 || file_name_check.substr(0, 1) < 'a' || file_name_check.substr(0, 1)\
    \ > 'z' || file_name_check.substr(file_name_check.find_last_of(\".\") + 1) !=\
    \ \"txt\" || file_name_check.substr(file_name_check.find_last_of(\".\") + 1) !=\
    \ \"exe\" || file_name_check.substr(file_name_check.find_last_of(\".\") + 1) !=\
    \ \"dll\") {\n        file_name_check = \"No\";\n    }\n    \n    return file_name_check;",
  "    // Your code goes here\n    \n    std::string file_name = file_name;\n    \n\
    \    if (file_name.size() > 3 || file_name.find(\".\") == 0 || file_name[0] !=\
    \ 'a' || file_name[1] != 'z' || file_name[2] != 'A' || file_name[3] != 'Z') {\n\
    \        return \"No\";\n    }\n    \n    std::string file_name = file_name.substr(0,\
    \ file_name.find(\".\"));\n    \n    if (file_name.size() == 0 || file_name.find(\"\
    .txt\") == -1 || file_name.find(\".exe\") == -1 || file_name.find(\".dll\") ==\
    \ -1) {\n        return \"No\";\n    }\n    \n    return \"Yes\";", "    // Your\
    \ code here\n    \n    std::string file_extension;\n    std::string file_extension_check;\n\
    \    \n    file_extension = file_name.substr(file_name.find_last_of('.') + 1);\n\
    \    file_extension_check = file_extension;\n    \n    if (file_extension_check\
    \ == \"txt\" || file_extension_check == \"exe\" || file_extension_check == \"\
    dll\") {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }",
  "    int dotPos = file_name.find_first_of(\".\");\n    if (dotPos == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name.at(dotPos - 1) != '\\0'\
    \ && file_name.at(dotPos - 1) < 'a' || file_name.at(dotPos - 1) > 'z') {\n   \
    \     return \"No\";\n    }\n    std::string fileName = file_name.substr(0, dotPos);\n\
    \    if (fileName.size() > 3 || fileName.find(\"..\") != std::string::npos) {\n\
    \        return \"No\";\n    }\n    if (fileName.find(\".txt\") != std::string::npos\
    \ || fileName.find(\".exe\") != std::string::npos || fileName.find(\".dll\") !=\
    \ std::string::npos) {\n        return \"Yes\";\n    }\n    return \"No\";", " \
    \   // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // ", "    // Your code here\n    int count = 0;\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0, 1) < 'a'\
    \ || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n    for (int\
    \ i = 0; i < 3; i++) {\n        if (file_name.substr(i + 1, 1) != \".\" || file_name.substr(i\
    \ + 1, 1) != \".txt\" || file_name.substr(i + 1, 1) != \".exe\" || file_name.substr(i\
    \ + 1, 1) != \".dll\") {\n            return \"No\";\n        }\n    }\n    return\
    \ \"Yes\";", "    int num_digits = 0;\n    int num_dots = 0;\n    int num_letters\
    \ = 0;\n    for (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            num_digits++;\n        } else\
    \ if (file_name[i] == '.') {\n            num_dots++;\n        } else if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            num_letters++;\n        }\n  \
    \  }\n    if (num_digits > 3 || num_dots > 1 || num_letters > 1) {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 1) == \"-\") {\n        return \"\
    No\";\n    }\n    if (file_name.substr(0, 1) >= 'a' && file_name.substr(0, 1)\
    \ <= 'z') {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.size()-1,\
    \ 1) >= 'a' && file_name.substr(file_name.size()-1, 1) <= 'z') {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // Your code goes here\n    \n  \
    \  std::string file_extension = file_name.substr(file_name.find_last_of('.') +\
    \ 1);\n    \n    if (file_name.length() > 3 && file_name.find_last_of('.') ==\
    \ file_name.length() - 1) {\n        if (file_extension == \"txt\" || file_extension\
    \ == \"exe\" || file_extension == \"dll\") {\n            return \"Yes\";\n  \
    \      }\n    }\n    return \"No\";", "    // Your code here\n    int count =\
    \ 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find(\"\
    .\") == -1) {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) !=\
    \ \".\") {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" || \n        file_name.substr(file_name.find(\".\") + 1)\
    \ != \"exe\" || \n        file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n    \
    \    if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n\
    \        }\n    }\n    if (count > 3) {\n        return \"No\";\n    }\n    if\
    \ (file_name.find(\".\") == std::string::npos) {\n        return \"No\";\n   \
    \ }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n\
    \        return \"No\";\n    }\n    if (file_name.substr(file_name.find(\".\"\
    ) + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\" &&\
    \ file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return \"\
    No\";\n    }\n    return \"Yes\";", "    // Your code here\n    std::string file_extension\
    \ = file_name.substr(file_name.find_last_of('.') + 1);\n    std::string file_without_extension\
    \ = file_name.substr(0, file_name.find_last_of('.'));\n    std::string file_without_extension_without_dots\
    \ = file_without_extension.substr(0, file_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension = file_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots.find_last_of('.'));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_", "    // Your code here\n    int count = 0;\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if(count > 3 || file_name.find(\"\
    .\") == -1 || file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A'\
    \ && file_name[0] <= 'Z') {\n        return \"No\";\n    }\n    for(int i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            count++;\n\
    \        }\n    }\n    if(count > 1 || file_name.find(\".\") != -1 || file_name.substr(0,\
    \ 1) != \".\" || file_name.substr(0, 1) != \"..\") {\n        return \"No\";\n\
    \    }\n    return \"Yes\";", "    // Your code goes here\n    int count = 0;\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3 || file_name.find(\".\") == -1 || file_name[0] >= 'a' && file_name[0]\
    \ <= 'z' || file_name[0] >= 'A' && file_name[0] <= 'Z') {\n        return \"No\"\
    ;\n    } else {\n        return \"Yes\";\n    }", "    // Your code here\n   \
    \ int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n       \
    \ if (file_name[i] >= 'a' && file_name[i] <= 'z') {\n            count++;\n  \
    \      } else if (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            count++;\n\
    \        } else if (file_name[i] >= '0' && file_name[i] <= '9') {\n          \
    \  count++;\n        }\n    }\n    if (count > 3) {\n        return \"No\";\n\
    \    }\n    if (file_name.find(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 1) != \".\") {\n        return \"\
    No\";\n    }\n    if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" &&\
    \ \n        file_name.substr(file_name.find(\".\") + 1) != \"exe\" && \n     \
    \   file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n    std::string\
    \ file_prefix = file_name.substr(0, file_name.find_last_of(\".\"));\n    \n  \
    \  bool is_valid = true;\n    \n    if (file_name.size() > 3 || file_name.find_last_of(\"\
    .\") != std::string::npos) {\n        is_valid = false;\n    }\n    \n    if (file_prefix.size()\
    \ > 1 || file_prefix.find_first_not_of(\"0123456789abcdefABCDEF\") != std::string::npos)\
    \ {\n        is_valid = false;\n    }\n    \n    if (file_extension.size() > 3\
    \ || file_extension.find_last_of(\".\") != std::string::npos) {\n        is_valid\
    \ = false;\n    }\n    \n    return std::to_string(is_valid);", "    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // ", "    // Write your code here\n    \n    std::string file_name_check;\n\
    \    \n    \n    return file_name_check;", "    // Your code goes here\n    int\
    \ count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find(\"\
    .\") == -1) {\n        return \"No\";\n    }\n    if (file_name.substr(0, 1) <\
    \ 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n    if\
    \ (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    \n    // Write your code here\n    \n    return \"\";", "    // Write your\
    \ code here\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    if (file_name.size() > 3 || file_name.find_last_of(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\") {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) != \"b\" &&\
    \ file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0,\
    \ 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) !=\
    \ \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) != \"i\"\
    \ && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0,\
    \ 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) !=\
    \ \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) != \"p\"\
    \ && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0,\
    \ 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) !=\
    \ \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) != \"w\"\
    \ && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0,\
    \ 1) != \"z\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    //\
    \ Your code goes here\n    \n    // Write your code here\n    \n    return \"\"\
    ;", "    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of(\".\"));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_", "    // Your code here\n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of('.') + 1);\n    std::string\
    \ file_without_extension = file_name.substr(0, file_name.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of('.'));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of('.'));\n\
    \    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_", "    // Your code goes here\n    std::string file_name_check;\n    \n\
    \    // Your code goes here\n    \n    return file_name_check;", "    // Your\
    \ code here\n    std::string file_extension = file_name.substr(file_name.find_last_of('.')\
    \ + 1);\n    if (file_name.length() < 3 || file_name.find_last_of('.') == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\") {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) != \"b\" &&\
    \ file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0,\
    \ 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) !=\
    \ \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) != \"i\"\
    \ && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0,\
    \ 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) !=\
    \ \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) != \"p\"\
    \ && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0,\
    \ 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) !=\
    \ \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) != \"w\"\
    \ && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0,\
    \ 1) != \"z\") {\n        return \"No\";\n    }\n    return \"Yes\";", "    //\
    \ Your code here\n    std::string file_name = file_name;\n    int count = 0;\n\
    \    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // ", "    int n = file_name.size();\n    if (n < 3 || n > 10) {\n \
    \       return \"No\";\n    }\n    if (file_name.at(0) == '0' || file_name.at(0)\
    \ == '9') {\n        return \"No\";\n    }\n    if (file_name.at(0) != 'a' &&\
    \ file_name.at(0) != 'A') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 1) != 'd' && file_name.at(file_name.size() - 1) != 'D') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 't' && file_name.at(file_name.size()\
    \ - 2) == 'T') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 2) == 'e' && file_name.at(file_name.size() - 2) == 'E') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 'x' && file_name.at(file_name.size()\
    \ - 2) == 'X') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 2) == 'p' && file_name.at(file_name.size() - 2) == 'P') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 'l' && file_name.at(file_name.size()\
    \ - 2) == 'L') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 2) == 'd' && file_name.at(file_name.size() - 2) == 'D') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 'l' && file_name.at(file_name.size()\
    \ - 2) == 'L') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 2) == 'o' && file_name.at(file_name.size() - 2) == 'O') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 'b' && file_name.at(file_name.size()\
    \ - 2) == 'B') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 2) == 'e' && file_name.at(file_name.size() - 2) == 'E') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 'x' && file_name.at(file_name.size()\
    \ - 2) == 'X') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 2) == 'p' && file_name.at(file_name.size() - 2) == 'P') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 'l' && file_name.at(file_name.size()\
    \ - 2) == 'L') {\n        return \"No\";\n    }\n    if (file_name.at(file_name.size()\
    \ - 2) == 'd' && file_name.at(file_name.size() - 2) == 'D') {\n        return\
    \ \"No\";\n    }\n    if (file_name.at(file_name.size() - 2) == 'l' && file_name.at(file_name.size()\
    \ - 2) == 'L') {\n        return \"No\";\n    }\n", "    // Your code here\n \
    \   \n    \n    return file_name;", "    // Your code here\n    \n    std::string\
    \ file_extension = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n\
    \    if (file_name.length() > 3 && file_name.find_last_of(\".\") == std::string::npos\
    \ &&\n        file_name[0] >= 'a' && file_name[0] <= 'z' &&\n        file_name[file_name.length()\
    \ - 1] >= 'a' && file_name[file_name.length() - 1] <= 'z' &&\n        file_name.substr(0,\
    \ 1) != \"\") {\n        return \"Yes\";\n    } else {\n        return \"No\"\
    ;\n    }", "    // Your code here\n    \n    // Write your code here\n    \n \
    \   return \"\";", "    int num_digits = 0;\n    int num_dots = 0;\n    int num_letters\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            num_digits++;\n        } else\
    \ if (file_name[i] == '.') {\n            num_dots++;\n        } else if (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') {\n            num_letters++;\n        } else\
    \ if (file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            num_letters++;\n\
    \        }\n    }\n    if (num_digits > 3 || num_dots > 1 || num_letters > 1)\
    \ {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }", " \
    \   // Your code goes here\n    std::string file_extension;\n    int counter =\
    \ 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ == '.') {\n            counter++;\n        }\n    }\n    if (counter > 3) {\n\
    \        return \"No\";\n    }\n    if (counter == 1) {\n        file_extension\
    \ = file_name.substr(0, file_name.length() - 1);\n    }\n    if (file_name.substr(0,\
    \ 1) == \"a\" || file_name.substr(0, 1) == \"b\" || file_name.substr(0, 1) ==\
    \ \"c\" || file_name.substr(0, 1) == \"d\" || file_name.substr(0, 1) == \"e\"\
    \ || file_name.substr(0, 1) == \"f\" || file_name.substr(0, 1) == \"g\" || file_name.substr(0,\
    \ 1) == \"h\" || file_name.substr(0, 1) == \"i\" || file_name.substr(0, 1) ==\
    \ \"j\" || file_name.substr(0, 1) == \"k\" || file_name.substr(0, 1) == \"l\"\
    \ || file_name.substr(0, 1) == \"m\" || file_name.substr(0, 1) == \"n\" || file_name.substr(0,\
    \ 1) == \"o\" || file_name.substr(0, 1) == \"p\" || file_name.substr(0, 1) ==\
    \ \"q\" || file_name.substr(0, 1) == \"r\" || file_name.substr(0, 1) == \"s\"\
    \ || file_name.substr(0, 1) == \"t\" || file_name.substr(0, 1) == \"u\" || file_name.substr(0,\
    \ 1) == \"v\" || file_name.substr(0, 1) == \"w\" || file_name.substr(0, 1) ==\
    \ \"x\" || file_name.substr(0, 1) == \"y\" || file_name.substr(0, 1) == \"z\"\
    ) {\n        if (file_name.substr(1, 1) == \"a\" || file_name.substr(1, 1) ==\
    \ \"b\" || file_name.substr(1, 1) == \"c\" || file_name.substr(1, 1) == \"d\"\
    \ || file_name.substr(1, 1) == \"e\" || file_name.substr(1, 1) == \"f\" || file_name.substr(1,\
    \ 1) == \"g\" || file_name.substr(1, 1) == \"h\" || file_name.substr(1, 1) ==\
    \ \"i\" || file_name.substr(1, 1) == \"j\" || file_name.substr(1, 1) == \"k\"\
    \ || file_name.substr(1, 1) == \"l\" || file_name.substr(1, 1) == \"m\" || file_name.substr(1,\
    \ 1) == \"n\" || file_name.substr(1, 1) == \"o\" || file_name.substr(1, 1) ==\
    \ \"p\" || file_name.substr(1, 1) == \"q\" || file_name.substr(1, 1) == \"r\"\
    \ || file_name.substr(1, 1) == \"s\" || file_name.substr(1, 1) == \"t\" || file_name.substr(1,\
    \ 1) == \"u\" || file_name.substr(1, 1) == \"v\" || file_name.substr(1, 1) ==\
    \ \"w\" || file_name.substr(1, 1) == \"x\" || file_name.substr(1, 1) == \"y\"\
    \ || file_name.substr(1, 1) == \"z\") {\n            return \"Yes\";\n       \
    \ }\n    }\n    if (file_name.substr(0, 1) == \"A\" || file_name.substr(0, 1)\
    \ == \"", "    // Your code here\n    \n    std::string file_name_check;\n   \
    \ \n    // Your code here\n    \n    return file_name_check;", "    int num_digits\
    \ = 0;\n    int dot_count = 0;\n    int first_letter_count = 0;\n    \n    for\
    \ (int i = 0; i < file_name.size(); i++) {\n        if (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n            num_digits++;\n        }\n        if (file_name[i]\
    \ == '.') {\n            dot_count++;\n        }\n        if (file_name[i] >=\
    \ 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n\
    \            first_letter_count++;\n        }\n    }\n    \n    if (dot_count\
    \ != 1 || num_digits > 3 || first_letter_count > 1 || dot_count > 1) {\n     \
    \   return \"No\";\n    }\n    return \"Yes\";", "    // Your code goes here\n\
    \    \n    std::string file_name_check = \"No\";\n    \n    if (file_name.size()\
    \ > 3) {\n        file_name_check = \"No\";\n    }\n    else if (file_name.find(\"\
    .\") == std::string::npos) {\n        file_name_check = \"No\";\n    }\n    else\
    \ if (file_name.substr(0, 1) < 'a' || file_name.substr(0, 1) > 'z') {\n      \
    \  file_name_check = \"No\";\n    }\n    else if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        file_name_check\
    \ = \"No\";\n    }\n    else {\n        file_name_check = \"Yes\";\n    }\n  \
    \  \n    return file_name_check;", "    // Your code goes here\n    \n    std::string\
    \ file_name = file_name;\n    int count = 0;\n    \n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n    }\n    \n    if (count > 3) {\n        return \"\
    No\";\n    }\n    \n    if (file_name.find(\".\") == std::string::npos) {\n  \
    \      return \"No\";\n    }\n    \n    if (file_name.substr(0, 1) >= 'a' && file_name.substr(0,\
    \ 1) <= 'z') {\n        return \"No\";\n    }\n    \n    if (file_name.substr(file_name.find(\"\
    .\") + 1) != \"txt\" && file_name.substr(file_name.find(\".\") + 1) != \"exe\"\
    \ && file_name.substr(file_name.find(\".\") + 1) != \"dll\") {\n        return\
    \ \"No\";\n    }\n    \n    return \"Yes\";", "    // Your code goes here\n  \
    \  std::string file_name_check;\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] == '.') {\n            count++;\n        }\n\
    \    }\n    if (count == 3 && file_name[0] == 'a' && file_name[1] == 'z' && file_name[2]\
    \ == 'A') {\n        file_name_check = \"Yes\";\n    } else {\n        file_name_check\
    \ = \"No\";\n    }\n    return file_name_check;", "    int count = 0;\n    for\
    \ (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if (count\
    \ > 3) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == file_name.length() - 1) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") > 0 && file_name.find_first_not_of(\".\") < file_name.length() - 1) {\n \
    \       if (file_name[file_name.find_first_not_of(\".\") - 1] >= 'a' && file_name[file_name.find_first_not_of(\"\
    .\") - 1] <= 'z') {\n            if (file_name[file_name.find_first_not_of(\"\
    .\") + 1] >= 'a' && file_name[file_name.find_first_not_of(\".\") + 1] <= 'z')\
    \ {\n                if (file_name[file_name.find_first_not_of(\".\") + 2] !=\
    \ 'e' && file_name[file_name.find_first_not_of(\".\") + 2] != 'x' && file_name[file_name.find_first_not_of(\"\
    .\") + 2] != 'e' && file_name[file_name.find_first_not_of(\".\") + 2] != 'd' &&\
    \ file_name[file_name.find_first_not_of(\".\") + 2] != 'l') {\n              \
    \      return \"No\";\n                }\n            }\n        }\n    }\n  \
    \  return \"Yes\";", "    // Your code here\n    std::string file_name = file_name;\n\
    \    std::string file_name_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_name_without_extension_without_dots = file_name_without_extension.substr(0,\
    \ file_name_without_extension.find_first_of(\".\"));\n    std::string file_name_without_extension_without_dots_without_spaces\
    \ = file_name_without_extension_without_dots.substr(0, file_name_without_extension_without_dots.find_first_of(\"\
    \ \"));\n    std::string file_name_without_extension_without_dots_without_spaces_without_letters\
    \ = file_name_without_extension_without_dots_without_spaces.substr(0, file_name_without_extension_without_dots_without_spaces.find_first_of(\"\
    0123456789\"));\n    std::string file_name_without_extension_without_dots_without_spaces_without_letters_without_numbers\
    \ = file_name_without_extension_without_dots_without_spaces.substr(0, file_name_without_extension_without_dots_without_spaces.find_first_of(\"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"));\n    std::string file_name_without_extension_without_dots_without_spaces_without_letters_without_numbers_without_special_characters\
    \ = file_name_without_extension_without_dots_without_spaces.substr(0, file_name_without_extension_without_dots_without_spaces.find_first_of(\"\
    ~!@#$%^&*()_+-={}[];':\\\",./<>?\"));\n    std::string file_name_without_extension_without_dots_without_spaces_without_letters_without_numbers_without_special_characters_without_numbers\
    \ = file_name_without_extension_without_dots_without_spaces.substr(0, file_name_without_extension_without_dots_without_spaces.find_first_of(\"\
    ~!@#$%^&*()_+-={}[];':\\\",./<>?0123456789\"));\n    std::string file_name_without_extension_without_dots_without_spaces_without_letters_without_numbers_without_special_characters_without_numbers_without_special_characters\
    \ = file_name_without_extension_without_dots_without_spaces.substr(0, file_name_without_extension_without_dots_without_spaces.find_first_of(\"\
    ~!@#$%^&*()_+-={}[];':\\\",./<>?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ));\n    std::string file_name_without_extension_without_dots_without_spaces_without_letters_without_numbers_without_special_characters_without_numbers_without_special_characters_without_special_characters\
    \ = file_name_without_extension_without_dots_", "    // Your code here\n    std::string\
    \ file_name = file_name;\n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_prefix = file_name.", "    // Your code here\n  \
    \  int counter = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n    \
    \    if (file_name[i] >= '0' && file_name[i] <= '9') {\n            counter++;\n\
    \        }\n    }\n    if (counter > 3) {\n        return \"No\";\n    }\n   \
    \ if (file_name.find(\".\") == -1) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) != 'a' && file_name.substr(0, 1) != 'A') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code goes\
    \ here\n    std::string file_extension;\n    std::string file_name_without_extension;\n\
    \    std::string file_name_without_extension_without_dot;\n    std::string file_name_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension;\n    std::string file_name_without_dot_without_extension_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension;\n\
    \    std::string file_name_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_extension_without_dot_without_",
  "    // Your code goes here\n    \n    return file_name;", "    // Write your code\
    \ here\n    std::string file_name_check = \"No\";\n    if (file_name.size() >\
    \ 3) {\n        file_name_check = \"No\";\n    } else if (file_name.find(\".\"\
    ) == std::string::npos) {\n        file_name_check = \"No\";\n    } else if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        file_name_check = \"No\"\
    ;\n    } else if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        file_name_check = \"No\";\n    } else {\n        file_name_check\
    \ = \"Yes\";\n    }\n    return file_name_check;", "    // Your code here\n  \
    \  \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if (file_name.size() > 3 || file_name.find_last_of(\".\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n    \n    if (file_extension\
    \ != \"txt\" && file_extension != \"exe\" && file_extension != \"dll\") {\n  \
    \      return \"No\";\n    }\n    \n    if (file_name.substr(0, 1) != \"a\" &&\
    \ file_name.substr(0, 1) != \"b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0,\
    \ 1) != \"d\" && file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) !=\
    \ \"f\" && file_name.substr(0, 1) != \"g\" && file_name.substr(0, 1) != \"h\"\
    \ && file_name.substr(0, 1) != \"i\" && file_name.substr(0, 1) != \"j\" && file_name.substr(0,\
    \ 1) != \"k\" && file_name.substr(0, 1) != \"l\" && file_name.substr(0, 1) !=\
    \ \"m\" && file_name.substr(0, 1) != \"n\" && file_name.substr(0, 1) != \"o\"\
    \ && file_name.substr(0, 1) != \"p\" && file_name.substr(0, 1) != \"q\" && file_name.substr(0,\
    \ 1) != \"r\" && file_name.substr(0, 1) != \"s\" && file_name.substr(0, 1) !=\
    \ \"t\" && file_name.substr(0, 1) != \"u\" && file_name.substr(0, 1) != \"v\"\
    \ && file_name.substr(0, 1) != \"w\" && file_name.substr(0, 1) != \"x\" && file_name.substr(0,\
    \ 1) != \"y\" && file_name.substr(0, 1) != \"z\") {\n        return \"No\";\n\
    \    }\n    \n    return file_name;", "    // Your code goes here\n    \n    //\
    \ Your code goes here\n    \n    // Your code goes here\n    \n    // Your code\
    \ goes here\n    \n    // Your code goes here\n    \n    // Your code goes here\n\
    \    \n    // Your code goes here\n    \n    // Your code goes here\n    \n  \
    \  // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n", "    // Your\
    \ code here\n    std::string file_name_check;\n    int count = 0;\n    for (int\
    \ i = 0; i < file_name.length(); i++) {\n        if (file_name[i] == '.') {\n\
    \            if (count > 2) {\n                file_name_check = \"No\";\n   \
    \             break;\n            }\n            count++;\n        }\n       \
    \ else if (file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' &&\
    \ file_name[i] <= 'Z') {\n            if (count > 1) {\n                file_name_check\
    \ = \"No\";\n                break;\n            }\n            count++;\n   \
    \     }\n    }\n    if (file_name_check == \"No\") {\n        file_name_check\
    \ = \"Yes\";\n    }\n    return file_name_check;", "    // Your code here\n  \
    \  std::string file_extension = file_name.substr(file_name.find_last_of(\".\"\
    ) + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots = file_without_extension.substr(0,\
    \ file_without_extension.find_last_of(\".\"));\n    std::string file_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots.substr(0, file_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension.substr(0, file_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0,\
    \ file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.find_last_of(\"\
    .\"));\n    std::string file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots\
    \ = file_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension_without_dots_without_extension.substr(0, ",
  "    int count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n      \
    \  if (file_name[i] >= '0' && file_name[i] <= '9') {\n            count++;\n \
    \       }\n    }\n    if (count > 3 || file_name.find(\".\") == -1 || file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    std::string extension = file_name.substr(file_name.find(\".\") + 1);\n  \
    \  if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n\
    \        return \"Yes\";\n    }\n    return \"No\";", "    // Your code goes here\n\
    \    \n    // Write your code here\n    \n    return \"\";", "    // Your code\
    \ here\n    \n    return file_name;", "    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // ", "  \
    \  // Your code here\n    \n    // return \"Yes\";\n    return \"No\";", "   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n", "    // Your code goes here\n    int count\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n \
    \   if (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find_first_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) != 'a' && file_name.substr(0, 1) != 'A') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find_first_of(\".\") + 1) != \"txt\" && \n\
    \        file_name.substr(file_name.find_first_of(\".\") + 1) != \"exe\" && \n\
    \        file_name.substr(file_name.find_first_of(\".\") + 1) != \"dll\") {\n\
    \        return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    std::string result;\n    if (file_name.size() > 3 || file_name.find(\".\"\
    ) == std::string::npos) {\n        result = \"No\";\n    }\n    else if (file_name.substr(0,\
    \ 1) != 'a' || file_name.substr(0, 1) != 'A' || file_name.substr(0, 1) != 'b'\
    \ || file_name.substr(0, 1) != 'B' || file_name.substr(0, 1) != 'c' || file_name.substr(0,\
    \ 1) != 'C' || file_name.substr(0, 1) != 'd' || file_name.substr(0, 1) != 'D'\
    \ || file_name.substr(0, 1) != 'e' || file_name.substr(0, 1) != 'E' || file_name.substr(0,\
    \ 1) != 'f' || file_name.substr(0, 1) != 'F' || file_name.substr(0, 1) != 'g'\
    \ || file_name.substr(0, 1) != 'G' || file_name.substr(0, 1) != 'h' || file_name.substr(0,\
    \ 1) != 'H' || file_name.substr(0, 1) != 'i' || file_name.substr(0, 1) != 'I'\
    \ || file_name.substr(0, 1) != 'j' || file_name.substr(0, 1) != 'J' || file_name.substr(0,\
    \ 1) != 'k' || file_name.substr(0, 1) != 'K' || file_name.substr(0, 1) != 'l'\
    \ || file_name.substr(0, 1) != 'L' || file_name.substr(0, 1) != 'm' || file_name.substr(0,\
    \ 1) != 'M' || file_name.substr(0, 1) != 'n' || file_name.substr(0, 1) != 'N'\
    \ || file_name.substr(0, 1) != 'o' || file_name.substr(0, 1) != 'O' || file_name.substr(0,\
    \ 1) != 'p' || file_name.substr(0, 1) != 'P' || file_name.substr(0, 1) != 'q'\
    \ || file_name.substr(0, 1) != 'Q' || file_name.substr(0, 1) != 'r' || file_name.substr(0,\
    \ 1) != 'R' || file_name.substr(0, 1) != 's' || file_name.substr(0, 1) != 'S'\
    \ || file_name.substr(0, 1) != 't' || file_name.substr(0, 1) != 'T' || file_name.substr(0,\
    \ 1) != 'u' || file_name.substr(0, 1) != 'U' || file_name.substr(0, 1) != 'v'\
    \ || file_name.substr(0, 1) != 'V' || file_name.substr(0, 1) != 'w' || file_name.substr(0,\
    \ 1) != 'W' || file_name.substr(0, 1) != 'x' || file_name.substr(0, 1) != 'X'\
    \ || file_name.substr(0, 1) != 'y' || file_name.substr(0, 1) != 'Y' || file_name.substr(0,\
    \ 1) != 'z' || file_name.substr(0, 1) != 'Z') {\n        result = \"No\";\n  \
    \  }\n    else if (file_name.substr(0, 1) != 'a' || file_name.substr(0, 1) !=\
    \ 'A' || file_name.substr(0, 1) != 'b' || file_name.substr(0, 1) != 'B' || file_name.substr(0,\
    \ 1) != 'c' || file_name.substr(0, 1) != 'C' || file_name.substr(0, 1) ", "  \
    \  // Your code here\n    \n    // Write your code here\n    \n    return \"\"\
    ;", "    // Your code goes here\n    std::string file_name_check;\n    \n    //\
    \ Your code goes here\n    \n    return file_name_check;", "    // Your code goes\
    \ here\n    std::string file_name_check;\n    int count = 0;\n    for(int i =\
    \ 0; i < file_name.length(); i++) {\n        if(file_name[i] == '.') {\n     \
    \       count++;\n        }\n        if(count == 3) {\n            file_name_check\
    \ = \"No\";\n            break;\n        }\n        if(file_name[i] >= 'a' &&\
    \ file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n     \
    \       count++;\n        }\n        if(count == 1) {\n            file_name_check\
    \ = \"No\";\n            break;\n        }\n    }\n    return file_name_check;",
  "    std::string file_name_check;\n    \n    // Your code goes here\n    \n    return\
    \ file_name_check;", "    // Your code goes here\n    std::string file_extension\
    \ = file_name.substr(file_name.find_last_of(\".\") + 1);\n    std::string file_prefix\
    \ = file_name.substr(0, file_name.find_last_of(\".\"));\n    \n    std::string\
    \ file_prefix_lowercase = file_prefix.substr(0, file_prefix.find_first_of(\"a\"\
    ));\n    std::string file_prefix_uppercase = file_prefix.substr(0, file_prefix.find_first_of(\"\
    A\"));\n    \n    if (file_extension == \"txt\") {\n        if (file_prefix_lowercase\
    \ == \"example\") {\n            if (file_prefix_uppercase == \"example\") {\n\
    \                return \"Yes\";\n            }\n        }\n    }\n    if (file_extension\
    \ == \"exe\") {\n        if (file_prefix_lowercase == \"example\") {\n       \
    \     if (file_prefix_uppercase == \"example\") {\n                return \"Yes\"\
    ;\n            }\n        }\n    }\n    if (file_extension == \"dll\") {\n   \
    \     if (file_prefix_lowercase == \"example\") {\n            if (file_prefix_uppercase\
    \ == \"example\") {\n                return \"Yes\";\n            }\n        }\n\
    \    }\n    return \"No\";", "    // Your code goes here\n    \n    // Write your\
    \ code here\n    \n    return file_name;", "    // Your code goes here\n    std::string\
    \ file_name = file_name;\n    int count = 0;\n    for (int i = 0; i < file_name.length();\
    \ i++) {\n        if (file_name[i] >= '0' && file_name[i] <= '9') {\n        \
    \    count++;\n        }\n    }\n    if (count > 3) {\n        return \"No\";\n\
    \    }\n    if (file_name.find(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    if (file_name.substr(0, 1) < 'a' || file_name.substr(0,\
    \ 1) > 'z') {\n        return \"No\";\n    }\n    if (file_name.substr(file_name.length()\
    \ - 1) < 'a' || file_name.substr(file_name.length() - 1) > 'z') {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // ", "  \
    \  // Your code here\n    \n    std::string file_name_check;\n    \n    // Your\
    \ code here\n    \n    return file_name_check;", "    // Your code here\n    \n\
    \    return file_name;", "    // Your code here\n    \n    std::string file_name_check;\n\
    \    \n    return file_name_check;", "    // Your code here\n    \n    // Your\
    \ code here\n    \n    // Your code here\n    \n    // Your code here\n    \n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // ", "  \
    \  // Your code goes here\n    std::string file_name_check;\n    \n    \n    return\
    \ file_name_check;", "    // Your code here\n    \n    // Write your code here\n\
    \    \n    return \"\";", "    // Your code here\n    std::string file_extension;\n\
    \    std::string file_extension_check;\n    std::string file_extension_check2;\n\
    \    std::string file_extension_check3;\n    std::string file_extension_check4;\n\
    \    std::string file_extension_check5;\n    std::string file_extension_check6;\n\
    \    std::string file_extension_check7;\n    std::string file_extension_check8;\n\
    \    std::string file_extension_check9;\n    std::string file_extension_check10;\n\
    \    std::string file_extension_check11;\n    std::string file_extension_check12;\n\
    \    std::string file_extension_check13;\n    std::string file_extension_check14;\n\
    \    std::string file_extension_check15;\n    std::string file_extension_check16;\n\
    \    std::string file_extension_check17;\n    std::string file_extension_check18;\n\
    \    std::string file_extension_check19;\n    std::string file_extension_check20;\n\
    \    std::string file_extension_check21;\n    std::string file_extension_check22;\n\
    \    std::string file_extension_check23;\n    std::string file_extension_check24;\n\
    \    std::string file_extension_check25;\n    std::string file_extension_check26;\n\
    \    std::string file_extension_check27;\n    std::string file_extension_check28;\n\
    \    std::string file_extension_check29;\n    std::string file_extension_check30;\n\
    \    std::string file_extension_check31;\n    std::string file_extension_check32;\n\
    \    std::string file_extension_check33;\n    std::string file_extension_check34;\n\
    \    std::string file_extension_check35;\n    std::string file_extension_check36;\n\
    \    std::string file_extension_check37;\n    std::string file_extension_check38;\n\
    \    std::string file_extension_check39;\n    std::string file_extension_check40;\n\
    \    std::string file_extension_check41;\n    std::string file_extension_check42;\n\
    \    std::string file_extension_check43;\n    std::string file_extension_check44;\n\
    \    std::string file_extension_check45;\n    std::string file_extension_check46;\n\
    \    std::string file_extension_check47;\n    std::string file_extension_check48;\n\
    \    std::string file_extension_check49;\n    std::string file_extension_check50;\n\
    \    std::string file_extension_check51;\n    std::string file_extension_check52;\n\
    \    std::string file_extension_check53;\n    std::string file_extension_check54;\n\
    \    std::string file_extension_check55;\n    std::string file_extension_check56;\n\
    \    std::string file_extension_check57;\n    std::string file_extension_check5",
  "    // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n", "    // Your code goes here\n    \n    std::string\
    \ file_name_check;\n    \n    return file_name_check;", "    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n", "    // Your code goes here\n    std::string file_extension;\n\
    \    int dot_count = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if (file_name[i] == '.') {\n            dot_count++;\n        }\n   \
    \ }\n    if (dot_count > 1) {\n        return \"No\";\n    }\n    if (dot_count\
    \ == 1) {\n        if (file_name[0] == 'a' || file_name[0] == 'A') {\n       \
    \     return \"No\";\n        }\n        if (file_name[0] == 'b' || file_name[0]\
    \ == 'B') {\n            return \"No\";\n        }\n        if (file_name[0] ==\
    \ 'c' || file_name[0] == 'C') {\n            return \"No\";\n        }\n     \
    \   if (file_name[0] == 'd' || file_name[0] == 'D') {\n            return \"No\"\
    ;\n        }\n        if (file_name[0] == 'e' || file_name[0] == 'E') {\n    \
    \        return \"No\";\n        }\n        if (file_name[0] == 'f' || file_name[0]\
    \ == 'F') {\n            return \"No\";\n        }\n        if (file_name[0] ==\
    \ 'g' || file_name[0] == 'G') {\n            return \"No\";\n        }\n     \
    \   if (file_name[0] == 'h' || file_name[0] == 'H') {\n            return \"No\"\
    ;\n        }\n        if (file_name[0] == 'i' || file_name[0] == 'I') {\n    \
    \        return \"No\";\n        }\n        if (file_name[0] == 'j' || file_name[0]\
    \ == 'J') {\n            return \"No\";\n        }\n        if (file_name[0] ==\
    \ 'k' || file_name[0] == 'K') {\n            return \"No\";\n        }\n     \
    \   if (file_name[0] == 'l' || file_name[0] == 'L') {\n            return \"No\"\
    ;\n        }\n        if (file_name[0] == 'm' || file_name[0] == 'M') {\n    \
    \        return \"No\";\n        }\n        if (file_name[0] == 'n' || file_name[0]\
    \ == 'N') {\n            return \"No\";\n        }\n        if (file_name[0] ==\
    \ 'o' || file_name[0] == 'O') {\n            return \"No\";\n        }\n     \
    \   if (file_name[0] == 'p' || file_name[0] == 'P') {\n            return \"No\"\
    ;\n        }\n        if (file_name[0] == 'q' || file_name[0] == 'Q') {\n    \
    \        return \"No\";\n        }\n        if (file_name[0] == 'r' || file_name[0]\
    \ == 'R') {\n            return \"No\";\n        }\n        if (file_name[0] ==\
    \ 's' || file_name[0] == 'S') {\n            return \"No\";\n        }\n     \
    \   if (file_name[0] == 't' || file_name[0] == 'T') {\n            return \"No\"\
    ;\n        }\n        if (file_name[0] == 'u' || file_name[0] == 'U') {\n    \
    \        return \"No\";\n        }\n        if (file_name[0] == 'v' || file_name[0]\
    \ == 'V') {\n            return \"No\";\n        }\n        if (file_name[0] ==\
    \ 'w' || file_name[0] == 'W') {\n            return \"No\";\n        }\n     \
    \   if (file_name[0] == 'x' || file_name[0] == 'X') {\n            return \"No\"\
    ;\n        }\n        if (file_name[0] == 'y' || file_name[0] == 'Y') {\n    \
    \        return \"No\";\n        }\n        if (file_name[0] == 'z' || file_name[0]\
    \ == 'Z') {\n            return \"No\";\n        }\n    }\n    return \"Yes\";",
  "    // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n", "    // Your code here\n    \n    // Write\
    \ your code here\n    \n    return \"\";", "    int count = 0;\n    for (int i\
    \ = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            count++;\n        }\n    }\n    if (count > 3) {\n  \
    \      return \"No\";\n    }\n    if (file_name.find(\".\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    if (file_name[0] >= 'a' && file_name[0]\
    \ <= 'z') {\n        return \"No\";\n    }\n    if (file_name[file_name.length()\
    \ - 1] >= 'a' && file_name[file_name.length() - 1] <= 'z') {\n        return \"\
    No\";\n    }\n    if (file_name.substr(0, 1) != \".\") {\n        return \"No\"\
    ;\n    }\n    if (file_name.substr(0, 3) != \"example\") {\n        return \"\
    No\";\n    }\n    if (file_name.substr(file_name.length() - 1) != \"txt\") {\n\
    \        return \"No\";\n    }\n    return \"Yes\";", "    // Your code here\n\
    \    std::string file_extension = file_name.substr(file_name.find_last_of(\".\"\
    ) + 1);\n    std::string file_without_extension = file_name.substr(0, file_name.find_last_of(\"\
    .\"));\n    std::string file_first_letter = file_without_extension.substr(0, 1);\n\
    \    std::string file_first_letter_uppercase = file_first_letter.to_upper();\n\
    \    std::string file_first_letter_lowercase = file_first_letter.to_lower();\n\
    \    std::string file_first_letter_with_underscore = file_first_letter + \"_\"\
    ;\n    std::string file_first_letter_with_underscore_uppercase = file_first_letter_with_underscore.to_upper();\n\
    \    std::string file_first_letter_with_underscore_lowercase = file_first_letter_with_underscore.to_lower();\n\
    \    std::string file_first_letter_with_underscore_with_number = file_first_letter_with_underscore\
    \ + std::to_string(1);\n    std::string file_first_letter_with_underscore_with_number_uppercase\
    \ = file_first_letter_with_underscore_with_number.to_upper();\n    std::string\
    \ file_first_letter_with_underscore_with_number_lowercase = file_first_letter_with_underscore_with_number.to_lower();\n\
    \    std::string file_first_letter_with_underscore_with_number_with_dot = file_first_letter_with_underscore_with_number\
    \ + \".\";\n    std::string file_first_letter_with_underscore_with_number_with_dot_uppercase\
    \ = file_first_letter_with_underscore_with_number_with_dot.to_upper();\n    std::string\
    \ file_first_letter_with_underscore_with_number_with_dot_lowercase = file_first_letter_with_underscore_with_number_with_dot.to_lower();\n\
    \    std::string file_first_letter_with_underscore_with_number_with_dot_with_underscore\
    \ = file_first_letter_with_underscore_with_number_with_dot + std::to_string(1);\n\
    \    std::string file_first_letter_with_underscore_with_number_with_dot_with_underscore_uppercase\
    \ = file_first_letter_with_underscore_with_number_with_dot_with_underscore.to_upper();\n\
    \    std::string file_first_letter_with_underscore_with_number_with_dot_with_underscore_lowercase\
    \ = file_first_letter_with_underscore_with_number_with_dot_with_underscore.to_lower();\n\
    \    std::string file_first_letter_with_underscore_with_number_with_dot_with_underscore_with_dot\
    \ = file_first_letter_with_underscore_with_number_with_dot_with_underscore + \"\
    .\";\n    std::string file_first_letter_with_underscore_with_number_with_dot_with_underscore_with_dot_uppercase\
    \ = file_first_letter_with_underscore_with_number_with_dot_with_underscore_with_dot.to_upper();\n\
    \    std::string file_first_letter_with_underscore_with_number_with_dot_with_underscore_with_dot_lowercase\
    \ = file_first_letter_with_underscore_with_number_with_dot_with_underscore_with_dot.to_lower();\n\
    \    std::string file_first_letter_with_underscore_with_number_with_dot_", " \
    \   int num_digits = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            num_digits++;\n\
    \        }\n    }\n    if (file_name.length() > 3 || num_digits == 0 || file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No", "    // Your code goes here\n\
    \    \n    // Write your code here\n    \n    return \"\";", "    // Your code\
    \ here\n    \n    std::string file_extension = file_name.substr(file_name.find_last_of(\"\
    .\") + 1);\n    \n    if(file_extension == \"txt\" || file_extension == \"exe\"\
    \ || file_extension == \"dll\") {\n        return \"Yes\";\n    } else {\n   \
    \     return \"No\";\n    }", "    // Your code goes here\n    int count = 0;\n\
    \    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if(count\
    \ > 3) {\n        return \"No\";\n    }\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] >= 'a' && file_name[i] <= 'z') {\n         \
    \   count++;\n        }\n    }\n    if(count > 1) {\n        return \"No\";\n\
    \    }\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z') {\n            count++;\n        }\n    }\n \
    \   if(count > 1) {\n        return \"No\";\n    }\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            count++;\n        }\n\
    \    }\n    if(count > 1) {\n        return \"No\";\n    }\n    for(int i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] >= 'a' && file_name[i]\
    \ <= 'z') {\n            count++;\n        }\n    }\n    if(count > 1) {\n   \
    \     return \"No\";\n    }\n    for(int i = 0; i < file_name.length(); i++) {\n\
    \        if(file_name[i] >= 'A' && file_name[i] <= 'Z') {\n            count++;\n\
    \        }\n    }\n    if(count > 1) {\n        return \"No\";\n    }\n    for(int\
    \ i = 0; i < file_name.length(); i++) {\n        if(file_name[i] == '.') {\n \
    \           count++;\n        }\n    }\n    if(count > 1) {\n        return \"\
    No\";\n    }\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n   \
    \     return \"No\";\n    }\n    for(int i = 0; i < file_name.length(); i++) {\n\
    \        if(file_name[i] == '.') {\n            count++;\n        }\n    }\n \
    \   if(count > 1) {\n        return \"No\";\n    }\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            count++;\n        }\n\
    \    }\n    if(count > 1) {\n        return \"No\";\n    }\n    for(int i = 0;\
    \ i < file_name.length(); i++) {\n        if(file_name[i] == '.') {\n        \
    \    count++;\n        }\n    }\n    if(count > 1) {\n        return \"No\";\n\
    \    }\n    for(int i = 0; i < file_name.length(); i++) {\n        if(file_name[i]\
    \ == '.') {\n            count++;\n        }\n    }\n    if(count > 1) {\n   \
    \     return \"No\";\n    }\n    for(int i = 0; i < file_name.length(); i++) {\n\
    \        if(file_name[i] == '.') {\n            count++;\n        }\n    }\n \
    \   if(count > 1) {\n        return \"No\";\n    }\n    for(int i = 0; i < file_name.length();\
    \ i++) {\n        if(file_name[i] == '.') {\n            count++;\n        }\n\
    \    }\n    if(count > ", "    // Write your code here\n    int count = 0;\n \
    \   for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >=\
    \ '0' && file_name[i] <= '9') {\n            count++;\n        }\n    }\n    if\
    \ (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find(\".\")\
    \ == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n", "    // Your code here\n    \n    std::string file_extension\
    \ = file_name.substr(file_name.find_last_of(\".\") + 1);\n    \n    if (file_name.size()\
    \ > 3 || file_name.find_last_of(\".\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    \n    if (file_extension != \"txt\" && file_extension !=\
    \ \"exe\" && file_extension != \"dll\") {\n        return \"No\";\n    }\n   \
    \ \n    if (file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) != \"b\"\
    \ && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\" && file_name.substr(0,\
    \ 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0, 1) !=\
    \ \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) != \"i\"\
    \ && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\" && file_name.substr(0,\
    \ 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0, 1) !=\
    \ \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) != \"p\"\
    \ && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\" && file_name.substr(0,\
    \ 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0, 1) !=\
    \ \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) != \"w\"\
    \ && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\" && file_name.substr(0,\
    \ 1) != \"z\") {\n        return \"No\";\n    }\n    \n    if (file_name.find_last_of(\"\
    .\") > file_name.size() - 3) {\n        return \"No\";\n    }\n    \n    return\
    \ \"Yes\";", "    // Your code here\n    int num_digits = 0;\n    for (int i =\
    \ 0; i < file_name.length(); i++) {\n        if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n            num_digits++;\n        }\n    }\n    if (num_digits >\
    \ 3) {\n        return \"No\";\n    }\n    if (file_name.find_first_not_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) != 'a' && file_name.substr(0, 1) != 'A') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find_first_of(\".\") + 1) != \"txt\" &&\n\
    \        file_name.substr(file_name.find_first_of(\".\") + 1) != \"exe\" &&\n\
    \        file_name.substr(file_name.find_first_of(\".\") + 1) != \"dll\") {\n\
    \        return \"No\";\n    }\n    return \"Yes\";", "    std::string file_extension\
    \ = file_name.substr(file_name.find_last_of(\".\") + 1);\n    std::string file_prefix\
    \ = file_name.substr(0, file_name.find_last_of(\".\"));\n    \n    // Check that\
    \ the file name is valid.\n    if (file_name.length() <= 3 || file_name.find_last_of(\"\
    .\") == std::string::npos) {\n        return \"No\";\n    }\n    \n    // Check\
    \ that the file name is valid.\n    if (file_extension != \"txt\" && file_extension\
    \ != \"exe\" && file_extension != \"dll\") {\n        return \"No\";\n    }\n\
    \    \n    // Check that the file name is valid.\n    if (file_prefix.find_first_not_of(\"\
    0123456789\") == std::string::npos) {\n        return \"No\";\n    }\n    \n \
    \   // Check that the file name is valid.\n    if (file_prefix.find_first_not_of(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    // Check that the file name is valid.\n\
    \    if (file_prefix.find_first_not_of(\"!@#$%^&*()_+-={}[]|;:'\\\"<>,./?~\")\
    \ == std::string::npos) {\n        return \"No\";\n    }\n    \n    // Check that\
    \ the file name is valid.\n    if (file_prefix.find_first_not_of(\"~\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    // Check that the file name is valid.\n\
    \    if (file_prefix.find_first_not_of(\"~$\") == std::string::npos) {\n     \
    \   return \"No\";\n    }\n    \n    // Check that the file name is valid.\n \
    \   if (file_prefix.find_first_not_of(\"~$\") == std::string::npos) {\n      \
    \  return \"No\";\n    }\n    \n    // Check that the file name is valid.\n  \
    \  if (file_prefix.find_first_not_of(\"~$\") == std::string::npos) {\n       \
    \ return \"No\";\n    }\n    \n    // Check that the file name is valid.\n   \
    \ if (file_prefix.find_first_not_of(\"~$\") == std::string::npos) {\n        return\
    \ \"No\";\n    }\n    \n    // Check that the file name is valid.\n    if (file_prefix.find_first_not_of(\"\
    ~$\") == std::string::npos) {\n        return \"No\";\n    }\n    \n    // Check\
    \ that the file name is valid.\n    if (file_prefix.find_first_not_of(\"~$\")\
    \ == std::string::npos) {\n        return \"No\";\n    }\n    \n    // Check that\
    \ the file name is valid.\n    if (file_prefix.find_first_not_of(\"~$\") == std::string::npos)\
    \ {\n        return \"No\";\n    }\n    \n    // Check that the file name is valid.\n\
    \    if (file_prefix.find_first_not_of(\"~", "    // Your code here\n    int count\
    \ = 0;\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i]\
    \ < '0' || file_name[i] > '9') {\n            count++;\n        }\n    }\n   \
    \ if (count > 3) {\n        return \"No\";\n    }\n    if (file_name.find(\".\"\
    ) == std::string::npos) {\n        return \"No\";\n    }\n    if (file_name.substr(0,\
    \ 1) < 'a' || file_name.substr(0, 1) > 'z') {\n        return \"No\";\n    }\n\
    \    if (file_name.substr(file_name.find(\".\") + 1) != \"txt\" && file_name.substr(file_name.find(\"\
    .\") + 1) != \"exe\" && file_name.substr(file_name.find(\".\") + 1) != \"dll\"\
    ) {\n        return \"No\";\n    }\n    return \"Yes\";", "    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n"]
stop_tokens:
- "\n}"
