name: HumanEval_91_is_bored
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
  \ of words, and your task is to count the number\n// of boredoms. A boredom is a\
  \ sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
  \ '?' or '!'.\n// For example:\n// >>> is_bored((\"Hello world\"))\n// (0)\n// >>>\
  \ is_bored((\"The sky is blue. The sun is shining. I love this weather\"))\n// (1)\n\
  long is_bored(std::string S) {\n"
tests: "}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
  Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
  \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
  )) == (0));\n    assert(candidate((\"I feel good today. I will be productive. will\
  \ kill It\")) == (2));\n    assert(candidate((\"You and I are going for a walk\"\
  )) == (0));\n}\n"
completions: ["    long boredoms = 0;\n    std::string word;\n    std::string delimiter\
    \ = \" .?!\";\n    std::string delimiter2 = \" .?!\";\n    std::string delimiter3\
    \ = \" .?!\";\n    std::string delimiter4 = \" .?!\";\n    std::string delimiter5\
    \ = \" .?!\";\n    std::string delimiter6 = \" .?!\";\n    std::string delimiter7\
    \ = \" .?!\";\n    std::string delimiter8 = \" .?!\";\n    std::string delimiter9\
    \ = \" .?!\";\n    std::string delimiter10 = \" .?!\";\n    std::string delimiter11\
    \ = \" .?!\";\n    std::string delimiter12 = \" .?!\";\n    std::string delimiter13\
    \ = \" .?!\";\n    std::string delimiter14 = \" .?!\";\n    std::string delimiter15\
    \ = \" .?!\";\n    std::string delimiter16 = \" .?!\";\n    std::string delimiter17\
    \ = \" .?!\";\n    std::string delimiter18 = \" .?!\";\n    std::string delimiter19\
    \ = \" .?!\";\n    std::string delimiter20 = \" .?!\";\n    std::string delimiter21\
    \ = \" .?!\";\n    std::string delimiter22 = \" .?!\";\n    std::string delimiter23\
    \ = \" .?!\";\n    std::string delimiter24 = \" .?!\";\n    std::string delimiter25\
    \ = \" .?!\";\n    std::string delimiter26 = \" .?!\";\n    std::string delimiter27\
    \ = \" .?!\";\n    std::string delimiter28 = \" .?!\";\n    std::string delimiter29\
    \ = \" .?!\";\n    std::string delimiter30 = \" .?!\";\n    std::string delimiter31\
    \ = \" .?!\";\n    std::string delimiter32 = \" .?!\";\n    std::string delimiter33\
    \ = \" .?!\";\n    std::string delimiter34 = \" .?!\";\n    std::string delimiter35\
    \ = \" .?!\";\n    std::string delimiter36 = \" .?!\";\n    std::string delimiter37\
    \ = \" .?!\";\n    std::string delimiter38 = \" .?!\";\n    std::string delimiter39\
    \ = \" .?!\";\n    std::string delimiter40 = \" .?!\";\n    std::string delimiter41\
    \ = \" .?!\";\n    std::string delimiter42 = \" .?!\";\n    std::string delimiter43\
    \ = \" .?!\";\n    std::string delimiter44 = \" .?!\";\n    std::string delimiter45\
    \ = \" .?!\";\n    std::string delimiter46 = \" .?!\";\n    std::string delimiter47\
    \ = \" ", "    long boredoms = 0;\n    std::string word;\n    for(int i = 0; i\
    \ < S.size(); i++) {\n        word = S[i];\n        if(word == \"I\") {\n    \
    \        boredoms++;\n        }\n    }\n    return boredoms;", "    long boredoms\
    \ = 0;\n    std::string word;\n    for (auto &c : S) {\n        if (c == '.' ||\
    \ c == '?' || c == '!') {\n            boredoms += 1;\n        }\n    }\n    return\
    \ boredoms;", "    int boredom = 0;\n    int i = 0;\n    while (i < S.size())\
    \ {\n        if (S[i] == '.') {\n            boredom++;\n        }\n        if\
    \ (S[i] == '?') {\n            boredom++;\n        }\n        if (S[i] == '!')\
    \ {\n            boredom++;\n        }\n        i++;\n    }\n    return boredom;",
  "    long ans = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] ==\
    \ '.' || S[i] == '?' || S[i] == '!') {\n            ans += 1;\n        }\n   \
    \ }\n    return ans;", "    long boredoms = 0;\n    std::string word;\n    std::string\
    \ delimiters = \".?!\";\n    std::string delimiter = \",\";\n    std::string delimiter2\
    \ = \" \";\n    std::string delimiter3 = \" \";\n    std::string delimiter4 =\
    \ \" \";\n    std::string delimiter5 = \" \";\n    std::string delimiter6 = \"\
    \ \";\n    std::string delimiter7 = \" \";\n    std::string delimiter8 = \" \"\
    ;\n    std::string delimiter9 = \" \";\n    std::string delimiter10 = \" \";\n\
    \    std::string delimiter11 = \" \";\n    std::string delimiter12 = \" \";\n\
    \    std::string delimiter13 = \" \";\n    std::string delimiter14 = \" \";\n\
    \    std::string delimiter15 = \" \";\n    std::string delimiter16 = \" \";\n\
    \    std::string delimiter17 = \" \";\n    std::string delimiter18 = \" \";\n\
    \    std::string delimiter19 = \" \";\n    std::string delimiter20 = \" \";\n\
    \    std::string delimiter21 = \" \";\n    std::string delimiter22 = \" \";\n\
    \    std::string delimiter23 = \" \";\n    std::string delimiter24 = \" \";\n\
    \    std::string delimiter25 = \" \";\n    std::string delimiter26 = \" \";\n\
    \    std::string delimiter27 = \" \";\n    std::string delimiter28 = \" \";\n\
    \    std::string delimiter29 = \" \";\n    std::string delimiter30 = \" \";\n\
    \    std::string delimiter31 = \" \";\n    std::string delimiter32 = \" \";\n\
    \    std::string delimiter33 = \" \";\n    std::string delimiter34 = \" \";\n\
    \    std::string delimiter35 = \" \";\n    std::string delimiter36 = \" \";\n\
    \    std::string delimiter37 = \" \";\n    std::string delimiter38 = \" \";\n\
    \    std::string delimiter39 = \" \";\n    std::string delimiter40 = \" \";\n\
    \    std::string delimiter41 = \" \";\n    std::string delimiter42 = \" \";\n\
    \    std::string delimiter43 = \" \";\n    std::string delimiter44 = \" \";\n\
    \    std::string delimiter45 = \" \";\n    std::string delimiter46 = \" \";\n\
    \    std::string delimiter47 = \" \";\n    std::string delimiter48 = \" \";\n\
    \    std::string delimiter49 = \" \";\n    std::string delimiter50 = \" \";\n\
    \    std::string delimiter51 = \" \";\n    std::string delimiter52 = \" \";\n\
    \    std::string delimiter53 = \" \";\n    std::string delimiter54 = \" \";\n\
    \    std::string delimiter55 = \" \";\n    std::string delimiter56 = \" \";\n\
    \    std::string delimiter57 = \" \";\n    std::string delimiter58 = \" \";\n\
    \    std::string delimiter59 = \" \";\n    std::string delimiter60 = \" \";\n\
    \    std::string delimiter61 = \" \";\n    std::string delimiter62 = \" \";\n\
    \    std::string delimiter63 = \" \";", "    int boredoms = 0;\n    for(int i\
    \ = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms++;\n        }\n    }\n    return boredoms;", " \
    \   long boredoms = 0;\n    std::string word;\n    for (auto &c : S) {\n     \
    \   if (c == '.' || c == '?' || c == '!') {\n            boredoms += 1;\n    \
    \    }\n        else {\n            word = word + c;\n        }\n    }\n    if\
    \ (word == \"I\") {\n        boredoms += 1;\n    }\n    return boredoms;", " \
    \   long boredoms = 0;\n    std::string word;\n    for (auto &i : S) {\n     \
    \   if (i == '.' || i == '?' || i == '!') {\n            boredoms += 1;\n    \
    \    }\n    }\n    return boredoms;", "    // Write your code here\n    long boredoms\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;", "    long boredoms = 0;\n    std::string word;\n    std::string\
    \ delimiters = \". ? !\";\n    std::string::size_type pos;\n    for (pos = 0;\
    \ (pos = S.find_first_of(delimiters, pos)) != std::string::npos; pos++) {\n  \
    \      word = S.substr(0, pos);\n        if (word == \"I\") {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    std::string delimiters = \".?!\";\n    std::string delimiter = \"\
    ,\";\n    std::string temp;\n    std::string temp2;\n    std::string temp3;\n\
    \    std::string temp4;\n    std::string temp5;\n    std::string temp6;\n    std::string\
    \ temp7;\n    std::string temp8;\n    std::string temp9;\n    std::string temp10;\n\
    \    std::string temp11;\n    std::string temp12;\n    std::string temp13;\n \
    \   std::string temp14;\n    std::string temp15;\n    std::string temp16;\n  \
    \  std::string temp17;\n    std::string temp18;\n    std::string temp19;\n   \
    \ std::string temp20;\n    std::string temp21;\n    std::string temp22;\n    std::string\
    \ temp23;\n    std::string temp24;\n    std::string temp25;\n    std::string temp26;\n\
    \    std::string temp27;\n    std::string temp28;\n    std::string temp29;\n \
    \   std::string temp30;\n    std::string temp31;\n    std::string temp32;\n  \
    \  std::string temp33;\n    std::string temp34;\n    std::string temp35;\n   \
    \ std::string temp36;\n    std::string temp37;\n    std::string temp38;\n    std::string\
    \ temp39;\n    std::string temp40;\n    std::string temp41;\n    std::string temp42;\n\
    \    std::string temp43;\n    std::string temp44;\n    std::string temp45;\n \
    \   std::string temp46;\n    std::string temp47;\n    std::string temp48;\n  \
    \  std::string temp49;\n    std::string temp50;\n    std::string temp51;\n   \
    \ std::string temp52;\n    std::string temp53;\n    std::string temp54;\n    std::string\
    \ temp55;\n    std::string temp56;\n    std::string temp57;\n    std::string temp58;\n\
    \    std::string temp59;\n    std::string temp60;\n    std::string temp61;\n \
    \   std::string temp62;\n    std::string temp63;\n    std::string temp64;\n  \
    \  std::string temp65;\n    std::string temp66;\n    std::string temp67;\n   \
    \ std::string temp68;\n    std::string temp69;\n    std::string temp70;\n    std::string\
    \ temp71;\n    std::string temp72;\n    std::string temp73;\n    std::string temp74;\n\
    \    std::string temp75;\n    std::string temp76;\n    std::string temp77;\n \
    \   std::string temp78;\n    std::string temp79;\n    std::string temp80;\n  \
    \  std::string temp81;\n    std::string temp82;\n    std::string temp83;\n   \
    \ std::string temp84;\n", "    long count = 0;\n    for(int i = 0; i < S.size();\
    \ i++){\n        if(S[i] == 'I'){\n            count++;\n        }\n    }\n  \
    \  return count;", "    int boredom = 0;\n    for(int i = 0; i < S.size(); i++)\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredom++;\n\
    \        }\n    }\n    return boredom;", "    // Write your code here\n    long\
    \ boredom = 0;\n    std::string word;\n    std::string sentence;\n    std::stringstream\
    \ ss;\n    ss << S;\n    while(std::getline(ss, sentence, '.')) {\n        std::istringstream\
    \ iss(sentence);\n        while(std::getline(iss, word, '.')) {\n            if(word\
    \ == \"I\") {\n                boredom++;\n            }\n        }\n    }\n \
    \   return boredom;", "    int boredoms = 0;\n    std::string word;\n    for (auto\
    \ &c : S) {\n        if (c == '.' || c == '?' || c == '!') {\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;", "    int boredoms = 0;\n    for(int\
    \ i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!') {\n            boredoms += 1;\n        }\n    }\n    return boredoms;",
  "    int boredoms = 0;\n    int i = 0;\n    while (i < S.size()) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            boredoms++;\n        }\n\
    \        i++;\n    }\n    return boredoms;", "    long boredoms = 0;\n    std::string\
    \ word;\n    std::string boredom_word;\n    std::string boredom_word_2;\n    std::string\
    \ boredom_word_3;\n    std::string boredom_word_4;\n    std::string boredom_word_5;\n\
    \    std::string boredom_word_6;\n    std::string boredom_word_7;\n    std::string\
    \ boredom_word_8;\n    std::string boredom_word_9;\n    std::string boredom_word_10;\n\
    \    std::string boredom_word_11;\n    std::string boredom_word_12;\n    std::string\
    \ boredom_word_13;\n    std::string boredom_word_14;\n    std::string boredom_word_15;\n\
    \    std::string boredom_word_16;\n    std::string boredom_word_17;\n    std::string\
    \ boredom_word_18;\n    std::string boredom_word_19;\n    std::string boredom_word_20;\n\
    \    std::string boredom_word_21;\n    std::string boredom_word_22;\n    std::string\
    \ boredom_word_23;\n    std::string boredom_word_24;\n    std::string boredom_word_25;\n\
    \    std::string boredom_word_26;\n    std::string boredom_word_27;\n    std::string\
    \ boredom_word_28;\n    std::string boredom_word_29;\n    std::string boredom_word_30;\n\
    \    std::string boredom_word_31;\n    std::string boredom_word_32;\n    std::string\
    \ boredom_word_33;\n    std::string boredom_word_34;\n    std::string boredom_word_35;\n\
    \    std::string boredom_word_36;\n    std::string boredom_word_37;\n    std::string\
    \ boredom_word_38;\n    std::string boredom_word_39;\n    std::string boredom_word_40;\n\
    \    std::string boredom_word_41;\n    std::string boredom_word_42;\n    std::string\
    \ boredom_word_43;\n    std::string boredom_word_44;\n    std::string boredom_word_45;\n\
    \    std::string boredom_word_46;\n    std::string boredom_word_47;\n    std::string\
    \ boredom_word_48;\n    std::string boredom_word_49;\n    std::string boredom_word_50;\n\
    \    std::string boredom_word_51;\n    std::string boredom_word_52;\n    std::string\
    \ boredom_word_53;\n    std::string boredom_word_54;\n    std::string boredom_word_55;\n\
    \    std::string boredom_word_56;\n    std::string boredom_word_57;\n    std::string\
    \ boredom_word_", "    int boredom = 0;\n    int i = 0;\n    while(i < S.size())\
    \ {\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            boredom++;\n\
    \            i++;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ boredom;"]
stop_tokens:
- "\n}"
