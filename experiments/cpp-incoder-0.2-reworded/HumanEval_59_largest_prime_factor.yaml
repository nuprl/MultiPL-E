name: HumanEval_59_largest_prime_factor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
  // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
  \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
  \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
  }\n"
completions: ["    long p = 2;\n    long q = n;\n    while (true) {\n        if (q\
    \ % p == 0) {\n            return p;\n        }\n        if (q == 1) {\n     \
    \       return 1;\n        }\n        p++;\n        q /= p;\n    }", "    long\
    \ max_factor = 1;\n    long max_factor_index = 0;\n    long i = 2;\n    while\
    \ (i <= n / 2) {\n        if (n % i == 0) {\n            while (n % i == 0) {\n\
    \                n /= i;\n                max_factor_index = i;\n            }\n\
    \        }\n        i++;\n    }\n    return max_factor_index;", "    long ans\
    \ = 1;\n    long p = 2;\n    while (p < n) {\n        if (n % p == 0) {\n    \
    \        ans = p;\n            break;\n        }\n        p += 2;\n    }\n   \
    \ return ans;", "    long p = 2;\n    long q = n;\n    while (p < q) {\n     \
    \   while (n % p == 0) {\n            n /= p;\n        }\n        if (n == 1)\
    \ {\n            return p;\n        }\n        p++;\n    }\n    return n;", " \
    \   long p = 2;\n    while (p < n) {\n        if (n % p == 0) {\n            n\
    \ = n / p;\n        } else {\n            p = p + 1;\n        }\n    }\n    return\
    \ n;", "    long ans = 1;\n    long i = 2;\n    while (i <= n / 2) {\n       \
    \ if (n % i == 0) {\n            ans = i;\n            while (n % i == 0) {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ ans;", "    long max_factor = 1;\n    long max_factor_index = 0;\n    long i\
    \ = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            long j =\
    \ 2;\n            while (j <= max_factor) {\n                if (n % i == 0) {\n\
    \                    max_factor = j;\n                    max_factor_index = i;\n\
    \                }\n                j++;\n            }\n        }\n        i++;\n\
    \    }\n    return max_factor_index;", "    long i = 2;\n    long largest = n;\n\
    \    while (i < largest) {\n        if (n % i == 0) {\n            largest = i;\n\
    \        }\n        ++i;\n    }\n    return largest;", "    long factor = 1;\n\
    \    long p = 2;\n    while (p < n) {\n        if (n % p == 0) {\n           \
    \ factor = p;\n            break;\n        }\n        p++;\n    }\n    return\
    \ factor;", "    long p = 2;\n    long q = n;\n    long r = n;\n    long s = 2;\n\
    \    while (p <= q) {\n        while (r % p == 0) {\n            r /= p;\n   \
    \     }\n        while (s % p == 0) {\n            s /= p;\n        }\n      \
    \  if (p > s) {\n            p = s;\n        }\n    }\n    return p;", "    long\
    \ max_factor = 1;\n    long max_factor_index = 0;\n    for (int i = 2; i <= n;\
    \ i++) {\n        if (n % i == 0) {\n            long temp = max_factor;\n   \
    \         max_factor = i;\n            max_factor_index = i;\n        }\n    }\n\
    \    return max_factor_index;", "    long ans = 1;\n    long p = 2;\n    while\
    \ (p < n) {\n        if (n % p == 0) {\n            ans = p;\n            break;\n\
    \        }\n        p++;\n    }\n    return ans;", "    long max_factor = 1;\n\
    \    long max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n      \
    \  if (n % i == 0) {\n            long j = i;\n            while (j < n) {\n \
    \               if (n % j == 0) {\n                    max_factor = j;\n     \
    \               max_factor_index = i;\n                    break;\n          \
    \      }\n                j++;\n            }\n        }\n        i++;\n    }\n\
    \    return max_factor;", "    long i = 2;\n    long max_factor = 1;\n    while\
    \ (i < n) {\n        if (n % i == 0) {\n            while (n % i == 0) {\n   \
    \             n /= i;\n                max_factor++;\n            }\n        }\n\
    \        i++;\n    }\n    return max_factor;", "    long max_factor = 1;\n   \
    \ long max_factor_index = 0;\n    for (long i = 2; i <= n; ++i) {\n        if\
    \ (n % i == 0) {\n            long j = n / i;\n            if (j > max_factor)\
    \ {\n                max_factor = j;\n                max_factor_index = i;\n\
    \            }\n        }\n    }\n    return max_factor_index;", "    long max_factor\
    \ = 1;\n    long max_factor_index = 0;\n    for (long i = 2; i <= n; ++i) {\n\
    \        if (n % i == 0) {\n            long factor = i / max_factor;\n      \
    \      if (factor > max_factor) {\n                max_factor = factor;\n    \
    \            max_factor_index = i;\n            }\n        }\n    }\n    return\
    \ max_factor_index;", "    long max_factor = 1;\n    long max_factor_index = 0;\n\
    \    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            long\
    \ factor = i / max_factor;\n            if (factor > max_factor) {\n         \
    \       max_factor = factor;\n                max_factor_index = i;\n        \
    \    }\n        }\n    }\n    return max_factor_index;", "    long ans = 1;\n\
    \    long i = 2;\n    while (i <= n / 2) {\n        if (n % i == 0) {\n      \
    \      ans = i;\n            while (n % i == 0) {\n                n /= i;\n \
    \           }\n        }\n        i++;\n    }\n    return ans;", "    long max_factor\
    \ = 0;\n    long max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n\
    \        if (n % i == 0) {\n            while (n % i == 0) {\n               \
    \ n /= i;\n                max_factor_index = i;\n            }\n        }\n \
    \       i++;\n    }\n    return max_factor_index;", "    long max_factor = 1;\n\
    \    long max_factor_index = 0;\n    for (long i = 2; i <= n; i++) {\n       \
    \ if (n % i == 0) {\n            long j;\n            for (j = i; j <= n; j +=\
    \ i) {\n                if (n % j == 0) {\n                    break;\n      \
    \          }\n            }\n            if (j > i) {\n                max_factor\
    \ = i;\n                max_factor_index = j;\n            }\n        }\n    }\n\
    \    return max_factor;"]
stop_tokens:
- "\n}"
