name: HumanEval_58_common
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
  \ elements for two vectors.\n// >>> common((std::vector<long>({(long)1, (long)4,\
  \ (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
  \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
  \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
  \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
  \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
  \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
  \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
  \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
  \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
  \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
completions: ["    std::vector<long> result;\n    std::vector<long> temp;\n    for\
    \ (auto i : l1) {\n        if (std::find(l2.begin(), l2.end(), i) != l2.end())\
    \ {\n            result.push_back(i);\n        }\n    }\n    for (auto i : l2)\
    \ {\n        if (std::find(l1.begin(), l1.end(), i) != l1.end()) {\n         \
    \   result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long long common = 0;\n    for (long long i = 0; i < l1.size();\
    \ i++) {\n        for (long long j = 0; j < l2.size(); j++) {\n            if\
    \ (l1[i] == l2[j]) {\n                common++;\n            }\n        }\n  \
    \  }\n    for (long long i = 0; i < l1.size(); i++) {\n        if (common > 0)\
    \ {\n            if (l1[i] == common) {\n                result.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    for (long long i = 0; i < l2.size(); i++)\
    \ {\n        if (common > 0) {\n            if (l2[i] == common) {\n         \
    \       result.push_back(l2[i]);\n            }\n        }\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    long long common = 0;\n    for\
    \ (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n\
    \            common++;\n        } else {\n            if (common > 0) {\n    \
    \            result.push_back(common);\n                common = 0;\n        \
    \    }\n            result.push_back(l1.at(i));\n        }\n    }\n    if (common\
    \ > 0) {\n        result.push_back(common);\n    }\n    return result;", "   \
    \ std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    long long max1 = l1[0], max2 = l2[0];\n    for (long long i = 1; i < l1.size();\
    \ i++) {\n        if (l1[i] > max1) {\n            result.push_back(l1[i]);\n\
    \            max1 = l1[i];\n        }\n        if (l2[i] > max2) {\n         \
    \   result.push_back(l2[i]);\n            max2 = l2[i];\n        }\n    }\n  \
    \  if (max1 < max2) {\n        result.push_back(l1[l1.size() - 1]);\n    }\n \
    \   if (max2 < max1) {\n        result.push_back(l2[l2.size() - 1]);\n    }\n\
    \    return result;", "    std::vector<long> result;\n    long common = 0;\n \
    \   long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i + j < l1.size()\
    \ && j + k < l2.size()) {\n        if (l1[i] == l2[j]) {\n            common++;\n\
    \            i++;\n            j++;\n        } else if (l1[i] < l2[j]) {\n   \
    \         i++;\n        } else {\n            j++;\n        }\n    }\n    if (i\
    \ == l1.size()) {\n        result.push_back(l1[k]);\n    } else if (j == l2.size())\
    \ {\n        result.push_back(l2[k]);\n    } else {\n        result.push_back(l1[k]);\n\
    \        result.push_back(l2[k]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long long commonCount = 0;\n    long long commonIndex = 0;\n  \
    \  long long l1Index = 0;\n    long long l2Index = 0;\n    while (l1Index < l1.size()\
    \ && l2Index < l2.size()) {\n        if (l1[l1Index] == l2[l2Index]) {\n     \
    \       commonCount++;\n            l1Index++;\n            l2Index++;\n     \
    \   } else if (l1[l1Index] < l2[l2Index]) {\n            commonCount++;\n    \
    \        l1Index++;\n        } else {\n            commonCount++;\n          \
    \  l2Index++;\n        }\n    }\n    while (commonCount > 0) {\n        if (commonIndex\
    \ < result.size()) {\n            result[commonIndex] = l1[l1Index];\n       \
    \     commonIndex++;\n            l1Index++;\n        } else {\n            result.push_back(l1[l1Index]);\n\
    \            commonIndex++;\n            l1Index++;\n        }\n        commonCount--;\n\
    \    }\n    while (l2Index < l2.size()) {\n        result.push_back(l2[l2Index]);\n\
    \        l2Index++;\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long common = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n   \
    \ while (i<l1.size() && j<l2.size()) {\n        if (l1[i]==l2[j]) {\n        \
    \    common++;\n            i++;\n            j++;\n        } else if (l1[i]<l2[j])\
    \ {\n            i++;\n        } else {\n            j++;\n        }\n    }\n\
    \    while (i < l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n\
    \    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n      \
    \  j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if (l1[i]==l2[j])\
    \ {\n            common++;\n            i++;\n            j++;\n        } else\
    \ if (l1[i]<l2[j]) {\n            i++;\n        } else {\n            j++;\n \
    \       }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<l2[j]) {\n            i++;\n        } else {\n     \
    \       j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<l2[j]) {\n            i++;\n        } else {\n     \
    \       j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<l2[j]) {\n            i++;\n        } else {\n     \
    \       j++;\n        }\n    }\n    while (i < l1.size()) {\n        result.push_back(l1[i]);\n\
    \        i++;\n    }\n    while (j < l2.size()) {\n        result.push_back(l2[j]);\n\
    \        j++;\n    }\n    while (i < l1.size() && j < l2.size()) {\n        if\
    \ (l1[i]==l2[j]) {\n            common++;\n            i++;\n            j++;\n\
    \        } else if (l1[i]<", "    std::vector<long> res;\n    long common = 0;\n\
    \    for (long i = 0; i < l1.size(); i++) {\n        for (long j = 0; j < l2.size();\
    \ j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n     \
    \       }\n        }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n    \
    \    if (common != 0) {\n            if (l1[i] != common) {\n                res.push_back(l1[i]);\n\
    \            }\n        } else {\n            res.push_back(l1[i]);\n        }\n\
    \    }\n    return res;", "    std::vector<long> result;\n    long long common\
    \ = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i)\
    \ == l2.at(i)) {\n            common++;\n        } else {\n            if (common\
    \ > 0) {\n                result.push_back(common);\n                common =\
    \ 0;\n            }\n            result.push_back(l1.at(i));\n        }\n    }\n\
    \    if (common > 0) {\n        result.push_back(common);\n    }\n    return result;",
  "    std::vector<long> result;\n    result.push_back(l1[0]);\n    result.push_back(l2[0]);\n\
    \    for(size_t i = 1; i < l1.size(); i++) {\n        if(l1[i] != l2[i]) {\n \
    \           result.push_back(l1[i]);\n            result.push_back(l2[i]);\n \
    \       }\n    }\n    return result;", "    std::vector<long> res;\n    long long\
    \ common = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n        for (long\
    \ long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n     \
    \           common++;\n            }\n        }\n    }\n    for (long long i =\
    \ 0; i < l1.size(); i++) {\n        if (common > 0) {\n            if (l1[i] !=\
    \ common) {\n                res.push_back(l1[i]);\n                common--;\n\
    \            }\n        } else {\n            res.push_back(l1[i]);\n        }\n\
    \    }\n    return res;", "    std::vector<long> result;\n    long long common\
    \ = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n        for (long long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n        }\n    }\n    for (long long i = 0; i\
    \ < l1.size(); i++) {\n        if (common > result.size()) {\n            result.push_back(l1[i]);\n\
    \        }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if\
    \ (common > result.size()) {\n            result.push_back(l2[i]);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    long long common\
    \ = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n        for (long long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n        }\n    }\n    for (long long i = 0; i\
    \ < l1.size(); i++) {\n        if (common > 0) {\n            if (l1[i] != common)\
    \ {\n                result.push_back(l1[i]);\n                common--;\n   \
    \         }\n        } else {\n            result.push_back(l1[i]);\n        }\n\
    \    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if (common >\
    \ 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \                common--;\n            }\n        } else {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    result.push_back(l1[0]);\n\
    \    for(long i=1;i<l1.size();i++) {\n        for(long j=1;j<l2.size();j++) {\n\
    \            if(l1[i]==l2[j]) {\n                result.push_back(l1[i]);\n  \
    \              break;\n            }\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long long common = 0;\n    for (long long i\
    \ = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size(); j++)\
    \ {\n            if (l1[i] == l2[j]) {\n                common++;\n          \
    \  }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n    \
    \    if (common > 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        } else {\n            result.push_back(l1[i]);\n     \
    \   }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if (common\
    \ > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::vector<long>::iterator\
    \ it;\n    for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result)).begin(); it != result.end(); ++it)\n        result.erase(*it);\n\
    \    return result;", "    std::vector<long> res;\n    long long common = 0;\n\
    \    for (long long i = 0; i < l1.size(); i++) {\n        for (long long j = 0;\
    \ j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n                common++;\n\
    \            }\n        }\n    }\n    res.push_back(common);\n    return res;",
  "    std::vector<long> result;\n    long long common = 0;\n    for (long i = 0;\
    \ i < l1.size(); i++) {\n        if (l1.at(i) == l2.at(i)) {\n            common++;\n\
    \        } else {\n            if (common > 0) {\n                result.push_back(common);\n\
    \                common = 0;\n            }\n            result.push_back(l1.at(i));\n\
    \        }\n    }\n    if (common > 0) {\n        result.push_back(common);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(l1[0]);\n\
    \    for(size_t i = 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size();\
    \ j++) {\n            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    long long common = 0;\n    long long l = 0;\n \
    \   long long r = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n      \
    \  common = common * 10 + l1[i];\n    }\n    for (long long i = 0; i < l2.size();\
    \ i++) {\n        common = common * 10 + l2[i];\n    }\n    for (long long i =\
    \ 0; i < l1.size(); i++) {\n        l = l * 10 + l1[i];\n    }\n    for (long\
    \ long i = 0; i < l2.size(); i++) {\n        r = r * 10 + l2[i];\n    }\n    if\
    \ (common > r) {\n        res.push_back(l);\n        res.push_back(r);\n    }\n\
    \    if (common < l) {\n        res.push_back(r);\n        res.push_back(l);\n\
    \    }\n    return res;"]
stop_tokens:
- "\n}"
