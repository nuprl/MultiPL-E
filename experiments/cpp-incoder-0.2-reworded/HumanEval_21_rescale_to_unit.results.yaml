language: cpp
name: HumanEval_21_rescale_to_unit
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    float scale = 1.0f / (max_number - min_number);\n    for\
    \ (auto number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp0ksgqa5_: /tmp/tmp0ksgqa5_.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpfbxinzy2: /tmp/tmpfbxinzy2.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float inv_range = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * inv_range);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmps9u345x1: /tmp/tmps9u345x1.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (auto number : numbers) {\n  \
    \      min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (max_number + min_number));\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp352_gn1x: /tmp/tmp352_gn1x.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (float)numbers.size();\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number * scale);\n    }\n \
    \   return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjhs8enh2: /tmp/tmpjhs8enh2.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float new_min = min - range * 0.5;\n    float\
    \ new_max = max + range * 0.5;\n    std::vector<float> new_numbers;\n    for (auto\
    \ number : numbers) {\n        new_numbers.push_back(std::max(new_min, std::min(new_max,\
    \ number)));\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpd4v1rqm_: /tmp/tmpd4v1rqm_.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    numbers.assign({min\
    \ * scale, max * scale});\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjdq2xcdk: /tmp/tmpjdq2xcdk.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    float scale = (max - min) / (numbers.back() -\
    \ numbers.front());\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmphxnuylsy: /tmp/tmphxnuylsy.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        rescaled_numbers.push_back(number - min) / (max - min);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj60868_s.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpj60868_s.cpp:17:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < smallest_number)\
    \ {\n            smallest_number = numbers[i];\n        }\n        if (numbers[i]\
    \ > largest_number) {\n            largest_number = numbers[i];\n        }\n \
    \   }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        new_numbers[i]\
    \ = numbers[i] - smallest_number;\n        new_numbers[i] /= (largest_number -\
    \ smallest_number);\n    }\n    return new_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzpoth9j7: /tmp/tmpzpoth9j7.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    rescaled_numbers.push_back((max_number - min_number) /\
    \ (numbers.back() - numbers.front()));\n    for (auto number : numbers) {\n  \
    \      rescaled_numbers.push_back(number * rescaled_numbers.back());\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpdl3hzu25: /tmp/tmpdl3hzu25.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    numbers.assign({0.0f, 0.0f, 0.0f,\
    \ 0.0f, 0.0f});\n    for (auto number : numbers) {\n        number *= scale;\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpy95alb_k: /tmp/tmpy95alb_k.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9q1290a7: /tmp/tmp9q1290a7.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    rescaled_numbers.push_back(smallest_number);\n\
    \    rescaled_numbers.push_back(1.0f / largest_number);\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpw0ucv7up: /tmp/tmpw0ucv7up.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplrio31rj: /tmp/tmplrio31rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpubgoz7i8: /tmp/tmpubgoz7i8.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   } else if (number > max) {\n            max = number;\n        }\n    }\n\
    \    for (auto number : numbers) {\n        result.push_back(number - min) / (max\
    \ - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1j7h8m4.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpn1j7h8m4.cpp:20:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   20 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - numbers.front()) / (numbers.back() - numbers.front()));\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp0s1zszzk: /tmp/tmp0s1zszzk.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp25hjfrp_: /tmp/tmp25hjfrp_.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9q1290a7: /tmp/tmp9q1290a7.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / std::min(std::abs(number), 1.0));\n    }\n    return rescaled_numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd5fkwucd.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpd5fkwucd.cpp:11:75: error: no matching function for call to \u2018\
    min(float, double)\u2019\n   11 |         rescaled_numbers.push_back(number /\
    \ std::min(std::abs(number), 1.0));\n      |                                 \
    \                                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd5fkwucd.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpd5fkwucd.cpp:11:75: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018float\u2019\
    \ and \u2018double\u2019)\n   11 |         rescaled_numbers.push_back(number /\
    \ std::min(std::abs(number), 1.0));\n      |                                 \
    \                                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd5fkwucd.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpd5fkwucd.cpp:11:75:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    float\u2019 and \u2018double\u2019)\n   11 |         rescaled_numbers.push_back(number\
    \ / std::min(std::abs(number), 1.0));\n      |                               \
    \                "
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (max_number + min_number));\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpyvr4sm2a: /tmp/tmpyvr4sm2a.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) min = number;\n        if (number > max) max = number;\n    }\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpt55qetzj: /tmp/tmpt55qetzj.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    float scale = (max - min) / (numbers.size() -\
    \ 1);\n    for (auto number : numbers) {\n        result.push_back(number * scale);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpafq9u3kp: /tmp/tmpafq9u3kp.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpysgz544k: /tmp/tmpysgz544k.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    for (float number : rescaled_numbers) {\n       \
    \ rescaled_numbers.push_back(number / max_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjyay3o0a: /tmp/tmpjyay3o0a.cpp:26: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp50o0zrev: /tmp/tmp50o0zrev.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4eibfr4f: /tmp/tmp4eibfr4f.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number\
    \ / rescaled_numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxlutnkjn: /tmp/tmpxlutnkjn.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back((number - numbers.front()) / (numbers.back()\
    \ - numbers.front()));\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpuj4rwnza: /tmp/tmpuj4rwnza.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (float number : numbers) {\n    \
    \    min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    float scale = max_number - min_number;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmph3_i6p4b: /tmp/tmph3_i6p4b.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpno4q80s9: /tmp/tmpno4q80s9.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp2uw5ltq6: /tmp/tmp2uw5ltq6.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        min =\
    \ std::min(min, number);\n        max = std::max(max, number);\n    }\n    for\
    \ (auto number : numbers) {\n        rescaled_numbers.push_back(number - min)\
    \ / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplo4j4khb.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmplo4j4khb.cpp:18:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   18 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    for (auto number : numbers) {\n        smallest\
    \ = std::min(number, smallest);\n        largest = std::max(number, largest);\n\
    \        rescaled_numbers.push_back(smallest);\n    }\n    rescaled_numbers.push_back(largest);\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxvjacf5l: /tmp/tmpxvjacf5l.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = std::numeric_limits<float>::min();\n    float\
    \ largest_number = std::numeric_limits<float>::max();\n    float smallest_rescaled_number\
    \ = std::numeric_limits<float>::min();\n    float largest_rescaled_number = std::numeric_limits<float>::max();\n\
    \    for (float number : rescaled_numbers) {\n        smallest_rescaled_number\
    \ = std::min(smallest_rescaled_number, number);\n        largest_rescaled_number\
    \ = std::max(largest_rescaled_number, number);\n    }\n    for (float number :\
    \ rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size() - 1 -\
    \ rescaled_numbers.find(number)] = ((number - smallest_rescaled_number) / (largest_rescaled_number\
    \ - smallest_rescaled_number)) * largest_number + smallest_number;\n    }\n  \
    \  return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt20_rntg.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpt20_rntg.cpp:22:73: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   22 |         rescaled_numbers[rescaled_numbers.size()\
    \ - 1 - rescaled_numbers.find(number)] = ((number - smallest_rescaled_number)\
    \ / (largest_rescaled_number - smallest_rescaled_number)) * largest_number + smallest_number;\n\
    \      |                                                                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1660122565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled = number -\
    \ min;\n        rescaled = rescaled / (max - min);\n        result.push_back(rescaled);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        new_numbers.push_back(number\
    \ * (max - min) / float(numbers.size()) + min);\n    }\n    return new_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjwl0i3zo: /tmp/tmpjwl0i3zo.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmptgu2zyjq: /tmp/tmptgu2zyjq.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back((number - numbers.front()) / (numbers.back()\
    \ - numbers.front()));\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpgjdb2_vi: /tmp/tmpgjdb2_vi.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (auto number : numbers) {\n\
    \        new_numbers.push_back(number);\n    }\n    auto min_number = new_numbers.front();\n\
    \    auto max_number = new_numbers.back();\n    for (auto number : new_numbers)\
    \ {\n        number -= min_number;\n        number /= (max_number - min_number);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpkzkjhnd1: /tmp/tmpkzkjhnd1.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers(numbers.begin(),\
    \ numbers.end());\n    float smallest_number = numbers[0];\n    float largest_number\
    \ = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number\
    \ = std::min(smallest_number, numbers[i]);\n        largest_number = std::max(largest_number,\
    \ numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] = numbers[i] - smallest_number;\n        rescaled_numbers[i]\
    \ /= (largest_number - smallest_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.front());\n    }\n  \
    \  return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmppic878__: /tmp/tmppic878__.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplrio31rj: /tmp/tmplrio31rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number =\
    \ std::min(smallest_number, numbers[i]);\n        largest_number = std::max(largest_number,\
    \ numbers[i]);\n    }\n    float scale = 1.0f / (largest_number - smallest_number);\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpcwmdv3n_: /tmp/tmpcwmdv3n_.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    numbers.erase(std::remove_if(numbers.begin(),\
    \ numbers.end(), [&](float x) {\n        return x < min || x > max;\n    }), numbers.end());\n\
    \    numbers.insert(numbers.begin(), min);\n    numbers.insert(numbers.end(),\
    \ scale);\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplpxt6jl4: /tmp/tmplpxt6jl4.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpo5oiz0pc: /tmp/tmpo5oiz0pc.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpno4q80s9: /tmp/tmpno4q80s9.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpw_83myzh: /tmp/tmpw_83myzh.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpc5mpeklk: /tmp/tmpc5mpeklk.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp2uw5ltq6: /tmp/tmp2uw5ltq6.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / std::min(std::abs(number), 1.0));\n    }\n    return rescaled_numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpek7lzlrb.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpek7lzlrb.cpp:11:75: error: no matching function for call to \u2018\
    min(float, double)\u2019\n   11 |         rescaled_numbers.push_back(number /\
    \ std::min(std::abs(number), 1.0));\n      |                                 \
    \                                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpek7lzlrb.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpek7lzlrb.cpp:11:75: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018float\u2019\
    \ and \u2018double\u2019)\n   11 |         rescaled_numbers.push_back(number /\
    \ std::min(std::abs(number), 1.0));\n      |                                 \
    \                                          ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpek7lzlrb.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpek7lzlrb.cpp:11:75:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    float\u2019 and \u2018double\u2019)\n   11 |         rescaled_numbers.push_back(number\
    \ / std::min(std::abs(number), 1.0));\n      |                               \
    \                "
  stdout: ''
  timestamp: 1660122567
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (float number : numbers) {\n\
    \        smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float rescaled_smallest_number\
    \ = smallest_number / (largest_number - smallest_number);\n    rescaled_numbers.push_back(rescaled_smallest_number);\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(rescaled_smallest_number\
    \ * number + rescaled_smallest_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpan622_mc: /tmp/tmpan622_mc.cpp:26: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    rescaled_numbers.push_back(max_number - min_number);\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmps6fa03u5: /tmp/tmps6fa03u5.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(smallest_number\
    \ + scale * (number - smallest_number));\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpdqxyg7_q: /tmp/tmpdqxyg7_q.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) min = number;\n        if (number > max) max = number;\n    }\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * 0.5);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpm0dm33zx: /tmp/tmpm0dm33zx.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (auto number : numbers) {\n\
    \        new_numbers.push_back(number / numbers[0]);\n    }\n    return new_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpk8cbctoz: /tmp/tmpk8cbctoz.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \    }\n    float smallest_number = rescaled_numbers[0];\n    float largest_number\
    \ = rescaled_numbers[0];\n    for (float number : rescaled_numbers) {\n      \
    \  if (number < smallest_number) {\n            smallest_number = number;\n  \
    \      }\n        if (number > largest_number) {\n            largest_number =\
    \ number;\n        }\n    }\n    float smallest_number_rescaled = smallest_number\
    \ / largest_number;\n    for (float number : rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = number * smallest_number_rescaled;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmphji_dsue: /tmp/tmphji_dsue.cpp:31: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    numbers.clear();\n    numbers.push_back(min);\n\
    \    numbers.push_back((float)0.0);\n    numbers.push_back((float)1.0);\n    for\
    \ (auto n : numbers) {\n        n *= scale;\n    }\n    return numbers;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp1kyf2lat: /tmp/tmp1kyf2lat.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    for (auto number : numbers) {\n        result.push_back((number\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpno4q80s9: /tmp/tmpno4q80s9.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4eibfr4f: /tmp/tmp4eibfr4f.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4eibfr4f: /tmp/tmp4eibfr4f.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpck42g614: /tmp/tmpck42g614.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0), 1.0));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75ab67vt.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp75ab67vt.cpp:11:65: error: no matching function for call to \u2018\
    max(float&, double)\u2019\n   11 |         rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0), 1.0));\n      |                                                      \
    \           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n \
    \                from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp75ab67vt.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp75ab67vt.cpp:11:65: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018float\u2019\
    \ and \u2018double\u2019)\n   11 |         rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0), 1.0));\n      |                                                      \
    \           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n \
    \                from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp75ab67vt.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp75ab67vt.cpp:11:65:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    float\u2019 and \u2018double\u2019)\n   11 |         rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0), 1.0));\n      |                                                      \
    \           ^\nIn file inc"
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplllzkg2b: /tmp/tmplllzkg2b.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    float min_rescaled_number\
    \ = std::numeric_limits<float>::min();\n    float max_rescaled_number = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ min_number), max_number));\n        min_rescaled_number = std::min(min_rescaled_number,\
    \ number);\n        max_rescaled_number = std::max(max_rescaled_number, number);\n\
    \    }\n    for (float number : rescaled_numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_rescaled_number);\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp5k64krl8: /tmp/tmp5k64krl8.cpp:27: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    float scale = (max - min) / (numbers.back() -\
    \ numbers[0]);\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp5x3s0xwt: /tmp/tmp5x3s0xwt.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpysgz544k: /tmp/tmpysgz544k.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (auto number : numbers) {\n\
    \        new_numbers.push_back(number / numbers.size());\n    }\n    return new_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpvfue9vs3: /tmp/tmpvfue9vs3.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    float range = max - min;\n\
    \    float scale = range / numbers.size();\n    std::vector<float> result;\n \
    \   for (float number : numbers) {\n        result.push_back(number * scale);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp5226simr: /tmp/tmp5226simr.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp7eq6d7fu: /tmp/tmp7eq6d7fu.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = range / numbers.size();\n \
    \   std::vector<float> rescaled_numbers;\n    for (auto number : numbers) {\n\
    \        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpre42y5px: /tmp/tmpre42y5px.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplrio31rj: /tmp/tmplrio31rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplrio31rj: /tmp/tmplrio31rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        min = std::min(min, number);\n   \
    \     max = std::max(max, number);\n    }\n    for (auto number : numbers) {\n\
    \        result.push_back(number * (max - min) / numbers.back());\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmph4qfilfj: /tmp/tmph4qfilfj.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (float number\
    \ : numbers) {\n        min_number = std::min(min_number, number);\n        max_number\
    \ = std::max(max_number, number);\n        rescaled_numbers.push_back(number -\
    \ min_number);\n    }\n    rescaled_numbers.push_back(max_number - min_number);\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp49cpy7bv: /tmp/tmp49cpy7bv.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        new_numbers.push_back(numbers[i] / numbers[0]);\n    }\n   \
    \ return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpe_54kswu: /tmp/tmpe_54kswu.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        min = std::min(min, number);\n   \
    \     max = std::max(max, number);\n    }\n    for (auto number : numbers) {\n\
    \        rescaled_numbers.push_back(number * (max - min) / float(numbers.size())\
    \ + min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpqnxn9n5d: /tmp/tmpqnxn9n5d.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    std::vector<float> result;\n    for\
    \ (float number : numbers) {\n        result.push_back(number * scale);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpqj2yjcc8: /tmp/tmpqj2yjcc8.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (float number : numbers) {\n\
    \        smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    rescaled_numbers.push_back(smallest_number);\n\
    \    rescaled_numbers.push_back(largest_number);\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * (largest_number - smallest_number)\
    \ / (numbers.size() - 1));\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpqyiwih5_: /tmp/tmpqyiwih5_.cpp:26: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    for (auto number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2rva_k7.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpx2rva_k7.cpp:21:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   21 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122568
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        min =\
    \ std::min(min, number);\n        max = std::max(max, number);\n    }\n    for\
    \ (auto number : numbers) {\n        rescaled_numbers.push_back(number - min)\
    \ / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplo4j4khb.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmplo4j4khb.cpp:18:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   18 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    std::vector<float> rescaled_numbers;\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back(number * scale\
    \ + min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpt8vta3o8: /tmp/tmpt8vta3o8.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpubgoz7i8: /tmp/tmpubgoz7i8.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4eibfr4f: /tmp/tmp4eibfr4f.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(std::min(std::max(number, min_number), max_number));\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp07u0iuqs: /tmp/tmp07u0iuqs.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpubgoz7i8: /tmp/tmpubgoz7i8.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n    }\n    float smallest_number\
    \ = rescaled_numbers[0];\n    float largest_number = rescaled_numbers[0];\n  \
    \  for (float number : rescaled_numbers) {\n        if (number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[0] = smallest_number + (number - smallest_number)\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpd0b3wgtm: /tmp/tmpd0b3wgtm.cpp:32: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp_xicqnk8: /tmp/tmp_xicqnk8.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        if (number < smallest_number) {\n\
    \            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (float number : numbers)\
    \ {\n        result.push_back(smallest_number + (number - smallest_number) * scale);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpqm01zgmh: /tmp/tmpqm01zgmh.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) min = number;\n        if (number > max) max = number;\n    }\n    float\
    \ scale = (max - min) / (numbers.size() - 1);\n    for (auto number : numbers)\
    \ {\n        number *= scale;\n    }\n    return numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpbro2cg75: /tmp/tmpbro2cg75.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1hgrhwl.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpq1hgrhwl.cpp:18:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   18 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (numbers.size() - 1);\n    for (auto number :\
    \ numbers) {\n        number *= scale;\n    }\n    return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpy83cs_36: /tmp/tmpy83cs_36.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(smallest_number\
    \ + ((number - smallest_number) / (largest_number - smallest_number)));\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpbp2ddzv3: /tmp/tmpbp2ddzv3.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    float scale = 1.0f / (max_number - min_number);\n    for\
    \ (auto number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpt4ef9ln0: /tmp/tmpt4ef9ln0.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (numbers.size() - 1));\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpw4u7triq: /tmp/tmpw4u7triq.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    rescaled_numbers.push_back((max_number - min_number) /\
    \ (numbers.size() - 1));\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (numbers.size() - 1));\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp8b7o8smt: /tmp/tmp8b7o8smt.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    numbers.erase(numbers.begin(), numbers.end());\n\
    \    numbers.insert(numbers.begin(), 0);\n    numbers.insert(numbers.end(), 1);\n\
    \    numbers.insert(numbers.begin(), scale);\n    return numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpmidrrr1m: /tmp/tmpmidrrr1m.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_number);\n        rescaled_numbers.push_back(number / max_number);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpt5bd_94x: /tmp/tmpt5bd_94x.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number =\
    \ std::min(smallest_number, numbers[i]);\n        largest_number = std::max(largest_number,\
    \ numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] = numbers[i] - smallest_number;\n        rescaled_numbers[i]\
    \ /= (largest_number - smallest_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122569
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (float number : numbers) {\n    \
    \    min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    float scale = 1.0f / (max_number - min_number);\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpdi3avtgu: /tmp/tmpdi3avtgu.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122569
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number - min) / (max - min);\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9u5735xc.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp9u5735xc.cpp:14:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   14 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122569
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / std::min(numbers.size(), 2));\n    }\n    return rescaled_numbers;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpobkb90h9.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpobkb90h9.cpp:11:71: error: no matching function for call to \u2018\
    min(std::vector<float>::size_type, int)\u2019\n   11 |         rescaled_numbers.push_back(number\
    \ / std::min(numbers.size(), 2));\n      |                                   \
    \                                    ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpobkb90h9.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpobkb90h9.cpp:11:71: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long unsigned\
    \ int\u2019 and \u2018int\u2019)\n   11 |         rescaled_numbers.push_back(number\
    \ / std::min(numbers.size(), 2));\n      |                                   \
    \                                    ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpobkb90h9.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpobkb90h9.cpp:11:71:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long unsigned int\u2019 and \u2018int\u2019)\n   11 |         rescaled_numbers.push_back(number\
    \ / std::min(numbers.size(), 2));\n      |                            "
  stdout: ''
  timestamp: 1660122570
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp09uvx68l: /tmp/tmp09uvx68l.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122570
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(smallest_number\
    \ + scale * number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpejcl474u: /tmp/tmpejcl474u.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplrio31rj: /tmp/tmplrio31rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    float scale = 1.0f / (max - min);\n    for (auto\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp5_p_ogxv: /tmp/tmp5_p_ogxv.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled_number = (number\
    \ - min) / (max - min);\n        result.push_back(rescaled_number);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n \
    \   assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122570
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back((number - numbers.front()) / (numbers.back()\
    \ - numbers.front()));\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4ldwdb8b: /tmp/tmp4ldwdb8b.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> unit;\n\
    \    unit.push_back(numbers[0]);\n    unit.push_back(numbers[1]);\n    for (size_t\
    \ i = 2; i < numbers.size(); i++) {\n        unit.push_back(numbers[i] / unit[i\
    \ - 1]);\n    }\n    return unit;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp89yuyqbl: /tmp/tmp89yuyqbl.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (auto number : numbers) {\n\
    \        new_numbers.push_back(number / numbers.size());\n    }\n    return new_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp6lo01f6e: /tmp/tmp6lo01f6e.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122570
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       if (number < smallest_number) {\n            smallest_number = number;\n\
    \        } else if (number > largest_number) {\n            largest_number = number;\n\
    \        }\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - smallest_number);\n    }\n    rescaled_numbers.push_back(1.0f - largest_number);\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpy543h0wr: /tmp/tmpy543h0wr.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (numbers.back() - numbers[0]);\n    numbers.front()\
    \ = min - scale * numbers.front();\n    numbers.back() = max - scale * numbers.back();\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpol2n6roz: /tmp/tmpol2n6roz.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9q1290a7: /tmp/tmp9q1290a7.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpno4q80s9: /tmp/tmpno4q80s9.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) min = number;\n        if (number > max) max = number;\n    }\n    float\
    \ scale = 1.0f / (max - min);\n    for (auto number : numbers) {\n        number\
    \ *= scale;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmptouyldcz: /tmp/tmptouyldcz.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   if (number < min_number) {\n            min_number = number;\n        }\n\
    \        if (number > max_number) {\n            max_number = number;\n      \
    \  }\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    rescaled_numbers.push_back(max_number - min_number);\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp1q1krwxl: /tmp/tmp1q1krwxl.cpp:29: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (auto number : numbers) {\n\
    \        new_numbers.push_back(number);\n    }\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    for (auto number\
    \ : new_numbers) {\n        min_number = std::min(min_number, number);\n     \
    \   max_number = std::max(max_number, number);\n    }\n    for (auto number :\
    \ new_numbers) {\n        number = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9kjy08sl: /tmp/tmp9kjy08sl.cpp:27: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled = number -\
    \ min;\n        rescaled = rescaled / (max - min);\n        result.push_back(rescaled);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(smallest_number + (number - smallest_number)\
    \ / (largest_number - smallest_number) * (1.0f - smallest_number));\n    }\n \
    \   return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplm913yfy: /tmp/tmplm913yfy.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (numbers.back() - numbers.front());\n    for\
    \ (auto &number : numbers) {\n        number *= scale;\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmptzknd6_z: /tmp/tmptzknd6_z.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    for (auto number : numbers) {\n        result.push_back(number\
    \ - min) / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpclqhkfwy.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpclqhkfwy.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122570
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_value = *std::min_element(numbers.begin(), numbers.end());\n  \
    \  float max_value = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max_value - min_value;\n    for (float number : numbers) {\n       \
    \ rescaled_numbers.push_back(number - min_value) / range;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_u4lyuh.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpz_u4lyuh.cpp:14:56: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   14 |         rescaled_numbers.push_back(number\
    \ - min_value) / range;\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~\n      |                                   |                      |\n\
    \      |                                   void                   float\n"
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * scale);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp6k0mxmr_: /tmp/tmp6k0mxmr_.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmptgu2zyjq: /tmp/tmptgu2zyjq.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (float number : numbers) {\n        min\
    \ = std::min(min, number);\n        max = std::max(max, number);\n    }\n    for\
    \ (float number : numbers) {\n        rescaled_numbers.push_back(number - min)\
    \ / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41l7o1qj.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp41l7o1qj.cpp:18:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   18 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    float scale = max_number - min_number;\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number * scale);\n    }\n \
    \   return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpizedth3t: /tmp/tmpizedth3t.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    for (auto number : numbers) {\n        result.push_back(number\
    \ - min) / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpclqhkfwy.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpclqhkfwy.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122570
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (float number : numbers) {\n\
    \        new_numbers.push_back(number);\n    }\n    float min_number = new_numbers[0];\n\
    \    float max_number = new_numbers[0];\n    for (float number : new_numbers)\
    \ {\n        min_number = std::min(min_number, number);\n        max_number =\
    \ std::max(max_number, number);\n    }\n    for (float number : new_numbers) {\n\
    \        number -= min_number;\n        number /= (max_number - min_number);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpihva_q6p: /tmp/tmpihva_q6p.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    float scale = 1.0f / (max - min);\n    for (auto\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp5_p_ogxv: /tmp/tmp5_p_ogxv.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4eibfr4f: /tmp/tmp4eibfr4f.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (float number : numbers) {\n\
    \        smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpghk8lmtk: /tmp/tmpghk8lmtk.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    for (auto number : numbers) {\n  \
    \      number *= scale;\n    }\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpgz3d58s_: /tmp/tmpgz3d58s_.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplllzkg2b: /tmp/tmplllzkg2b.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpw_83myzh: /tmp/tmpw_83myzh.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (max_number + min_number));\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpyvr4sm2a: /tmp/tmpyvr4sm2a.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        min = std::min(min, number);\n   \
    \     max = std::max(max, number);\n    }\n    for (auto number : numbers) {\n\
    \        result.push_back(number * (max - min) / numbers.size());\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp2e9pujlc: /tmp/tmp2e9pujlc.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n        rescaled_numbers.push_back(smallest_number\
    \ / (largest_number - smallest_number));\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmppkay23xr: /tmp/tmppkay23xr.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers(numbers.begin(),\
    \ numbers.end());\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    float min_rescale\
    \ = min_number / new_numbers[0];\n    float max_rescale = max_number / new_numbers[0];\n\
    \    for (size_t i = 1; i < new_numbers.size(); i++) {\n        new_numbers[i]\
    \ = new_numbers[i] / new_numbers[0];\n    }\n    for (size_t i = 0; i < new_numbers.size();\
    \ i++) {\n        if (new_numbers[i] < min_rescale) {\n            new_numbers[i]\
    \ = min_rescale;\n        } else if (new_numbers[i] > max_rescale) {\n       \
    \     new_numbers[i] = max_rescale;\n        }\n    }\n    return new_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsbphjrpf: /tmp/tmpsbphjrpf.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    float range = (max -\
    \ min);\n    float rescaled_min = min / range;\n    float rescaled_max = max /\
    \ range;\n    std::vector<float> rescaled_numbers;\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * range + rescaled_min);\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpnj1yu9ak: /tmp/tmpnj1yu9ak.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    rescaled_numbers.push_back(min_number);\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / (max_number\
    \ - min_number));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpqulom43l: /tmp/tmpqulom43l.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    for (float number\
    \ : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number, min_number),\
    \ max_number));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp8mor5ces: /tmp/tmp8mor5ces.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        min = std::min(min, number);\n   \
    \     max = std::max(max, number);\n    }\n    for (auto number : numbers) {\n\
    \        result.push_back(number - min) / (max - min);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuscjr2ci.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpuscjr2ci.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    for (auto number : numbers) {\n\
    \        new_numbers.push_back(number);\n    }\n    auto min_number = new_numbers.front();\n\
    \    auto max_number = new_numbers.back();\n    for (auto number : new_numbers)\
    \ {\n        number -= min_number;\n        number /= (max_number - min_number);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpnlwcw8em: /tmp/tmpnlwcw8em.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    rescaled_numbers.push_back(0.0);\n    rescaled_numbers.push_back(max_number);\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp5p1zlynj: /tmp/tmp5p1zlynj.cpp:26: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp25hjfrp_: /tmp/tmp25hjfrp_.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    float scale = 1.0f / (max - min);\n    for (auto\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpwwmelwpc: /tmp/tmpwwmelwpc.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpno4q80s9: /tmp/tmpno4q80s9.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpw_83myzh: /tmp/tmpw_83myzh.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back((number - numbers.front()) / (numbers.back()\
    \ - numbers.front()));\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4ldwdb8b: /tmp/tmp4ldwdb8b.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers(numbers.begin(),\
    \ numbers.end());\n    float smallest_number = numbers[0];\n    float largest_number\
    \ = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number\
    \ = std::min(smallest_number, numbers[i]);\n        largest_number = std::max(largest_number,\
    \ numbers[i]);\n    }\n    float scale = 1.0f / (largest_number - smallest_number);\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ *= scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp1je7mgjz: /tmp/tmp1je7mgjz.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       if (number < smallest_number) {\n            smallest_number = number;\n\
    \        } else if (number > largest_number) {\n            largest_number = number;\n\
    \        }\n    }\n    float scale = 1.0f / (largest_number - smallest_number);\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(smallest_number\
    \ * scale + number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp0rzskdxd: /tmp/tmp0rzskdxd.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    float range = max - min;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (range / numbers.size()));\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp_ddw0aq9: /tmp/tmp_ddw0aq9.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number\
    \ / rescaled_numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxlutnkjn: /tmp/tmpxlutnkjn.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpbwguo63l: /tmp/tmpbwguo63l.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    numbers.erase(numbers.begin(), numbers.end());\n\
    \    numbers.insert(numbers.begin(), 0);\n    numbers.insert(numbers.end(), 1);\n\
    \    for (auto number : numbers) {\n        number *= scale;\n    }\n    return\
    \ numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpor4jhhv8: /tmp/tmpor4jhhv8.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)100.0,
    (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number =\
    \ std::min(smallest_number, numbers[i]);\n        largest_number = std::max(largest_number,\
    \ numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n   \
    \     rescaled_numbers[i] = numbers[i] - smallest_number;\n        rescaled_numbers[i]\
    \ /= (largest_number - smallest_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp09uvx68l: /tmp/tmp09uvx68l.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122570
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers;\n\
    \    new_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (auto number : numbers) {\n        new_numbers.push_back(number\
    \ * (max_number - min_number) / (numbers.back() - numbers.front()));\n    }\n\
    \    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpw27bgeb7: /tmp/tmpw27bgeb7.cpp:24: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp50o0zrev: /tmp/tmp50o0zrev.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(smallest_number\
    \ + (number - smallest_number) * scale);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpktr1oxvo: /tmp/tmpktr1oxvo.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = (max - min);\n    float scale = range / numbers.back();\n \
    \   numbers.front() = min - scale * numbers.front();\n    numbers.back() = max\
    \ - scale * numbers.back();\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp2y34e4p4: /tmp/tmp2y34e4p4.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplrio31rj: /tmp/tmplrio31rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpw_83myzh: /tmp/tmpw_83myzh.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpai6t1hfv: /tmp/tmpai6t1hfv.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (float number : numbers) {\n    \
    \    min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    rescaled_numbers.push_back((max_number - min_number) /\
    \ (numbers.back() - numbers[0]));\n    for (float number : numbers) {\n      \
    \  rescaled_numbers.push_back(number * rescaled_numbers[rescaled_numbers.size()\
    \ - 1]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp3rbl52af: /tmp/tmp3rbl52af.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzpoth9j7: /tmp/tmpzpoth9j7.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    numbers.erase(std::remove_if(numbers.begin(),\
    \ numbers.end(), [&](float x) { return x < min; }), numbers.end());\n    numbers.insert(numbers.begin(),\
    \ -min);\n    numbers.insert(numbers.end(), (max - min) * scale / numbers.back());\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp7_021m5t: /tmp/tmp7_021m5t.cpp:19: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest_number = std::min(smallest_number, numbers[i]);\n \
    \       largest_number = std::max(largest_number, numbers[i]);\n    }\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers.push_back(numbers[i]\
    \ - smallest_number) / (largest_number - smallest_number);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89mmwlsr.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp89mmwlsr.cpp:18:66: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   18 |         rescaled_numbers.push_back(numbers[i]\
    \ - smallest_number) / (largest_number - smallest_number);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                              \
    \     |                                                |\n      |            \
    \                       void                                             float\n"
  stdout: ''
  timestamp: 1660122571
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplllzkg2b: /tmp/tmplllzkg2b.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    float scale = 1.0f / (max - min);\n    for (auto number : numbers) {\n\
    \        result.push_back(number * scale);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmppgi2f8pm: /tmp/tmppgi2f8pm.cpp:28: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    for (auto number : numbers) {\n        float rescaled = (number - min)\
    \ / (max - min);\n        result.push_back(rescaled);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9q1290a7: /tmp/tmp9q1290a7.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122566
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled = number -\
    \ min;\n        rescaled = rescaled / (max - min);\n        result.push_back(rescaled);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(number - smallest_number);\n    }\n    rescaled_numbers.push_back(1.0f\
    \ - largest_number);\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp145zkkmz: /tmp/tmp145zkkmz.cpp:22: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] / max - min;\n        min = std::min(min, numbers[i]);\n      \
    \  max = std::max(max, numbers[i]);\n    }\n    return rescaled_numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpdgyd0th5: /tmp/tmpdgyd0th5.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        min = std::min(min, number);\n   \
    \     max = std::max(max, number);\n    }\n    for (auto number : numbers) {\n\
    \        result.push_back(number * (max - min) / (numbers.back() - numbers.front()));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp5_nregyy: /tmp/tmp5_nregyy.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    for (float number\
    \ : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number, min_number),\
    \ max_number));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpcret28_b: /tmp/tmpcret28_b.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (float number : numbers) {\n    \
    \    min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_number);\n        rescaled_numbers.push_back(number / max_number);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpfbdn6cqk: /tmp/tmpfbdn6cqk.cpp:25: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplrio31rj: /tmp/tmplrio31rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        min =\
    \ std::min(min, number);\n        max = std::max(max, number);\n    }\n    for\
    \ (auto number : numbers) {\n        rescaled_numbers.push_back(number - min)\
    \ / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplo4j4khb.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmplo4j4khb.cpp:18:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   18 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122565
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    for (auto number : numbers) {\n        result.push_back((number - min)\
    \ / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122572
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number * (max - min) / (max - min));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmplvrsbgav: /tmp/tmplvrsbgav.cpp:23: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpc5mpeklk: /tmp/tmpc5mpeklk.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpno4q80s9: /tmp/tmpno4q80s9.cpp:18: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   }\n        if (number > max) {\n            max = number;\n        }\n   \
    \ }\n    for (auto number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2rva_k7.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpx2rva_k7.cpp:21:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   21 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpo5oiz0pc: /tmp/tmpo5oiz0pc.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmpsy74s5lv: /tmp/tmpsy74s5lv.cpp:17: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122565
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    numbers.erase(std::remove_if(numbers.begin(),\
    \ numbers.end(), [&](float x) { return x < min; }), numbers.end());\n    numbers.insert(numbers.begin(),\
    \ -min);\n    numbers.insert(numbers.end(), 1.0f);\n    numbers.insert(numbers.end(),\
    \ scale);\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmprchdmjfo: /tmp/tmprchdmjfo.cpp:20: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122573
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: Exception
  stderr: 'tmp7eq6d7fu: /tmp/tmp7eq6d7fu.cpp:21: int main(): Assertion `candidate((std::vector<float>({(float)2.0,
    (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122568
