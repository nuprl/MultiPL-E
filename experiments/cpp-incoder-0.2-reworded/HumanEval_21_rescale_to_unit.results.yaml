language: cpp
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    float scale = 1.0f / (max_number - min_number);\n    for\
    \ (auto number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2fgog_8.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpk2fgog_8.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpk2fgog_8.cpp:17:5: error: expected\
    \ ';' before 'float'\n     float scale = 1.0f / (max_number - min_number);\n \
    \    ^\n/tmp/tmpk2fgog_8.cpp:18:5: error: expected primary-expression before 'for'\n\
    \     for (auto number : numbers) {\n     ^\n/tmp/tmpk2fgog_8.cpp:18:5: error:\
    \ expected ')' before 'for'\n/tmp/tmpk2fgog_8.cpp:18:15: error: 'number' does\
    \ not name a type\n     for (auto number : numbers) {\n               ^\n/tmp/tmpk2fgog_8.cpp:21:5:\
    \ error: expected ';' before 'return'\n     return rescaled_numbers;\n     ^\n\
    /tmp/tmpk2fgog_8.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpk2fgog_8.cpp:21:5: error: expected ';' before 'return'\n/tmp/tmpk2fgog_8.cpp:21:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpk2fgog_8.cpp:21:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpk2fgog_8.cpp: In function 'int\
    \ main()':\n/tmp/tmpk2fgog_8.cpp:24:10: error: 'candidate' does not name a type\n\
    \     auto candidate = rescale_to_unit;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk2fgog_8.cpp:2:\n/tmp/tmpk2fgog_8.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpk2fgog_8.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpk2fgog_8.cpp:25:67: warning: extended initializer lists "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurm39c9v.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpurm39c9v.cpp:15:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpurm39c9v.cpp: In function 'int main()':\n/tmp/tmpurm39c9v.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpurm39c9v.cpp:2:\n/tmp/tmpurm39c9v.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpurm39c9v.cpp:22:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpurm39c9v.cpp:22:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpurm39c9v.cpp:22:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpurm39c9v.cpp:22:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpurm39c9v.cpp:22:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float inv_range = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * inv_range);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0naj8l2q.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp0naj8l2q.cpp:15:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp0naj8l2q.cpp: In function 'int main()':\n/tmp/tmp0naj8l2q.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0naj8l2q.cpp:2:\n/tmp/tmp0naj8l2q.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp0naj8l2q.cpp:22:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp0naj8l2q.cpp:22:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0naj8l2q.cpp:22:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp0naj8l2q.cpp:22:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp0naj8l2q.cpp:22:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (auto number : numbers) {\n  \
    \      min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (max_number + min_number));\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpamddgzkh.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpamddgzkh.cpp:12:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpamddgzkh.cpp:16:5: error: expected\
    \ ';' before 'for'\n     for (auto number : numbers) {\n     ^\n/tmp/tmpamddgzkh.cpp:16:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpamddgzkh.cpp:16:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpamddgzkh.cpp:16:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpamddgzkh.cpp:16:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpamddgzkh.cpp:16:15: error: 'number' does not name\
    \ a type\n     for (auto number : numbers) {\n               ^\n/tmp/tmpamddgzkh.cpp:19:5:\
    \ error: expected ';' before 'return'\n     return rescaled_numbers;\n     ^\n\
    /tmp/tmpamddgzkh.cpp:19:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpamddgzkh.cpp:19:5: error: expected ';' before 'return'\n/tmp/tmpamddgzkh.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpamddgzkh.cpp:19:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpamddgzkh.cpp: In function 'int\
    \ main()':\n/tmp/tmpamddgzkh.cpp:22:10: error: 'candidate' does not name a type\n\
    \     auto candidate = rescale_to_unit;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpamddgzkh.cpp:2:\n/tmp/tmpamddgzkh.cpp:23:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpamddgzkh.cpp:23:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \  "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (float)numbers.size();\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number * scale);\n    }\n \
    \   return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxlluoq2r.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpxlluoq2r.cpp:14:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpxlluoq2r.cpp:17:5: error: expected\
    \ ';' before 'return'\n     return rescaled_numbers;\n     ^\n/tmp/tmpxlluoq2r.cpp:17:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpxlluoq2r.cpp:17:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpxlluoq2r.cpp:17:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpxlluoq2r.cpp:17:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpxlluoq2r.cpp: In function 'int main()':\n/tmp/tmpxlluoq2r.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxlluoq2r.cpp:2:\n/tmp/tmpxlluoq2r.cpp:21:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpxlluoq2r.cpp:21:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpxlluoq2r.cpp:21:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxlluoq2r.cpp:21:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpxlluoq2r.cpp:21:93:\
    \ warning: extended initializer lists only availab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float new_min = min - range * 0.5;\n    float\
    \ new_max = max + range * 0.5;\n    std::vector<float> new_numbers;\n    for (auto\
    \ number : numbers) {\n        new_numbers.push_back(std::max(new_min, std::min(new_max,\
    \ number)));\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypcgge5s.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpypcgge5s.cpp:15:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpypcgge5s.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return new_numbers;\n     ^\n/tmp/tmpypcgge5s.cpp:18:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpypcgge5s.cpp:18:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpypcgge5s.cpp:18:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpypcgge5s.cpp:18:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpypcgge5s.cpp: In function 'int main()':\n/tmp/tmpypcgge5s.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpypcgge5s.cpp:2:\n/tmp/tmpypcgge5s.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpypcgge5s.cpp:22:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpypcgge5s.cpp:22:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpypcgge5s.cpp:22:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpypcgge5s.cpp:22:93:\
    \ warning: extended initializer lists only available wi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    numbers.assign({min\
    \ * scale, max * scale});\n    return numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5vq6k5qt.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp5vq6k5qt.cpp:13:19: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     numbers.assign({min\
    \ * scale, max * scale});\n                   ^\n/tmp/tmp5vq6k5qt.cpp:13:46: error:\
    \ no matching function for call to 'std::vector<float>::assign(<brace-enclosed\
    \ initializer list>)'\n     numbers.assign({min * scale, max * scale});\n    \
    \                                          ^\n/tmp/tmp5vq6k5qt.cpp:13:46: note:\
    \ candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5vq6k5qt.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:479:7:\
    \ note: void std::vector<_Tp, _Alloc>::assign(std::vector<_Tp, _Alloc>::size_type,\
    \ const value_type&) [with _Tp = float; _Alloc = std::allocator<float>; std::vector<_Tp,\
    \ _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type\
    \ = float]\n       assign(size_type __n, const value_type& __val)\n       ^\n\
    /usr/include/c++/4.8.2/bits/stl_vector.h:479:7: note:   candidate expects 2 arguments,\
    \ 1 provided\n/usr/include/c++/4.8.2/bits/stl_vector.h:503:9: note: template<class\
    \ _InputIterator> void std::vector<_Tp, _Alloc>::assign(_InputIterator, _InputIterator)\
    \ [with _InputIterator = _InputIterator; _Tp = float; _Alloc = std::allocator<float>]\n\
    \         assign(_InputIterator __first, _InputIterator __last)\n         ^\n\
    /usr/include/c++/4.8.2/bits/stl_vector.h:503:9: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp5vq6k5qt.cpp:13:46: note:   candidate expects 2 arguments,\
    \ 1 provided\n     numbers.assign({min * scale, max * scale});\n             \
    \                                 ^\n/tmp/tmp5vq6k5qt.cpp: In function 'int main()':\n\
    /tmp/tmp5vq6k5qt.cpp:17:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = rescale_to_unit;\n          ^\nIn file in"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0sglw3lu.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp0sglw3lu.cpp:10:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmp0sglw3lu.cpp: In function 'int main()':\n/tmp/tmp0sglw3lu.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0sglw3lu.cpp:2:\n/tmp/tmp0sglw3lu.cpp:17:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmp0sglw3lu.cpp:17:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmp0sglw3lu.cpp:17:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0sglw3lu.cpp:17:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmp0sglw3lu.cpp:17:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmp0sglw3lu.cpp:17:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) min = number;\n        if (number >\
    \ max) max = number;\n    }\n    float scale = (max - min) / (numbers.back() -\
    \ numbers.front());\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv8iaiut4.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpv8iaiut4.cpp:12:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpv8iaiut4.cpp:16:5: error: expected\
    \ ';' before 'float'\n     float scale = (max - min) / (numbers.back() - numbers.front());\n\
    \     ^\n/tmp/tmpv8iaiut4.cpp:17:5: error: expected primary-expression before\
    \ 'for'\n     for (auto number : numbers) {\n     ^\n/tmp/tmpv8iaiut4.cpp:17:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpv8iaiut4.cpp:17:15: error: 'number'\
    \ does not name a type\n     for (auto number : numbers) {\n               ^\n\
    /tmp/tmpv8iaiut4.cpp:20:5: error: expected ';' before 'return'\n     return result;\n\
    \     ^\n/tmp/tmpv8iaiut4.cpp:20:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmpv8iaiut4.cpp:20:5: error: expected ';' before 'return'\n/tmp/tmpv8iaiut4.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv8iaiut4.cpp:20:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpv8iaiut4.cpp: In function 'int\
    \ main()':\n/tmp/tmpv8iaiut4.cpp:23:10: error: 'candidate' does not name a type\n\
    \     auto candidate = rescale_to_unit;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv8iaiut4.cpp:2:\n/tmp/tmpv8iaiut4.cpp:24:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpv8iaiut4.cpp:24:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpv8iaiut4.cpp:24:67: warning: extended initializer "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        rescaled_numbers.push_back(number - min) / (max - min);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzk3wuuub.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpzk3wuuub.cpp:12:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpzk3wuuub.cpp:16:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpzk3wuuub.cpp:17:62: error: invalid operands of types 'void' and 'float'\
    \ to binary 'operator/'\n         rescaled_numbers.push_back(number - min) / (max\
    \ - min);\n                                                              ^\n/tmp/tmpzk3wuuub.cpp:\
    \ In function 'int main()':\n/tmp/tmpzk3wuuub.cpp:22:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = rescale_to_unit;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzk3wuuub.cpp:2:\n/tmp/tmpzk3wuuub.cpp:23:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpzk3wuuub.cpp:23:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpzk3wuuub.cpp:23:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpzk3wuuub.cpp:23:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpzk3wuuub.cpp:23:93:\
    \ warning: ext"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> new_numbers(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < smallest_number)\
    \ {\n            smallest_number = numbers[i];\n        }\n        if (numbers[i]\
    \ > largest_number) {\n            largest_number = numbers[i];\n        }\n \
    \   }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        new_numbers[i]\
    \ = numbers[i] - smallest_number;\n        new_numbers[i] /= (largest_number -\
    \ smallest_number);\n    }\n    return new_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjz3d5ae5.cpp: In function 'int main()':\n/tmp/tmpjz3d5ae5.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjz3d5ae5.cpp:2:\n/tmp/tmpjz3d5ae5.cpp:28:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpjz3d5ae5.cpp:28:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpjz3d5ae5.cpp:28:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjz3d5ae5.cpp:28:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpjz3d5ae5.cpp:28:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpjz3d5ae5.cpp:28:118: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2e_8iwc.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpo2e_8iwc.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpo2e_8iwc.cpp:17:5: error: expected\
    \ ';' before 'float'\n     float scale = 1.0f / (largest_number - smallest_number);\n\
    \     ^\n/tmp/tmpo2e_8iwc.cpp:18:5: error: expected primary-expression before\
    \ 'for'\n     for (auto number : numbers) {\n     ^\n/tmp/tmpo2e_8iwc.cpp:18:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpo2e_8iwc.cpp:18:15: error: 'number'\
    \ does not name a type\n     for (auto number : numbers) {\n               ^\n\
    /tmp/tmpo2e_8iwc.cpp:21:5: error: expected ';' before 'return'\n     return rescaled_numbers;\n\
    \     ^\n/tmp/tmpo2e_8iwc.cpp:21:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmpo2e_8iwc.cpp:21:5: error: expected ';' before 'return'\n/tmp/tmpo2e_8iwc.cpp:21:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpo2e_8iwc.cpp:21:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpo2e_8iwc.cpp: In function 'int\
    \ main()':\n/tmp/tmpo2e_8iwc.cpp:24:10: error: 'candidate' does not name a type\n\
    \     auto candidate = rescale_to_unit;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo2e_8iwc.cpp:2:\n/tmp/tmpo2e_8iwc.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpo2e_8iwc.cpp:25:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpo2e_8iwc.cpp:25:67: warning: extended initializ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    rescaled_numbers.push_back((max_number - min_number) /\
    \ (numbers.back() - numbers.front()));\n    for (auto number : numbers) {\n  \
    \      rescaled_numbers.push_back(number * rescaled_numbers.back());\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xx7z97c.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmp_xx7z97c.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmp_xx7z97c.cpp:17:5: error: expected\
    \ ';' before 'rescaled_numbers'\n     rescaled_numbers.push_back((max_number -\
    \ min_number) / (numbers.back() - numbers.front()));\n     ^\n/tmp/tmp_xx7z97c.cpp:17:94:\
    \ error: could not convert 'rescaled_numbers.std::vector<_Tp, _Alloc>::push_back<float,\
    \ std::allocator<float> >((* &((max_number - min_number) / (numbers.std::vector<_Tp,\
    \ _Alloc>::back<float, std::allocator<float> >() - numbers.std::vector<_Tp, _Alloc>::front<float,\
    \ std::allocator<float> >()))))' from 'void' to 'bool'\n     rescaled_numbers.push_back((max_number\
    \ - min_number) / (numbers.back() - numbers.front()));\n                     \
    \                                                                         ^\n\
    /tmp/tmp_xx7z97c.cpp:18:5: error: expected primary-expression before 'for'\n \
    \    for (auto number : numbers) {\n     ^\n/tmp/tmp_xx7z97c.cpp:18:5: error:\
    \ expected ')' before 'for'\n/tmp/tmp_xx7z97c.cpp:18:15: error: 'number' does\
    \ not name a type\n     for (auto number : numbers) {\n               ^\n/tmp/tmp_xx7z97c.cpp:21:5:\
    \ error: expected ';' before 'return'\n     return rescaled_numbers;\n     ^\n\
    /tmp/tmp_xx7z97c.cpp:21:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp_xx7z97c.cpp:21:5: error: expected ';' before 'return'\n/tmp/tmp_xx7z97c.cpp:21:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp_xx7z97c.cpp:21:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp_xx7z97c.cpp: In function 'int\
    \ main()':\n/tmp/tmp_xx7z97c.cpp:24:10: error: 'candidate' does not name a type\n\
    \     auto candidate = rescale_to_unit;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_xx7z97c.cpp:2:\n/tmp/tmp_xx7z97c.cpp:25:41: warning:\
    \ extended initializer lists only available with -std=c++"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    numbers.assign({0.0f, 0.0f, 0.0f,\
    \ 0.0f, 0.0f});\n    for (auto number : numbers) {\n        number *= scale;\n\
    \    }\n    return numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx7iqd1hv.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpx7iqd1hv.cpp:12:19: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     numbers.assign({0.0f,\
    \ 0.0f, 0.0f, 0.0f, 0.0f});\n                   ^\n/tmp/tmpx7iqd1hv.cpp:12:50:\
    \ error: no matching function for call to 'std::vector<float>::assign(<brace-enclosed\
    \ initializer list>)'\n     numbers.assign({0.0f, 0.0f, 0.0f, 0.0f, 0.0f});\n\
    \                                                  ^\n/tmp/tmpx7iqd1hv.cpp:12:50:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpx7iqd1hv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:479:7:\
    \ note: void std::vector<_Tp, _Alloc>::assign(std::vector<_Tp, _Alloc>::size_type,\
    \ const value_type&) [with _Tp = float; _Alloc = std::allocator<float>; std::vector<_Tp,\
    \ _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type\
    \ = float]\n       assign(size_type __n, const value_type& __val)\n       ^\n\
    /usr/include/c++/4.8.2/bits/stl_vector.h:479:7: note:   candidate expects 2 arguments,\
    \ 1 provided\n/usr/include/c++/4.8.2/bits/stl_vector.h:503:9: note: template<class\
    \ _InputIterator> void std::vector<_Tp, _Alloc>::assign(_InputIterator, _InputIterator)\
    \ [with _InputIterator = _InputIterator; _Tp = float; _Alloc = std::allocator<float>]\n\
    \         assign(_InputIterator __first, _InputIterator __last)\n         ^\n\
    /usr/include/c++/4.8.2/bits/stl_vector.h:503:9: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpx7iqd1hv.cpp:12:50: note:   candidate expects 2 arguments,\
    \ 1 provided\n     numbers.assign({0.0f, 0.0f, 0.0f, 0.0f, 0.0f});\n         \
    \                                         ^\n/tmp/tmpx7iqd1hv.cpp:13:15: error:\
    \ 'number' does not name a type\n     for (auto number : numbers) {\n        \
    \       ^\n/tmp/tmpx7iqd1hv.cpp:16:5: error: expect"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx2okw4mx.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpx2okw4mx.cpp:14:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpx2okw4mx.cpp: In function 'int main()':\n/tmp/tmpx2okw4mx.cpp:20:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx2okw4mx.cpp:2:\n/tmp/tmpx2okw4mx.cpp:21:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpx2okw4mx.cpp:21:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpx2okw4mx.cpp:21:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpx2okw4mx.cpp:21:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpx2okw4mx.cpp:21:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpx2okw4mx.cpp:21:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    rescaled_numbers.push_back(smallest_number);\n\
    \    rescaled_numbers.push_back(1.0f / largest_number);\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjp1a0v__.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpjp1a0v__.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpjp1a0v__.cpp:17:5: error: expected\
    \ ';' before 'rescaled_numbers'\n     rescaled_numbers.push_back(smallest_number);\n\
    \     ^\n/tmp/tmpjp1a0v__.cpp:17:47: error: could not convert 'rescaled_numbers.std::vector<_Tp,\
    \ _Alloc>::push_back<float, std::allocator<float> >((*(const value_type*)(& smallest_number)))'\
    \ from 'void' to 'bool'\n     rescaled_numbers.push_back(smallest_number);\n \
    \                                              ^\n/tmp/tmpjp1a0v__.cpp:18:54:\
    \ error: expected ')' before ';' token\n     rescaled_numbers.push_back(1.0f /\
    \ largest_number);\n                                                      ^\n\
    /tmp/tmpjp1a0v__.cpp: In function 'int main()':\n/tmp/tmpjp1a0v__.cpp:22:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjp1a0v__.cpp:2:\n/tmp/tmpjp1a0v__.cpp:23:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpjp1a0v__.cpp:23:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpjp1a0v__.cpp:23:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpjp1a0v__.cpp:23:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>("
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmou1y95g.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpmou1y95g.cpp:11:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpmou1y95g.cpp: In function 'int main()':\n/tmp/tmpmou1y95g.cpp:17:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmou1y95g.cpp:2:\n/tmp/tmpmou1y95g.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpmou1y95g.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpmou1y95g.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmou1y95g.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpmou1y95g.cpp:18:93:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                                            \
    \           ^\n/tmp/tmpmou1y95g.cpp:18:118: warning: extended initializer lists\
    \ only ava"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1_gw7q9.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpg1_gw7q9.cpp:11:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpg1_gw7q9.cpp:14:5: error: expected\
    \ ';' before 'return'\n     return rescaled_numbers;\n     ^\n/tmp/tmpg1_gw7q9.cpp:14:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpg1_gw7q9.cpp:14:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpg1_gw7q9.cpp:14:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpg1_gw7q9.cpp:14:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpg1_gw7q9.cpp: In function 'int main()':\n/tmp/tmpg1_gw7q9.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg1_gw7q9.cpp:2:\n/tmp/tmpg1_gw7q9.cpp:18:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpg1_gw7q9.cpp:18:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpg1_gw7q9.cpp:18:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpg1_gw7q9.cpp:18:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpg1_gw7q9.cpp:18:93:\
    \ warning: extended initializer lists only availab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (auto number\
    \ : numbers) {\n        if (number < min) {\n            min = number;\n     \
    \   } else if (number > max) {\n            max = number;\n        }\n    }\n\
    \    for (auto number : numbers) {\n        result.push_back(number - min) / (max\
    \ - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfn3gfnx8.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpfn3gfnx8.cpp:12:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpfn3gfnx8.cpp:19:5: error: expected\
    \ ';' before 'for'\n     for (auto number : numbers) {\n     ^\n/tmp/tmpfn3gfnx8.cpp:19:5:\
    \ error: expected primary-expression before 'for'\n/tmp/tmpfn3gfnx8.cpp:19:5:\
    \ error: expected ';' before 'for'\n/tmp/tmpfn3gfnx8.cpp:19:5: error: expected\
    \ primary-expression before 'for'\n/tmp/tmpfn3gfnx8.cpp:19:5: error: expected\
    \ ')' before 'for'\n/tmp/tmpfn3gfnx8.cpp:19:15: error: 'number' does not name\
    \ a type\n     for (auto number : numbers) {\n               ^\n/tmp/tmpfn3gfnx8.cpp:22:5:\
    \ error: expected ';' before 'return'\n     return result;\n     ^\n/tmp/tmpfn3gfnx8.cpp:22:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpfn3gfnx8.cpp:22:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpfn3gfnx8.cpp:22:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpfn3gfnx8.cpp:22:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpfn3gfnx8.cpp: In function 'int main()':\n/tmp/tmpfn3gfnx8.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfn3gfnx8.cpp:2:\n/tmp/tmpfn3gfnx8.cpp:26:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpfn3gfnx8.cpp:26:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given vector of numbers\
    \ (of at least two elements), apply a linear transform to that vector,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0,\
    \ (float)5.0})))\n// (std::vector<float>({(float)0.0, (float)0.25, (float)0.5,\
    \ (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
    \ numbers) {\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back((number\
    \ - numbers.front()) / (numbers.back() - numbers.front()));\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0, (float)49.9})))\
    \ == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
    \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
    \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
    \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3tav0zv.cpp: In function 'std::vector<float> rescale_to_unit(std::vector<float>)':\n\
    /tmp/tmpc3tav0zv.cpp:10:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpc3tav0zv.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return rescaled_numbers;\n     ^\n/tmp/tmpc3tav0zv.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpc3tav0zv.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpc3tav0zv.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpc3tav0zv.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpc3tav0zv.cpp: In function 'int main()':\n/tmp/tmpc3tav0zv.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = rescale_to_unit;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc3tav0zv.cpp:2:\n/tmp/tmpc3tav0zv.cpp:17:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)2.0, (float)49.9})))\
    \ == (std::vector<float>({(float)0.0, (float)1.0})));\n                      \
    \                   ^\n/tmp/tmpc3tav0zv.cpp:17:67: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)2.0, (float)49.9}))) == (std::vector<float>({(float)0.0,\
    \ (float)1.0})));\n                                                          \
    \         ^\n/tmp/tmpc3tav0zv.cpp:17:67: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpc3tav0zv.cpp:17:69:\
    \ error: 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>({(float)2.0,\
    \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n      \
    \                                                               ^\n/tmp/tmpc3tav0zv.cpp:17:93:\
    \ warning: extended initializer lists only availab"
  stdout: ''
