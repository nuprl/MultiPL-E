name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a vector\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
  \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==\
  \ (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
  }\n"
completions: ["    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(*it == *std::prev(it)) {\n\
    \            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(*it == *std::prev(it)) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] == l[i-1])\
    \ {\n            u.push_back(l[i]);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(*it == *std::prev(it)) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if\
    \ (u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n        }\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto it = l.begin(); it != l.end(); ++it) {\n        if (u.size() == 0 || u[u.size()\
    \ - 1] != *it) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(*it != *std::prev(it)) {\n\
    \            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i : l)\n        if (std::find(u.begin(), u.end(), i)\
    \ == u.end())\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || it != u.end() && *it == *std::prev(u.end()))\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i = 0; i < l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i : l)\n        if (i\
    \ == l[u.size()-1])\n            u.push_back(i);\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size(); ++i)\
    \ {\n        if (i == 0 || l[i] != l[i - 1]) {\n            u.push_back(l[i]);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        if\
    \ (u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n        }\n\
    \    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ it != u.begin()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() || it != u.begin())\n\
    \            u.push_back(*it);\n    }\n    return u;"]
stop_tokens:
- "\n}"
